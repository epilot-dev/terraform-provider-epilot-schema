// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaDataSourceModel) RefreshFromSharedEntitySchemaItem(resp *shared.EntitySchemaItem) {
	if resp != nil {
		if len(r.Attributes) > len(resp.Attributes) {
			r.Attributes = r.Attributes[:len(resp.Attributes)]
		}
		for attributesCount, attributesItem := range resp.Attributes {
			var attributes1 tfTypes.Attribute
			attributes1.Purpose = []types.String{}
			for _, v := range attributesItem.Purpose {
				attributes1.Purpose = append(attributes1.Purpose, types.StringValue(v))
			}
			for actionsCount, actionsItem := range attributesItem.Actions {
				var actions1 tfTypes.Actions
				if actionsItem.ActionType != nil {
					actions1.ActionType = types.StringValue(string(*actionsItem.ActionType))
				} else {
					actions1.ActionType = types.StringNull()
				}
				actions1.Default = types.BoolPointerValue(actionsItem.Default)
				actions1.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
				actions1.Label = types.StringPointerValue(actionsItem.Label)
				if actionsItem.NewEntityItem == nil {
					actions1.NewEntityItem = nil
				} else {
					actions1.NewEntityItem = &tfTypes.NewEntityItem{}
					if actionsItem.NewEntityItem.ACL == nil {
						actions1.NewEntityItem.ACL = nil
					} else {
						actions1.NewEntityItem.ACL = &tfTypes.EntityACL{}
						if actionsItem.NewEntityItem.ACL.AdditionalProperties == nil {
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult, _ := json.Marshal(actionsItem.NewEntityItem.ACL.AdditionalProperties)
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
						}
						actions1.NewEntityItem.ACL.Delete = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Delete {
							actions1.NewEntityItem.ACL.Delete = append(actions1.NewEntityItem.ACL.Delete, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.Edit = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Edit {
							actions1.NewEntityItem.ACL.Edit = append(actions1.NewEntityItem.ACL.Edit, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.View = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.View {
							actions1.NewEntityItem.ACL.View = append(actions1.NewEntityItem.ACL.View, types.StringValue(v))
						}
					}
					if actionsItem.NewEntityItem.CreatedAt != nil {
						actions1.NewEntityItem.CreatedAt = types.StringValue(actionsItem.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.CreatedAt = types.StringNull()
					}
					actions1.NewEntityItem.ID = types.StringValue(actionsItem.NewEntityItem.ID)
					actions1.NewEntityItem.Org = types.StringValue(actionsItem.NewEntityItem.Org)
					for ownersCount, ownersItem := range actionsItem.NewEntityItem.Owners {
						var owners1 tfTypes.EntityOwner
						owners1.OrgID = types.StringValue(ownersItem.OrgID)
						owners1.UserID = types.StringPointerValue(ownersItem.UserID)
						if ownersCount+1 > len(actions1.NewEntityItem.Owners) {
							actions1.NewEntityItem.Owners = append(actions1.NewEntityItem.Owners, owners1)
						} else {
							actions1.NewEntityItem.Owners[ownersCount].OrgID = owners1.OrgID
							actions1.NewEntityItem.Owners[ownersCount].UserID = owners1.UserID
						}
					}
					actions1.NewEntityItem.Schema = types.StringValue(actionsItem.NewEntityItem.Schema)
					actions1.NewEntityItem.Tags = []types.String{}
					for _, v := range actionsItem.NewEntityItem.Tags {
						actions1.NewEntityItem.Tags = append(actions1.NewEntityItem.Tags, types.StringValue(v))
					}
					actions1.NewEntityItem.Title = types.StringPointerValue(actionsItem.NewEntityItem.Title)
					if actionsItem.NewEntityItem.UpdatedAt != nil {
						actions1.NewEntityItem.UpdatedAt = types.StringValue(actionsItem.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.UpdatedAt = types.StringNull()
					}
					if actionsItem.NewEntityItem.AdditionalProperties == nil {
						actions1.NewEntityItem.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult1, _ := json.Marshal(actionsItem.NewEntityItem.AdditionalProperties)
						actions1.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
					}
				}
				for settingsFlagCount, settingsFlagItem := range actionsItem.SettingsFlag {
					var settingsFlag1 tfTypes.SettingFlag
					settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
					settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
					if settingsFlagCount+1 > len(actions1.SettingsFlag) {
						actions1.SettingsFlag = append(actions1.SettingsFlag, settingsFlag1)
					} else {
						actions1.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
						actions1.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
					}
				}
				if actionsCount+1 > len(attributes1.Actions) {
					attributes1.Actions = append(attributes1.Actions, actions1)
				} else {
					attributes1.Actions[actionsCount].ActionType = actions1.ActionType
					attributes1.Actions[actionsCount].Default = actions1.Default
					attributes1.Actions[actionsCount].FeatureFlag = actions1.FeatureFlag
					attributes1.Actions[actionsCount].Label = actions1.Label
					attributes1.Actions[actionsCount].NewEntityItem = actions1.NewEntityItem
					attributes1.Actions[actionsCount].SettingsFlag = actions1.SettingsFlag
				}
			}
			attributes1.AddButtonLabel = types.StringPointerValue(attributesItem.AddButtonLabel)
			attributes1.AllowAny = types.BoolPointerValue(attributesItem.AllowAny)
			attributes1.AllowExtraOptions = types.BoolPointerValue(attributesItem.AllowExtraOptions)
			attributes1.AllowedExtensions = []types.String{}
			for _, v := range attributesItem.AllowedExtensions {
				attributes1.AllowedExtensions = append(attributes1.AllowedExtensions, types.StringValue(v))
			}
			attributes1.AllowedSchemas = []types.String{}
			for _, v := range attributesItem.AllowedSchemas {
				attributes1.AllowedSchemas = append(attributes1.AllowedSchemas, types.StringValue(v))
			}
			if attributesItem.Constraints == nil {
				attributes1.Constraints = nil
			} else {
				attributes1.Constraints = &tfTypes.Constraints{}
			}
			if attributesItem.CreatedAt != nil {
				attributes1.CreatedAt = types.StringValue(attributesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				attributes1.CreatedAt = types.StringNull()
			}
			for currencyCount, currencyItem := range attributesItem.Currency {
				var currency1 tfTypes.Currency
				if currencyItem.One != nil {
					currency1.One = &tfTypes.One{}
					currency1.One.Code = types.StringValue(currencyItem.One.Code)
					currency1.One.Description = types.StringValue(currencyItem.One.Description)
					currency1.One.Flag = types.StringPointerValue(currencyItem.One.Flag)
					currency1.One.Symbol = types.StringValue(currencyItem.One.Symbol)
				}
				if currencyCount+1 > len(attributes1.Currency) {
					attributes1.Currency = append(attributes1.Currency, currency1)
				} else {
					attributes1.Currency[currencyCount].One = currency1.One
				}
			}
			attributes1.CurrencySelectorOnly = types.BoolPointerValue(attributesItem.CurrencySelectorOnly)
			if attributesItem.DefaultAccessControl != nil {
				attributes1.DefaultAccessControl = types.StringValue(string(*attributesItem.DefaultAccessControl))
			} else {
				attributes1.DefaultAccessControl = types.StringNull()
			}
			if attributesItem.DefaultValue == nil {
				attributes1.DefaultValue = types.StringNull()
			} else {
				defaultValueResult, _ := json.Marshal(attributesItem.DefaultValue)
				attributes1.DefaultValue = types.StringValue(string(defaultValueResult))
			}
			attributes1.Deprecated = types.BoolPointerValue(attributesItem.Deprecated)
			attributes1.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem.DetailsViewModeEnabled)
			attributes1.DisableCaseSensitive = types.BoolPointerValue(attributesItem.DisableCaseSensitive)
			attributes1.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem.DisplayImagesLandscaped)
			if attributesItem.DrawerSize != nil {
				attributes1.DrawerSize = types.StringValue(string(*attributesItem.DrawerSize))
			} else {
				attributes1.DrawerSize = types.StringNull()
			}
			if attributesItem.EditMode != nil {
				attributes1.EditMode = types.StringValue(string(*attributesItem.EditMode))
			} else {
				attributes1.EditMode = types.StringNull()
			}
			attributes1.EnableDescription = types.BoolPointerValue(attributesItem.EnableDescription)
			attributes1.EnableRelationPicker = types.BoolPointerValue(attributesItem.EnableRelationPicker)
			attributes1.EnableRelationTags = types.BoolPointerValue(attributesItem.EnableRelationTags)
			attributes1.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.EntityBuilderDisableEdit)
			attributes1.FeatureFlag = types.StringPointerValue(attributesItem.FeatureFlag)
			attributes1.Format = types.StringPointerValue(attributesItem.Format)
			attributes1.Group = types.StringPointerValue(attributesItem.Group)
			attributes1.HasPrimary = types.BoolPointerValue(attributesItem.HasPrimary)
			attributes1.Hidden = types.BoolPointerValue(attributesItem.Hidden)
			attributes1.HideLabel = types.BoolPointerValue(attributesItem.HideLabel)
			attributes1.Icon = types.StringPointerValue(attributesItem.Icon)
			attributes1.ID = types.StringPointerValue(attributesItem.ID)
			attributes1.Identifiers = []types.String{}
			for _, v := range attributesItem.Identifiers {
				attributes1.Identifiers = append(attributes1.Identifiers, types.StringValue(v))
			}
			if attributesItem.InfoHelpers == nil {
				attributes1.InfoHelpers = nil
			} else {
				attributes1.InfoHelpers = &tfTypes.InfoHelpers{}
				attributes1.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InfoHelpers.HintCustomComponent)
				attributes1.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InfoHelpers.HintText)
				attributes1.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InfoHelpers.HintTextKey)
				attributes1.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InfoHelpers.HintTooltipPlacement)
			}
			attributes1.Label = types.StringValue(attributesItem.Label)
			attributes1.Layout = types.StringPointerValue(attributesItem.Layout)
			attributes1.Multiline = types.BoolPointerValue(attributesItem.Multiline)
			attributes1.Multiple = types.BoolPointerValue(attributesItem.Multiple)
			attributes1.Name = types.StringValue(attributesItem.Name)
			attributes1.Options = []types.String{}
			for _, v := range attributesItem.Options {
				attributes1.Options = append(attributes1.Options, types.StringValue(v))
			}
			attributes1.Order = types.Int64PointerValue(attributesItem.Order)
			attributes1.Parents = []types.String{}
			for _, v := range attributesItem.Parents {
				attributes1.Parents = append(attributes1.Parents, types.StringValue(v))
			}
			attributes1.Placeholder = types.StringPointerValue(attributesItem.Placeholder)
			attributes1.Prefix = types.StringPointerValue(attributesItem.Prefix)
			attributes1.PreviewValueFormatter = types.StringPointerValue(attributesItem.PreviewValueFormatter)
			attributes1.Protected = types.BoolPointerValue(attributesItem.Protected)
			attributes1.Readonly = types.BoolPointerValue(attributesItem.Readonly)
			if attributesItem.RelationAffinityMode != nil {
				attributes1.RelationAffinityMode = types.StringValue(string(*attributesItem.RelationAffinityMode))
			} else {
				attributes1.RelationAffinityMode = types.StringNull()
			}
			if attributesItem.RelationType != nil {
				attributes1.RelationType = types.StringValue(string(*attributesItem.RelationType))
			} else {
				attributes1.RelationType = types.StringNull()
			}
			attributes1.RenderCondition = types.StringPointerValue(attributesItem.RenderCondition)
			attributes1.Repeatable = types.BoolPointerValue(attributesItem.Repeatable)
			attributes1.Required = types.BoolPointerValue(attributesItem.Required)
			if len(attributesItem.ReverseAttributes) > 0 {
				attributes1.ReverseAttributes = make(map[string]types.String)
				for key, value := range attributesItem.ReverseAttributes {
					attributes1.ReverseAttributes[key] = types.StringValue(value)
				}
			}
			attributes1.SearchPlaceholder = types.StringPointerValue(attributesItem.SearchPlaceholder)
			for settingsFlagCount1, settingsFlagItem1 := range attributesItem.SettingsFlag {
				var settingsFlag3 tfTypes.SettingFlag
				settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
				settingsFlag3.Name = types.StringPointerValue(settingsFlagItem1.Name)
				if settingsFlagCount1+1 > len(attributes1.SettingsFlag) {
					attributes1.SettingsFlag = append(attributes1.SettingsFlag, settingsFlag3)
				} else {
					attributes1.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag3.Enabled
					attributes1.SettingsFlag[settingsFlagCount1].Name = settingsFlag3.Name
				}
			}
			attributes1.ShowInTable = types.BoolPointerValue(attributesItem.ShowInTable)
			attributes1.Slug = types.StringPointerValue(attributesItem.Slug)
			attributes1.Sortable = types.BoolPointerValue(attributesItem.Sortable)
			attributes1.StartNumber = types.Int64PointerValue(attributesItem.StartNumber)
			attributes1.Suggestions = []types.String{}
			for _, v := range attributesItem.Suggestions {
				attributes1.Suggestions = append(attributes1.Suggestions, types.StringValue(v))
			}
			for summaryFieldsCount, summaryFieldsItem := range attributesItem.SummaryFields {
				var summaryFields1 tfTypes.SummaryFields
				if summaryFieldsItem.Str != nil {
					summaryFields1.Str = types.StringPointerValue(summaryFieldsItem.Str)
				}
				if summaryFieldsItem.SummaryField != nil {
					summaryFields1.SummaryField = &tfTypes.SummaryField{}
					summaryFields1.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
					summaryFields1.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
				}
				if summaryFieldsCount+1 > len(attributes1.SummaryFields) {
					attributes1.SummaryFields = append(attributes1.SummaryFields, summaryFields1)
				} else {
					attributes1.SummaryFields[summaryFieldsCount].Str = summaryFields1.Str
					attributes1.SummaryFields[summaryFieldsCount].SummaryField = summaryFields1.SummaryField
				}
			}
			attributes1.Topic = types.StringPointerValue(attributesItem.Topic)
			attributes1.Type = types.StringValue(string(attributesItem.Type))
			if attributesItem.UpdatedAt != nil {
				attributes1.UpdatedAt = types.StringValue(attributesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				attributes1.UpdatedAt = types.StringNull()
			}
			attributes1.ValueFormatter = types.StringPointerValue(attributesItem.ValueFormatter)
			if attributesCount+1 > len(r.Attributes) {
				r.Attributes = append(r.Attributes, attributes1)
			} else {
				r.Attributes[attributesCount].Purpose = attributes1.Purpose
				r.Attributes[attributesCount].Actions = attributes1.Actions
				r.Attributes[attributesCount].AddButtonLabel = attributes1.AddButtonLabel
				r.Attributes[attributesCount].AllowAny = attributes1.AllowAny
				r.Attributes[attributesCount].AllowExtraOptions = attributes1.AllowExtraOptions
				r.Attributes[attributesCount].AllowedExtensions = attributes1.AllowedExtensions
				r.Attributes[attributesCount].AllowedSchemas = attributes1.AllowedSchemas
				r.Attributes[attributesCount].Constraints = attributes1.Constraints
				r.Attributes[attributesCount].CreatedAt = attributes1.CreatedAt
				r.Attributes[attributesCount].Currency = attributes1.Currency
				r.Attributes[attributesCount].CurrencySelectorOnly = attributes1.CurrencySelectorOnly
				r.Attributes[attributesCount].DefaultAccessControl = attributes1.DefaultAccessControl
				r.Attributes[attributesCount].DefaultValue = attributes1.DefaultValue
				r.Attributes[attributesCount].Deprecated = attributes1.Deprecated
				r.Attributes[attributesCount].DetailsViewModeEnabled = attributes1.DetailsViewModeEnabled
				r.Attributes[attributesCount].DisableCaseSensitive = attributes1.DisableCaseSensitive
				r.Attributes[attributesCount].DisplayImagesLandscaped = attributes1.DisplayImagesLandscaped
				r.Attributes[attributesCount].DrawerSize = attributes1.DrawerSize
				r.Attributes[attributesCount].EditMode = attributes1.EditMode
				r.Attributes[attributesCount].EnableDescription = attributes1.EnableDescription
				r.Attributes[attributesCount].EnableRelationPicker = attributes1.EnableRelationPicker
				r.Attributes[attributesCount].EnableRelationTags = attributes1.EnableRelationTags
				r.Attributes[attributesCount].EntityBuilderDisableEdit = attributes1.EntityBuilderDisableEdit
				r.Attributes[attributesCount].FeatureFlag = attributes1.FeatureFlag
				r.Attributes[attributesCount].Format = attributes1.Format
				r.Attributes[attributesCount].Group = attributes1.Group
				r.Attributes[attributesCount].HasPrimary = attributes1.HasPrimary
				r.Attributes[attributesCount].Hidden = attributes1.Hidden
				r.Attributes[attributesCount].HideLabel = attributes1.HideLabel
				r.Attributes[attributesCount].Icon = attributes1.Icon
				r.Attributes[attributesCount].ID = attributes1.ID
				r.Attributes[attributesCount].Identifiers = attributes1.Identifiers
				r.Attributes[attributesCount].InfoHelpers = attributes1.InfoHelpers
				r.Attributes[attributesCount].Label = attributes1.Label
				r.Attributes[attributesCount].Layout = attributes1.Layout
				r.Attributes[attributesCount].Multiline = attributes1.Multiline
				r.Attributes[attributesCount].Multiple = attributes1.Multiple
				r.Attributes[attributesCount].Name = attributes1.Name
				r.Attributes[attributesCount].Options = attributes1.Options
				r.Attributes[attributesCount].Order = attributes1.Order
				r.Attributes[attributesCount].Parents = attributes1.Parents
				r.Attributes[attributesCount].Placeholder = attributes1.Placeholder
				r.Attributes[attributesCount].Prefix = attributes1.Prefix
				r.Attributes[attributesCount].PreviewValueFormatter = attributes1.PreviewValueFormatter
				r.Attributes[attributesCount].Protected = attributes1.Protected
				r.Attributes[attributesCount].Readonly = attributes1.Readonly
				r.Attributes[attributesCount].RelationAffinityMode = attributes1.RelationAffinityMode
				r.Attributes[attributesCount].RelationType = attributes1.RelationType
				r.Attributes[attributesCount].RenderCondition = attributes1.RenderCondition
				r.Attributes[attributesCount].Repeatable = attributes1.Repeatable
				r.Attributes[attributesCount].Required = attributes1.Required
				r.Attributes[attributesCount].ReverseAttributes = attributes1.ReverseAttributes
				r.Attributes[attributesCount].SearchPlaceholder = attributes1.SearchPlaceholder
				r.Attributes[attributesCount].SettingsFlag = attributes1.SettingsFlag
				r.Attributes[attributesCount].ShowInTable = attributes1.ShowInTable
				r.Attributes[attributesCount].Slug = attributes1.Slug
				r.Attributes[attributesCount].Sortable = attributes1.Sortable
				r.Attributes[attributesCount].StartNumber = attributes1.StartNumber
				r.Attributes[attributesCount].Suggestions = attributes1.Suggestions
				r.Attributes[attributesCount].SummaryFields = attributes1.SummaryFields
				r.Attributes[attributesCount].Topic = attributes1.Topic
				r.Attributes[attributesCount].Type = attributes1.Type
				r.Attributes[attributesCount].UpdatedAt = attributes1.UpdatedAt
				r.Attributes[attributesCount].ValueFormatter = attributes1.ValueFormatter
			}
		}
		r.Blueprint = types.StringPointerValue(resp.Blueprint)
		if len(r.Capabilities) > len(resp.Capabilities) {
			r.Capabilities = r.Capabilities[:len(resp.Capabilities)]
		}
		for capabilitiesCount, capabilitiesItem := range resp.Capabilities {
			var capabilities1 tfTypes.EntityCapability
			capabilities1.Purpose = []types.String{}
			for _, v := range capabilitiesItem.Purpose {
				capabilities1.Purpose = append(capabilities1.Purpose, types.StringValue(v))
			}
			for attributesCount1, attributesItem1 := range capabilitiesItem.Attributes {
				var attributes3 tfTypes.Attribute
				attributes3.Purpose = []types.String{}
				for _, v := range attributesItem1.Purpose {
					attributes3.Purpose = append(attributes3.Purpose, types.StringValue(v))
				}
				for actionsCount1, actionsItem1 := range attributesItem1.Actions {
					var actions3 tfTypes.Actions
					if actionsItem1.ActionType != nil {
						actions3.ActionType = types.StringValue(string(*actionsItem1.ActionType))
					} else {
						actions3.ActionType = types.StringNull()
					}
					actions3.Default = types.BoolPointerValue(actionsItem1.Default)
					actions3.FeatureFlag = types.StringPointerValue(actionsItem1.FeatureFlag)
					actions3.Label = types.StringPointerValue(actionsItem1.Label)
					if actionsItem1.NewEntityItem == nil {
						actions3.NewEntityItem = nil
					} else {
						actions3.NewEntityItem = &tfTypes.NewEntityItem{}
						if actionsItem1.NewEntityItem.ACL == nil {
							actions3.NewEntityItem.ACL = nil
						} else {
							actions3.NewEntityItem.ACL = &tfTypes.EntityACL{}
							if actionsItem1.NewEntityItem.ACL.AdditionalProperties == nil {
								actions3.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
							} else {
								additionalPropertiesResult2, _ := json.Marshal(actionsItem1.NewEntityItem.ACL.AdditionalProperties)
								actions3.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult2))
							}
							actions3.NewEntityItem.ACL.Delete = []types.String{}
							for _, v := range actionsItem1.NewEntityItem.ACL.Delete {
								actions3.NewEntityItem.ACL.Delete = append(actions3.NewEntityItem.ACL.Delete, types.StringValue(v))
							}
							actions3.NewEntityItem.ACL.Edit = []types.String{}
							for _, v := range actionsItem1.NewEntityItem.ACL.Edit {
								actions3.NewEntityItem.ACL.Edit = append(actions3.NewEntityItem.ACL.Edit, types.StringValue(v))
							}
							actions3.NewEntityItem.ACL.View = []types.String{}
							for _, v := range actionsItem1.NewEntityItem.ACL.View {
								actions3.NewEntityItem.ACL.View = append(actions3.NewEntityItem.ACL.View, types.StringValue(v))
							}
						}
						if actionsItem1.NewEntityItem.CreatedAt != nil {
							actions3.NewEntityItem.CreatedAt = types.StringValue(actionsItem1.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							actions3.NewEntityItem.CreatedAt = types.StringNull()
						}
						actions3.NewEntityItem.ID = types.StringValue(actionsItem1.NewEntityItem.ID)
						actions3.NewEntityItem.Org = types.StringValue(actionsItem1.NewEntityItem.Org)
						for ownersCount1, ownersItem1 := range actionsItem1.NewEntityItem.Owners {
							var owners3 tfTypes.EntityOwner
							owners3.OrgID = types.StringValue(ownersItem1.OrgID)
							owners3.UserID = types.StringPointerValue(ownersItem1.UserID)
							if ownersCount1+1 > len(actions3.NewEntityItem.Owners) {
								actions3.NewEntityItem.Owners = append(actions3.NewEntityItem.Owners, owners3)
							} else {
								actions3.NewEntityItem.Owners[ownersCount1].OrgID = owners3.OrgID
								actions3.NewEntityItem.Owners[ownersCount1].UserID = owners3.UserID
							}
						}
						actions3.NewEntityItem.Schema = types.StringValue(actionsItem1.NewEntityItem.Schema)
						actions3.NewEntityItem.Tags = []types.String{}
						for _, v := range actionsItem1.NewEntityItem.Tags {
							actions3.NewEntityItem.Tags = append(actions3.NewEntityItem.Tags, types.StringValue(v))
						}
						actions3.NewEntityItem.Title = types.StringPointerValue(actionsItem1.NewEntityItem.Title)
						if actionsItem1.NewEntityItem.UpdatedAt != nil {
							actions3.NewEntityItem.UpdatedAt = types.StringValue(actionsItem1.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							actions3.NewEntityItem.UpdatedAt = types.StringNull()
						}
						if actionsItem1.NewEntityItem.AdditionalProperties == nil {
							actions3.NewEntityItem.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult3, _ := json.Marshal(actionsItem1.NewEntityItem.AdditionalProperties)
							actions3.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult3))
						}
					}
					for settingsFlagCount2, settingsFlagItem2 := range actionsItem1.SettingsFlag {
						var settingsFlag5 tfTypes.SettingFlag
						settingsFlag5.Enabled = types.BoolPointerValue(settingsFlagItem2.Enabled)
						settingsFlag5.Name = types.StringPointerValue(settingsFlagItem2.Name)
						if settingsFlagCount2+1 > len(actions3.SettingsFlag) {
							actions3.SettingsFlag = append(actions3.SettingsFlag, settingsFlag5)
						} else {
							actions3.SettingsFlag[settingsFlagCount2].Enabled = settingsFlag5.Enabled
							actions3.SettingsFlag[settingsFlagCount2].Name = settingsFlag5.Name
						}
					}
					if actionsCount1+1 > len(attributes3.Actions) {
						attributes3.Actions = append(attributes3.Actions, actions3)
					} else {
						attributes3.Actions[actionsCount1].ActionType = actions3.ActionType
						attributes3.Actions[actionsCount1].Default = actions3.Default
						attributes3.Actions[actionsCount1].FeatureFlag = actions3.FeatureFlag
						attributes3.Actions[actionsCount1].Label = actions3.Label
						attributes3.Actions[actionsCount1].NewEntityItem = actions3.NewEntityItem
						attributes3.Actions[actionsCount1].SettingsFlag = actions3.SettingsFlag
					}
				}
				attributes3.AddButtonLabel = types.StringPointerValue(attributesItem1.AddButtonLabel)
				attributes3.AllowAny = types.BoolPointerValue(attributesItem1.AllowAny)
				attributes3.AllowExtraOptions = types.BoolPointerValue(attributesItem1.AllowExtraOptions)
				attributes3.AllowedExtensions = []types.String{}
				for _, v := range attributesItem1.AllowedExtensions {
					attributes3.AllowedExtensions = append(attributes3.AllowedExtensions, types.StringValue(v))
				}
				attributes3.AllowedSchemas = []types.String{}
				for _, v := range attributesItem1.AllowedSchemas {
					attributes3.AllowedSchemas = append(attributes3.AllowedSchemas, types.StringValue(v))
				}
				if attributesItem1.Constraints == nil {
					attributes3.Constraints = nil
				} else {
					attributes3.Constraints = &tfTypes.Constraints{}
				}
				if attributesItem1.CreatedAt != nil {
					attributes3.CreatedAt = types.StringValue(attributesItem1.CreatedAt.Format(time.RFC3339Nano))
				} else {
					attributes3.CreatedAt = types.StringNull()
				}
				for currencyCount1, currencyItem1 := range attributesItem1.Currency {
					var currency3 tfTypes.Currency
					if currencyItem1.One != nil {
						currency3.One = &tfTypes.One{}
						currency3.One.Code = types.StringValue(currencyItem1.One.Code)
						currency3.One.Description = types.StringValue(currencyItem1.One.Description)
						currency3.One.Flag = types.StringPointerValue(currencyItem1.One.Flag)
						currency3.One.Symbol = types.StringValue(currencyItem1.One.Symbol)
					}
					if currencyCount1+1 > len(attributes3.Currency) {
						attributes3.Currency = append(attributes3.Currency, currency3)
					} else {
						attributes3.Currency[currencyCount1].One = currency3.One
					}
				}
				attributes3.CurrencySelectorOnly = types.BoolPointerValue(attributesItem1.CurrencySelectorOnly)
				if attributesItem1.DefaultAccessControl != nil {
					attributes3.DefaultAccessControl = types.StringValue(string(*attributesItem1.DefaultAccessControl))
				} else {
					attributes3.DefaultAccessControl = types.StringNull()
				}
				if attributesItem1.DefaultValue == nil {
					attributes3.DefaultValue = types.StringNull()
				} else {
					defaultValueResult1, _ := json.Marshal(attributesItem1.DefaultValue)
					attributes3.DefaultValue = types.StringValue(string(defaultValueResult1))
				}
				attributes3.Deprecated = types.BoolPointerValue(attributesItem1.Deprecated)
				attributes3.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem1.DetailsViewModeEnabled)
				attributes3.DisableCaseSensitive = types.BoolPointerValue(attributesItem1.DisableCaseSensitive)
				attributes3.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem1.DisplayImagesLandscaped)
				if attributesItem1.DrawerSize != nil {
					attributes3.DrawerSize = types.StringValue(string(*attributesItem1.DrawerSize))
				} else {
					attributes3.DrawerSize = types.StringNull()
				}
				if attributesItem1.EditMode != nil {
					attributes3.EditMode = types.StringValue(string(*attributesItem1.EditMode))
				} else {
					attributes3.EditMode = types.StringNull()
				}
				attributes3.EnableDescription = types.BoolPointerValue(attributesItem1.EnableDescription)
				attributes3.EnableRelationPicker = types.BoolPointerValue(attributesItem1.EnableRelationPicker)
				attributes3.EnableRelationTags = types.BoolPointerValue(attributesItem1.EnableRelationTags)
				attributes3.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem1.EntityBuilderDisableEdit)
				attributes3.FeatureFlag = types.StringPointerValue(attributesItem1.FeatureFlag)
				attributes3.Format = types.StringPointerValue(attributesItem1.Format)
				attributes3.Group = types.StringPointerValue(attributesItem1.Group)
				attributes3.HasPrimary = types.BoolPointerValue(attributesItem1.HasPrimary)
				attributes3.Hidden = types.BoolPointerValue(attributesItem1.Hidden)
				attributes3.HideLabel = types.BoolPointerValue(attributesItem1.HideLabel)
				attributes3.Icon = types.StringPointerValue(attributesItem1.Icon)
				attributes3.ID = types.StringPointerValue(attributesItem1.ID)
				attributes3.Identifiers = []types.String{}
				for _, v := range attributesItem1.Identifiers {
					attributes3.Identifiers = append(attributes3.Identifiers, types.StringValue(v))
				}
				if attributesItem1.InfoHelpers == nil {
					attributes3.InfoHelpers = nil
				} else {
					attributes3.InfoHelpers = &tfTypes.InfoHelpers{}
					attributes3.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem1.InfoHelpers.HintCustomComponent)
					attributes3.InfoHelpers.HintText = types.StringPointerValue(attributesItem1.InfoHelpers.HintText)
					attributes3.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem1.InfoHelpers.HintTextKey)
					attributes3.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem1.InfoHelpers.HintTooltipPlacement)
				}
				attributes3.Label = types.StringValue(attributesItem1.Label)
				attributes3.Layout = types.StringPointerValue(attributesItem1.Layout)
				attributes3.Multiline = types.BoolPointerValue(attributesItem1.Multiline)
				attributes3.Multiple = types.BoolPointerValue(attributesItem1.Multiple)
				attributes3.Name = types.StringValue(attributesItem1.Name)
				attributes3.Options = []types.String{}
				for _, v := range attributesItem1.Options {
					attributes3.Options = append(attributes3.Options, types.StringValue(v))
				}
				attributes3.Order = types.Int64PointerValue(attributesItem1.Order)
				attributes3.Parents = []types.String{}
				for _, v := range attributesItem1.Parents {
					attributes3.Parents = append(attributes3.Parents, types.StringValue(v))
				}
				attributes3.Placeholder = types.StringPointerValue(attributesItem1.Placeholder)
				attributes3.Prefix = types.StringPointerValue(attributesItem1.Prefix)
				attributes3.PreviewValueFormatter = types.StringPointerValue(attributesItem1.PreviewValueFormatter)
				attributes3.Protected = types.BoolPointerValue(attributesItem1.Protected)
				attributes3.Readonly = types.BoolPointerValue(attributesItem1.Readonly)
				if attributesItem1.RelationAffinityMode != nil {
					attributes3.RelationAffinityMode = types.StringValue(string(*attributesItem1.RelationAffinityMode))
				} else {
					attributes3.RelationAffinityMode = types.StringNull()
				}
				if attributesItem1.RelationType != nil {
					attributes3.RelationType = types.StringValue(string(*attributesItem1.RelationType))
				} else {
					attributes3.RelationType = types.StringNull()
				}
				attributes3.RenderCondition = types.StringPointerValue(attributesItem1.RenderCondition)
				attributes3.Repeatable = types.BoolPointerValue(attributesItem1.Repeatable)
				attributes3.Required = types.BoolPointerValue(attributesItem1.Required)
				if len(attributesItem1.ReverseAttributes) > 0 {
					attributes3.ReverseAttributes = make(map[string]types.String)
					for key1, value1 := range attributesItem1.ReverseAttributes {
						attributes3.ReverseAttributes[key1] = types.StringValue(value1)
					}
				}
				attributes3.SearchPlaceholder = types.StringPointerValue(attributesItem1.SearchPlaceholder)
				for settingsFlagCount3, settingsFlagItem3 := range attributesItem1.SettingsFlag {
					var settingsFlag7 tfTypes.SettingFlag
					settingsFlag7.Enabled = types.BoolPointerValue(settingsFlagItem3.Enabled)
					settingsFlag7.Name = types.StringPointerValue(settingsFlagItem3.Name)
					if settingsFlagCount3+1 > len(attributes3.SettingsFlag) {
						attributes3.SettingsFlag = append(attributes3.SettingsFlag, settingsFlag7)
					} else {
						attributes3.SettingsFlag[settingsFlagCount3].Enabled = settingsFlag7.Enabled
						attributes3.SettingsFlag[settingsFlagCount3].Name = settingsFlag7.Name
					}
				}
				attributes3.ShowInTable = types.BoolPointerValue(attributesItem1.ShowInTable)
				attributes3.Slug = types.StringPointerValue(attributesItem1.Slug)
				attributes3.Sortable = types.BoolPointerValue(attributesItem1.Sortable)
				attributes3.StartNumber = types.Int64PointerValue(attributesItem1.StartNumber)
				attributes3.Suggestions = []types.String{}
				for _, v := range attributesItem1.Suggestions {
					attributes3.Suggestions = append(attributes3.Suggestions, types.StringValue(v))
				}
				for summaryFieldsCount1, summaryFieldsItem1 := range attributesItem1.SummaryFields {
					var summaryFields3 tfTypes.SummaryFields
					if summaryFieldsItem1.Str != nil {
						summaryFields3.Str = types.StringPointerValue(summaryFieldsItem1.Str)
					}
					if summaryFieldsItem1.SummaryField != nil {
						summaryFields3.SummaryField = &tfTypes.SummaryField{}
						summaryFields3.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem1.SummaryField.DisplayAs)
						summaryFields3.SummaryField.Field = types.StringPointerValue(summaryFieldsItem1.SummaryField.Field)
					}
					if summaryFieldsCount1+1 > len(attributes3.SummaryFields) {
						attributes3.SummaryFields = append(attributes3.SummaryFields, summaryFields3)
					} else {
						attributes3.SummaryFields[summaryFieldsCount1].Str = summaryFields3.Str
						attributes3.SummaryFields[summaryFieldsCount1].SummaryField = summaryFields3.SummaryField
					}
				}
				attributes3.Topic = types.StringPointerValue(attributesItem1.Topic)
				attributes3.Type = types.StringValue(string(attributesItem1.Type))
				if attributesItem1.UpdatedAt != nil {
					attributes3.UpdatedAt = types.StringValue(attributesItem1.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					attributes3.UpdatedAt = types.StringNull()
				}
				attributes3.ValueFormatter = types.StringPointerValue(attributesItem1.ValueFormatter)
				if attributesCount1+1 > len(capabilities1.Attributes) {
					capabilities1.Attributes = append(capabilities1.Attributes, attributes3)
				} else {
					capabilities1.Attributes[attributesCount1].Purpose = attributes3.Purpose
					capabilities1.Attributes[attributesCount1].Actions = attributes3.Actions
					capabilities1.Attributes[attributesCount1].AddButtonLabel = attributes3.AddButtonLabel
					capabilities1.Attributes[attributesCount1].AllowAny = attributes3.AllowAny
					capabilities1.Attributes[attributesCount1].AllowExtraOptions = attributes3.AllowExtraOptions
					capabilities1.Attributes[attributesCount1].AllowedExtensions = attributes3.AllowedExtensions
					capabilities1.Attributes[attributesCount1].AllowedSchemas = attributes3.AllowedSchemas
					capabilities1.Attributes[attributesCount1].Constraints = attributes3.Constraints
					capabilities1.Attributes[attributesCount1].CreatedAt = attributes3.CreatedAt
					capabilities1.Attributes[attributesCount1].Currency = attributes3.Currency
					capabilities1.Attributes[attributesCount1].CurrencySelectorOnly = attributes3.CurrencySelectorOnly
					capabilities1.Attributes[attributesCount1].DefaultAccessControl = attributes3.DefaultAccessControl
					capabilities1.Attributes[attributesCount1].DefaultValue = attributes3.DefaultValue
					capabilities1.Attributes[attributesCount1].Deprecated = attributes3.Deprecated
					capabilities1.Attributes[attributesCount1].DetailsViewModeEnabled = attributes3.DetailsViewModeEnabled
					capabilities1.Attributes[attributesCount1].DisableCaseSensitive = attributes3.DisableCaseSensitive
					capabilities1.Attributes[attributesCount1].DisplayImagesLandscaped = attributes3.DisplayImagesLandscaped
					capabilities1.Attributes[attributesCount1].DrawerSize = attributes3.DrawerSize
					capabilities1.Attributes[attributesCount1].EditMode = attributes3.EditMode
					capabilities1.Attributes[attributesCount1].EnableDescription = attributes3.EnableDescription
					capabilities1.Attributes[attributesCount1].EnableRelationPicker = attributes3.EnableRelationPicker
					capabilities1.Attributes[attributesCount1].EnableRelationTags = attributes3.EnableRelationTags
					capabilities1.Attributes[attributesCount1].EntityBuilderDisableEdit = attributes3.EntityBuilderDisableEdit
					capabilities1.Attributes[attributesCount1].FeatureFlag = attributes3.FeatureFlag
					capabilities1.Attributes[attributesCount1].Format = attributes3.Format
					capabilities1.Attributes[attributesCount1].Group = attributes3.Group
					capabilities1.Attributes[attributesCount1].HasPrimary = attributes3.HasPrimary
					capabilities1.Attributes[attributesCount1].Hidden = attributes3.Hidden
					capabilities1.Attributes[attributesCount1].HideLabel = attributes3.HideLabel
					capabilities1.Attributes[attributesCount1].Icon = attributes3.Icon
					capabilities1.Attributes[attributesCount1].ID = attributes3.ID
					capabilities1.Attributes[attributesCount1].Identifiers = attributes3.Identifiers
					capabilities1.Attributes[attributesCount1].InfoHelpers = attributes3.InfoHelpers
					capabilities1.Attributes[attributesCount1].Label = attributes3.Label
					capabilities1.Attributes[attributesCount1].Layout = attributes3.Layout
					capabilities1.Attributes[attributesCount1].Multiline = attributes3.Multiline
					capabilities1.Attributes[attributesCount1].Multiple = attributes3.Multiple
					capabilities1.Attributes[attributesCount1].Name = attributes3.Name
					capabilities1.Attributes[attributesCount1].Options = attributes3.Options
					capabilities1.Attributes[attributesCount1].Order = attributes3.Order
					capabilities1.Attributes[attributesCount1].Parents = attributes3.Parents
					capabilities1.Attributes[attributesCount1].Placeholder = attributes3.Placeholder
					capabilities1.Attributes[attributesCount1].Prefix = attributes3.Prefix
					capabilities1.Attributes[attributesCount1].PreviewValueFormatter = attributes3.PreviewValueFormatter
					capabilities1.Attributes[attributesCount1].Protected = attributes3.Protected
					capabilities1.Attributes[attributesCount1].Readonly = attributes3.Readonly
					capabilities1.Attributes[attributesCount1].RelationAffinityMode = attributes3.RelationAffinityMode
					capabilities1.Attributes[attributesCount1].RelationType = attributes3.RelationType
					capabilities1.Attributes[attributesCount1].RenderCondition = attributes3.RenderCondition
					capabilities1.Attributes[attributesCount1].Repeatable = attributes3.Repeatable
					capabilities1.Attributes[attributesCount1].Required = attributes3.Required
					capabilities1.Attributes[attributesCount1].ReverseAttributes = attributes3.ReverseAttributes
					capabilities1.Attributes[attributesCount1].SearchPlaceholder = attributes3.SearchPlaceholder
					capabilities1.Attributes[attributesCount1].SettingsFlag = attributes3.SettingsFlag
					capabilities1.Attributes[attributesCount1].ShowInTable = attributes3.ShowInTable
					capabilities1.Attributes[attributesCount1].Slug = attributes3.Slug
					capabilities1.Attributes[attributesCount1].Sortable = attributes3.Sortable
					capabilities1.Attributes[attributesCount1].StartNumber = attributes3.StartNumber
					capabilities1.Attributes[attributesCount1].Suggestions = attributes3.Suggestions
					capabilities1.Attributes[attributesCount1].SummaryFields = attributes3.SummaryFields
					capabilities1.Attributes[attributesCount1].Topic = attributes3.Topic
					capabilities1.Attributes[attributesCount1].Type = attributes3.Type
					capabilities1.Attributes[attributesCount1].UpdatedAt = attributes3.UpdatedAt
					capabilities1.Attributes[attributesCount1].ValueFormatter = attributes3.ValueFormatter
				}
			}
			capabilities1.FeatureFlag = types.StringPointerValue(capabilitiesItem.FeatureFlag)
			capabilities1.Name = types.StringValue(capabilitiesItem.Name)
			for settingsFlagCount4, settingsFlagItem4 := range capabilitiesItem.SettingsFlag {
				var settingsFlag9 tfTypes.SettingFlag
				settingsFlag9.Enabled = types.BoolPointerValue(settingsFlagItem4.Enabled)
				settingsFlag9.Name = types.StringPointerValue(settingsFlagItem4.Name)
				if settingsFlagCount4+1 > len(capabilities1.SettingsFlag) {
					capabilities1.SettingsFlag = append(capabilities1.SettingsFlag, settingsFlag9)
				} else {
					capabilities1.SettingsFlag[settingsFlagCount4].Enabled = settingsFlag9.Enabled
					capabilities1.SettingsFlag[settingsFlagCount4].Name = settingsFlag9.Name
				}
			}
			capabilities1.Title = types.StringPointerValue(capabilitiesItem.Title)
			for uiHooksCount, uiHooksItem := range capabilitiesItem.UIHooks {
				var uiHooks1 tfTypes.UIHooks
				if uiHooksItem.AdditionalProperties == nil {
					uiHooks1.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult4, _ := json.Marshal(uiHooksItem.AdditionalProperties)
					uiHooks1.AdditionalProperties = types.StringValue(string(additionalPropertiesResult4))
				}
				uiHooks1.Component = types.StringPointerValue(uiHooksItem.Component)
				uiHooks1.Disabled = types.BoolPointerValue(uiHooksItem.Disabled)
				uiHooks1.GroupExpanded = types.BoolPointerValue(uiHooksItem.GroupExpanded)
				uiHooks1.Header = types.BoolPointerValue(uiHooksItem.Header)
				uiHooks1.Hook = types.StringValue(uiHooksItem.Hook)
				uiHooks1.Icon = types.StringPointerValue(uiHooksItem.Icon)
				uiHooks1.Import = types.StringPointerValue(uiHooksItem.Import)
				uiHooks1.Order = types.Int64PointerValue(uiHooksItem.Order)
				uiHooks1.RenderCondition = types.StringPointerValue(uiHooksItem.RenderCondition)
				if uiHooksItem.RequiredPermission == nil {
					uiHooks1.RequiredPermission = nil
				} else {
					uiHooks1.RequiredPermission = &tfTypes.RequiredPermission{}
					uiHooks1.RequiredPermission.Action = types.StringValue(uiHooksItem.RequiredPermission.Action)
					uiHooks1.RequiredPermission.Resource = types.StringPointerValue(uiHooksItem.RequiredPermission.Resource)
				}
				uiHooks1.Route = types.StringPointerValue(uiHooksItem.Route)
				uiHooks1.Title = types.StringPointerValue(uiHooksItem.Title)
				if uiHooksCount+1 > len(capabilities1.UIHooks) {
					capabilities1.UIHooks = append(capabilities1.UIHooks, uiHooks1)
				} else {
					capabilities1.UIHooks[uiHooksCount].AdditionalProperties = uiHooks1.AdditionalProperties
					capabilities1.UIHooks[uiHooksCount].Component = uiHooks1.Component
					capabilities1.UIHooks[uiHooksCount].Disabled = uiHooks1.Disabled
					capabilities1.UIHooks[uiHooksCount].GroupExpanded = uiHooks1.GroupExpanded
					capabilities1.UIHooks[uiHooksCount].Header = uiHooks1.Header
					capabilities1.UIHooks[uiHooksCount].Hook = uiHooks1.Hook
					capabilities1.UIHooks[uiHooksCount].Icon = uiHooks1.Icon
					capabilities1.UIHooks[uiHooksCount].Import = uiHooks1.Import
					capabilities1.UIHooks[uiHooksCount].Order = uiHooks1.Order
					capabilities1.UIHooks[uiHooksCount].RenderCondition = uiHooks1.RenderCondition
					capabilities1.UIHooks[uiHooksCount].RequiredPermission = uiHooks1.RequiredPermission
					capabilities1.UIHooks[uiHooksCount].Route = uiHooks1.Route
					capabilities1.UIHooks[uiHooksCount].Title = uiHooks1.Title
				}
			}
			if capabilitiesCount+1 > len(r.Capabilities) {
				r.Capabilities = append(r.Capabilities, capabilities1)
			} else {
				r.Capabilities[capabilitiesCount].Purpose = capabilities1.Purpose
				r.Capabilities[capabilitiesCount].Attributes = capabilities1.Attributes
				r.Capabilities[capabilitiesCount].FeatureFlag = capabilities1.FeatureFlag
				r.Capabilities[capabilitiesCount].Name = capabilities1.Name
				r.Capabilities[capabilitiesCount].SettingsFlag = capabilities1.SettingsFlag
				r.Capabilities[capabilitiesCount].Title = capabilities1.Title
				r.Capabilities[capabilitiesCount].UIHooks = capabilities1.UIHooks
			}
		}
		r.Comment = types.StringPointerValue(resp.Comment)
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		if len(resp.DialogConfig) > 0 {
			r.DialogConfig = make(map[string]types.String)
			for key2, value2 := range resp.DialogConfig {
				result, _ := json.Marshal(value2)
				r.DialogConfig[key2] = types.StringValue(string(result))
			}
		}
		r.Draft = types.BoolPointerValue(resp.Draft)
		r.EnableSetting = []types.String{}
		for _, v := range resp.EnableSetting {
			r.EnableSetting = append(r.EnableSetting, types.StringValue(v))
		}
		if len(resp.ExplicitSearchMappings) > 0 {
			r.ExplicitSearchMappings = make(map[string]tfTypes.SearchMappings)
			for searchMappingsKey, searchMappingsValue := range resp.ExplicitSearchMappings {
				var searchMappingsResult tfTypes.SearchMappings
				if len(searchMappingsValue.Fields) > 0 {
					searchMappingsResult.Fields = make(map[string]types.String)
					for key3, value3 := range searchMappingsValue.Fields {
						result1, _ := json.Marshal(value3)
						searchMappingsResult.Fields[key3] = types.StringValue(string(result1))
					}
				}
				searchMappingsResult.Index = types.BoolPointerValue(searchMappingsValue.Index)
				if searchMappingsValue.Type != nil {
					searchMappingsResult.Type = types.StringValue(string(*searchMappingsValue.Type))
				} else {
					searchMappingsResult.Type = types.StringNull()
				}
				r.ExplicitSearchMappings[searchMappingsKey] = searchMappingsResult
			}
		}
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		if len(r.GroupSettings) > len(resp.GroupSettings) {
			r.GroupSettings = r.GroupSettings[:len(resp.GroupSettings)]
		}
		for groupSettingsCount, groupSettingsItem := range resp.GroupSettings {
			var groupSettings1 tfTypes.GroupSettings
			groupSettings1.Purpose = []types.String{}
			for _, v := range groupSettingsItem.Purpose {
				groupSettings1.Purpose = append(groupSettings1.Purpose, types.StringValue(v))
			}
			groupSettings1.Expanded = types.BoolPointerValue(groupSettingsItem.Expanded)
			groupSettings1.FeatureFlag = types.StringPointerValue(groupSettingsItem.FeatureFlag)
			groupSettings1.ID = types.StringPointerValue(groupSettingsItem.ID)
			if groupSettingsItem.InfoTooltipTitle == nil {
				groupSettings1.InfoTooltipTitle = nil
			} else {
				groupSettings1.InfoTooltipTitle = &tfTypes.InfoTooltipTitle{}
				groupSettings1.InfoTooltipTitle.Default = types.StringPointerValue(groupSettingsItem.InfoTooltipTitle.Default)
				groupSettings1.InfoTooltipTitle.Key = types.StringPointerValue(groupSettingsItem.InfoTooltipTitle.Key)
			}
			groupSettings1.Label = types.StringValue(groupSettingsItem.Label)
			groupSettings1.Order = types.Int64PointerValue(groupSettingsItem.Order)
			groupSettings1.RenderCondition = types.StringPointerValue(groupSettingsItem.RenderCondition)
			for settingsFlagCount5, settingsFlagItem5 := range groupSettingsItem.SettingsFlag {
				var settingsFlag11 tfTypes.SettingFlag
				settingsFlag11.Enabled = types.BoolPointerValue(settingsFlagItem5.Enabled)
				settingsFlag11.Name = types.StringPointerValue(settingsFlagItem5.Name)
				if settingsFlagCount5+1 > len(groupSettings1.SettingsFlag) {
					groupSettings1.SettingsFlag = append(groupSettings1.SettingsFlag, settingsFlag11)
				} else {
					groupSettings1.SettingsFlag[settingsFlagCount5].Enabled = settingsFlag11.Enabled
					groupSettings1.SettingsFlag[settingsFlagCount5].Name = settingsFlag11.Name
				}
			}
			if groupSettingsCount+1 > len(r.GroupSettings) {
				r.GroupSettings = append(r.GroupSettings, groupSettings1)
			} else {
				r.GroupSettings[groupSettingsCount].Purpose = groupSettings1.Purpose
				r.GroupSettings[groupSettingsCount].Expanded = groupSettings1.Expanded
				r.GroupSettings[groupSettingsCount].FeatureFlag = groupSettings1.FeatureFlag
				r.GroupSettings[groupSettingsCount].ID = groupSettings1.ID
				r.GroupSettings[groupSettingsCount].InfoTooltipTitle = groupSettings1.InfoTooltipTitle
				r.GroupSettings[groupSettingsCount].Label = groupSettings1.Label
				r.GroupSettings[groupSettingsCount].Order = groupSettings1.Order
				r.GroupSettings[groupSettingsCount].RenderCondition = groupSettings1.RenderCondition
				r.GroupSettings[groupSettingsCount].SettingsFlag = groupSettings1.SettingsFlag
			}
		}
		r.Icon = types.StringPointerValue(resp.Icon)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.LayoutSettings == nil {
			r.LayoutSettings = nil
		} else {
			r.LayoutSettings = &tfTypes.LayoutSettings{}
			if resp.LayoutSettings.AdditionalProperties == nil {
				r.LayoutSettings.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult5, _ := json.Marshal(resp.LayoutSettings.AdditionalProperties)
				r.LayoutSettings.AdditionalProperties = types.StringValue(string(additionalPropertiesResult5))
			}
			r.LayoutSettings.GridGap = types.StringPointerValue(resp.LayoutSettings.GridGap)
			r.LayoutSettings.GridTemplateColumns = types.StringPointerValue(resp.LayoutSettings.GridTemplateColumns)
		}
		r.Name = types.StringValue(resp.Name)
		r.Plural = types.StringValue(resp.Plural)
		r.Published = types.BoolPointerValue(resp.Published)
		r.Slug = types.StringValue(resp.Slug)
		if resp.Source == nil {
			r.Source = nil
		} else {
			r.Source = &tfTypes.Source{}
			r.Source.ID = types.StringPointerValue(resp.Source.ID)
			r.Source.Type = types.StringPointerValue(resp.Source.Type)
		}
		r.TitleTemplate = types.StringPointerValue(resp.TitleTemplate)
		if resp.UIConfig == nil {
			r.UIConfig = nil
		} else {
			r.UIConfig = &tfTypes.UIConfig{}
			if resp.UIConfig.CreateView == nil {
				r.UIConfig.CreateView = nil
			} else {
				r.UIConfig.CreateView = &tfTypes.CreateView{}
				if resp.UIConfig.CreateView.EntityDefaultCreate != nil {
					r.UIConfig.CreateView.Default = &tfTypes.EntityDefaultCreate{}
					if len(resp.UIConfig.CreateView.EntityDefaultCreate.SearchParams) > 0 {
						r.UIConfig.CreateView.Default.SearchParams = make(map[string]types.String)
						for key5, value4 := range resp.UIConfig.CreateView.EntityDefaultCreate.SearchParams {
							r.UIConfig.CreateView.Default.SearchParams[key5] = types.StringValue(value4)
						}
					}
					if resp.UIConfig.CreateView.EntityDefaultCreate.ViewType != nil {
						r.UIConfig.CreateView.Default.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.EntityDefaultCreate.ViewType))
					} else {
						r.UIConfig.CreateView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.CreateView.EntityViewDisabled != nil {
					r.UIConfig.CreateView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.CreateView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.CreateView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.CreateView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.CreateView.RedirectEntityView != nil {
					r.UIConfig.CreateView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.CreateView.Redirect.Route = types.StringPointerValue(resp.UIConfig.CreateView.RedirectEntityView.Route)
					if resp.UIConfig.CreateView.RedirectEntityView.ViewType != nil {
						r.UIConfig.CreateView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.CreateView.Redirect.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.EditView == nil {
				r.UIConfig.EditView = nil
			} else {
				r.UIConfig.EditView = &tfTypes.EditView{}
				if resp.UIConfig.EditView.EntityDefaultEdit != nil {
					r.UIConfig.EditView.Default = &tfTypes.EntityDefaultEdit{}
					if len(resp.UIConfig.EditView.EntityDefaultEdit.SearchParams) > 0 {
						r.UIConfig.EditView.Default.SearchParams = make(map[string]types.String)
						for key6, value5 := range resp.UIConfig.EditView.EntityDefaultEdit.SearchParams {
							r.UIConfig.EditView.Default.SearchParams[key6] = types.StringValue(value5)
						}
					}
					r.UIConfig.EditView.Default.SummaryAttributes = []types.String{}
					for _, v := range resp.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes {
						r.UIConfig.EditView.Default.SummaryAttributes = append(r.UIConfig.EditView.Default.SummaryAttributes, types.StringValue(v))
					}
					if resp.UIConfig.EditView.EntityDefaultEdit.ViewType != nil {
						r.UIConfig.EditView.Default.ViewType = types.StringValue(string(*resp.UIConfig.EditView.EntityDefaultEdit.ViewType))
					} else {
						r.UIConfig.EditView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.EditView.EntityViewDisabled != nil {
					r.UIConfig.EditView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.EditView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.EditView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.EditView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.EditView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.EditView.RedirectEntityView != nil {
					r.UIConfig.EditView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.EditView.Redirect.Route = types.StringPointerValue(resp.UIConfig.EditView.RedirectEntityView.Route)
					if resp.UIConfig.EditView.RedirectEntityView.ViewType != nil {
						r.UIConfig.EditView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.EditView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.EditView.Redirect.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.ListItem == nil {
				r.UIConfig.ListItem = nil
			} else {
				r.UIConfig.ListItem = &tfTypes.ListItem{}
				if len(r.UIConfig.ListItem.QuickActions) > len(resp.UIConfig.ListItem.QuickActions) {
					r.UIConfig.ListItem.QuickActions = r.UIConfig.ListItem.QuickActions[:len(resp.UIConfig.ListItem.QuickActions)]
				}
				for quickActionsCount, quickActionsItem := range resp.UIConfig.ListItem.QuickActions {
					var quickActions1 tfTypes.EntityAction
					quickActions1.Action = types.StringValue(quickActionsItem.Action)
					quickActions1.Icon = types.StringPointerValue(quickActionsItem.Icon)
					quickActions1.Label = types.StringValue(quickActionsItem.Label)
					quickActions1.Permission = types.StringPointerValue(quickActionsItem.Permission)
					if quickActionsCount+1 > len(r.UIConfig.ListItem.QuickActions) {
						r.UIConfig.ListItem.QuickActions = append(r.UIConfig.ListItem.QuickActions, quickActions1)
					} else {
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Action = quickActions1.Action
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Icon = quickActions1.Icon
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Label = quickActions1.Label
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Permission = quickActions1.Permission
					}
				}
				if len(r.UIConfig.ListItem.SummaryAttributes) > len(resp.UIConfig.ListItem.SummaryAttributes) {
					r.UIConfig.ListItem.SummaryAttributes = r.UIConfig.ListItem.SummaryAttributes[:len(resp.UIConfig.ListItem.SummaryAttributes)]
				}
				for summaryAttributesCount, summaryAttributesItem := range resp.UIConfig.ListItem.SummaryAttributes {
					var summaryAttributes2 tfTypes.SummaryAttributes
					if summaryAttributesItem.Str != nil {
						summaryAttributes2.Str = types.StringPointerValue(summaryAttributesItem.Str)
					}
					if summaryAttributesItem.SummaryAttribute != nil {
						summaryAttributes2.SummaryAttribute = &tfTypes.SummaryAttribute{}
						summaryAttributes2.SummaryAttribute.FeatureFlag = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.FeatureFlag)
						summaryAttributes2.SummaryAttribute.Label = types.StringValue(summaryAttributesItem.SummaryAttribute.Label)
						summaryAttributes2.SummaryAttribute.RenderCondition = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.RenderCondition)
						for settingsFlagCount6, settingsFlagItem6 := range summaryAttributesItem.SummaryAttribute.SettingsFlag {
							var settingsFlag13 tfTypes.SettingFlag
							settingsFlag13.Enabled = types.BoolPointerValue(settingsFlagItem6.Enabled)
							settingsFlag13.Name = types.StringPointerValue(settingsFlagItem6.Name)
							if settingsFlagCount6+1 > len(summaryAttributes2.SummaryAttribute.SettingsFlag) {
								summaryAttributes2.SummaryAttribute.SettingsFlag = append(summaryAttributes2.SummaryAttribute.SettingsFlag, settingsFlag13)
							} else {
								summaryAttributes2.SummaryAttribute.SettingsFlag[settingsFlagCount6].Enabled = settingsFlag13.Enabled
								summaryAttributes2.SummaryAttribute.SettingsFlag[settingsFlagCount6].Name = settingsFlag13.Name
							}
						}
						summaryAttributes2.SummaryAttribute.ShowAsTag = types.BoolPointerValue(summaryAttributesItem.SummaryAttribute.ShowAsTag)
						summaryAttributes2.SummaryAttribute.TagColor = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.TagColor)
						summaryAttributes2.SummaryAttribute.Value = types.StringValue(summaryAttributesItem.SummaryAttribute.Value)
					}
					if summaryAttributesCount+1 > len(r.UIConfig.ListItem.SummaryAttributes) {
						r.UIConfig.ListItem.SummaryAttributes = append(r.UIConfig.ListItem.SummaryAttributes, summaryAttributes2)
					} else {
						r.UIConfig.ListItem.SummaryAttributes[summaryAttributesCount].Str = summaryAttributes2.Str
						r.UIConfig.ListItem.SummaryAttributes[summaryAttributesCount].SummaryAttribute = summaryAttributes2.SummaryAttribute
					}
				}
			}
			if resp.UIConfig.Sharing == nil {
				r.UIConfig.Sharing = nil
			} else {
				r.UIConfig.Sharing = &tfTypes.Sharing{}
				r.UIConfig.Sharing.ShowSharingButton = types.BoolPointerValue(resp.UIConfig.Sharing.ShowSharingButton)
			}
			if resp.UIConfig.SingleView == nil {
				r.UIConfig.SingleView = nil
			} else {
				r.UIConfig.SingleView = &tfTypes.EditView{}
				if resp.UIConfig.SingleView.EntityDefaultEdit != nil {
					r.UIConfig.SingleView.Default = &tfTypes.EntityDefaultEdit{}
					if len(resp.UIConfig.SingleView.EntityDefaultEdit.SearchParams) > 0 {
						r.UIConfig.SingleView.Default.SearchParams = make(map[string]types.String)
						for key7, value7 := range resp.UIConfig.SingleView.EntityDefaultEdit.SearchParams {
							r.UIConfig.SingleView.Default.SearchParams[key7] = types.StringValue(value7)
						}
					}
					r.UIConfig.SingleView.Default.SummaryAttributes = []types.String{}
					for _, v := range resp.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes {
						r.UIConfig.SingleView.Default.SummaryAttributes = append(r.UIConfig.SingleView.Default.SummaryAttributes, types.StringValue(v))
					}
					if resp.UIConfig.SingleView.EntityDefaultEdit.ViewType != nil {
						r.UIConfig.SingleView.Default.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.EntityDefaultEdit.ViewType))
					} else {
						r.UIConfig.SingleView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.SingleView.EntityViewDisabled != nil {
					r.UIConfig.SingleView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.SingleView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.SingleView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.SingleView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.SingleView.RedirectEntityView != nil {
					r.UIConfig.SingleView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.SingleView.Redirect.Route = types.StringPointerValue(resp.UIConfig.SingleView.RedirectEntityView.Route)
					if resp.UIConfig.SingleView.RedirectEntityView.ViewType != nil {
						r.UIConfig.SingleView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.SingleView.Redirect.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.TableView == nil {
				r.UIConfig.TableView = nil
			} else {
				r.UIConfig.TableView = &tfTypes.TableView{}
				if resp.UIConfig.TableView.EntityDefaultTable != nil {
					r.UIConfig.TableView.Default = &tfTypes.EntityDefaultTable{}
					if len(r.UIConfig.TableView.Default.BulkActions) > len(resp.UIConfig.TableView.EntityDefaultTable.BulkActions) {
						r.UIConfig.TableView.Default.BulkActions = r.UIConfig.TableView.Default.BulkActions[:len(resp.UIConfig.TableView.EntityDefaultTable.BulkActions)]
					}
					for bulkActionsCount, bulkActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.BulkActions {
						var bulkActions1 tfTypes.BulkActions
						if bulkActionsItem.Str != nil {
							bulkActions1.Str = types.StringPointerValue(bulkActionsItem.Str)
						}
						if bulkActionsItem.EntityAction != nil {
							bulkActions1.EntityAction = &tfTypes.EntityAction{}
							bulkActions1.EntityAction.Action = types.StringValue(bulkActionsItem.EntityAction.Action)
							bulkActions1.EntityAction.Icon = types.StringPointerValue(bulkActionsItem.EntityAction.Icon)
							bulkActions1.EntityAction.Label = types.StringValue(bulkActionsItem.EntityAction.Label)
							bulkActions1.EntityAction.Permission = types.StringPointerValue(bulkActionsItem.EntityAction.Permission)
						}
						if bulkActionsCount+1 > len(r.UIConfig.TableView.Default.BulkActions) {
							r.UIConfig.TableView.Default.BulkActions = append(r.UIConfig.TableView.Default.BulkActions, bulkActions1)
						} else {
							r.UIConfig.TableView.Default.BulkActions[bulkActionsCount].Str = bulkActions1.Str
							r.UIConfig.TableView.Default.BulkActions[bulkActionsCount].EntityAction = bulkActions1.EntityAction
						}
					}
					r.UIConfig.TableView.Default.EnableThumbnails = types.BoolPointerValue(resp.UIConfig.TableView.EntityDefaultTable.EnableThumbnails)
					if len(r.UIConfig.TableView.Default.NavbarActions) > len(resp.UIConfig.TableView.EntityDefaultTable.NavbarActions) {
						r.UIConfig.TableView.Default.NavbarActions = r.UIConfig.TableView.Default.NavbarActions[:len(resp.UIConfig.TableView.EntityDefaultTable.NavbarActions)]
					}
					for navbarActionsCount, navbarActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.NavbarActions {
						var navbarActions1 tfTypes.NavbarActions
						for optionsCount, optionsItem := range navbarActionsItem.Options {
							var options3 tfTypes.Options
							options3.Label = types.StringValue(optionsItem.Label)
							if optionsItem.Params == nil {
								options3.Params = nil
							} else {
								options3.Params = &tfTypes.Constraints{}
							}
							if optionsCount+1 > len(navbarActions1.Options) {
								navbarActions1.Options = append(navbarActions1.Options, options3)
							} else {
								navbarActions1.Options[optionsCount].Label = options3.Label
								navbarActions1.Options[optionsCount].Params = options3.Params
							}
						}
						navbarActions1.Type = types.StringValue(navbarActionsItem.Type)
						if navbarActionsCount+1 > len(r.UIConfig.TableView.Default.NavbarActions) {
							r.UIConfig.TableView.Default.NavbarActions = append(r.UIConfig.TableView.Default.NavbarActions, navbarActions1)
						} else {
							r.UIConfig.TableView.Default.NavbarActions[navbarActionsCount].Options = navbarActions1.Options
							r.UIConfig.TableView.Default.NavbarActions[navbarActionsCount].Type = navbarActions1.Type
						}
					}
					if len(r.UIConfig.TableView.Default.RowActions) > len(resp.UIConfig.TableView.EntityDefaultTable.RowActions) {
						r.UIConfig.TableView.Default.RowActions = r.UIConfig.TableView.Default.RowActions[:len(resp.UIConfig.TableView.EntityDefaultTable.RowActions)]
					}
					for rowActionsCount, rowActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.RowActions {
						var rowActions1 tfTypes.BulkActions
						if rowActionsItem.Str != nil {
							rowActions1.Str = types.StringPointerValue(rowActionsItem.Str)
						}
						if rowActionsItem.EntityAction != nil {
							rowActions1.EntityAction = &tfTypes.EntityAction{}
							rowActions1.EntityAction.Action = types.StringValue(rowActionsItem.EntityAction.Action)
							rowActions1.EntityAction.Icon = types.StringPointerValue(rowActionsItem.EntityAction.Icon)
							rowActions1.EntityAction.Label = types.StringValue(rowActionsItem.EntityAction.Label)
							rowActions1.EntityAction.Permission = types.StringPointerValue(rowActionsItem.EntityAction.Permission)
						}
						if rowActionsCount+1 > len(r.UIConfig.TableView.Default.RowActions) {
							r.UIConfig.TableView.Default.RowActions = append(r.UIConfig.TableView.Default.RowActions, rowActions1)
						} else {
							r.UIConfig.TableView.Default.RowActions[rowActionsCount].Str = rowActions1.Str
							r.UIConfig.TableView.Default.RowActions[rowActionsCount].EntityAction = rowActions1.EntityAction
						}
					}
					if resp.UIConfig.TableView.EntityDefaultTable.ViewType != nil {
						r.UIConfig.TableView.Default.ViewType = types.StringValue(string(*resp.UIConfig.TableView.EntityDefaultTable.ViewType))
					} else {
						r.UIConfig.TableView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.TableView.EntityViewDisabled != nil {
					r.UIConfig.TableView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.TableView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.TableView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.TableView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.TableView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.TableView.RedirectEntityView != nil {
					r.UIConfig.TableView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.TableView.Redirect.Route = types.StringPointerValue(resp.UIConfig.TableView.RedirectEntityView.Route)
					if resp.UIConfig.TableView.RedirectEntityView.ViewType != nil {
						r.UIConfig.TableView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.TableView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.TableView.Redirect.ViewType = types.StringNull()
					}
				}
			}
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
		r.Version = types.Int64PointerValue(resp.Version)
	}
}
