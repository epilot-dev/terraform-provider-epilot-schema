// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/validators"
	speakeasy_objectvalidators "github.com/epilot/terraform-provider-epilot-schema/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot/terraform-provider-epilot-schema/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SchemaResource{}
var _ resource.ResourceWithImportState = &SchemaResource{}

func NewSchemaResource() resource.Resource {
	return &SchemaResource{}
}

// SchemaResource defines the resource implementation.
type SchemaResource struct {
	client *sdk.SDK
}

// SchemaResourceModel describes the resource data model.
type SchemaResourceModel struct {
	Attributes             types.String                      `tfsdk:"attributes"`
	Blueprint              types.String                      `tfsdk:"blueprint"`
	Capabilities           types.String                      `tfsdk:"capabilities"`
	Category               types.String                      `tfsdk:"category"`
	CreatedAt              types.String                      `tfsdk:"created_at"`
	Description            types.String                      `tfsdk:"description"`
	DialogConfig           map[string]types.String           `tfsdk:"dialog_config"`
	DocsURL                types.String                      `tfsdk:"docs_url"`
	Draft                  types.Bool                        `tfsdk:"draft"`
	EnableSetting          []types.String                    `tfsdk:"enable_setting"`
	ExplicitSearchMappings map[string]tfTypes.SearchMappings `tfsdk:"explicit_search_mappings"`
	FeatureFlag            types.String                      `tfsdk:"feature_flag"`
	GroupHeadlines         types.String                      `tfsdk:"group_headlines"`
	GroupSettings          types.String                      `tfsdk:"group_settings"`
	Icon                   types.String                      `tfsdk:"icon"`
	ID                     types.String                      `tfsdk:"id"`
	LayoutSettings         *tfTypes.LayoutSettings           `tfsdk:"layout_settings"`
	Name                   types.String                      `tfsdk:"name"`
	Plural                 types.String                      `tfsdk:"plural"`
	Published              types.Bool                        `tfsdk:"published"`
	Purpose                []types.String                    `tfsdk:"purpose"`
	Slug                   types.String                      `tfsdk:"slug"`
	TitleTemplate          types.String                      `tfsdk:"title_template"`
	UIConfig               *tfTypes.UIConfig                 `tfsdk:"ui_config"`
	UpdatedAt              types.String                      `tfsdk:"updated_at"`
	Version                types.Int64                       `tfsdk:"version"`
}

func (r *SchemaResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema"
}

func (r *SchemaResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Schema Resource",
		Attributes: map[string]schema.Attribute{
			"attributes": schema.StringAttribute{
				Required:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"blueprint": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Reference to blueprint`,
			},
			"capabilities": schema.StringAttribute{
				Required:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"category": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"dialog_config": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"docs_url": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"draft": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Default: false`,
			},
			"enable_setting": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `This schema should only be active when one of the organization settings is enabled`,
			},
			"explicit_search_mappings": schema.MapNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"fields": schema.MapAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"index": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Default:     booldefault.StaticBool(true),
							Description: `Default: true`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `must be one of ["keyword", "text", "boolean", "integer", "long", "float", "date", "flattened", "nested"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"keyword",
									"text",
									"boolean",
									"integer",
									"long",
									"float",
									"date",
									"flattened",
									"nested",
								),
							},
						},
					},
				},
				Description: `Advanced: explicit Elasticsearch index mapping definitions for entity data`,
			},
			"feature_flag": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `This schema should only be active when the feature flag is enabled`,
			},
			"group_headlines": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"group_settings": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"icon": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Generated uuid for schema`,
			},
			"layout_settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Parsed as JSON.`,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
					},
					"grid_gap": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Defines the grid gap for the mounting node of the attribute.`,
					},
					"grid_template_columns": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Defines the grid column template for the mounting node of the attribute.`,
					},
				},
				MarkdownDescription: `Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:` + "\n" +
					`- Managed Properties: are interpreted and transformed into layout styles` + "\n" +
					`- Un-managed Properties: are appended as styles into the attribute mounting node`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `User-friendly identifier for the entity schema`,
			},
			"plural": schema.StringAttribute{
				Required: true,
			},
			"published": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"purpose": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"slug": schema.StringAttribute{
				Required:    true,
				Description: `Entity Type`,
			},
			"title_template": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Template for rendering the title field. Uses handlebars`,
			},
			"ui_config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"create_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_create": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "default"`,
										Validators: []validator.String{
											stringvalidator.OneOf("default"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "disabled"`,
										Validators: []validator.String{
											stringvalidator.OneOf("disabled"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_create"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "redirect"`,
										Validators: []validator.String{
											stringvalidator.OneOf("redirect"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_create"),
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
									}...),
								},
							},
						},
					},
					"edit_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_edit": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"summary_attributes": schema.ListAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
										Description: `List of attribute names that we show in the summary header`,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "default"`,
										Validators: []validator.String{
											stringvalidator.OneOf("default"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "disabled"`,
										Validators: []validator.String{
											stringvalidator.OneOf("disabled"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_edit"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "redirect"`,
										Validators: []validator.String{
											stringvalidator.OneOf("redirect"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_edit"),
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
									}...),
								},
							},
						},
					},
					"list_item": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"quick_actions": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"action": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `A unique action name. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"icon": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"label": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"permission": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `Permission required to show the action.` + "\n" +
												`If not provided, the action will be shown to all users.`,
										},
									},
								},
							},
							"summary_attributes": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
											Optional: true,
											Validators: []validator.String{
												stringvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("summary_attribute"),
												}...),
											},
										},
										"summary_attribute": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"content_line_cap": schema.NumberAttribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `Defines the line numbers of the content.` + "\n" +
														`For instance, When set to 1, the content will be displayed in a single line.`,
												},
												"content_wrap": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Defines white-space of the content. must be one of ["normal", "nowrap", "pre", "pre-wrap"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"normal",
															"nowrap",
															"pre",
															"pre-wrap",
														),
													},
												},
												"display_mode": schema.StringAttribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `Defines the display mode of the summary attribute.` + "\n" +
														`When set to ` + "`" + `inline` + "`" + `, the label and value will be displayed in the same line.` + "\n" +
														`When set to ` + "`" + `block` + "`" + `, the label and value will be displayed in separate lines.` + "\n" +
														`must be one of ["inline", "block"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"inline",
															"block",
														),
													},
												},
												"feature_flag": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Binds summary field visibility to the feature flag state.`,
												},
												"hide_label": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Description: `When set to true, will hide the label of the field.`,
												},
												"highlight_container": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Description: `When set to true, will highlight the container of the field.`,
												},
												"label": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Label to be shown on the top of the value. Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
												"render_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
														`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
														`Note: Empty or invalid expression have no effect on the field visibility.`,
												},
												"settings_flag": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"enabled": schema.BoolAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Whether the setting should be enabled or not`,
															},
															"name": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The name of the organization setting to check`,
															},
														},
													},
													Description: `This summary attribute should only be visible when all the settings have the correct value`,
												},
												"show_as_tag": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Displays the value within a tag chip.`,
												},
												"tag_color": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `CSS hex color or CSS color name for the tag chip.`,
												},
												"value": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `A static value or an handlebar expression. Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
											},
											MarkdownDescription: `Represents an expanded version of an attribute to be displayed in the list item summary.` + "\n" +
												`This configuration can be used in the following way:` + "\n" +
												`` + "```" + `js` + "\n" +
												`{` + "\n" +
												`  "label": "Price components"` + "\n" +
												`  "value": "{{"{{"}}item.prices.length{{"}}"}} price components"` + "\n" +
												`  "show_as_tag": true` + "\n" +
												`  "render_condition": "is_composite_price = "true""` + "\n" +
												`}` + "\n" +
												`` + "```" + `` + "\n" +
												`The value field supports handlebar expressions from which you can pick any field from the entity state.`,
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("str"),
												}...),
											},
										},
									},
								},
							},
							"ui_config": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"content_direction": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Show attributes in a row or column. must be one of ["row", "column"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"row",
												"column",
											),
										},
									},
								},
							},
						},
					},
					"sharing": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"show_sharing_button": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Show the sharing button in entity detail view`,
							},
						},
					},
					"single_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_edit": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"summary_attributes": schema.ListAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
										Description: `List of attribute names that we show in the summary header`,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "default"`,
										Validators: []validator.String{
											stringvalidator.OneOf("default"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "disabled"`,
										Validators: []validator.String{
											stringvalidator.OneOf("disabled"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_edit"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "redirect"`,
										Validators: []validator.String{
											stringvalidator.OneOf("redirect"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_edit"),
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
									}...),
								},
							},
						},
					},
					"table_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_table": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"bulk_actions": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											Attributes: map[string]schema.Attribute{
												"entity_action": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"action": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `A unique action name. Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"icon": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"label": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"permission": schema.StringAttribute{
															Computed: true,
															Optional: true,
															MarkdownDescription: `Permission required to show the action.` + "\n" +
																`If not provided, the action will be shown to all users.`,
														},
													},
													Description: `An entity action configured from the entity schema`,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("str"),
														}...),
													},
												},
												"str": schema.StringAttribute{
													Computed: true,
													Optional: true,
													Validators: []validator.String{
														stringvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("entity_action"),
														}...),
													},
												},
											},
										},
									},
									"enable_thumbnails": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Enable the thumbnail column. Default: false`,
									},
									"navbar_actions": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											Attributes: map[string]schema.Attribute{
												"options": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"label": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"params": schema.SingleNestedAttribute{
																Computed: true,
																Optional: true,
															},
														},
													},
												},
												"type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
											},
										},
									},
									"row_actions": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											Attributes: map[string]schema.Attribute{
												"entity_action": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"action": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `A unique action name. Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"icon": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"label": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"permission": schema.StringAttribute{
															Computed: true,
															Optional: true,
															MarkdownDescription: `Permission required to show the action.` + "\n" +
																`If not provided, the action will be shown to all users.`,
														},
													},
													Description: `An entity action configured from the entity schema`,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("str"),
														}...),
													},
												},
												"str": schema.StringAttribute{
													Computed: true,
													Optional: true,
													Validators: []validator.String{
														stringvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("entity_action"),
														}...),
													},
												},
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "default"`,
										Validators: []validator.String{
											stringvalidator.OneOf("default"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "disabled"`,
										Validators: []validator.String{
											stringvalidator.OneOf("disabled"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_table"),
										path.MatchRelative().AtParent().AtName("redirect_entity_view"),
									}...),
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `must be "redirect"`,
										Validators: []validator.String{
											stringvalidator.OneOf("redirect"),
										},
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("entity_default_table"),
										path.MatchRelative().AtParent().AtName("entity_view_disabled"),
									}...),
								},
							},
						},
					},
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"version": schema.Int64Attribute{
				Computed: true,
				Optional: true,
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
		},
	}
}

func (r *SchemaResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SchemaResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var slug string
	slug = data.Slug.ValueString()

	draft := new(bool)
	if !data.Draft.IsUnknown() && !data.Draft.IsNull() {
		*draft = data.Draft.ValueBool()
	} else {
		draft = nil
	}
	entitySchemaItem := data.ToSharedEntitySchemaItem()
	request := operations.PutSchemaRequest{
		Slug:             slug,
		Draft:            draft,
		EntitySchemaItem: entitySchemaItem,
	}
	res, err := r.client.Schemas.PutSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EntitySchemaItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEntitySchemaItem(res.EntitySchemaItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var slug string
	slug = data.Slug.ValueString()

	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	request := operations.GetSchemaRequest{
		Slug: slug,
		ID:   id,
	}
	res, err := r.client.Schemas.GetSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EntitySchemaItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEntitySchemaItem(res.EntitySchemaItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SchemaResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var slug string
	slug = data.Slug.ValueString()

	draft := new(bool)
	if !data.Draft.IsUnknown() && !data.Draft.IsNull() {
		*draft = data.Draft.ValueBool()
	} else {
		draft = nil
	}
	entitySchemaItem := data.ToSharedEntitySchemaItem()
	request := operations.PutSchemaRequest{
		Slug:             slug,
		Draft:            draft,
		EntitySchemaItem: entitySchemaItem,
	}
	res, err := r.client.Schemas.PutSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EntitySchemaItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEntitySchemaItem(res.EntitySchemaItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var slug string
	slug = data.Slug.ValueString()

	request := operations.DeleteSchemaRequest{
		Slug: slug,
	}
	res, err := r.client.Schemas.DeleteSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SchemaResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("slug"), req.ID)...)
}
