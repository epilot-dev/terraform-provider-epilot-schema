// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_boolplanmodifier "github.com/epilot/terraform-provider-epilot-schema/internal/planmodifiers/boolplanmodifier"
	speakeasy_int64planmodifier "github.com/epilot/terraform-provider-epilot-schema/internal/planmodifiers/int64planmodifier"
	speakeasy_listplanmodifier "github.com/epilot/terraform-provider-epilot-schema/internal/planmodifiers/listplanmodifier"
	speakeasy_mapplanmodifier "github.com/epilot/terraform-provider-epilot-schema/internal/planmodifiers/mapplanmodifier"
	speakeasy_objectplanmodifier "github.com/epilot/terraform-provider-epilot-schema/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/epilot/terraform-provider-epilot-schema/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/validators"
	speakeasy_stringvalidators "github.com/epilot/terraform-provider-epilot-schema/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SchemaResource{}
var _ resource.ResourceWithImportState = &SchemaResource{}

func NewSchemaResource() resource.Resource {
	return &SchemaResource{}
}

// SchemaResource defines the resource implementation.
type SchemaResource struct {
	client *sdk.SDK
}

// SchemaResourceModel describes the resource data model.
type SchemaResourceModel struct {
	Attributes             []tfTypes.Attribute               `tfsdk:"attributes"`
	Blueprint              types.String                      `tfsdk:"blueprint"`
	Capabilities           []tfTypes.EntityCapability        `tfsdk:"capabilities"`
	Comment                types.String                      `tfsdk:"comment"`
	CreatedAt              types.String                      `tfsdk:"created_at"`
	DialogConfig           map[string]types.String           `tfsdk:"dialog_config"`
	Draft                  types.Bool                        `tfsdk:"draft"`
	EnableSetting          []types.String                    `tfsdk:"enable_setting"`
	ExplicitSearchMappings map[string]tfTypes.SearchMappings `tfsdk:"explicit_search_mappings"`
	FeatureFlag            types.String                      `tfsdk:"feature_flag"`
	GroupSettings          []tfTypes.GroupSettings           `tfsdk:"group_settings"`
	Icon                   types.String                      `tfsdk:"icon"`
	ID                     types.String                      `tfsdk:"id"`
	LayoutSettings         *tfTypes.LayoutSettings           `tfsdk:"layout_settings"`
	Name                   types.String                      `tfsdk:"name"`
	Plural                 types.String                      `tfsdk:"plural"`
	Published              types.Bool                        `tfsdk:"published"`
	Slug                   types.String                      `tfsdk:"slug"`
	Source                 *tfTypes.Source                   `tfsdk:"source"`
	TitleTemplate          types.String                      `tfsdk:"title_template"`
	UIConfig               *tfTypes.UIConfig                 `tfsdk:"ui_config"`
	UpdatedAt              types.String                      `tfsdk:"updated_at"`
	Version                types.Int64                       `tfsdk:"version"`
}

func (r *SchemaResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema"
}

func (r *SchemaResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Schema Resource",
		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"actions": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"action_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										MarkdownDescription: `The action type. Currently supported actions:` + "\n" +
											`` + "\n" +
											`| action | description |` + "\n" +
											`|--------|-------------|` + "\n" +
											`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
											`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
											`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
											`` + "\n" +
											`Requires replacement if changed. ; must be one of ["add_existing", "create_new", "create_from_existing"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"add_existing",
												"create_new",
												"create_from_existing",
											),
										},
									},
									"default": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Sets the action as the default action, visible as the main action button. Requires replacement if changed. `,
									},
									"feature_flag": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Name of the feature flag that enables this action. Requires replacement if changed. `,
									},
									"label": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `The action label or action translation key (i18n). Requires replacement if changed. `,
									},
									"new_entity_item": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"acl": schema.SingleNestedAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.Object{
													objectplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"additional_properties": schema.StringAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.String{
															stringplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
														},
														Optional:    true,
														Description: `Parsed as JSON.`,
														Validators: []validator.String{
															validators.IsValidJSON(),
														},
													},
													"delete": schema.ListAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.List{
															listplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
														},
														Optional:    true,
														ElementType: types.StringType,
														Description: `Requires replacement if changed. `,
													},
													"edit": schema.ListAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.List{
															listplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
														},
														Optional:    true,
														ElementType: types.StringType,
														Description: `Requires replacement if changed. `,
													},
													"view": schema.ListAttribute{
														Computed: true,
														PlanModifiers: []planmodifier.List{
															listplanmodifier.RequiresReplaceIfConfigured(),
															speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
														},
														Optional:    true,
														ElementType: types.StringType,
														Description: `Requires replacement if changed. `,
													},
												},
												Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users. Requires replacement if changed. `,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													validators.IsRFC3339(),
												},
											},
											"id": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"org": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Organization Id the entity belongs to. Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"owners": schema.ListNestedAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"org_id": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"user_id": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. `,
														},
													},
												},
												Description: `Requires replacement if changed. `,
											},
											"schema": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `URL-friendly identifier for the entity schema. Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"tags": schema.ListAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												ElementType: types.StringType,
												Description: `Requires replacement if changed. `,
											},
											"title": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Title of entity. Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													validators.IsRFC3339(),
												},
											},
											"additional_properties": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Parsed as JSON.`,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
											},
										},
										Description: `Requires replacement if changed. `,
									},
									"settings_flag": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"enabled": schema.BoolAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
												},
												"name": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `The name of the organization setting to check. Requires replacement if changed. `,
												},
											},
										},
										Description: `This action should only be active when all the settings have the correct value. Requires replacement if changed. `,
									},
								},
							},
							Description: `Requires replacement if changed. `,
						},
						"add_button_label": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is. Requires replacement if changed. `,
						},
						"allow_any": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Allow arbitrary input values in addition to provided options. Requires replacement if changed. `,
						},
						"allow_extra_options": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `controls if the 360 ui will allow the user to enter a value which is not defined by the options. Requires replacement if changed. `,
						},
						"allowed_extensions": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `List of file extensions (without the dot suffix). Requires replacement if changed. `,
						},
						"allowed_schemas": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"constraints": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Optional:   true,
							Attributes: map[string]schema.Attribute{},
							MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
								`These constraints should and will be enforced by the attribute renderer.` + "\n" +
								`` + "\n" +
								`Requires replacement if changed. `,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"currency": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"one": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"code": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"flag": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. `,
											},
											"symbol": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
										},
										Description: `A currency configuration. Requires replacement if changed. `,
									},
								},
								Validators: []validator.Object{
									validators.ExactlyOneChild(),
								},
							},
							Description: `An array of currency configurations with a country code (ISO-4217). Requires replacement if changed. `,
						},
						"currency_selector_only": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Requires replacement if changed. ; Default: false`,
						},
						"default_access_control": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; must be one of ["public-read", "private"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"public-read",
									"private",
								),
							},
						},
						"default_value": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"deprecated": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Requires replacement if changed. ; Default: false`,
						},
						"details_view_mode_enabled": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Enables the preview, edition, and creation of relation items on a Master-Details view mode. Requires replacement if changed. ; Default: false`,
						},
						"disable_case_sensitive": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `controls if the matching of values against the options is case sensitive or not. Requires replacement if changed. `,
						},
						"display_images_landscaped": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Controls how the images are presented to the user during upload on the Entity Details view. Requires replacement if changed. `,
						},
						"drawer_size": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; must be one of ["small", "medium", "large"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"small",
									"medium",
									"large",
								),
							},
						},
						"edit_mode": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; must be one of ["list-view"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"list-view",
								),
							},
						},
						"enable_description": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							MarkdownDescription: `When set to true, an i18n description will be used alongside the attribute label.` + "\n" +
								`This description should be set through the platform locales in the form: ` + "`" + `file.{attribute_name}.description_text` + "`" + `.` + "\n" +
								`` + "\n" +
								`Requires replacement if changed. `,
						},
						"enable_relation_picker": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(true),
							Description: `when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link. Requires replacement if changed. ; Default: true`,
						},
						"enable_relation_tags": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(true),
							Description: `When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item. Requires replacement if changed. ; Default: true`,
						},
						"entity_builder_disable_edit": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI. Requires replacement if changed. ; Default: false`,
						},
						"feature_flag": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `This attribute should only be active when the feature flag is enabled. Requires replacement if changed. `,
						},
						"format": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"group": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Which group the attribute should appear in. Accepts group ID or group name. Requires replacement if changed. `,
						},
						"has_primary": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"hidden": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Do not render attribute in entity views. Requires replacement if changed. ; Default: false`,
						},
						"hide_label": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `When set to true, will hide the label of the field. Requires replacement if changed. `,
						},
						"icon": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
								`The value must be a valid @epilot/base-elements Icon name` + "\n" +
								`` + "\n" +
								`Requires replacement if changed. `,
						},
						"id": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"identifiers": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"info_helpers": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"hint_custom_component": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									MarkdownDescription: `The name of the custom component to be used as the hint helper.` + "\n" +
										`The component should be registered in the ` + "`" + `@epilot360/entity-ui` + "`" + ` on the index of the components directory.` + "\n" +
										`When specified it overrides the ` + "`" + `hint_text` + "`" + ` or ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
										`` + "\n" +
										`Requires replacement if changed. `,
								},
								"hint_text": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									MarkdownDescription: `The text to be displayed in the attribute hint helper.` + "\n" +
										`When specified it overrides the ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
										`` + "\n" +
										`Requires replacement if changed. `,
								},
								"hint_text_key": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									MarkdownDescription: `The key of the hint text to be displayed in the attribute hint helper.` + "\n" +
										`The key should be a valid i18n key.` + "\n" +
										`` + "\n" +
										`Requires replacement if changed. `,
								},
								"hint_tooltip_placement": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional: true,
									MarkdownDescription: `The placement of the hint tooltip.` + "\n" +
										`The value should be a valid ` + "`" + `@mui/core` + "`" + ` tooltip placement.` + "\n" +
										`` + "\n" +
										`Requires replacement if changed. `,
								},
							},
							Description: `A set of configurations meant to document and assist the user in filling the attribute. Requires replacement if changed. `,
						},
						"label": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"layout": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"multiline": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"multiple": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"name": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"options": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"order": schema.Int64Attribute{
							Computed: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Attribute sort order (ascending) in group. Requires replacement if changed. `,
						},
						"parents": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"placeholder": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"prefix": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Prefix added before the sequence number. Requires replacement if changed. `,
						},
						"preview_value_formatter": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"protected": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(true),
							Description: `Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted. Requires replacement if changed. ; Default: true`,
						},
						"readonly": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Requires replacement if changed. ; Default: false`,
						},
						"relation_affinity_mode": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity. Requires replacement if changed. ; must be one of ["weak", "strong"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"weak",
									"strong",
								),
							},
						},
						"relation_type": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; must be one of ["has_many", "has_one"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"has_many",
									"has_one",
								),
							},
						},
						"render_condition": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
								`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
								`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
								`` + "\n" +
								`Requires replacement if changed. `,
						},
						"repeatable": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"required": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(false),
							Description: `Requires replacement if changed. ; Default: false`,
						},
						"reverse_attributes": schema.MapAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Map of schema slug to target relation attribute. Requires replacement if changed. `,
						},
						"search_placeholder": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is. Requires replacement if changed. `,
						},
						"settings_flag": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
									},
									"name": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `The name of the organization setting to check. Requires replacement if changed. `,
									},
								},
							},
							Description: `This attribute should only be active when all the settings have the correct value. Requires replacement if changed. `,
						},
						"show_in_table": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + `. Requires replacement if changed. `,
						},
						"slug": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `URL-friendly identifier for the classification. Requires replacement if changed. `,
						},
						"sortable": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(true),
							Description: `Allow sorting by this attribute in table views if ` + "`" + `show_in_table` + "`" + ` is true. Requires replacement if changed. ; Default: true`,
						},
						"start_number": schema.Int64Attribute{
							Computed: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"suggestions": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"summary_fields": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"str": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
										Validators: []validator.String{
											stringvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("summary_field"),
											}...),
										},
									},
									"summary_field": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"display_as": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `An hint on how to display the summary field. Requires replacement if changed. `,
											},
											"field": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `The field from the entity attributes to display. Requires replacement if changed. `,
											},
										},
										Description: `Summary Fields are displayed inside list view as a resume of the relation entity. Requires replacement if changed. `,
										Validators: []validator.Object{
											objectvalidator.ConflictsWith(path.Expressions{
												path.MatchRelative().AtParent().AtName("str"),
											}...),
										},
									},
								},
								Validators: []validator.Object{
									validators.ExactlyOneChild(),
								},
							},
							Description: `Requires replacement if changed. `,
						},
						"topic": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"type": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; Not Null; must be one of ["address", "automation", "boolean", "checkbox", "computed", "consent", "country", "currency", "date", "datetime", "email", "file", "image", "internal", "internal_user", "invitation_email", "link", "multiselect", "number", "ordered_list", "partner_organisation", "partner_status", "payment", "phone", "price_component", "purpose", "radio", "relation", "relation_address", "relation_payment_method", "relation_user", "select", "sequence", "status", "string", "tags"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"address",
									"automation",
									"boolean",
									"checkbox",
									"computed",
									"consent",
									"country",
									"currency",
									"date",
									"datetime",
									"email",
									"file",
									"image",
									"internal",
									"internal_user",
									"invitation_email",
									"link",
									"multiselect",
									"number",
									"ordered_list",
									"partner_organisation",
									"partner_status",
									"payment",
									"phone",
									"price_component",
									"purpose",
									"radio",
									"relation",
									"relation_address",
									"relation_payment_method",
									"relation_user",
									"select",
									"sequence",
									"status",
									"string",
									"tags",
								),
							},
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"value_formatter": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
					},
				},
				Description: `An ordered list of attributes the entity contains. Requires replacement if changed. `,
			},
			"blueprint": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Reference to blueprint. Requires replacement if changed. `,
			},
			"capabilities": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"attributes": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"purpose": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"actions": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"action_type": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													MarkdownDescription: `The action type. Currently supported actions:` + "\n" +
														`` + "\n" +
														`| action | description |` + "\n" +
														`|--------|-------------|` + "\n" +
														`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
														`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
														`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
														`` + "\n" +
														`Requires replacement if changed. ; must be one of ["add_existing", "create_new", "create_from_existing"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"add_existing",
															"create_new",
															"create_from_existing",
														),
													},
												},
												"default": schema.BoolAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Sets the action as the default action, visible as the main action button. Requires replacement if changed. `,
												},
												"feature_flag": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Name of the feature flag that enables this action. Requires replacement if changed. `,
												},
												"label": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `The action label or action translation key (i18n). Requires replacement if changed. `,
												},
												"new_entity_item": schema.SingleNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Object{
														objectplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"acl": schema.SingleNestedAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.Object{
																objectplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
															},
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"additional_properties": schema.StringAttribute{
																	Computed: true,
																	PlanModifiers: []planmodifier.String{
																		stringplanmodifier.RequiresReplaceIfConfigured(),
																		speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																	},
																	Optional:    true,
																	Description: `Parsed as JSON.`,
																	Validators: []validator.String{
																		validators.IsValidJSON(),
																	},
																},
																"delete": schema.ListAttribute{
																	Computed: true,
																	PlanModifiers: []planmodifier.List{
																		listplanmodifier.RequiresReplaceIfConfigured(),
																		speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
																	},
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `Requires replacement if changed. `,
																},
																"edit": schema.ListAttribute{
																	Computed: true,
																	PlanModifiers: []planmodifier.List{
																		listplanmodifier.RequiresReplaceIfConfigured(),
																		speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
																	},
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `Requires replacement if changed. `,
																},
																"view": schema.ListAttribute{
																	Computed: true,
																	PlanModifiers: []planmodifier.List{
																		listplanmodifier.RequiresReplaceIfConfigured(),
																		speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
																	},
																	Optional:    true,
																	ElementType: types.StringType,
																	Description: `Requires replacement if changed. `,
																},
															},
															Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users. Requires replacement if changed. `,
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"org": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Organization Id the entity belongs to. Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"owners": schema.ListNestedAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.List{
																listplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
															},
															Optional: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"org_id": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `Requires replacement if changed. ; Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																	"user_id": schema.StringAttribute{
																		Computed: true,
																		PlanModifiers: []planmodifier.String{
																			stringplanmodifier.RequiresReplaceIfConfigured(),
																			speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																		},
																		Optional:    true,
																		Description: `Requires replacement if changed. `,
																	},
																},
															},
															Description: `Requires replacement if changed. `,
														},
														"schema": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `URL-friendly identifier for the entity schema. Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"tags": schema.ListAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.List{
																listplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															ElementType: types.StringType,
															Description: `Requires replacement if changed. `,
														},
														"title": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Title of entity. Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																validators.IsRFC3339(),
															},
														},
														"additional_properties": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Parsed as JSON.`,
															Validators: []validator.String{
																validators.IsValidJSON(),
															},
														},
													},
													Description: `Requires replacement if changed. `,
												},
												"settings_flag": schema.ListNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.List{
														listplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"enabled": schema.BoolAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.Bool{
																	boolplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
															},
															"name": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The name of the organization setting to check. Requires replacement if changed. `,
															},
														},
													},
													Description: `This action should only be active when all the settings have the correct value. Requires replacement if changed. `,
												},
											},
										},
										Description: `Requires replacement if changed. `,
									},
									"add_button_label": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is. Requires replacement if changed. `,
									},
									"allow_any": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Allow arbitrary input values in addition to provided options. Requires replacement if changed. `,
									},
									"allow_extra_options": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `controls if the 360 ui will allow the user to enter a value which is not defined by the options. Requires replacement if changed. `,
									},
									"allowed_extensions": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `List of file extensions (without the dot suffix). Requires replacement if changed. `,
									},
									"allowed_schemas": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"constraints": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Optional:   true,
										Attributes: map[string]schema.Attribute{},
										MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
											`These constraints should and will be enforced by the attribute renderer.` + "\n" +
											`` + "\n" +
											`Requires replacement if changed. `,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"currency": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"one": schema.SingleNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Object{
														objectplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"code": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"flag": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. `,
														},
														"symbol": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
													},
													Description: `A currency configuration. Requires replacement if changed. `,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
										},
										Description: `An array of currency configurations with a country code (ISO-4217). Requires replacement if changed. `,
									},
									"currency_selector_only": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Requires replacement if changed. ; Default: false`,
									},
									"default_access_control": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["public-read", "private"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"public-read",
												"private",
											),
										},
									},
									"default_value": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"deprecated": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Requires replacement if changed. ; Default: false`,
									},
									"details_view_mode_enabled": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Enables the preview, edition, and creation of relation items on a Master-Details view mode. Requires replacement if changed. ; Default: false`,
									},
									"disable_case_sensitive": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `controls if the matching of values against the options is case sensitive or not. Requires replacement if changed. `,
									},
									"display_images_landscaped": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Controls how the images are presented to the user during upload on the Entity Details view. Requires replacement if changed. `,
									},
									"drawer_size": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["small", "medium", "large"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"small",
												"medium",
												"large",
											),
										},
									},
									"edit_mode": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["list-view"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"list-view",
											),
										},
									},
									"enable_description": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										MarkdownDescription: `When set to true, an i18n description will be used alongside the attribute label.` + "\n" +
											`This description should be set through the platform locales in the form: ` + "`" + `file.{attribute_name}.description_text` + "`" + `.` + "\n" +
											`` + "\n" +
											`Requires replacement if changed. `,
									},
									"enable_relation_picker": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link. Requires replacement if changed. ; Default: true`,
									},
									"enable_relation_tags": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item. Requires replacement if changed. ; Default: true`,
									},
									"entity_builder_disable_edit": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI. Requires replacement if changed. ; Default: false`,
									},
									"feature_flag": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `This attribute should only be active when the feature flag is enabled. Requires replacement if changed. `,
									},
									"format": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"group": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Which group the attribute should appear in. Accepts group ID or group name. Requires replacement if changed. `,
									},
									"has_primary": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Do not render attribute in entity views. Requires replacement if changed. ; Default: false`,
									},
									"hide_label": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `When set to true, will hide the label of the field. Requires replacement if changed. `,
									},
									"icon": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
											`The value must be a valid @epilot/base-elements Icon name` + "\n" +
											`` + "\n" +
											`Requires replacement if changed. `,
									},
									"id": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"identifiers": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"info_helpers": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"hint_custom_component": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional: true,
												MarkdownDescription: `The name of the custom component to be used as the hint helper.` + "\n" +
													`The component should be registered in the ` + "`" + `@epilot360/entity-ui` + "`" + ` on the index of the components directory.` + "\n" +
													`When specified it overrides the ` + "`" + `hint_text` + "`" + ` or ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
													`` + "\n" +
													`Requires replacement if changed. `,
											},
											"hint_text": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional: true,
												MarkdownDescription: `The text to be displayed in the attribute hint helper.` + "\n" +
													`When specified it overrides the ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
													`` + "\n" +
													`Requires replacement if changed. `,
											},
											"hint_text_key": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional: true,
												MarkdownDescription: `The key of the hint text to be displayed in the attribute hint helper.` + "\n" +
													`The key should be a valid i18n key.` + "\n" +
													`` + "\n" +
													`Requires replacement if changed. `,
											},
											"hint_tooltip_placement": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional: true,
												MarkdownDescription: `The placement of the hint tooltip.` + "\n" +
													`The value should be a valid ` + "`" + `@mui/core` + "`" + ` tooltip placement.` + "\n" +
													`` + "\n" +
													`Requires replacement if changed. `,
											},
										},
										Description: `A set of configurations meant to document and assist the user in filling the attribute. Requires replacement if changed. `,
									},
									"label": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"layout": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"multiline": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"multiple": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"name": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"options": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"order": schema.Int64Attribute{
										Computed: true,
										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Attribute sort order (ascending) in group. Requires replacement if changed. `,
									},
									"parents": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"placeholder": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"prefix": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Prefix added before the sequence number. Requires replacement if changed. `,
									},
									"preview_value_formatter": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"protected": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted. Requires replacement if changed. ; Default: true`,
									},
									"readonly": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Requires replacement if changed. ; Default: false`,
									},
									"relation_affinity_mode": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity. Requires replacement if changed. ; must be one of ["weak", "strong"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"weak",
												"strong",
											),
										},
									},
									"relation_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["has_many", "has_one"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"has_many",
												"has_one",
											),
										},
									},
									"render_condition": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
											`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
											`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
											`` + "\n" +
											`Requires replacement if changed. `,
									},
									"repeatable": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"required": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Requires replacement if changed. ; Default: false`,
									},
									"reverse_attributes": schema.MapAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Map{
											mapplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Map of schema slug to target relation attribute. Requires replacement if changed. `,
									},
									"search_placeholder": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is. Requires replacement if changed. `,
									},
									"settings_flag": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"enabled": schema.BoolAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
												},
												"name": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `The name of the organization setting to check. Requires replacement if changed. `,
												},
											},
										},
										Description: `This attribute should only be active when all the settings have the correct value. Requires replacement if changed. `,
									},
									"show_in_table": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + `. Requires replacement if changed. `,
									},
									"slug": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `URL-friendly identifier for the classification. Requires replacement if changed. `,
									},
									"sortable": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `Allow sorting by this attribute in table views if ` + "`" + `show_in_table` + "`" + ` is true. Requires replacement if changed. ; Default: true`,
									},
									"start_number": schema.Int64Attribute{
										Computed: true,
										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"suggestions": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"summary_fields": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. `,
													Validators: []validator.String{
														stringvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("summary_field"),
														}...),
													},
												},
												"summary_field": schema.SingleNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Object{
														objectplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"display_as": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `An hint on how to display the summary field. Requires replacement if changed. `,
														},
														"field": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `The field from the entity attributes to display. Requires replacement if changed. `,
														},
													},
													Description: `Summary Fields are displayed inside list view as a resume of the relation entity. Requires replacement if changed. `,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("str"),
														}...),
													},
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
										},
										Description: `Requires replacement if changed. `,
									},
									"topic": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; Not Null; must be one of ["address", "automation", "boolean", "checkbox", "computed", "consent", "country", "currency", "date", "datetime", "email", "file", "image", "internal", "internal_user", "invitation_email", "link", "multiselect", "number", "ordered_list", "partner_organisation", "partner_status", "payment", "phone", "price_component", "purpose", "radio", "relation", "relation_address", "relation_payment_method", "relation_user", "select", "sequence", "status", "string", "tags"]`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
											stringvalidator.OneOf(
												"address",
												"automation",
												"boolean",
												"checkbox",
												"computed",
												"consent",
												"country",
												"currency",
												"date",
												"datetime",
												"email",
												"file",
												"image",
												"internal",
												"internal_user",
												"invitation_email",
												"link",
												"multiselect",
												"number",
												"ordered_list",
												"partner_organisation",
												"partner_status",
												"payment",
												"phone",
												"price_component",
												"purpose",
												"radio",
												"relation",
												"relation_address",
												"relation_payment_method",
												"relation_user",
												"select",
												"sequence",
												"status",
												"string",
												"tags",
											),
										},
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"value_formatter": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
								},
							},
							Description: `Requires replacement if changed. `,
						},
						"feature_flag": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `This capability should only be active when the feature flag is enabled. Requires replacement if changed. `,
						},
						"name": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Unique name for the capability. Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"settings_flag": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
									},
									"name": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `The name of the organization setting to check. Requires replacement if changed. `,
									},
								},
							},
							Description: `This capability should only be active when all the settings have the correct value. Requires replacement if changed. `,
						},
						"title": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Human readable title of the capability. Requires replacement if changed. `,
						},
						"ui_hooks": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"component": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `the component to be dynamically loaded. Requires replacement if changed. `,
									},
									"disabled": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Whether capability should be disabled. Requires replacement if changed. `,
									},
									"group_expanded": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Sets the group expand/collapse default state. Requires replacement if changed. `,
									},
									"header": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Specific to Activity pilot. Requires replacement if changed. `,
									},
									"hook": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `name of the hook to use. Requires replacement if changed. ; Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"icon": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Preview icon name(As in Base elements) for the capability. Requires replacement if changed. `,
									},
									"import": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `package to be imported. Requires replacement if changed. `,
									},
									"order": schema.Int64Attribute{
										Computed: true,
										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `render order (ascending). Requires replacement if changed. `,
									},
									"render_condition": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"required_permission": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"action": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. ; Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"resource": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Optional:    true,
												Description: `Requires replacement if changed. `,
											},
										},
										Description: `Require a permission to display UI hook. Requires replacement if changed. `,
									},
									"route": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `route for specified capability. Requires replacement if changed. `,
									},
									"title": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
								},
							},
							Description: `Requires replacement if changed. `,
						},
					},
				},
				Description: `Requires replacement if changed. `,
			},
			"comment": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"dialog_config": schema.MapAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				ElementType: types.StringType,
				Description: `Requires replacement if changed. `,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"draft": schema.BoolAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Requires replacement if changed. ; Default: false`,
			},
			"enable_setting": schema.ListAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				ElementType: types.StringType,
				Description: `This schema should only be active when one of the organization settings is enabled. Requires replacement if changed. `,
			},
			"explicit_search_mappings": schema.MapNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"fields": schema.MapAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"index": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     booldefault.StaticBool(true),
							Description: `Requires replacement if changed. ; Default: true`,
						},
						"type": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; must be one of ["keyword", "text", "boolean", "integer", "long", "float", "date", "flattened", "nested"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"keyword",
									"text",
									"boolean",
									"integer",
									"long",
									"float",
									"date",
									"flattened",
									"nested",
								),
							},
						},
					},
				},
				MarkdownDescription: `Advanced: explicit Elasticsearch index mapping definitions for entity data` + "\n" +
					`` + "\n" +
					`Requires replacement if changed. `,
			},
			"feature_flag": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `This schema should only be active when the feature flag is enabled. Requires replacement if changed. `,
			},
			"group_settings": schema.ListNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							ElementType: types.StringType,
							Description: `Requires replacement if changed. `,
						},
						"expanded": schema.BoolAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"feature_flag": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `This group should only be active when the feature flag is enabled. Requires replacement if changed. `,
						},
						"id": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"info_tooltip_title": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"default": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional:    true,
									Description: `Requires replacement if changed. `,
								},
								"key": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Optional:    true,
									Description: `Requires replacement if changed. `,
								},
							},
							Description: `Requires replacement if changed. `,
						},
						"label": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. ; Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"order": schema.Int64Attribute{
							Computed: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Default:     int64default.StaticInt64(0),
							Description: `Render order of the group. Requires replacement if changed. ; Default: 0`,
						},
						"render_condition": schema.StringAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Optional:    true,
							Description: `Requires replacement if changed. `,
						},
						"settings_flag": schema.ListNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
									},
									"name": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `The name of the organization setting to check. Requires replacement if changed. `,
									},
								},
							},
							Description: `This group should only be active when all the settings have the correct value. Requires replacement if changed. `,
						},
					},
				},
				Description: `A dictionary of Group Titles and associated settings if present. Requires replacement if changed. `,
			},
			"icon": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Generated uuid for schema. Requires replacement if changed. `,
			},
			"layout_settings": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Optional:    true,
						Description: `Parsed as JSON.`,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
					},
					"grid_gap": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Optional:    true,
						Description: `Defines the grid gap for the mounting node of the attribute. Requires replacement if changed. `,
					},
					"grid_template_columns": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Optional:    true,
						Description: `Defines the grid column template for the mounting node of the attribute. Requires replacement if changed. `,
					},
				},
				MarkdownDescription: `Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:` + "\n" +
					`- Managed Properties: are interpreted and transformed into layout styles` + "\n" +
					`- Un-managed Properties: are appended as styles into the attribute mounting node` + "\n" +
					`` + "\n" +
					`Requires replacement if changed. `,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `User-friendly identifier for the entity schema. Requires replacement if changed. `,
			},
			"plural": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"published": schema.BoolAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"slug": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `Entity Type. Requires replacement if changed. `,
			},
			"source": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Optional:    true,
						Description: `Requires replacement if changed. `,
					},
					"type": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Optional:    true,
						Description: `Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
			},
			"title_template": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Template for rendering the title field. Uses handlebars. Requires replacement if changed. `,
			},
			"ui_config": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"create_view": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"default": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Map{
											mapplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["default"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("disabled"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"disabled": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["disabled"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"redirect": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["redirect"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("disabled"),
									}...),
								},
							},
						},
						Description: `Requires replacement if changed. `,
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"edit_view": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"default": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Map{
											mapplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"summary_attributes": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `List of attribute names that we show in the summary header. Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["default"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("disabled"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"disabled": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["disabled"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"redirect": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["redirect"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("disabled"),
									}...),
								},
							},
						},
						Description: `Requires replacement if changed. `,
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"list_item": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"quick_actions": schema.ListNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"action": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `A unique action name. Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"icon": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `Requires replacement if changed. `,
										},
										"label": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `Requires replacement if changed. ; Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"permission": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											MarkdownDescription: `Permission required to show the action.` + "\n" +
												`If not provided, the action will be shown to all users.` + "\n" +
												`` + "\n" +
												`Requires replacement if changed. `,
										},
									},
								},
								Description: `Requires replacement if changed. `,
							},
							"summary_attributes": schema.ListNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
											},
											Optional:    true,
											Description: `Requires replacement if changed. `,
											Validators: []validator.String{
												stringvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("summary_attribute"),
												}...),
											},
										},
										"summary_attribute": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"feature_flag": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Binds summary field visibility to the feature flag state. Requires replacement if changed. `,
												},
												"label": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Label to be shown on the top of the value. Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
												"render_condition": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
														`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
														`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
														`` + "\n" +
														`Requires replacement if changed. `,
												},
												"settings_flag": schema.ListNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.List{
														listplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"enabled": schema.BoolAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.Bool{
																	boolplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `Whether the setting should be enabled or not. Requires replacement if changed. `,
															},
															"name": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `The name of the organization setting to check. Requires replacement if changed. `,
															},
														},
													},
													Description: `This summary attribute should only be visible when all the settings have the correct value. Requires replacement if changed. `,
												},
												"show_as_tag": schema.BoolAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Displays the value within a tag chip. Requires replacement if changed. `,
												},
												"tag_color": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `CSS hex color or CSS color name for the tag chip. Requires replacement if changed. `,
												},
												"value": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `A static value or an handlebar expression. Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
											},
											MarkdownDescription: `Represents an expanded version of an attribute to be displayed in the list item summary.` + "\n" +
												`This configuration can be used in the following way:` + "\n" +
												`` + "```" + `js` + "\n" +
												`{` + "\n" +
												`  "label": "Price components"` + "\n" +
												`  "value": "{{"{{"}}item.prices.length{{"}}"}} price components"` + "\n" +
												`  "show_as_tag": true` + "\n" +
												`  "render_condition": "is_composite_price = "true""` + "\n" +
												`}` + "\n" +
												`` + "```" + `` + "\n" +
												`The value field supports handlebar expressions from which you can pick any field from the entity state.` + "\n" +
												`` + "\n" +
												`Requires replacement if changed. `,
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("str"),
												}...),
											},
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
								Description: `Requires replacement if changed. `,
							},
						},
						Description: `Requires replacement if changed. `,
					},
					"sharing": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"show_sharing_button": schema.BoolAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `Show the sharing button in entity detail view. Requires replacement if changed. `,
							},
						},
						Description: `Requires replacement if changed. `,
					},
					"single_view": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"default": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Map{
											mapplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `Requires replacement if changed. `,
									},
									"summary_attributes": schema.ListAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										ElementType: types.StringType,
										Description: `List of attribute names that we show in the summary header. Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["default"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("disabled"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"disabled": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["disabled"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"redirect": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["redirect"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("disabled"),
									}...),
								},
							},
						},
						Description: `Requires replacement if changed. `,
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"table_view": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"default": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"bulk_actions": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. `,
													Validators: []validator.String{
														stringvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("entity_action"),
														}...),
													},
												},
												"entity_action": schema.SingleNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Object{
														objectplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"action": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `A unique action name. Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"icon": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. `,
														},
														"label": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"permission": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional: true,
															MarkdownDescription: `Permission required to show the action.` + "\n" +
																`If not provided, the action will be shown to all users.` + "\n" +
																`` + "\n" +
																`Requires replacement if changed. `,
														},
													},
													Description: `An entity action configured from the entity schema. Requires replacement if changed. `,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("str"),
														}...),
													},
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
										},
										Description: `Requires replacement if changed. `,
									},
									"enable_thumbnails": schema.BoolAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `Enable the thumbnail column. Requires replacement if changed. ; Default: false`,
									},
									"navbar_actions": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"options": schema.ListNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.List{
														listplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"label": schema.StringAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.String{
																	stringplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Description: `Requires replacement if changed. ; Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"params": schema.SingleNestedAttribute{
																Computed: true,
																PlanModifiers: []planmodifier.Object{
																	objectplanmodifier.RequiresReplaceIfConfigured(),
																	speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
																},
																Optional:    true,
																Attributes:  map[string]schema.Attribute{},
																Description: `Requires replacement if changed. `,
															},
														},
													},
													Description: `Requires replacement if changed. `,
												},
												"type": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. ; Not Null`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
													},
												},
											},
										},
										Description: `Requires replacement if changed. `,
									},
									"row_actions": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Optional:    true,
													Description: `Requires replacement if changed. `,
													Validators: []validator.String{
														stringvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("entity_action"),
														}...),
													},
												},
												"entity_action": schema.SingleNestedAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Object{
														objectplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
													},
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"action": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `A unique action name. Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"icon": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. `,
														},
														"label": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional:    true,
															Description: `Requires replacement if changed. ; Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"permission": schema.StringAttribute{
															Computed: true,
															PlanModifiers: []planmodifier.String{
																stringplanmodifier.RequiresReplaceIfConfigured(),
																speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
															},
															Optional: true,
															MarkdownDescription: `Permission required to show the action.` + "\n" +
																`If not provided, the action will be shown to all users.` + "\n" +
																`` + "\n" +
																`Requires replacement if changed. `,
														},
													},
													Description: `An entity action configured from the entity schema. Requires replacement if changed. `,
													Validators: []validator.Object{
														objectvalidator.ConflictsWith(path.Expressions{
															path.MatchRelative().AtParent().AtName("str"),
														}...),
													},
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
										},
										Description: `Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["default"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("disabled"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"disabled": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["disabled"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("redirect"),
									}...),
								},
							},
							"redirect": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. `,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Optional:    true,
										Description: `Requires replacement if changed. ; must be one of ["redirect"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
								Description: `Requires replacement if changed. `,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("default"),
										path.MatchRelative().AtParent().AtName("disabled"),
									}...),
								},
							},
						},
						Description: `Requires replacement if changed. `,
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
				},
				Description: `Requires replacement if changed. `,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"version": schema.Int64Attribute{
				Computed: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
					speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
		},
	}
}

func (r *SchemaResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SchemaResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	slug := data.Slug.ValueString()
	draft := new(bool)
	if !data.Draft.IsUnknown() && !data.Draft.IsNull() {
		*draft = data.Draft.ValueBool()
	} else {
		draft = nil
	}
	entitySchemaItem := data.ToSharedEntitySchemaItem()
	request := operations.PutSchemaRequest{
		Slug:             slug,
		Draft:            draft,
		EntitySchemaItem: entitySchemaItem,
	}
	res, err := r.client.Schemas.PutSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.EntitySchemaItem == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEntitySchemaItem(res.EntitySchemaItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	slug := data.Slug.ValueString()
	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	request := operations.GetSchemaRequest{
		Slug: slug,
		ID:   id,
	}
	res, err := r.client.Schemas.GetSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.EntitySchemaItem == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedEntitySchemaItem(res.EntitySchemaItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SchemaResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	slug := data.Slug.ValueString()
	request := operations.DeleteSchemaRequest{
		Slug: slug,
	}
	res, err := r.client.Schemas.DeleteSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SchemaResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("slug"), req.ID)...)
}
