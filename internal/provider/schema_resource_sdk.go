// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SchemaResourceModel) ToSharedEntitySchemaItem() *shared.EntitySchemaItem {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	createdAt := new(string)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueString()
	} else {
		createdAt = nil
	}
	updatedAt := new(string)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueString()
	} else {
		updatedAt = nil
	}
	var slug string
	slug = r.Slug.ValueString()

	version := new(int64)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueInt64()
	} else {
		version = nil
	}
	blueprint := new(string)
	if !r.Blueprint.IsUnknown() && !r.Blueprint.IsNull() {
		*blueprint = r.Blueprint.ValueString()
	} else {
		blueprint = nil
	}
	featureFlag := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag = r.FeatureFlag.ValueString()
	} else {
		featureFlag = nil
	}
	var enableSetting []string = []string{}
	for _, enableSettingItem := range r.EnableSetting {
		enableSetting = append(enableSetting, enableSettingItem.ValueString())
	}
	var name string
	name = r.Name.ValueString()

	var plural string
	plural = r.Plural.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	docsURL := new(string)
	if !r.DocsURL.IsUnknown() && !r.DocsURL.IsNull() {
		*docsURL = r.DocsURL.ValueString()
	} else {
		docsURL = nil
	}
	category := new(shared.Category)
	if !r.Category.IsUnknown() && !r.Category.IsNull() {
		*category = shared.Category(r.Category.ValueString())
	} else {
		category = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	draft := new(bool)
	if !r.Draft.IsUnknown() && !r.Draft.IsNull() {
		*draft = r.Draft.ValueBool()
	} else {
		draft = nil
	}
	icon := new(string)
	if !r.Icon.IsUnknown() && !r.Icon.IsNull() {
		*icon = r.Icon.ValueString()
	} else {
		icon = nil
	}
	titleTemplate := new(string)
	if !r.TitleTemplate.IsUnknown() && !r.TitleTemplate.IsNull() {
		*titleTemplate = r.TitleTemplate.ValueString()
	} else {
		titleTemplate = nil
	}
	var uiConfig *shared.UIConfig
	if r.UIConfig != nil {
		var tableView *shared.TableView
		if r.UIConfig.TableView != nil {
			var entityDefaultTable *shared.EntityDefaultTable
			if r.UIConfig.TableView.EntityDefaultTable != nil {
				viewType := new(shared.ViewType)
				if !r.UIConfig.TableView.EntityDefaultTable.ViewType.IsUnknown() && !r.UIConfig.TableView.EntityDefaultTable.ViewType.IsNull() {
					*viewType = shared.ViewType(r.UIConfig.TableView.EntityDefaultTable.ViewType.ValueString())
				} else {
					viewType = nil
				}
				var rowActions []shared.RowActions = []shared.RowActions{}
				for _, rowActionsItem := range r.UIConfig.TableView.EntityDefaultTable.RowActions {
					if !rowActionsItem.Str.IsUnknown() && !rowActionsItem.Str.IsNull() {
						var str string
						str = rowActionsItem.Str.ValueString()

						rowActions = append(rowActions, shared.RowActions{
							Str: &str,
						})
					}
					if rowActionsItem.EntityAction != nil {
						var action string
						action = rowActionsItem.EntityAction.Action.ValueString()

						var label string
						label = rowActionsItem.EntityAction.Label.ValueString()

						icon1 := new(string)
						if !rowActionsItem.EntityAction.Icon.IsUnknown() && !rowActionsItem.EntityAction.Icon.IsNull() {
							*icon1 = rowActionsItem.EntityAction.Icon.ValueString()
						} else {
							icon1 = nil
						}
						permission := new(string)
						if !rowActionsItem.EntityAction.Permission.IsUnknown() && !rowActionsItem.EntityAction.Permission.IsNull() {
							*permission = rowActionsItem.EntityAction.Permission.ValueString()
						} else {
							permission = nil
						}
						entityAction := shared.EntityAction{
							Action:     action,
							Label:      label,
							Icon:       icon1,
							Permission: permission,
						}
						rowActions = append(rowActions, shared.RowActions{
							EntityAction: &entityAction,
						})
					}
				}
				var bulkActions []shared.BulkActions = []shared.BulkActions{}
				for _, bulkActionsItem := range r.UIConfig.TableView.EntityDefaultTable.BulkActions {
					if !bulkActionsItem.Str.IsUnknown() && !bulkActionsItem.Str.IsNull() {
						var str1 string
						str1 = bulkActionsItem.Str.ValueString()

						bulkActions = append(bulkActions, shared.BulkActions{
							Str: &str1,
						})
					}
					if bulkActionsItem.EntityAction != nil {
						var action1 string
						action1 = bulkActionsItem.EntityAction.Action.ValueString()

						var label1 string
						label1 = bulkActionsItem.EntityAction.Label.ValueString()

						icon2 := new(string)
						if !bulkActionsItem.EntityAction.Icon.IsUnknown() && !bulkActionsItem.EntityAction.Icon.IsNull() {
							*icon2 = bulkActionsItem.EntityAction.Icon.ValueString()
						} else {
							icon2 = nil
						}
						permission1 := new(string)
						if !bulkActionsItem.EntityAction.Permission.IsUnknown() && !bulkActionsItem.EntityAction.Permission.IsNull() {
							*permission1 = bulkActionsItem.EntityAction.Permission.ValueString()
						} else {
							permission1 = nil
						}
						entityAction1 := shared.EntityAction{
							Action:     action1,
							Label:      label1,
							Icon:       icon2,
							Permission: permission1,
						}
						bulkActions = append(bulkActions, shared.BulkActions{
							EntityAction: &entityAction1,
						})
					}
				}
				var navbarActions []shared.NavbarActions = []shared.NavbarActions{}
				for _, navbarActionsItem := range r.UIConfig.TableView.EntityDefaultTable.NavbarActions {
					var typeVar string
					typeVar = navbarActionsItem.Type.ValueString()

					var optionsVar []shared.EntityDefaultTableOptions = []shared.EntityDefaultTableOptions{}
					for _, optionsItem := range navbarActionsItem.Options {
						var label2 string
						label2 = optionsItem.Label.ValueString()

						var params *shared.EntityDefaultTableParams
						if optionsItem.Params != nil {
							params = &shared.EntityDefaultTableParams{}
						}
						optionsVar = append(optionsVar, shared.EntityDefaultTableOptions{
							Label:  label2,
							Params: params,
						})
					}
					navbarActions = append(navbarActions, shared.NavbarActions{
						Type:    typeVar,
						Options: optionsVar,
					})
				}
				enableThumbnails := new(bool)
				if !r.UIConfig.TableView.EntityDefaultTable.EnableThumbnails.IsUnknown() && !r.UIConfig.TableView.EntityDefaultTable.EnableThumbnails.IsNull() {
					*enableThumbnails = r.UIConfig.TableView.EntityDefaultTable.EnableThumbnails.ValueBool()
				} else {
					enableThumbnails = nil
				}
				entityDefaultTable = &shared.EntityDefaultTable{
					ViewType:         viewType,
					RowActions:       rowActions,
					BulkActions:      bulkActions,
					NavbarActions:    navbarActions,
					EnableThumbnails: enableThumbnails,
				}
			}
			if entityDefaultTable != nil {
				tableView = &shared.TableView{
					EntityDefaultTable: entityDefaultTable,
				}
			}
			var redirectEntityView *shared.RedirectEntityView
			if r.UIConfig.TableView.RedirectEntityView != nil {
				viewType1 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.TableView.RedirectEntityView.ViewType.IsUnknown() && !r.UIConfig.TableView.RedirectEntityView.ViewType.IsNull() {
					*viewType1 = shared.RedirectEntityViewViewType(r.UIConfig.TableView.RedirectEntityView.ViewType.ValueString())
				} else {
					viewType1 = nil
				}
				route := new(string)
				if !r.UIConfig.TableView.RedirectEntityView.Route.IsUnknown() && !r.UIConfig.TableView.RedirectEntityView.Route.IsNull() {
					*route = r.UIConfig.TableView.RedirectEntityView.Route.ValueString()
				} else {
					route = nil
				}
				redirectEntityView = &shared.RedirectEntityView{
					ViewType: viewType1,
					Route:    route,
				}
			}
			if redirectEntityView != nil {
				tableView = &shared.TableView{
					RedirectEntityView: redirectEntityView,
				}
			}
			var entityViewDisabled *shared.EntityViewDisabled
			if r.UIConfig.TableView.EntityViewDisabled != nil {
				viewType2 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.TableView.EntityViewDisabled.ViewType.IsUnknown() && !r.UIConfig.TableView.EntityViewDisabled.ViewType.IsNull() {
					*viewType2 = shared.EntityViewDisabledViewType(r.UIConfig.TableView.EntityViewDisabled.ViewType.ValueString())
				} else {
					viewType2 = nil
				}
				entityViewDisabled = &shared.EntityViewDisabled{
					ViewType: viewType2,
				}
			}
			if entityViewDisabled != nil {
				tableView = &shared.TableView{
					EntityViewDisabled: entityViewDisabled,
				}
			}
		}
		var createView *shared.CreateView
		if r.UIConfig.CreateView != nil {
			var entityDefaultCreate *shared.EntityDefaultCreate
			if r.UIConfig.CreateView.EntityDefaultCreate != nil {
				viewType3 := new(shared.EntityDefaultCreateViewType)
				if !r.UIConfig.CreateView.EntityDefaultCreate.ViewType.IsUnknown() && !r.UIConfig.CreateView.EntityDefaultCreate.ViewType.IsNull() {
					*viewType3 = shared.EntityDefaultCreateViewType(r.UIConfig.CreateView.EntityDefaultCreate.ViewType.ValueString())
				} else {
					viewType3 = nil
				}
				searchParams := make(map[string]string)
				for searchParamsKey, searchParamsValue := range r.UIConfig.CreateView.EntityDefaultCreate.SearchParams {
					var searchParamsInst string
					searchParamsInst = searchParamsValue.ValueString()

					searchParams[searchParamsKey] = searchParamsInst
				}
				entityDefaultCreate = &shared.EntityDefaultCreate{
					ViewType:     viewType3,
					SearchParams: searchParams,
				}
			}
			if entityDefaultCreate != nil {
				createView = &shared.CreateView{
					EntityDefaultCreate: entityDefaultCreate,
				}
			}
			var redirectEntityView1 *shared.RedirectEntityView
			if r.UIConfig.CreateView.RedirectEntityView != nil {
				viewType4 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.CreateView.RedirectEntityView.ViewType.IsUnknown() && !r.UIConfig.CreateView.RedirectEntityView.ViewType.IsNull() {
					*viewType4 = shared.RedirectEntityViewViewType(r.UIConfig.CreateView.RedirectEntityView.ViewType.ValueString())
				} else {
					viewType4 = nil
				}
				route1 := new(string)
				if !r.UIConfig.CreateView.RedirectEntityView.Route.IsUnknown() && !r.UIConfig.CreateView.RedirectEntityView.Route.IsNull() {
					*route1 = r.UIConfig.CreateView.RedirectEntityView.Route.ValueString()
				} else {
					route1 = nil
				}
				redirectEntityView1 = &shared.RedirectEntityView{
					ViewType: viewType4,
					Route:    route1,
				}
			}
			if redirectEntityView1 != nil {
				createView = &shared.CreateView{
					RedirectEntityView: redirectEntityView1,
				}
			}
			var entityViewDisabled1 *shared.EntityViewDisabled
			if r.UIConfig.CreateView.EntityViewDisabled != nil {
				viewType5 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.CreateView.EntityViewDisabled.ViewType.IsUnknown() && !r.UIConfig.CreateView.EntityViewDisabled.ViewType.IsNull() {
					*viewType5 = shared.EntityViewDisabledViewType(r.UIConfig.CreateView.EntityViewDisabled.ViewType.ValueString())
				} else {
					viewType5 = nil
				}
				entityViewDisabled1 = &shared.EntityViewDisabled{
					ViewType: viewType5,
				}
			}
			if entityViewDisabled1 != nil {
				createView = &shared.CreateView{
					EntityViewDisabled: entityViewDisabled1,
				}
			}
		}
		var editView *shared.EditView
		if r.UIConfig.EditView != nil {
			var entityDefaultEdit *shared.EntityDefaultEdit
			if r.UIConfig.EditView.EntityDefaultEdit != nil {
				viewType6 := new(shared.EntityDefaultEditViewType)
				if !r.UIConfig.EditView.EntityDefaultEdit.ViewType.IsUnknown() && !r.UIConfig.EditView.EntityDefaultEdit.ViewType.IsNull() {
					*viewType6 = shared.EntityDefaultEditViewType(r.UIConfig.EditView.EntityDefaultEdit.ViewType.ValueString())
				} else {
					viewType6 = nil
				}
				searchParams1 := make(map[string]string)
				for searchParamsKey1, searchParamsValue1 := range r.UIConfig.EditView.EntityDefaultEdit.SearchParams {
					var searchParamsInst1 string
					searchParamsInst1 = searchParamsValue1.ValueString()

					searchParams1[searchParamsKey1] = searchParamsInst1
				}
				var summaryAttributes []string = []string{}
				for _, summaryAttributesItem := range r.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes {
					summaryAttributes = append(summaryAttributes, summaryAttributesItem.ValueString())
				}
				entityDefaultEdit = &shared.EntityDefaultEdit{
					ViewType:          viewType6,
					SearchParams:      searchParams1,
					SummaryAttributes: summaryAttributes,
				}
			}
			if entityDefaultEdit != nil {
				editView = &shared.EditView{
					EntityDefaultEdit: entityDefaultEdit,
				}
			}
			var redirectEntityView2 *shared.RedirectEntityView
			if r.UIConfig.EditView.RedirectEntityView != nil {
				viewType7 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.EditView.RedirectEntityView.ViewType.IsUnknown() && !r.UIConfig.EditView.RedirectEntityView.ViewType.IsNull() {
					*viewType7 = shared.RedirectEntityViewViewType(r.UIConfig.EditView.RedirectEntityView.ViewType.ValueString())
				} else {
					viewType7 = nil
				}
				route2 := new(string)
				if !r.UIConfig.EditView.RedirectEntityView.Route.IsUnknown() && !r.UIConfig.EditView.RedirectEntityView.Route.IsNull() {
					*route2 = r.UIConfig.EditView.RedirectEntityView.Route.ValueString()
				} else {
					route2 = nil
				}
				redirectEntityView2 = &shared.RedirectEntityView{
					ViewType: viewType7,
					Route:    route2,
				}
			}
			if redirectEntityView2 != nil {
				editView = &shared.EditView{
					RedirectEntityView: redirectEntityView2,
				}
			}
			var entityViewDisabled2 *shared.EntityViewDisabled
			if r.UIConfig.EditView.EntityViewDisabled != nil {
				viewType8 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.EditView.EntityViewDisabled.ViewType.IsUnknown() && !r.UIConfig.EditView.EntityViewDisabled.ViewType.IsNull() {
					*viewType8 = shared.EntityViewDisabledViewType(r.UIConfig.EditView.EntityViewDisabled.ViewType.ValueString())
				} else {
					viewType8 = nil
				}
				entityViewDisabled2 = &shared.EntityViewDisabled{
					ViewType: viewType8,
				}
			}
			if entityViewDisabled2 != nil {
				editView = &shared.EditView{
					EntityViewDisabled: entityViewDisabled2,
				}
			}
		}
		var singleView *shared.SingleView
		if r.UIConfig.SingleView != nil {
			var entityDefaultEdit1 *shared.EntityDefaultEdit
			if r.UIConfig.SingleView.EntityDefaultEdit != nil {
				viewType9 := new(shared.EntityDefaultEditViewType)
				if !r.UIConfig.SingleView.EntityDefaultEdit.ViewType.IsUnknown() && !r.UIConfig.SingleView.EntityDefaultEdit.ViewType.IsNull() {
					*viewType9 = shared.EntityDefaultEditViewType(r.UIConfig.SingleView.EntityDefaultEdit.ViewType.ValueString())
				} else {
					viewType9 = nil
				}
				searchParams2 := make(map[string]string)
				for searchParamsKey2, searchParamsValue2 := range r.UIConfig.SingleView.EntityDefaultEdit.SearchParams {
					var searchParamsInst2 string
					searchParamsInst2 = searchParamsValue2.ValueString()

					searchParams2[searchParamsKey2] = searchParamsInst2
				}
				var summaryAttributes1 []string = []string{}
				for _, summaryAttributesItem1 := range r.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes {
					summaryAttributes1 = append(summaryAttributes1, summaryAttributesItem1.ValueString())
				}
				entityDefaultEdit1 = &shared.EntityDefaultEdit{
					ViewType:          viewType9,
					SearchParams:      searchParams2,
					SummaryAttributes: summaryAttributes1,
				}
			}
			if entityDefaultEdit1 != nil {
				singleView = &shared.SingleView{
					EntityDefaultEdit: entityDefaultEdit1,
				}
			}
			var redirectEntityView3 *shared.RedirectEntityView
			if r.UIConfig.SingleView.RedirectEntityView != nil {
				viewType10 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.SingleView.RedirectEntityView.ViewType.IsUnknown() && !r.UIConfig.SingleView.RedirectEntityView.ViewType.IsNull() {
					*viewType10 = shared.RedirectEntityViewViewType(r.UIConfig.SingleView.RedirectEntityView.ViewType.ValueString())
				} else {
					viewType10 = nil
				}
				route3 := new(string)
				if !r.UIConfig.SingleView.RedirectEntityView.Route.IsUnknown() && !r.UIConfig.SingleView.RedirectEntityView.Route.IsNull() {
					*route3 = r.UIConfig.SingleView.RedirectEntityView.Route.ValueString()
				} else {
					route3 = nil
				}
				redirectEntityView3 = &shared.RedirectEntityView{
					ViewType: viewType10,
					Route:    route3,
				}
			}
			if redirectEntityView3 != nil {
				singleView = &shared.SingleView{
					RedirectEntityView: redirectEntityView3,
				}
			}
			var entityViewDisabled3 *shared.EntityViewDisabled
			if r.UIConfig.SingleView.EntityViewDisabled != nil {
				viewType11 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.SingleView.EntityViewDisabled.ViewType.IsUnknown() && !r.UIConfig.SingleView.EntityViewDisabled.ViewType.IsNull() {
					*viewType11 = shared.EntityViewDisabledViewType(r.UIConfig.SingleView.EntityViewDisabled.ViewType.ValueString())
				} else {
					viewType11 = nil
				}
				entityViewDisabled3 = &shared.EntityViewDisabled{
					ViewType: viewType11,
				}
			}
			if entityViewDisabled3 != nil {
				singleView = &shared.SingleView{
					EntityViewDisabled: entityViewDisabled3,
				}
			}
		}
		var listItem *shared.ListItem
		if r.UIConfig.ListItem != nil {
			var summaryAttributes2 []shared.SummaryAttributes = []shared.SummaryAttributes{}
			for _, summaryAttributesItem2 := range r.UIConfig.ListItem.SummaryAttributes {
				if summaryAttributesItem2.SummaryAttribute != nil {
					var label3 string
					label3 = summaryAttributesItem2.SummaryAttribute.Label.ValueString()

					var value string
					value = summaryAttributesItem2.SummaryAttribute.Value.ValueString()

					showAsTag := new(bool)
					if !summaryAttributesItem2.SummaryAttribute.ShowAsTag.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.ShowAsTag.IsNull() {
						*showAsTag = summaryAttributesItem2.SummaryAttribute.ShowAsTag.ValueBool()
					} else {
						showAsTag = nil
					}
					tagColor := new(string)
					if !summaryAttributesItem2.SummaryAttribute.TagColor.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.TagColor.IsNull() {
						*tagColor = summaryAttributesItem2.SummaryAttribute.TagColor.ValueString()
					} else {
						tagColor = nil
					}
					renderCondition := new(string)
					if !summaryAttributesItem2.SummaryAttribute.RenderCondition.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.RenderCondition.IsNull() {
						*renderCondition = summaryAttributesItem2.SummaryAttribute.RenderCondition.ValueString()
					} else {
						renderCondition = nil
					}
					featureFlag1 := new(string)
					if !summaryAttributesItem2.SummaryAttribute.FeatureFlag.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.FeatureFlag.IsNull() {
						*featureFlag1 = summaryAttributesItem2.SummaryAttribute.FeatureFlag.ValueString()
					} else {
						featureFlag1 = nil
					}
					var settingsFlag []shared.SettingFlag = []shared.SettingFlag{}
					for _, settingsFlagItem := range summaryAttributesItem2.SummaryAttribute.SettingsFlag {
						name1 := new(string)
						if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
							*name1 = settingsFlagItem.Name.ValueString()
						} else {
							name1 = nil
						}
						enabled := new(bool)
						if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
							*enabled = settingsFlagItem.Enabled.ValueBool()
						} else {
							enabled = nil
						}
						settingsFlag = append(settingsFlag, shared.SettingFlag{
							Name:    name1,
							Enabled: enabled,
						})
					}
					summaryAttribute := shared.SummaryAttribute{
						Label:           label3,
						Value:           value,
						ShowAsTag:       showAsTag,
						TagColor:        tagColor,
						RenderCondition: renderCondition,
						FeatureFlag:     featureFlag1,
						SettingsFlag:    settingsFlag,
					}
					summaryAttributes2 = append(summaryAttributes2, shared.SummaryAttributes{
						SummaryAttribute: &summaryAttribute,
					})
				}
				if !summaryAttributesItem2.Str.IsUnknown() && !summaryAttributesItem2.Str.IsNull() {
					var str2 string
					str2 = summaryAttributesItem2.Str.ValueString()

					summaryAttributes2 = append(summaryAttributes2, shared.SummaryAttributes{
						Str: &str2,
					})
				}
			}
			var quickActions []shared.EntityAction = []shared.EntityAction{}
			for _, quickActionsItem := range r.UIConfig.ListItem.QuickActions {
				var action2 string
				action2 = quickActionsItem.Action.ValueString()

				var label4 string
				label4 = quickActionsItem.Label.ValueString()

				icon3 := new(string)
				if !quickActionsItem.Icon.IsUnknown() && !quickActionsItem.Icon.IsNull() {
					*icon3 = quickActionsItem.Icon.ValueString()
				} else {
					icon3 = nil
				}
				permission2 := new(string)
				if !quickActionsItem.Permission.IsUnknown() && !quickActionsItem.Permission.IsNull() {
					*permission2 = quickActionsItem.Permission.ValueString()
				} else {
					permission2 = nil
				}
				quickActions = append(quickActions, shared.EntityAction{
					Action:     action2,
					Label:      label4,
					Icon:       icon3,
					Permission: permission2,
				})
			}
			listItem = &shared.ListItem{
				SummaryAttributes: summaryAttributes2,
				QuickActions:      quickActions,
			}
		}
		var sharing *shared.Sharing
		if r.UIConfig.Sharing != nil {
			showSharingButton := new(bool)
			if !r.UIConfig.Sharing.ShowSharingButton.IsUnknown() && !r.UIConfig.Sharing.ShowSharingButton.IsNull() {
				*showSharingButton = r.UIConfig.Sharing.ShowSharingButton.ValueBool()
			} else {
				showSharingButton = nil
			}
			sharing = &shared.Sharing{
				ShowSharingButton: showSharingButton,
			}
		}
		uiConfig = &shared.UIConfig{
			TableView:  tableView,
			CreateView: createView,
			EditView:   editView,
			SingleView: singleView,
			ListItem:   listItem,
			Sharing:    sharing,
		}
	}
	var layoutSettings *shared.LayoutSettings
	if r.LayoutSettings != nil {
		gridGap := new(string)
		if !r.LayoutSettings.GridGap.IsUnknown() && !r.LayoutSettings.GridGap.IsNull() {
			*gridGap = r.LayoutSettings.GridGap.ValueString()
		} else {
			gridGap = nil
		}
		gridTemplateColumns := new(string)
		if !r.LayoutSettings.GridTemplateColumns.IsUnknown() && !r.LayoutSettings.GridTemplateColumns.IsNull() {
			*gridTemplateColumns = r.LayoutSettings.GridTemplateColumns.ValueString()
		} else {
			gridTemplateColumns = nil
		}
		var additionalProperties interface{}
		if !r.LayoutSettings.AdditionalProperties.IsUnknown() && !r.LayoutSettings.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.LayoutSettings.AdditionalProperties.ValueString()), &additionalProperties)
		}
		layoutSettings = &shared.LayoutSettings{
			GridGap:              gridGap,
			GridTemplateColumns:  gridTemplateColumns,
			AdditionalProperties: additionalProperties,
		}
	}
	dialogConfig := make(map[string]interface{})
	for dialogConfigKey, dialogConfigValue := range r.DialogConfig {
		var dialogConfigInst interface{}
		_ = json.Unmarshal([]byte(dialogConfigValue.ValueString()), &dialogConfigInst)
		dialogConfig[dialogConfigKey] = dialogConfigInst
	}
	var purpose []string = []string{}
	for _, purposeItem := range r.Purpose {
		purpose = append(purpose, purposeItem.ValueString())
	}
	explicitSearchMappings := make(map[string]shared.SearchMappings)
	for explicitSearchMappingsKey, explicitSearchMappingsValue := range r.ExplicitSearchMappings {
		index := new(bool)
		if !explicitSearchMappingsValue.Index.IsUnknown() && !explicitSearchMappingsValue.Index.IsNull() {
			*index = explicitSearchMappingsValue.Index.ValueBool()
		} else {
			index = nil
		}
		typeVar1 := new(shared.Type)
		if !explicitSearchMappingsValue.Type.IsUnknown() && !explicitSearchMappingsValue.Type.IsNull() {
			*typeVar1 = shared.Type(explicitSearchMappingsValue.Type.ValueString())
		} else {
			typeVar1 = nil
		}
		fields := make(map[string]interface{})
		for fieldsKey, fieldsValue := range explicitSearchMappingsValue.Fields {
			var fieldsInst interface{}
			_ = json.Unmarshal([]byte(fieldsValue.ValueString()), &fieldsInst)
			fields[fieldsKey] = fieldsInst
		}
		explicitSearchMappingsInst := shared.SearchMappings{
			Index:  index,
			Type:   typeVar1,
			Fields: fields,
		}
		explicitSearchMappings[explicitSearchMappingsKey] = explicitSearchMappingsInst
	}
	var attributes interface{}
	_ = json.Unmarshal([]byte(r.Attributes.ValueString()), &attributes)
	var capabilities interface{}
	_ = json.Unmarshal([]byte(r.Capabilities.ValueString()), &capabilities)
	var groupSettings interface{}
	if !r.GroupSettings.IsUnknown() && !r.GroupSettings.IsNull() {
		_ = json.Unmarshal([]byte(r.GroupSettings.ValueString()), &groupSettings)
	}
	var groupHeadlines interface{}
	if !r.GroupHeadlines.IsUnknown() && !r.GroupHeadlines.IsNull() {
		_ = json.Unmarshal([]byte(r.GroupHeadlines.ValueString()), &groupHeadlines)
	}
	out := shared.EntitySchemaItem{
		ID:                     id,
		CreatedAt:              createdAt,
		UpdatedAt:              updatedAt,
		Slug:                   slug,
		Version:                version,
		Blueprint:              blueprint,
		FeatureFlag:            featureFlag,
		EnableSetting:          enableSetting,
		Name:                   name,
		Plural:                 plural,
		Description:            description,
		DocsURL:                docsURL,
		Category:               category,
		Published:              published,
		Draft:                  draft,
		Icon:                   icon,
		TitleTemplate:          titleTemplate,
		UIConfig:               uiConfig,
		LayoutSettings:         layoutSettings,
		DialogConfig:           dialogConfig,
		Purpose:                purpose,
		ExplicitSearchMappings: explicitSearchMappings,
		Attributes:             attributes,
		Capabilities:           capabilities,
		GroupSettings:          groupSettings,
		GroupHeadlines:         groupHeadlines,
	}
	return &out
}

func (r *SchemaResourceModel) RefreshFromSharedEntitySchemaItem(resp *shared.EntitySchemaItem) {
	if resp != nil {
		r.Purpose = []types.String{}
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		attributesResult, _ := json.Marshal(resp.Attributes)
		r.Attributes = types.StringValue(string(attributesResult))
		r.Blueprint = types.StringPointerValue(resp.Blueprint)
		capabilitiesResult, _ := json.Marshal(resp.Capabilities)
		r.Capabilities = types.StringValue(string(capabilitiesResult))
		if resp.Category != nil {
			r.Category = types.StringValue(string(*resp.Category))
		} else {
			r.Category = types.StringNull()
		}
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		if len(resp.DialogConfig) > 0 {
			r.DialogConfig = make(map[string]types.String)
			for key, value := range resp.DialogConfig {
				result, _ := json.Marshal(value)
				r.DialogConfig[key] = types.StringValue(string(result))
			}
		}
		r.DocsURL = types.StringPointerValue(resp.DocsURL)
		r.Draft = types.BoolPointerValue(resp.Draft)
		r.EnableSetting = []types.String{}
		for _, v := range resp.EnableSetting {
			r.EnableSetting = append(r.EnableSetting, types.StringValue(v))
		}
		if len(resp.ExplicitSearchMappings) > 0 {
			r.ExplicitSearchMappings = make(map[string]tfTypes.SearchMappings)
			for searchMappingsKey, searchMappingsValue := range resp.ExplicitSearchMappings {
				var searchMappingsResult tfTypes.SearchMappings
				if len(searchMappingsValue.Fields) > 0 {
					searchMappingsResult.Fields = make(map[string]types.String)
					for key1, value1 := range searchMappingsValue.Fields {
						result1, _ := json.Marshal(value1)
						searchMappingsResult.Fields[key1] = types.StringValue(string(result1))
					}
				}
				searchMappingsResult.Index = types.BoolPointerValue(searchMappingsValue.Index)
				if searchMappingsValue.Type != nil {
					searchMappingsResult.Type = types.StringValue(string(*searchMappingsValue.Type))
				} else {
					searchMappingsResult.Type = types.StringNull()
				}
				r.ExplicitSearchMappings[searchMappingsKey] = searchMappingsResult
			}
		}
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		if resp.GroupHeadlines == nil {
			r.GroupHeadlines = types.StringNull()
		} else {
			groupHeadlinesResult, _ := json.Marshal(resp.GroupHeadlines)
			r.GroupHeadlines = types.StringValue(string(groupHeadlinesResult))
		}
		if resp.GroupSettings == nil {
			r.GroupSettings = types.StringNull()
		} else {
			groupSettingsResult, _ := json.Marshal(resp.GroupSettings)
			r.GroupSettings = types.StringValue(string(groupSettingsResult))
		}
		r.Icon = types.StringPointerValue(resp.Icon)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.LayoutSettings == nil {
			r.LayoutSettings = nil
		} else {
			r.LayoutSettings = &tfTypes.LayoutSettings{}
			if resp.LayoutSettings.AdditionalProperties == nil {
				r.LayoutSettings.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult, _ := json.Marshal(resp.LayoutSettings.AdditionalProperties)
				r.LayoutSettings.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
			}
			r.LayoutSettings.GridGap = types.StringPointerValue(resp.LayoutSettings.GridGap)
			r.LayoutSettings.GridTemplateColumns = types.StringPointerValue(resp.LayoutSettings.GridTemplateColumns)
		}
		r.Name = types.StringValue(resp.Name)
		r.Plural = types.StringValue(resp.Plural)
		r.Published = types.BoolPointerValue(resp.Published)
		r.Slug = types.StringValue(resp.Slug)
		r.TitleTemplate = types.StringPointerValue(resp.TitleTemplate)
		if resp.UIConfig == nil {
			r.UIConfig = nil
		} else {
			r.UIConfig = &tfTypes.UIConfig{}
			if resp.UIConfig.CreateView == nil {
				r.UIConfig.CreateView = nil
			} else {
				r.UIConfig.CreateView = &tfTypes.CreateView{}
				if resp.UIConfig.CreateView.EntityDefaultCreate != nil {
					r.UIConfig.CreateView.EntityDefaultCreate = &tfTypes.EntityDefaultCreate{}
					if len(resp.UIConfig.CreateView.EntityDefaultCreate.SearchParams) > 0 {
						r.UIConfig.CreateView.EntityDefaultCreate.SearchParams = make(map[string]types.String)
						for key2, value2 := range resp.UIConfig.CreateView.EntityDefaultCreate.SearchParams {
							r.UIConfig.CreateView.EntityDefaultCreate.SearchParams[key2] = types.StringValue(value2)
						}
					}
					if resp.UIConfig.CreateView.EntityDefaultCreate.ViewType != nil {
						r.UIConfig.CreateView.EntityDefaultCreate.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.EntityDefaultCreate.ViewType))
					} else {
						r.UIConfig.CreateView.EntityDefaultCreate.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.CreateView.EntityViewDisabled != nil {
					r.UIConfig.CreateView.EntityViewDisabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.CreateView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.CreateView.EntityViewDisabled.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.CreateView.EntityViewDisabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.CreateView.RedirectEntityView != nil {
					r.UIConfig.CreateView.RedirectEntityView = &tfTypes.RedirectEntityView{}
					r.UIConfig.CreateView.RedirectEntityView.Route = types.StringPointerValue(resp.UIConfig.CreateView.RedirectEntityView.Route)
					if resp.UIConfig.CreateView.RedirectEntityView.ViewType != nil {
						r.UIConfig.CreateView.RedirectEntityView.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.CreateView.RedirectEntityView.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.EditView == nil {
				r.UIConfig.EditView = nil
			} else {
				r.UIConfig.EditView = &tfTypes.EditView{}
				if resp.UIConfig.EditView.EntityDefaultEdit != nil {
					r.UIConfig.EditView.EntityDefaultEdit = &tfTypes.EntityDefaultEdit{}
					if len(resp.UIConfig.EditView.EntityDefaultEdit.SearchParams) > 0 {
						r.UIConfig.EditView.EntityDefaultEdit.SearchParams = make(map[string]types.String)
						for key3, value3 := range resp.UIConfig.EditView.EntityDefaultEdit.SearchParams {
							r.UIConfig.EditView.EntityDefaultEdit.SearchParams[key3] = types.StringValue(value3)
						}
					}
					r.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes = []types.String{}
					for _, v := range resp.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes {
						r.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes = append(r.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes, types.StringValue(v))
					}
					if resp.UIConfig.EditView.EntityDefaultEdit.ViewType != nil {
						r.UIConfig.EditView.EntityDefaultEdit.ViewType = types.StringValue(string(*resp.UIConfig.EditView.EntityDefaultEdit.ViewType))
					} else {
						r.UIConfig.EditView.EntityDefaultEdit.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.EditView.EntityViewDisabled != nil {
					r.UIConfig.EditView.EntityViewDisabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.EditView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.EditView.EntityViewDisabled.ViewType = types.StringValue(string(*resp.UIConfig.EditView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.EditView.EntityViewDisabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.EditView.RedirectEntityView != nil {
					r.UIConfig.EditView.RedirectEntityView = &tfTypes.RedirectEntityView{}
					r.UIConfig.EditView.RedirectEntityView.Route = types.StringPointerValue(resp.UIConfig.EditView.RedirectEntityView.Route)
					if resp.UIConfig.EditView.RedirectEntityView.ViewType != nil {
						r.UIConfig.EditView.RedirectEntityView.ViewType = types.StringValue(string(*resp.UIConfig.EditView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.EditView.RedirectEntityView.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.ListItem == nil {
				r.UIConfig.ListItem = nil
			} else {
				r.UIConfig.ListItem = &tfTypes.ListItem{}
				r.UIConfig.ListItem.QuickActions = []tfTypes.EntityAction{}
				if len(r.UIConfig.ListItem.QuickActions) > len(resp.UIConfig.ListItem.QuickActions) {
					r.UIConfig.ListItem.QuickActions = r.UIConfig.ListItem.QuickActions[:len(resp.UIConfig.ListItem.QuickActions)]
				}
				for quickActionsCount, quickActionsItem := range resp.UIConfig.ListItem.QuickActions {
					var quickActions1 tfTypes.EntityAction
					quickActions1.Action = types.StringValue(quickActionsItem.Action)
					quickActions1.Icon = types.StringPointerValue(quickActionsItem.Icon)
					quickActions1.Label = types.StringValue(quickActionsItem.Label)
					quickActions1.Permission = types.StringPointerValue(quickActionsItem.Permission)
					if quickActionsCount+1 > len(r.UIConfig.ListItem.QuickActions) {
						r.UIConfig.ListItem.QuickActions = append(r.UIConfig.ListItem.QuickActions, quickActions1)
					} else {
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Action = quickActions1.Action
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Icon = quickActions1.Icon
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Label = quickActions1.Label
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Permission = quickActions1.Permission
					}
				}
				r.UIConfig.ListItem.SummaryAttributes = []tfTypes.SummaryAttributes{}
				if len(r.UIConfig.ListItem.SummaryAttributes) > len(resp.UIConfig.ListItem.SummaryAttributes) {
					r.UIConfig.ListItem.SummaryAttributes = r.UIConfig.ListItem.SummaryAttributes[:len(resp.UIConfig.ListItem.SummaryAttributes)]
				}
				for summaryAttributesCount, summaryAttributesItem := range resp.UIConfig.ListItem.SummaryAttributes {
					var summaryAttributes2 tfTypes.SummaryAttributes
					if summaryAttributesItem.Str != nil {
						summaryAttributes2.Str = types.StringPointerValue(summaryAttributesItem.Str)
					}
					if summaryAttributesItem.SummaryAttribute != nil {
						summaryAttributes2.SummaryAttribute = &tfTypes.SummaryAttribute{}
						summaryAttributes2.SummaryAttribute.FeatureFlag = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.FeatureFlag)
						summaryAttributes2.SummaryAttribute.Label = types.StringValue(summaryAttributesItem.SummaryAttribute.Label)
						summaryAttributes2.SummaryAttribute.RenderCondition = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.RenderCondition)
						summaryAttributes2.SummaryAttribute.SettingsFlag = []tfTypes.SettingFlag{}
						for settingsFlagCount, settingsFlagItem := range summaryAttributesItem.SummaryAttribute.SettingsFlag {
							var settingsFlag1 tfTypes.SettingFlag
							settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
							settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
							if settingsFlagCount+1 > len(summaryAttributes2.SummaryAttribute.SettingsFlag) {
								summaryAttributes2.SummaryAttribute.SettingsFlag = append(summaryAttributes2.SummaryAttribute.SettingsFlag, settingsFlag1)
							} else {
								summaryAttributes2.SummaryAttribute.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
								summaryAttributes2.SummaryAttribute.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
							}
						}
						summaryAttributes2.SummaryAttribute.ShowAsTag = types.BoolPointerValue(summaryAttributesItem.SummaryAttribute.ShowAsTag)
						summaryAttributes2.SummaryAttribute.TagColor = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.TagColor)
						summaryAttributes2.SummaryAttribute.Value = types.StringValue(summaryAttributesItem.SummaryAttribute.Value)
					}
					if summaryAttributesCount+1 > len(r.UIConfig.ListItem.SummaryAttributes) {
						r.UIConfig.ListItem.SummaryAttributes = append(r.UIConfig.ListItem.SummaryAttributes, summaryAttributes2)
					} else {
						r.UIConfig.ListItem.SummaryAttributes[summaryAttributesCount].Str = summaryAttributes2.Str
						r.UIConfig.ListItem.SummaryAttributes[summaryAttributesCount].SummaryAttribute = summaryAttributes2.SummaryAttribute
					}
				}
			}
			if resp.UIConfig.Sharing == nil {
				r.UIConfig.Sharing = nil
			} else {
				r.UIConfig.Sharing = &tfTypes.Sharing{}
				r.UIConfig.Sharing.ShowSharingButton = types.BoolPointerValue(resp.UIConfig.Sharing.ShowSharingButton)
			}
			if resp.UIConfig.SingleView == nil {
				r.UIConfig.SingleView = nil
			} else {
				r.UIConfig.SingleView = &tfTypes.EditView{}
				if resp.UIConfig.SingleView.EntityDefaultEdit != nil {
					r.UIConfig.SingleView.EntityDefaultEdit = &tfTypes.EntityDefaultEdit{}
					if len(resp.UIConfig.SingleView.EntityDefaultEdit.SearchParams) > 0 {
						r.UIConfig.SingleView.EntityDefaultEdit.SearchParams = make(map[string]types.String)
						for key4, value5 := range resp.UIConfig.SingleView.EntityDefaultEdit.SearchParams {
							r.UIConfig.SingleView.EntityDefaultEdit.SearchParams[key4] = types.StringValue(value5)
						}
					}
					r.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes = []types.String{}
					for _, v := range resp.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes {
						r.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes = append(r.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes, types.StringValue(v))
					}
					if resp.UIConfig.SingleView.EntityDefaultEdit.ViewType != nil {
						r.UIConfig.SingleView.EntityDefaultEdit.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.EntityDefaultEdit.ViewType))
					} else {
						r.UIConfig.SingleView.EntityDefaultEdit.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.SingleView.EntityViewDisabled != nil {
					r.UIConfig.SingleView.EntityViewDisabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.SingleView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.SingleView.EntityViewDisabled.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.SingleView.EntityViewDisabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.SingleView.RedirectEntityView != nil {
					r.UIConfig.SingleView.RedirectEntityView = &tfTypes.RedirectEntityView{}
					r.UIConfig.SingleView.RedirectEntityView.Route = types.StringPointerValue(resp.UIConfig.SingleView.RedirectEntityView.Route)
					if resp.UIConfig.SingleView.RedirectEntityView.ViewType != nil {
						r.UIConfig.SingleView.RedirectEntityView.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.SingleView.RedirectEntityView.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.TableView == nil {
				r.UIConfig.TableView = nil
			} else {
				r.UIConfig.TableView = &tfTypes.TableView{}
				if resp.UIConfig.TableView.EntityDefaultTable != nil {
					r.UIConfig.TableView.EntityDefaultTable = &tfTypes.EntityDefaultTable{}
					r.UIConfig.TableView.EntityDefaultTable.BulkActions = []tfTypes.BulkActions{}
					if len(r.UIConfig.TableView.EntityDefaultTable.BulkActions) > len(resp.UIConfig.TableView.EntityDefaultTable.BulkActions) {
						r.UIConfig.TableView.EntityDefaultTable.BulkActions = r.UIConfig.TableView.EntityDefaultTable.BulkActions[:len(resp.UIConfig.TableView.EntityDefaultTable.BulkActions)]
					}
					for bulkActionsCount, bulkActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.BulkActions {
						var bulkActions1 tfTypes.BulkActions
						if bulkActionsItem.Str != nil {
							bulkActions1.Str = types.StringPointerValue(bulkActionsItem.Str)
						}
						if bulkActionsItem.EntityAction != nil {
							bulkActions1.EntityAction = &tfTypes.EntityAction{}
							bulkActions1.EntityAction.Action = types.StringValue(bulkActionsItem.EntityAction.Action)
							bulkActions1.EntityAction.Icon = types.StringPointerValue(bulkActionsItem.EntityAction.Icon)
							bulkActions1.EntityAction.Label = types.StringValue(bulkActionsItem.EntityAction.Label)
							bulkActions1.EntityAction.Permission = types.StringPointerValue(bulkActionsItem.EntityAction.Permission)
						}
						if bulkActionsCount+1 > len(r.UIConfig.TableView.EntityDefaultTable.BulkActions) {
							r.UIConfig.TableView.EntityDefaultTable.BulkActions = append(r.UIConfig.TableView.EntityDefaultTable.BulkActions, bulkActions1)
						} else {
							r.UIConfig.TableView.EntityDefaultTable.BulkActions[bulkActionsCount].Str = bulkActions1.Str
							r.UIConfig.TableView.EntityDefaultTable.BulkActions[bulkActionsCount].EntityAction = bulkActions1.EntityAction
						}
					}
					r.UIConfig.TableView.EntityDefaultTable.EnableThumbnails = types.BoolPointerValue(resp.UIConfig.TableView.EntityDefaultTable.EnableThumbnails)
					r.UIConfig.TableView.EntityDefaultTable.NavbarActions = []tfTypes.NavbarActions{}
					if len(r.UIConfig.TableView.EntityDefaultTable.NavbarActions) > len(resp.UIConfig.TableView.EntityDefaultTable.NavbarActions) {
						r.UIConfig.TableView.EntityDefaultTable.NavbarActions = r.UIConfig.TableView.EntityDefaultTable.NavbarActions[:len(resp.UIConfig.TableView.EntityDefaultTable.NavbarActions)]
					}
					for navbarActionsCount, navbarActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.NavbarActions {
						var navbarActions1 tfTypes.NavbarActions
						navbarActions1.Options = []tfTypes.EntityDefaultTableOptions{}
						for optionsVarCount, optionsVarItem := range navbarActionsItem.Options {
							var optionsVar1 tfTypes.EntityDefaultTableOptions
							optionsVar1.Label = types.StringValue(optionsVarItem.Label)
							if optionsVarItem.Params == nil {
								optionsVar1.Params = nil
							} else {
								optionsVar1.Params = &tfTypes.EntityDefaultTableParams{}
							}
							if optionsVarCount+1 > len(navbarActions1.Options) {
								navbarActions1.Options = append(navbarActions1.Options, optionsVar1)
							} else {
								navbarActions1.Options[optionsVarCount].Label = optionsVar1.Label
								navbarActions1.Options[optionsVarCount].Params = optionsVar1.Params
							}
						}
						navbarActions1.Type = types.StringValue(navbarActionsItem.Type)
						if navbarActionsCount+1 > len(r.UIConfig.TableView.EntityDefaultTable.NavbarActions) {
							r.UIConfig.TableView.EntityDefaultTable.NavbarActions = append(r.UIConfig.TableView.EntityDefaultTable.NavbarActions, navbarActions1)
						} else {
							r.UIConfig.TableView.EntityDefaultTable.NavbarActions[navbarActionsCount].Options = navbarActions1.Options
							r.UIConfig.TableView.EntityDefaultTable.NavbarActions[navbarActionsCount].Type = navbarActions1.Type
						}
					}
					r.UIConfig.TableView.EntityDefaultTable.RowActions = []tfTypes.BulkActions{}
					if len(r.UIConfig.TableView.EntityDefaultTable.RowActions) > len(resp.UIConfig.TableView.EntityDefaultTable.RowActions) {
						r.UIConfig.TableView.EntityDefaultTable.RowActions = r.UIConfig.TableView.EntityDefaultTable.RowActions[:len(resp.UIConfig.TableView.EntityDefaultTable.RowActions)]
					}
					for rowActionsCount, rowActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.RowActions {
						var rowActions1 tfTypes.BulkActions
						if rowActionsItem.Str != nil {
							rowActions1.Str = types.StringPointerValue(rowActionsItem.Str)
						}
						if rowActionsItem.EntityAction != nil {
							rowActions1.EntityAction = &tfTypes.EntityAction{}
							rowActions1.EntityAction.Action = types.StringValue(rowActionsItem.EntityAction.Action)
							rowActions1.EntityAction.Icon = types.StringPointerValue(rowActionsItem.EntityAction.Icon)
							rowActions1.EntityAction.Label = types.StringValue(rowActionsItem.EntityAction.Label)
							rowActions1.EntityAction.Permission = types.StringPointerValue(rowActionsItem.EntityAction.Permission)
						}
						if rowActionsCount+1 > len(r.UIConfig.TableView.EntityDefaultTable.RowActions) {
							r.UIConfig.TableView.EntityDefaultTable.RowActions = append(r.UIConfig.TableView.EntityDefaultTable.RowActions, rowActions1)
						} else {
							r.UIConfig.TableView.EntityDefaultTable.RowActions[rowActionsCount].Str = rowActions1.Str
							r.UIConfig.TableView.EntityDefaultTable.RowActions[rowActionsCount].EntityAction = rowActions1.EntityAction
						}
					}
					if resp.UIConfig.TableView.EntityDefaultTable.ViewType != nil {
						r.UIConfig.TableView.EntityDefaultTable.ViewType = types.StringValue(string(*resp.UIConfig.TableView.EntityDefaultTable.ViewType))
					} else {
						r.UIConfig.TableView.EntityDefaultTable.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.TableView.EntityViewDisabled != nil {
					r.UIConfig.TableView.EntityViewDisabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.TableView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.TableView.EntityViewDisabled.ViewType = types.StringValue(string(*resp.UIConfig.TableView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.TableView.EntityViewDisabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.TableView.RedirectEntityView != nil {
					r.UIConfig.TableView.RedirectEntityView = &tfTypes.RedirectEntityView{}
					r.UIConfig.TableView.RedirectEntityView.Route = types.StringPointerValue(resp.UIConfig.TableView.RedirectEntityView.Route)
					if resp.UIConfig.TableView.RedirectEntityView.ViewType != nil {
						r.UIConfig.TableView.RedirectEntityView.ViewType = types.StringValue(string(*resp.UIConfig.TableView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.TableView.RedirectEntityView.ViewType = types.StringNull()
					}
				}
			}
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
		r.Version = types.Int64PointerValue(resp.Version)
	}
}
