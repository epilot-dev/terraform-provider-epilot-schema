// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaResourceModel) ToSharedEntitySchemaItem() *shared.EntitySchemaItem {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	createdAt := new(string)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueString()
	} else {
		createdAt = nil
	}
	updatedAt := new(string)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueString()
	} else {
		updatedAt = nil
	}
	comment := new(string)
	if !r.Comment.IsUnknown() && !r.Comment.IsNull() {
		*comment = r.Comment.ValueString()
	} else {
		comment = nil
	}
	var source *shared.Source
	if r.Source != nil {
		id1 := new(string)
		if !r.Source.ID.IsUnknown() && !r.Source.ID.IsNull() {
			*id1 = r.Source.ID.ValueString()
		} else {
			id1 = nil
		}
		typeVar := new(string)
		if !r.Source.Type.IsUnknown() && !r.Source.Type.IsNull() {
			*typeVar = r.Source.Type.ValueString()
		} else {
			typeVar = nil
		}
		source = &shared.Source{
			ID:   id1,
			Type: typeVar,
		}
	}
	slug := r.Slug.ValueString()
	version := new(int64)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueInt64()
	} else {
		version = nil
	}
	blueprint := new(string)
	if !r.Blueprint.IsUnknown() && !r.Blueprint.IsNull() {
		*blueprint = r.Blueprint.ValueString()
	} else {
		blueprint = nil
	}
	featureFlag := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag = r.FeatureFlag.ValueString()
	} else {
		featureFlag = nil
	}
	var enableSetting []string = []string{}
	for _, enableSettingItem := range r.EnableSetting {
		enableSetting = append(enableSetting, enableSettingItem.ValueString())
	}
	name := r.Name.ValueString()
	plural := r.Plural.ValueString()
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	draft := new(bool)
	if !r.Draft.IsUnknown() && !r.Draft.IsNull() {
		*draft = r.Draft.ValueBool()
	} else {
		draft = nil
	}
	icon := new(string)
	if !r.Icon.IsUnknown() && !r.Icon.IsNull() {
		*icon = r.Icon.ValueString()
	} else {
		icon = nil
	}
	titleTemplate := new(string)
	if !r.TitleTemplate.IsUnknown() && !r.TitleTemplate.IsNull() {
		*titleTemplate = r.TitleTemplate.ValueString()
	} else {
		titleTemplate = nil
	}
	var uiConfig *shared.UIConfig
	if r.UIConfig != nil {
		var tableView *shared.TableView
		if r.UIConfig.TableView != nil {
			var entityDefaultTable *shared.EntityDefaultTable
			if r.UIConfig.TableView.Default != nil {
				viewType := new(shared.ViewType)
				if !r.UIConfig.TableView.Default.ViewType.IsUnknown() && !r.UIConfig.TableView.Default.ViewType.IsNull() {
					*viewType = shared.ViewType(r.UIConfig.TableView.Default.ViewType.ValueString())
				} else {
					viewType = nil
				}
				var rowActions []shared.RowActions = []shared.RowActions{}
				for _, rowActionsItem := range r.UIConfig.TableView.Default.RowActions {
					if !rowActionsItem.Str.IsUnknown() && !rowActionsItem.Str.IsNull() {
						str := rowActionsItem.Str.ValueString()
						rowActions = append(rowActions, shared.RowActions{
							Str: &str,
						})
					}
					if rowActionsItem.EntityAction != nil {
						action := rowActionsItem.EntityAction.Action.ValueString()
						label := rowActionsItem.EntityAction.Label.ValueString()
						icon1 := new(string)
						if !rowActionsItem.EntityAction.Icon.IsUnknown() && !rowActionsItem.EntityAction.Icon.IsNull() {
							*icon1 = rowActionsItem.EntityAction.Icon.ValueString()
						} else {
							icon1 = nil
						}
						permission := new(string)
						if !rowActionsItem.EntityAction.Permission.IsUnknown() && !rowActionsItem.EntityAction.Permission.IsNull() {
							*permission = rowActionsItem.EntityAction.Permission.ValueString()
						} else {
							permission = nil
						}
						entityAction := shared.EntityAction{
							Action:     action,
							Label:      label,
							Icon:       icon1,
							Permission: permission,
						}
						rowActions = append(rowActions, shared.RowActions{
							EntityAction: &entityAction,
						})
					}
				}
				var bulkActions []shared.BulkActions = []shared.BulkActions{}
				for _, bulkActionsItem := range r.UIConfig.TableView.Default.BulkActions {
					if !bulkActionsItem.Str.IsUnknown() && !bulkActionsItem.Str.IsNull() {
						str1 := bulkActionsItem.Str.ValueString()
						bulkActions = append(bulkActions, shared.BulkActions{
							Str: &str1,
						})
					}
					if bulkActionsItem.EntityAction != nil {
						action1 := bulkActionsItem.EntityAction.Action.ValueString()
						label1 := bulkActionsItem.EntityAction.Label.ValueString()
						icon2 := new(string)
						if !bulkActionsItem.EntityAction.Icon.IsUnknown() && !bulkActionsItem.EntityAction.Icon.IsNull() {
							*icon2 = bulkActionsItem.EntityAction.Icon.ValueString()
						} else {
							icon2 = nil
						}
						permission1 := new(string)
						if !bulkActionsItem.EntityAction.Permission.IsUnknown() && !bulkActionsItem.EntityAction.Permission.IsNull() {
							*permission1 = bulkActionsItem.EntityAction.Permission.ValueString()
						} else {
							permission1 = nil
						}
						entityAction1 := shared.EntityAction{
							Action:     action1,
							Label:      label1,
							Icon:       icon2,
							Permission: permission1,
						}
						bulkActions = append(bulkActions, shared.BulkActions{
							EntityAction: &entityAction1,
						})
					}
				}
				var navbarActions []shared.NavbarActions = []shared.NavbarActions{}
				for _, navbarActionsItem := range r.UIConfig.TableView.Default.NavbarActions {
					type1 := navbarActionsItem.Type.ValueString()
					var options []shared.Options = []shared.Options{}
					for _, optionsItem := range navbarActionsItem.Options {
						label2 := optionsItem.Label.ValueString()
						var params *shared.Params
						if optionsItem.Params != nil {
							params = &shared.Params{}
						}
						options = append(options, shared.Options{
							Label:  label2,
							Params: params,
						})
					}
					navbarActions = append(navbarActions, shared.NavbarActions{
						Type:    type1,
						Options: options,
					})
				}
				enableThumbnails := new(bool)
				if !r.UIConfig.TableView.Default.EnableThumbnails.IsUnknown() && !r.UIConfig.TableView.Default.EnableThumbnails.IsNull() {
					*enableThumbnails = r.UIConfig.TableView.Default.EnableThumbnails.ValueBool()
				} else {
					enableThumbnails = nil
				}
				entityDefaultTable = &shared.EntityDefaultTable{
					ViewType:         viewType,
					RowActions:       rowActions,
					BulkActions:      bulkActions,
					NavbarActions:    navbarActions,
					EnableThumbnails: enableThumbnails,
				}
			}
			if entityDefaultTable != nil {
				tableView = &shared.TableView{
					EntityDefaultTable: entityDefaultTable,
				}
			}
			var redirectEntityView *shared.RedirectEntityView
			if r.UIConfig.TableView.Redirect != nil {
				viewType1 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.TableView.Redirect.ViewType.IsUnknown() && !r.UIConfig.TableView.Redirect.ViewType.IsNull() {
					*viewType1 = shared.RedirectEntityViewViewType(r.UIConfig.TableView.Redirect.ViewType.ValueString())
				} else {
					viewType1 = nil
				}
				route := new(string)
				if !r.UIConfig.TableView.Redirect.Route.IsUnknown() && !r.UIConfig.TableView.Redirect.Route.IsNull() {
					*route = r.UIConfig.TableView.Redirect.Route.ValueString()
				} else {
					route = nil
				}
				redirectEntityView = &shared.RedirectEntityView{
					ViewType: viewType1,
					Route:    route,
				}
			}
			if redirectEntityView != nil {
				tableView = &shared.TableView{
					RedirectEntityView: redirectEntityView,
				}
			}
			var entityViewDisabled *shared.EntityViewDisabled
			if r.UIConfig.TableView.Disabled != nil {
				viewType2 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.TableView.Disabled.ViewType.IsUnknown() && !r.UIConfig.TableView.Disabled.ViewType.IsNull() {
					*viewType2 = shared.EntityViewDisabledViewType(r.UIConfig.TableView.Disabled.ViewType.ValueString())
				} else {
					viewType2 = nil
				}
				entityViewDisabled = &shared.EntityViewDisabled{
					ViewType: viewType2,
				}
			}
			if entityViewDisabled != nil {
				tableView = &shared.TableView{
					EntityViewDisabled: entityViewDisabled,
				}
			}
		}
		var createView *shared.CreateView
		if r.UIConfig.CreateView != nil {
			var entityDefaultCreate *shared.EntityDefaultCreate
			if r.UIConfig.CreateView.Default != nil {
				viewType3 := new(shared.EntityDefaultCreateViewType)
				if !r.UIConfig.CreateView.Default.ViewType.IsUnknown() && !r.UIConfig.CreateView.Default.ViewType.IsNull() {
					*viewType3 = shared.EntityDefaultCreateViewType(r.UIConfig.CreateView.Default.ViewType.ValueString())
				} else {
					viewType3 = nil
				}
				searchParams := make(map[string]string)
				for searchParamsKey, searchParamsValue := range r.UIConfig.CreateView.Default.SearchParams {
					searchParamsInst := searchParamsValue.ValueString()
					searchParams[searchParamsKey] = searchParamsInst
				}
				entityDefaultCreate = &shared.EntityDefaultCreate{
					ViewType:     viewType3,
					SearchParams: searchParams,
				}
			}
			if entityDefaultCreate != nil {
				createView = &shared.CreateView{
					EntityDefaultCreate: entityDefaultCreate,
				}
			}
			var redirectEntityView1 *shared.RedirectEntityView
			if r.UIConfig.CreateView.Redirect != nil {
				viewType4 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.CreateView.Redirect.ViewType.IsUnknown() && !r.UIConfig.CreateView.Redirect.ViewType.IsNull() {
					*viewType4 = shared.RedirectEntityViewViewType(r.UIConfig.CreateView.Redirect.ViewType.ValueString())
				} else {
					viewType4 = nil
				}
				route1 := new(string)
				if !r.UIConfig.CreateView.Redirect.Route.IsUnknown() && !r.UIConfig.CreateView.Redirect.Route.IsNull() {
					*route1 = r.UIConfig.CreateView.Redirect.Route.ValueString()
				} else {
					route1 = nil
				}
				redirectEntityView1 = &shared.RedirectEntityView{
					ViewType: viewType4,
					Route:    route1,
				}
			}
			if redirectEntityView1 != nil {
				createView = &shared.CreateView{
					RedirectEntityView: redirectEntityView1,
				}
			}
			var entityViewDisabled1 *shared.EntityViewDisabled
			if r.UIConfig.CreateView.Disabled != nil {
				viewType5 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.CreateView.Disabled.ViewType.IsUnknown() && !r.UIConfig.CreateView.Disabled.ViewType.IsNull() {
					*viewType5 = shared.EntityViewDisabledViewType(r.UIConfig.CreateView.Disabled.ViewType.ValueString())
				} else {
					viewType5 = nil
				}
				entityViewDisabled1 = &shared.EntityViewDisabled{
					ViewType: viewType5,
				}
			}
			if entityViewDisabled1 != nil {
				createView = &shared.CreateView{
					EntityViewDisabled: entityViewDisabled1,
				}
			}
		}
		var editView *shared.EditView
		if r.UIConfig.EditView != nil {
			var entityDefaultEdit *shared.EntityDefaultEdit
			if r.UIConfig.EditView.Default != nil {
				viewType6 := new(shared.EntityDefaultEditViewType)
				if !r.UIConfig.EditView.Default.ViewType.IsUnknown() && !r.UIConfig.EditView.Default.ViewType.IsNull() {
					*viewType6 = shared.EntityDefaultEditViewType(r.UIConfig.EditView.Default.ViewType.ValueString())
				} else {
					viewType6 = nil
				}
				searchParams1 := make(map[string]string)
				for searchParamsKey1, searchParamsValue1 := range r.UIConfig.EditView.Default.SearchParams {
					searchParamsInst1 := searchParamsValue1.ValueString()
					searchParams1[searchParamsKey1] = searchParamsInst1
				}
				var summaryAttributes []string = []string{}
				for _, summaryAttributesItem := range r.UIConfig.EditView.Default.SummaryAttributes {
					summaryAttributes = append(summaryAttributes, summaryAttributesItem.ValueString())
				}
				entityDefaultEdit = &shared.EntityDefaultEdit{
					ViewType:          viewType6,
					SearchParams:      searchParams1,
					SummaryAttributes: summaryAttributes,
				}
			}
			if entityDefaultEdit != nil {
				editView = &shared.EditView{
					EntityDefaultEdit: entityDefaultEdit,
				}
			}
			var redirectEntityView2 *shared.RedirectEntityView
			if r.UIConfig.EditView.Redirect != nil {
				viewType7 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.EditView.Redirect.ViewType.IsUnknown() && !r.UIConfig.EditView.Redirect.ViewType.IsNull() {
					*viewType7 = shared.RedirectEntityViewViewType(r.UIConfig.EditView.Redirect.ViewType.ValueString())
				} else {
					viewType7 = nil
				}
				route2 := new(string)
				if !r.UIConfig.EditView.Redirect.Route.IsUnknown() && !r.UIConfig.EditView.Redirect.Route.IsNull() {
					*route2 = r.UIConfig.EditView.Redirect.Route.ValueString()
				} else {
					route2 = nil
				}
				redirectEntityView2 = &shared.RedirectEntityView{
					ViewType: viewType7,
					Route:    route2,
				}
			}
			if redirectEntityView2 != nil {
				editView = &shared.EditView{
					RedirectEntityView: redirectEntityView2,
				}
			}
			var entityViewDisabled2 *shared.EntityViewDisabled
			if r.UIConfig.EditView.Disabled != nil {
				viewType8 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.EditView.Disabled.ViewType.IsUnknown() && !r.UIConfig.EditView.Disabled.ViewType.IsNull() {
					*viewType8 = shared.EntityViewDisabledViewType(r.UIConfig.EditView.Disabled.ViewType.ValueString())
				} else {
					viewType8 = nil
				}
				entityViewDisabled2 = &shared.EntityViewDisabled{
					ViewType: viewType8,
				}
			}
			if entityViewDisabled2 != nil {
				editView = &shared.EditView{
					EntityViewDisabled: entityViewDisabled2,
				}
			}
		}
		var singleView *shared.SingleView
		if r.UIConfig.SingleView != nil {
			var entityDefaultEdit1 *shared.EntityDefaultEdit
			if r.UIConfig.SingleView.Default != nil {
				viewType9 := new(shared.EntityDefaultEditViewType)
				if !r.UIConfig.SingleView.Default.ViewType.IsUnknown() && !r.UIConfig.SingleView.Default.ViewType.IsNull() {
					*viewType9 = shared.EntityDefaultEditViewType(r.UIConfig.SingleView.Default.ViewType.ValueString())
				} else {
					viewType9 = nil
				}
				searchParams2 := make(map[string]string)
				for searchParamsKey2, searchParamsValue2 := range r.UIConfig.SingleView.Default.SearchParams {
					searchParamsInst2 := searchParamsValue2.ValueString()
					searchParams2[searchParamsKey2] = searchParamsInst2
				}
				var summaryAttributes1 []string = []string{}
				for _, summaryAttributesItem1 := range r.UIConfig.SingleView.Default.SummaryAttributes {
					summaryAttributes1 = append(summaryAttributes1, summaryAttributesItem1.ValueString())
				}
				entityDefaultEdit1 = &shared.EntityDefaultEdit{
					ViewType:          viewType9,
					SearchParams:      searchParams2,
					SummaryAttributes: summaryAttributes1,
				}
			}
			if entityDefaultEdit1 != nil {
				singleView = &shared.SingleView{
					EntityDefaultEdit: entityDefaultEdit1,
				}
			}
			var redirectEntityView3 *shared.RedirectEntityView
			if r.UIConfig.SingleView.Redirect != nil {
				viewType10 := new(shared.RedirectEntityViewViewType)
				if !r.UIConfig.SingleView.Redirect.ViewType.IsUnknown() && !r.UIConfig.SingleView.Redirect.ViewType.IsNull() {
					*viewType10 = shared.RedirectEntityViewViewType(r.UIConfig.SingleView.Redirect.ViewType.ValueString())
				} else {
					viewType10 = nil
				}
				route3 := new(string)
				if !r.UIConfig.SingleView.Redirect.Route.IsUnknown() && !r.UIConfig.SingleView.Redirect.Route.IsNull() {
					*route3 = r.UIConfig.SingleView.Redirect.Route.ValueString()
				} else {
					route3 = nil
				}
				redirectEntityView3 = &shared.RedirectEntityView{
					ViewType: viewType10,
					Route:    route3,
				}
			}
			if redirectEntityView3 != nil {
				singleView = &shared.SingleView{
					RedirectEntityView: redirectEntityView3,
				}
			}
			var entityViewDisabled3 *shared.EntityViewDisabled
			if r.UIConfig.SingleView.Disabled != nil {
				viewType11 := new(shared.EntityViewDisabledViewType)
				if !r.UIConfig.SingleView.Disabled.ViewType.IsUnknown() && !r.UIConfig.SingleView.Disabled.ViewType.IsNull() {
					*viewType11 = shared.EntityViewDisabledViewType(r.UIConfig.SingleView.Disabled.ViewType.ValueString())
				} else {
					viewType11 = nil
				}
				entityViewDisabled3 = &shared.EntityViewDisabled{
					ViewType: viewType11,
				}
			}
			if entityViewDisabled3 != nil {
				singleView = &shared.SingleView{
					EntityViewDisabled: entityViewDisabled3,
				}
			}
		}
		var listItem *shared.ListItem
		if r.UIConfig.ListItem != nil {
			var summaryAttributes2 []shared.SummaryAttributes = []shared.SummaryAttributes{}
			for _, summaryAttributesItem2 := range r.UIConfig.ListItem.SummaryAttributes {
				if summaryAttributesItem2.SummaryAttribute != nil {
					label3 := summaryAttributesItem2.SummaryAttribute.Label.ValueString()
					value := summaryAttributesItem2.SummaryAttribute.Value.ValueString()
					showAsTag := new(bool)
					if !summaryAttributesItem2.SummaryAttribute.ShowAsTag.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.ShowAsTag.IsNull() {
						*showAsTag = summaryAttributesItem2.SummaryAttribute.ShowAsTag.ValueBool()
					} else {
						showAsTag = nil
					}
					tagColor := new(string)
					if !summaryAttributesItem2.SummaryAttribute.TagColor.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.TagColor.IsNull() {
						*tagColor = summaryAttributesItem2.SummaryAttribute.TagColor.ValueString()
					} else {
						tagColor = nil
					}
					renderCondition := new(string)
					if !summaryAttributesItem2.SummaryAttribute.RenderCondition.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.RenderCondition.IsNull() {
						*renderCondition = summaryAttributesItem2.SummaryAttribute.RenderCondition.ValueString()
					} else {
						renderCondition = nil
					}
					featureFlag1 := new(string)
					if !summaryAttributesItem2.SummaryAttribute.FeatureFlag.IsUnknown() && !summaryAttributesItem2.SummaryAttribute.FeatureFlag.IsNull() {
						*featureFlag1 = summaryAttributesItem2.SummaryAttribute.FeatureFlag.ValueString()
					} else {
						featureFlag1 = nil
					}
					var settingsFlag []shared.SettingFlag = []shared.SettingFlag{}
					for _, settingsFlagItem := range summaryAttributesItem2.SummaryAttribute.SettingsFlag {
						name1 := new(string)
						if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
							*name1 = settingsFlagItem.Name.ValueString()
						} else {
							name1 = nil
						}
						enabled := new(bool)
						if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
							*enabled = settingsFlagItem.Enabled.ValueBool()
						} else {
							enabled = nil
						}
						settingsFlag = append(settingsFlag, shared.SettingFlag{
							Name:    name1,
							Enabled: enabled,
						})
					}
					summaryAttribute := shared.SummaryAttribute{
						Label:           label3,
						Value:           value,
						ShowAsTag:       showAsTag,
						TagColor:        tagColor,
						RenderCondition: renderCondition,
						FeatureFlag:     featureFlag1,
						SettingsFlag:    settingsFlag,
					}
					summaryAttributes2 = append(summaryAttributes2, shared.SummaryAttributes{
						SummaryAttribute: &summaryAttribute,
					})
				}
				if !summaryAttributesItem2.Str.IsUnknown() && !summaryAttributesItem2.Str.IsNull() {
					str2 := summaryAttributesItem2.Str.ValueString()
					summaryAttributes2 = append(summaryAttributes2, shared.SummaryAttributes{
						Str: &str2,
					})
				}
			}
			var quickActions []shared.EntityAction = []shared.EntityAction{}
			for _, quickActionsItem := range r.UIConfig.ListItem.QuickActions {
				action2 := quickActionsItem.Action.ValueString()
				label4 := quickActionsItem.Label.ValueString()
				icon3 := new(string)
				if !quickActionsItem.Icon.IsUnknown() && !quickActionsItem.Icon.IsNull() {
					*icon3 = quickActionsItem.Icon.ValueString()
				} else {
					icon3 = nil
				}
				permission2 := new(string)
				if !quickActionsItem.Permission.IsUnknown() && !quickActionsItem.Permission.IsNull() {
					*permission2 = quickActionsItem.Permission.ValueString()
				} else {
					permission2 = nil
				}
				quickActions = append(quickActions, shared.EntityAction{
					Action:     action2,
					Label:      label4,
					Icon:       icon3,
					Permission: permission2,
				})
			}
			listItem = &shared.ListItem{
				SummaryAttributes: summaryAttributes2,
				QuickActions:      quickActions,
			}
		}
		var sharing *shared.Sharing
		if r.UIConfig.Sharing != nil {
			showSharingButton := new(bool)
			if !r.UIConfig.Sharing.ShowSharingButton.IsUnknown() && !r.UIConfig.Sharing.ShowSharingButton.IsNull() {
				*showSharingButton = r.UIConfig.Sharing.ShowSharingButton.ValueBool()
			} else {
				showSharingButton = nil
			}
			sharing = &shared.Sharing{
				ShowSharingButton: showSharingButton,
			}
		}
		uiConfig = &shared.UIConfig{
			TableView:  tableView,
			CreateView: createView,
			EditView:   editView,
			SingleView: singleView,
			ListItem:   listItem,
			Sharing:    sharing,
		}
	}
	var capabilities []shared.EntityCapability = []shared.EntityCapability{}
	for _, capabilitiesItem := range r.Capabilities {
		name2 := capabilitiesItem.Name.ValueString()
		title := new(string)
		if !capabilitiesItem.Title.IsUnknown() && !capabilitiesItem.Title.IsNull() {
			*title = capabilitiesItem.Title.ValueString()
		} else {
			title = nil
		}
		var attributes []shared.Attribute = []shared.Attribute{}
		for _, attributesItem := range capabilitiesItem.Attributes {
			id2 := new(string)
			if !attributesItem.ID.IsUnknown() && !attributesItem.ID.IsNull() {
				*id2 = attributesItem.ID.ValueString()
			} else {
				id2 = nil
			}
			name3 := attributesItem.Name.ValueString()
			label5 := attributesItem.Label.ValueString()
			placeholder := new(string)
			if !attributesItem.Placeholder.IsUnknown() && !attributesItem.Placeholder.IsNull() {
				*placeholder = attributesItem.Placeholder.ValueString()
			} else {
				placeholder = nil
			}
			hidden := new(bool)
			if !attributesItem.Hidden.IsUnknown() && !attributesItem.Hidden.IsNull() {
				*hidden = attributesItem.Hidden.ValueBool()
			} else {
				hidden = nil
			}
			showInTable := new(bool)
			if !attributesItem.ShowInTable.IsUnknown() && !attributesItem.ShowInTable.IsNull() {
				*showInTable = attributesItem.ShowInTable.ValueBool()
			} else {
				showInTable = nil
			}
			sortable := new(bool)
			if !attributesItem.Sortable.IsUnknown() && !attributesItem.Sortable.IsNull() {
				*sortable = attributesItem.Sortable.ValueBool()
			} else {
				sortable = nil
			}
			required := new(bool)
			if !attributesItem.Required.IsUnknown() && !attributesItem.Required.IsNull() {
				*required = attributesItem.Required.ValueBool()
			} else {
				required = nil
			}
			readonly := new(bool)
			if !attributesItem.Readonly.IsUnknown() && !attributesItem.Readonly.IsNull() {
				*readonly = attributesItem.Readonly.ValueBool()
			} else {
				readonly = nil
			}
			deprecated := new(bool)
			if !attributesItem.Deprecated.IsUnknown() && !attributesItem.Deprecated.IsNull() {
				*deprecated = attributesItem.Deprecated.ValueBool()
			} else {
				deprecated = nil
			}
			var defaultValue interface{}
			if !attributesItem.DefaultValue.IsUnknown() && !attributesItem.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.DefaultValue.ValueString()), &defaultValue)
			}
			group := new(string)
			if !attributesItem.Group.IsUnknown() && !attributesItem.Group.IsNull() {
				*group = attributesItem.Group.ValueString()
			} else {
				group = nil
			}
			order := new(int64)
			if !attributesItem.Order.IsUnknown() && !attributesItem.Order.IsNull() {
				*order = attributesItem.Order.ValueInt64()
			} else {
				order = nil
			}
			layout := new(string)
			if !attributesItem.Layout.IsUnknown() && !attributesItem.Layout.IsNull() {
				*layout = attributesItem.Layout.ValueString()
			} else {
				layout = nil
			}
			hideLabel := new(bool)
			if !attributesItem.HideLabel.IsUnknown() && !attributesItem.HideLabel.IsNull() {
				*hideLabel = attributesItem.HideLabel.ValueBool()
			} else {
				hideLabel = nil
			}
			icon4 := new(string)
			if !attributesItem.Icon.IsUnknown() && !attributesItem.Icon.IsNull() {
				*icon4 = attributesItem.Icon.ValueString()
			} else {
				icon4 = nil
			}
			renderCondition1 := new(string)
			if !attributesItem.RenderCondition.IsUnknown() && !attributesItem.RenderCondition.IsNull() {
				*renderCondition1 = attributesItem.RenderCondition.ValueString()
			} else {
				renderCondition1 = nil
			}
			var purpose []string = []string{}
			for _, purposeItem := range attributesItem.Purpose {
				purpose = append(purpose, purposeItem.ValueString())
			}
			var constraints *shared.Constraints
			if attributesItem.Constraints != nil {
				constraints = &shared.Constraints{}
			}
			featureFlag2 := new(string)
			if !attributesItem.FeatureFlag.IsUnknown() && !attributesItem.FeatureFlag.IsNull() {
				*featureFlag2 = attributesItem.FeatureFlag.ValueString()
			} else {
				featureFlag2 = nil
			}
			var settingsFlag1 []shared.SettingFlag = []shared.SettingFlag{}
			for _, settingsFlagItem1 := range attributesItem.SettingsFlag {
				name4 := new(string)
				if !settingsFlagItem1.Name.IsUnknown() && !settingsFlagItem1.Name.IsNull() {
					*name4 = settingsFlagItem1.Name.ValueString()
				} else {
					name4 = nil
				}
				enabled1 := new(bool)
				if !settingsFlagItem1.Enabled.IsUnknown() && !settingsFlagItem1.Enabled.IsNull() {
					*enabled1 = settingsFlagItem1.Enabled.ValueBool()
				} else {
					enabled1 = nil
				}
				settingsFlag1 = append(settingsFlag1, shared.SettingFlag{
					Name:    name4,
					Enabled: enabled1,
				})
			}
			valueFormatter := new(string)
			if !attributesItem.ValueFormatter.IsUnknown() && !attributesItem.ValueFormatter.IsNull() {
				*valueFormatter = attributesItem.ValueFormatter.ValueString()
			} else {
				valueFormatter = nil
			}
			previewValueFormatter := new(string)
			if !attributesItem.PreviewValueFormatter.IsUnknown() && !attributesItem.PreviewValueFormatter.IsNull() {
				*previewValueFormatter = attributesItem.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter = nil
			}
			entityBuilderDisableEdit := new(bool)
			if !attributesItem.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit = attributesItem.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit = nil
			}
			protected := new(bool)
			if !attributesItem.Protected.IsUnknown() && !attributesItem.Protected.IsNull() {
				*protected = attributesItem.Protected.ValueBool()
			} else {
				protected = nil
			}
			var infoHelpers *shared.InfoHelpers
			if attributesItem.InfoHelpers != nil {
				hintText := new(string)
				if !attributesItem.InfoHelpers.HintText.IsUnknown() && !attributesItem.InfoHelpers.HintText.IsNull() {
					*hintText = attributesItem.InfoHelpers.HintText.ValueString()
				} else {
					hintText = nil
				}
				hintTextKey := new(string)
				if !attributesItem.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey = attributesItem.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey = nil
				}
				hintCustomComponent := new(string)
				if !attributesItem.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent = attributesItem.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent = nil
				}
				hintTooltipPlacement := new(string)
				if !attributesItem.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement = attributesItem.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement = nil
				}
				infoHelpers = &shared.InfoHelpers{
					HintText:             hintText,
					HintTextKey:          hintTextKey,
					HintCustomComponent:  hintCustomComponent,
					HintTooltipPlacement: hintTooltipPlacement,
				}
			}
			type2 := shared.Type(attributesItem.Type.ValueString())
			multiline := new(bool)
			if !attributesItem.Multiline.IsUnknown() && !attributesItem.Multiline.IsNull() {
				*multiline = attributesItem.Multiline.ValueBool()
			} else {
				multiline = nil
			}
			var options1 []string = []string{}
			for _, optionsItem1 := range attributesItem.Options {
				options1 = append(options1, optionsItem1.ValueString())
			}
			allowAny := new(bool)
			if !attributesItem.AllowAny.IsUnknown() && !attributesItem.AllowAny.IsNull() {
				*allowAny = attributesItem.AllowAny.ValueBool()
			} else {
				allowAny = nil
			}
			disableCaseSensitive := new(bool)
			if !attributesItem.DisableCaseSensitive.IsUnknown() && !attributesItem.DisableCaseSensitive.IsNull() {
				*disableCaseSensitive = attributesItem.DisableCaseSensitive.ValueBool()
			} else {
				disableCaseSensitive = nil
			}
			allowExtraOptions := new(bool)
			if !attributesItem.AllowExtraOptions.IsUnknown() && !attributesItem.AllowExtraOptions.IsNull() {
				*allowExtraOptions = attributesItem.AllowExtraOptions.ValueBool()
			} else {
				allowExtraOptions = nil
			}
			prefix := new(string)
			if !attributesItem.Prefix.IsUnknown() && !attributesItem.Prefix.IsNull() {
				*prefix = attributesItem.Prefix.ValueString()
			} else {
				prefix = nil
			}
			startNumber := new(int64)
			if !attributesItem.StartNumber.IsUnknown() && !attributesItem.StartNumber.IsNull() {
				*startNumber = attributesItem.StartNumber.ValueInt64()
			} else {
				startNumber = nil
			}
			relationType := new(shared.RelationType)
			if !attributesItem.RelationType.IsUnknown() && !attributesItem.RelationType.IsNull() {
				*relationType = shared.RelationType(attributesItem.RelationType.ValueString())
			} else {
				relationType = nil
			}
			reverseAttributes := make(map[string]string)
			for reverseAttributesKey, reverseAttributesValue := range attributesItem.ReverseAttributes {
				reverseAttributesInst := reverseAttributesValue.ValueString()
				reverseAttributes[reverseAttributesKey] = reverseAttributesInst
			}
			relationAffinityMode := new(shared.RelationAffinityMode)
			if !attributesItem.RelationAffinityMode.IsUnknown() && !attributesItem.RelationAffinityMode.IsNull() {
				*relationAffinityMode = shared.RelationAffinityMode(attributesItem.RelationAffinityMode.ValueString())
			} else {
				relationAffinityMode = nil
			}
			enableRelationPicker := new(bool)
			if !attributesItem.EnableRelationPicker.IsUnknown() && !attributesItem.EnableRelationPicker.IsNull() {
				*enableRelationPicker = attributesItem.EnableRelationPicker.ValueBool()
			} else {
				enableRelationPicker = nil
			}
			editMode := new(shared.EditMode)
			if !attributesItem.EditMode.IsUnknown() && !attributesItem.EditMode.IsNull() {
				*editMode = shared.EditMode(attributesItem.EditMode.ValueString())
			} else {
				editMode = nil
			}
			detailsViewModeEnabled := new(bool)
			if !attributesItem.DetailsViewModeEnabled.IsUnknown() && !attributesItem.DetailsViewModeEnabled.IsNull() {
				*detailsViewModeEnabled = attributesItem.DetailsViewModeEnabled.ValueBool()
			} else {
				detailsViewModeEnabled = nil
			}
			var actions []shared.Actions = []shared.Actions{}
			for _, actionsItem := range attributesItem.Actions {
				actionType := new(shared.ActionType)
				if !actionsItem.ActionType.IsUnknown() && !actionsItem.ActionType.IsNull() {
					*actionType = shared.ActionType(actionsItem.ActionType.ValueString())
				} else {
					actionType = nil
				}
				label6 := new(string)
				if !actionsItem.Label.IsUnknown() && !actionsItem.Label.IsNull() {
					*label6 = actionsItem.Label.ValueString()
				} else {
					label6 = nil
				}
				defaultVar := new(bool)
				if !actionsItem.Default.IsUnknown() && !actionsItem.Default.IsNull() {
					*defaultVar = actionsItem.Default.ValueBool()
				} else {
					defaultVar = nil
				}
				featureFlag3 := new(string)
				if !actionsItem.FeatureFlag.IsUnknown() && !actionsItem.FeatureFlag.IsNull() {
					*featureFlag3 = actionsItem.FeatureFlag.ValueString()
				} else {
					featureFlag3 = nil
				}
				var settingsFlag2 []shared.SettingFlag = []shared.SettingFlag{}
				for _, settingsFlagItem2 := range actionsItem.SettingsFlag {
					name5 := new(string)
					if !settingsFlagItem2.Name.IsUnknown() && !settingsFlagItem2.Name.IsNull() {
						*name5 = settingsFlagItem2.Name.ValueString()
					} else {
						name5 = nil
					}
					enabled2 := new(bool)
					if !settingsFlagItem2.Enabled.IsUnknown() && !settingsFlagItem2.Enabled.IsNull() {
						*enabled2 = settingsFlagItem2.Enabled.ValueBool()
					} else {
						enabled2 = nil
					}
					settingsFlag2 = append(settingsFlag2, shared.SettingFlag{
						Name:    name5,
						Enabled: enabled2,
					})
				}
				var newEntityItem *shared.NewEntityItem
				if actionsItem.NewEntityItem != nil {
					id3 := actionsItem.NewEntityItem.ID.ValueString()
					org := actionsItem.NewEntityItem.Org.ValueString()
					var owners []shared.EntityOwner = []shared.EntityOwner{}
					for _, ownersItem := range actionsItem.NewEntityItem.Owners {
						orgID := ownersItem.OrgID.ValueString()
						userID := new(string)
						if !ownersItem.UserID.IsUnknown() && !ownersItem.UserID.IsNull() {
							*userID = ownersItem.UserID.ValueString()
						} else {
							userID = nil
						}
						owners = append(owners, shared.EntityOwner{
							OrgID:  orgID,
							UserID: userID,
						})
					}
					schema := actionsItem.NewEntityItem.Schema.ValueString()
					title1 := new(string)
					if !actionsItem.NewEntityItem.Title.IsUnknown() && !actionsItem.NewEntityItem.Title.IsNull() {
						*title1 = actionsItem.NewEntityItem.Title.ValueString()
					} else {
						title1 = nil
					}
					var tags []string = []string{}
					for _, tagsItem := range actionsItem.NewEntityItem.Tags {
						tags = append(tags, tagsItem.ValueString())
					}
					createdAt1 := new(time.Time)
					if !actionsItem.NewEntityItem.CreatedAt.IsUnknown() && !actionsItem.NewEntityItem.CreatedAt.IsNull() {
						*createdAt1, _ = time.Parse(time.RFC3339Nano, actionsItem.NewEntityItem.CreatedAt.ValueString())
					} else {
						createdAt1 = nil
					}
					updatedAt1 := new(time.Time)
					if !actionsItem.NewEntityItem.UpdatedAt.IsUnknown() && !actionsItem.NewEntityItem.UpdatedAt.IsNull() {
						*updatedAt1, _ = time.Parse(time.RFC3339Nano, actionsItem.NewEntityItem.UpdatedAt.ValueString())
					} else {
						updatedAt1 = nil
					}
					var acl *shared.EntityACL
					if actionsItem.NewEntityItem.ACL != nil {
						var view []string = []string{}
						for _, viewItem := range actionsItem.NewEntityItem.ACL.View {
							view = append(view, viewItem.ValueString())
						}
						var edit []string = []string{}
						for _, editItem := range actionsItem.NewEntityItem.ACL.Edit {
							edit = append(edit, editItem.ValueString())
						}
						var delete []string = []string{}
						for _, deleteItem := range actionsItem.NewEntityItem.ACL.Delete {
							delete = append(delete, deleteItem.ValueString())
						}
						var additionalProperties interface{}
						if !actionsItem.NewEntityItem.ACL.AdditionalProperties.IsUnknown() && !actionsItem.NewEntityItem.ACL.AdditionalProperties.IsNull() {
							_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.ACL.AdditionalProperties.ValueString()), &additionalProperties)
						}
						acl = &shared.EntityACL{
							View:                 view,
							Edit:                 edit,
							Delete:               delete,
							AdditionalProperties: additionalProperties,
						}
					}
					var additionalProperties1 interface{}
					if !actionsItem.NewEntityItem.AdditionalProperties.IsUnknown() && !actionsItem.NewEntityItem.AdditionalProperties.IsNull() {
						_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.AdditionalProperties.ValueString()), &additionalProperties1)
					}
					newEntityItem = &shared.NewEntityItem{
						ID:                   id3,
						Org:                  org,
						Owners:               owners,
						Schema:               schema,
						Title:                title1,
						Tags:                 tags,
						CreatedAt:            createdAt1,
						UpdatedAt:            updatedAt1,
						ACL:                  acl,
						AdditionalProperties: additionalProperties1,
					}
				}
				actions = append(actions, shared.Actions{
					ActionType:    actionType,
					Label:         label6,
					Default:       defaultVar,
					FeatureFlag:   featureFlag3,
					SettingsFlag:  settingsFlag2,
					NewEntityItem: newEntityItem,
				})
			}
			drawerSize := new(shared.DrawerSize)
			if !attributesItem.DrawerSize.IsUnknown() && !attributesItem.DrawerSize.IsNull() {
				*drawerSize = shared.DrawerSize(attributesItem.DrawerSize.ValueString())
			} else {
				drawerSize = nil
			}
			var summaryFields []shared.SummaryFields = []shared.SummaryFields{}
			for _, summaryFieldsItem := range attributesItem.SummaryFields {
				if !summaryFieldsItem.Str.IsUnknown() && !summaryFieldsItem.Str.IsNull() {
					str3 := summaryFieldsItem.Str.ValueString()
					summaryFields = append(summaryFields, shared.SummaryFields{
						Str: &str3,
					})
				}
				if summaryFieldsItem.SummaryField != nil {
					field := new(string)
					if !summaryFieldsItem.SummaryField.Field.IsUnknown() && !summaryFieldsItem.SummaryField.Field.IsNull() {
						*field = summaryFieldsItem.SummaryField.Field.ValueString()
					} else {
						field = nil
					}
					displayAs := new(string)
					if !summaryFieldsItem.SummaryField.DisplayAs.IsUnknown() && !summaryFieldsItem.SummaryField.DisplayAs.IsNull() {
						*displayAs = summaryFieldsItem.SummaryField.DisplayAs.ValueString()
					} else {
						displayAs = nil
					}
					summaryField := shared.SummaryField{
						Field:     field,
						DisplayAs: displayAs,
					}
					summaryFields = append(summaryFields, shared.SummaryFields{
						SummaryField: &summaryField,
					})
				}
			}
			hasPrimary := new(bool)
			if !attributesItem.HasPrimary.IsUnknown() && !attributesItem.HasPrimary.IsNull() {
				*hasPrimary = attributesItem.HasPrimary.ValueBool()
			} else {
				hasPrimary = nil
			}
			var allowedSchemas []string = []string{}
			for _, allowedSchemasItem := range attributesItem.AllowedSchemas {
				allowedSchemas = append(allowedSchemas, allowedSchemasItem.ValueString())
			}
			enableRelationTags := new(bool)
			if !attributesItem.EnableRelationTags.IsUnknown() && !attributesItem.EnableRelationTags.IsNull() {
				*enableRelationTags = attributesItem.EnableRelationTags.ValueBool()
			} else {
				enableRelationTags = nil
			}
			addButtonLabel := new(string)
			if !attributesItem.AddButtonLabel.IsUnknown() && !attributesItem.AddButtonLabel.IsNull() {
				*addButtonLabel = attributesItem.AddButtonLabel.ValueString()
			} else {
				addButtonLabel = nil
			}
			searchPlaceholder := new(string)
			if !attributesItem.SearchPlaceholder.IsUnknown() && !attributesItem.SearchPlaceholder.IsNull() {
				*searchPlaceholder = attributesItem.SearchPlaceholder.ValueString()
			} else {
				searchPlaceholder = nil
			}
			multiple := new(bool)
			if !attributesItem.Multiple.IsUnknown() && !attributesItem.Multiple.IsNull() {
				*multiple = attributesItem.Multiple.ValueBool()
			} else {
				multiple = nil
			}
			currencySelectorOnly := new(bool)
			if !attributesItem.CurrencySelectorOnly.IsUnknown() && !attributesItem.CurrencySelectorOnly.IsNull() {
				*currencySelectorOnly = attributesItem.CurrencySelectorOnly.ValueBool()
			} else {
				currencySelectorOnly = nil
			}
			var currency []shared.Currency = []shared.Currency{}
			for _, currencyItem := range attributesItem.Currency {
				if currencyItem.One != nil {
					code := currencyItem.One.Code.ValueString()
					description := currencyItem.One.Description.ValueString()
					symbol := currencyItem.One.Symbol.ValueString()
					flag := new(string)
					if !currencyItem.One.Flag.IsUnknown() && !currencyItem.One.Flag.IsNull() {
						*flag = currencyItem.One.Flag.ValueString()
					} else {
						flag = nil
					}
					one := shared.One{
						Code:        code,
						Description: description,
						Symbol:      symbol,
						Flag:        flag,
					}
					currency = append(currency, shared.Currency{
						One: &one,
					})
				}
			}
			repeatable := new(bool)
			if !attributesItem.Repeatable.IsUnknown() && !attributesItem.Repeatable.IsNull() {
				*repeatable = attributesItem.Repeatable.ValueBool()
			} else {
				repeatable = nil
			}
			var suggestions []string = []string{}
			for _, suggestionsItem := range attributesItem.Suggestions {
				suggestions = append(suggestions, suggestionsItem.ValueString())
			}
			format := new(string)
			if !attributesItem.Format.IsUnknown() && !attributesItem.Format.IsNull() {
				*format = attributesItem.Format.ValueString()
			} else {
				format = nil
			}
			topic := new(string)
			if !attributesItem.Topic.IsUnknown() && !attributesItem.Topic.IsNull() {
				*topic = attributesItem.Topic.ValueString()
			} else {
				topic = nil
			}
			var identifiers []string = []string{}
			for _, identifiersItem := range attributesItem.Identifiers {
				identifiers = append(identifiers, identifiersItem.ValueString())
			}
			var allowedExtensions []string = []string{}
			for _, allowedExtensionsItem := range attributesItem.AllowedExtensions {
				allowedExtensions = append(allowedExtensions, allowedExtensionsItem.ValueString())
			}
			displayImagesLandscaped := new(bool)
			if !attributesItem.DisplayImagesLandscaped.IsUnknown() && !attributesItem.DisplayImagesLandscaped.IsNull() {
				*displayImagesLandscaped = attributesItem.DisplayImagesLandscaped.ValueBool()
			} else {
				displayImagesLandscaped = nil
			}
			enableDescription := new(bool)
			if !attributesItem.EnableDescription.IsUnknown() && !attributesItem.EnableDescription.IsNull() {
				*enableDescription = attributesItem.EnableDescription.ValueBool()
			} else {
				enableDescription = nil
			}
			defaultAccessControl := new(shared.DefaultAccessControl)
			if !attributesItem.DefaultAccessControl.IsUnknown() && !attributesItem.DefaultAccessControl.IsNull() {
				*defaultAccessControl = shared.DefaultAccessControl(attributesItem.DefaultAccessControl.ValueString())
			} else {
				defaultAccessControl = nil
			}
			slug1 := new(string)
			if !attributesItem.Slug.IsUnknown() && !attributesItem.Slug.IsNull() {
				*slug1 = attributesItem.Slug.ValueString()
			} else {
				slug1 = nil
			}
			var parents []string = []string{}
			for _, parentsItem := range attributesItem.Parents {
				parents = append(parents, parentsItem.ValueString())
			}
			createdAt2 := new(time.Time)
			if !attributesItem.CreatedAt.IsUnknown() && !attributesItem.CreatedAt.IsNull() {
				*createdAt2, _ = time.Parse(time.RFC3339Nano, attributesItem.CreatedAt.ValueString())
			} else {
				createdAt2 = nil
			}
			updatedAt2 := new(time.Time)
			if !attributesItem.UpdatedAt.IsUnknown() && !attributesItem.UpdatedAt.IsNull() {
				*updatedAt2, _ = time.Parse(time.RFC3339Nano, attributesItem.UpdatedAt.ValueString())
			} else {
				updatedAt2 = nil
			}
			attributes = append(attributes, shared.Attribute{
				ID:                       id2,
				Name:                     name3,
				Label:                    label5,
				Placeholder:              placeholder,
				Hidden:                   hidden,
				ShowInTable:              showInTable,
				Sortable:                 sortable,
				Required:                 required,
				Readonly:                 readonly,
				Deprecated:               deprecated,
				DefaultValue:             defaultValue,
				Group:                    group,
				Order:                    order,
				Layout:                   layout,
				HideLabel:                hideLabel,
				Icon:                     icon4,
				RenderCondition:          renderCondition1,
				Purpose:                  purpose,
				Constraints:              constraints,
				FeatureFlag:              featureFlag2,
				SettingsFlag:             settingsFlag1,
				ValueFormatter:           valueFormatter,
				PreviewValueFormatter:    previewValueFormatter,
				EntityBuilderDisableEdit: entityBuilderDisableEdit,
				Protected:                protected,
				InfoHelpers:              infoHelpers,
				Type:                     type2,
				Multiline:                multiline,
				Options:                  options1,
				AllowAny:                 allowAny,
				DisableCaseSensitive:     disableCaseSensitive,
				AllowExtraOptions:        allowExtraOptions,
				Prefix:                   prefix,
				StartNumber:              startNumber,
				RelationType:             relationType,
				ReverseAttributes:        reverseAttributes,
				RelationAffinityMode:     relationAffinityMode,
				EnableRelationPicker:     enableRelationPicker,
				EditMode:                 editMode,
				DetailsViewModeEnabled:   detailsViewModeEnabled,
				Actions:                  actions,
				DrawerSize:               drawerSize,
				SummaryFields:            summaryFields,
				HasPrimary:               hasPrimary,
				AllowedSchemas:           allowedSchemas,
				EnableRelationTags:       enableRelationTags,
				AddButtonLabel:           addButtonLabel,
				SearchPlaceholder:        searchPlaceholder,
				Multiple:                 multiple,
				CurrencySelectorOnly:     currencySelectorOnly,
				Currency:                 currency,
				Repeatable:               repeatable,
				Suggestions:              suggestions,
				Format:                   format,
				Topic:                    topic,
				Identifiers:              identifiers,
				AllowedExtensions:        allowedExtensions,
				DisplayImagesLandscaped:  displayImagesLandscaped,
				EnableDescription:        enableDescription,
				DefaultAccessControl:     defaultAccessControl,
				Slug:                     slug1,
				Parents:                  parents,
				CreatedAt:                createdAt2,
				UpdatedAt:                updatedAt2,
			})
		}
		var purpose1 []string = []string{}
		for _, purposeItem1 := range capabilitiesItem.Purpose {
			purpose1 = append(purpose1, purposeItem1.ValueString())
		}
		var uiHooks []shared.UIHooks = []shared.UIHooks{}
		for _, uiHooksItem := range capabilitiesItem.UIHooks {
			hook := uiHooksItem.Hook.ValueString()
			renderCondition2 := new(string)
			if !uiHooksItem.RenderCondition.IsUnknown() && !uiHooksItem.RenderCondition.IsNull() {
				*renderCondition2 = uiHooksItem.RenderCondition.ValueString()
			} else {
				renderCondition2 = nil
			}
			order1 := new(int64)
			if !uiHooksItem.Order.IsUnknown() && !uiHooksItem.Order.IsNull() {
				*order1 = uiHooksItem.Order.ValueInt64()
			} else {
				order1 = nil
			}
			title2 := new(string)
			if !uiHooksItem.Title.IsUnknown() && !uiHooksItem.Title.IsNull() {
				*title2 = uiHooksItem.Title.ValueString()
			} else {
				title2 = nil
			}
			groupExpanded := new(bool)
			if !uiHooksItem.GroupExpanded.IsUnknown() && !uiHooksItem.GroupExpanded.IsNull() {
				*groupExpanded = uiHooksItem.GroupExpanded.ValueBool()
			} else {
				groupExpanded = nil
			}
			importVar := new(string)
			if !uiHooksItem.Import.IsUnknown() && !uiHooksItem.Import.IsNull() {
				*importVar = uiHooksItem.Import.ValueString()
			} else {
				importVar = nil
			}
			component := new(string)
			if !uiHooksItem.Component.IsUnknown() && !uiHooksItem.Component.IsNull() {
				*component = uiHooksItem.Component.ValueString()
			} else {
				component = nil
			}
			route4 := new(string)
			if !uiHooksItem.Route.IsUnknown() && !uiHooksItem.Route.IsNull() {
				*route4 = uiHooksItem.Route.ValueString()
			} else {
				route4 = nil
			}
			icon5 := new(string)
			if !uiHooksItem.Icon.IsUnknown() && !uiHooksItem.Icon.IsNull() {
				*icon5 = uiHooksItem.Icon.ValueString()
			} else {
				icon5 = nil
			}
			disabled := new(bool)
			if !uiHooksItem.Disabled.IsUnknown() && !uiHooksItem.Disabled.IsNull() {
				*disabled = uiHooksItem.Disabled.ValueBool()
			} else {
				disabled = nil
			}
			header := new(bool)
			if !uiHooksItem.Header.IsUnknown() && !uiHooksItem.Header.IsNull() {
				*header = uiHooksItem.Header.ValueBool()
			} else {
				header = nil
			}
			var requiredPermission *shared.RequiredPermission
			if uiHooksItem.RequiredPermission != nil {
				action3 := uiHooksItem.RequiredPermission.Action.ValueString()
				resource := new(string)
				if !uiHooksItem.RequiredPermission.Resource.IsUnknown() && !uiHooksItem.RequiredPermission.Resource.IsNull() {
					*resource = uiHooksItem.RequiredPermission.Resource.ValueString()
				} else {
					resource = nil
				}
				requiredPermission = &shared.RequiredPermission{
					Action:   action3,
					Resource: resource,
				}
			}
			var additionalProperties2 interface{}
			if !uiHooksItem.AdditionalProperties.IsUnknown() && !uiHooksItem.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(uiHooksItem.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			uiHooks = append(uiHooks, shared.UIHooks{
				Hook:                 hook,
				RenderCondition:      renderCondition2,
				Order:                order1,
				Title:                title2,
				GroupExpanded:        groupExpanded,
				Import:               importVar,
				Component:            component,
				Route:                route4,
				Icon:                 icon5,
				Disabled:             disabled,
				Header:               header,
				RequiredPermission:   requiredPermission,
				AdditionalProperties: additionalProperties2,
			})
		}
		featureFlag4 := new(string)
		if !capabilitiesItem.FeatureFlag.IsUnknown() && !capabilitiesItem.FeatureFlag.IsNull() {
			*featureFlag4 = capabilitiesItem.FeatureFlag.ValueString()
		} else {
			featureFlag4 = nil
		}
		var settingsFlag3 []shared.SettingFlag = []shared.SettingFlag{}
		for _, settingsFlagItem3 := range capabilitiesItem.SettingsFlag {
			name6 := new(string)
			if !settingsFlagItem3.Name.IsUnknown() && !settingsFlagItem3.Name.IsNull() {
				*name6 = settingsFlagItem3.Name.ValueString()
			} else {
				name6 = nil
			}
			enabled3 := new(bool)
			if !settingsFlagItem3.Enabled.IsUnknown() && !settingsFlagItem3.Enabled.IsNull() {
				*enabled3 = settingsFlagItem3.Enabled.ValueBool()
			} else {
				enabled3 = nil
			}
			settingsFlag3 = append(settingsFlag3, shared.SettingFlag{
				Name:    name6,
				Enabled: enabled3,
			})
		}
		capabilities = append(capabilities, shared.EntityCapability{
			Name:         name2,
			Title:        title,
			Attributes:   attributes,
			Purpose:      purpose1,
			UIHooks:      uiHooks,
			FeatureFlag:  featureFlag4,
			SettingsFlag: settingsFlag3,
		})
	}
	var groupSettings []shared.GroupSettings = []shared.GroupSettings{}
	for _, groupSettingsItem := range r.GroupSettings {
		label7 := groupSettingsItem.Label.ValueString()
		id4 := new(string)
		if !groupSettingsItem.ID.IsUnknown() && !groupSettingsItem.ID.IsNull() {
			*id4 = groupSettingsItem.ID.ValueString()
		} else {
			id4 = nil
		}
		expanded := new(bool)
		if !groupSettingsItem.Expanded.IsUnknown() && !groupSettingsItem.Expanded.IsNull() {
			*expanded = groupSettingsItem.Expanded.ValueBool()
		} else {
			expanded = nil
		}
		renderCondition3 := new(string)
		if !groupSettingsItem.RenderCondition.IsUnknown() && !groupSettingsItem.RenderCondition.IsNull() {
			*renderCondition3 = groupSettingsItem.RenderCondition.ValueString()
		} else {
			renderCondition3 = nil
		}
		order2 := new(int64)
		if !groupSettingsItem.Order.IsUnknown() && !groupSettingsItem.Order.IsNull() {
			*order2 = groupSettingsItem.Order.ValueInt64()
		} else {
			order2 = nil
		}
		featureFlag5 := new(string)
		if !groupSettingsItem.FeatureFlag.IsUnknown() && !groupSettingsItem.FeatureFlag.IsNull() {
			*featureFlag5 = groupSettingsItem.FeatureFlag.ValueString()
		} else {
			featureFlag5 = nil
		}
		var settingsFlag4 []shared.SettingFlag = []shared.SettingFlag{}
		for _, settingsFlagItem4 := range groupSettingsItem.SettingsFlag {
			name7 := new(string)
			if !settingsFlagItem4.Name.IsUnknown() && !settingsFlagItem4.Name.IsNull() {
				*name7 = settingsFlagItem4.Name.ValueString()
			} else {
				name7 = nil
			}
			enabled4 := new(bool)
			if !settingsFlagItem4.Enabled.IsUnknown() && !settingsFlagItem4.Enabled.IsNull() {
				*enabled4 = settingsFlagItem4.Enabled.ValueBool()
			} else {
				enabled4 = nil
			}
			settingsFlag4 = append(settingsFlag4, shared.SettingFlag{
				Name:    name7,
				Enabled: enabled4,
			})
		}
		var infoTooltipTitle *shared.InfoTooltipTitle
		if groupSettingsItem.InfoTooltipTitle != nil {
			key := new(string)
			if !groupSettingsItem.InfoTooltipTitle.Key.IsUnknown() && !groupSettingsItem.InfoTooltipTitle.Key.IsNull() {
				*key = groupSettingsItem.InfoTooltipTitle.Key.ValueString()
			} else {
				key = nil
			}
			defaultVar1 := new(string)
			if !groupSettingsItem.InfoTooltipTitle.Default.IsUnknown() && !groupSettingsItem.InfoTooltipTitle.Default.IsNull() {
				*defaultVar1 = groupSettingsItem.InfoTooltipTitle.Default.ValueString()
			} else {
				defaultVar1 = nil
			}
			infoTooltipTitle = &shared.InfoTooltipTitle{
				Key:     key,
				Default: defaultVar1,
			}
		}
		var purpose2 []string = []string{}
		for _, purposeItem2 := range groupSettingsItem.Purpose {
			purpose2 = append(purpose2, purposeItem2.ValueString())
		}
		groupSettings = append(groupSettings, shared.GroupSettings{
			Label:            label7,
			ID:               id4,
			Expanded:         expanded,
			RenderCondition:  renderCondition3,
			Order:            order2,
			FeatureFlag:      featureFlag5,
			SettingsFlag:     settingsFlag4,
			InfoTooltipTitle: infoTooltipTitle,
			Purpose:          purpose2,
		})
	}
	var layoutSettings *shared.LayoutSettings
	if r.LayoutSettings != nil {
		gridGap := new(string)
		if !r.LayoutSettings.GridGap.IsUnknown() && !r.LayoutSettings.GridGap.IsNull() {
			*gridGap = r.LayoutSettings.GridGap.ValueString()
		} else {
			gridGap = nil
		}
		gridTemplateColumns := new(string)
		if !r.LayoutSettings.GridTemplateColumns.IsUnknown() && !r.LayoutSettings.GridTemplateColumns.IsNull() {
			*gridTemplateColumns = r.LayoutSettings.GridTemplateColumns.ValueString()
		} else {
			gridTemplateColumns = nil
		}
		var additionalProperties3 interface{}
		if !r.LayoutSettings.AdditionalProperties.IsUnknown() && !r.LayoutSettings.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.LayoutSettings.AdditionalProperties.ValueString()), &additionalProperties3)
		}
		layoutSettings = &shared.LayoutSettings{
			GridGap:              gridGap,
			GridTemplateColumns:  gridTemplateColumns,
			AdditionalProperties: additionalProperties3,
		}
	}
	dialogConfig := make(map[string]interface{})
	for dialogConfigKey, dialogConfigValue := range r.DialogConfig {
		var dialogConfigInst interface{}
		_ = json.Unmarshal([]byte(dialogConfigValue.ValueString()), &dialogConfigInst)
		dialogConfig[dialogConfigKey] = dialogConfigInst
	}
	var attributes1 []shared.Attribute = []shared.Attribute{}
	for _, attributesItem1 := range r.Attributes {
		id5 := new(string)
		if !attributesItem1.ID.IsUnknown() && !attributesItem1.ID.IsNull() {
			*id5 = attributesItem1.ID.ValueString()
		} else {
			id5 = nil
		}
		name8 := attributesItem1.Name.ValueString()
		label8 := attributesItem1.Label.ValueString()
		placeholder1 := new(string)
		if !attributesItem1.Placeholder.IsUnknown() && !attributesItem1.Placeholder.IsNull() {
			*placeholder1 = attributesItem1.Placeholder.ValueString()
		} else {
			placeholder1 = nil
		}
		hidden1 := new(bool)
		if !attributesItem1.Hidden.IsUnknown() && !attributesItem1.Hidden.IsNull() {
			*hidden1 = attributesItem1.Hidden.ValueBool()
		} else {
			hidden1 = nil
		}
		showInTable1 := new(bool)
		if !attributesItem1.ShowInTable.IsUnknown() && !attributesItem1.ShowInTable.IsNull() {
			*showInTable1 = attributesItem1.ShowInTable.ValueBool()
		} else {
			showInTable1 = nil
		}
		sortable1 := new(bool)
		if !attributesItem1.Sortable.IsUnknown() && !attributesItem1.Sortable.IsNull() {
			*sortable1 = attributesItem1.Sortable.ValueBool()
		} else {
			sortable1 = nil
		}
		required1 := new(bool)
		if !attributesItem1.Required.IsUnknown() && !attributesItem1.Required.IsNull() {
			*required1 = attributesItem1.Required.ValueBool()
		} else {
			required1 = nil
		}
		readonly1 := new(bool)
		if !attributesItem1.Readonly.IsUnknown() && !attributesItem1.Readonly.IsNull() {
			*readonly1 = attributesItem1.Readonly.ValueBool()
		} else {
			readonly1 = nil
		}
		deprecated1 := new(bool)
		if !attributesItem1.Deprecated.IsUnknown() && !attributesItem1.Deprecated.IsNull() {
			*deprecated1 = attributesItem1.Deprecated.ValueBool()
		} else {
			deprecated1 = nil
		}
		var defaultValue1 interface{}
		if !attributesItem1.DefaultValue.IsUnknown() && !attributesItem1.DefaultValue.IsNull() {
			_ = json.Unmarshal([]byte(attributesItem1.DefaultValue.ValueString()), &defaultValue1)
		}
		group1 := new(string)
		if !attributesItem1.Group.IsUnknown() && !attributesItem1.Group.IsNull() {
			*group1 = attributesItem1.Group.ValueString()
		} else {
			group1 = nil
		}
		order3 := new(int64)
		if !attributesItem1.Order.IsUnknown() && !attributesItem1.Order.IsNull() {
			*order3 = attributesItem1.Order.ValueInt64()
		} else {
			order3 = nil
		}
		layout1 := new(string)
		if !attributesItem1.Layout.IsUnknown() && !attributesItem1.Layout.IsNull() {
			*layout1 = attributesItem1.Layout.ValueString()
		} else {
			layout1 = nil
		}
		hideLabel1 := new(bool)
		if !attributesItem1.HideLabel.IsUnknown() && !attributesItem1.HideLabel.IsNull() {
			*hideLabel1 = attributesItem1.HideLabel.ValueBool()
		} else {
			hideLabel1 = nil
		}
		icon6 := new(string)
		if !attributesItem1.Icon.IsUnknown() && !attributesItem1.Icon.IsNull() {
			*icon6 = attributesItem1.Icon.ValueString()
		} else {
			icon6 = nil
		}
		renderCondition4 := new(string)
		if !attributesItem1.RenderCondition.IsUnknown() && !attributesItem1.RenderCondition.IsNull() {
			*renderCondition4 = attributesItem1.RenderCondition.ValueString()
		} else {
			renderCondition4 = nil
		}
		var purpose3 []string = []string{}
		for _, purposeItem3 := range attributesItem1.Purpose {
			purpose3 = append(purpose3, purposeItem3.ValueString())
		}
		var constraints1 *shared.Constraints
		if attributesItem1.Constraints != nil {
			constraints1 = &shared.Constraints{}
		}
		featureFlag6 := new(string)
		if !attributesItem1.FeatureFlag.IsUnknown() && !attributesItem1.FeatureFlag.IsNull() {
			*featureFlag6 = attributesItem1.FeatureFlag.ValueString()
		} else {
			featureFlag6 = nil
		}
		var settingsFlag5 []shared.SettingFlag = []shared.SettingFlag{}
		for _, settingsFlagItem5 := range attributesItem1.SettingsFlag {
			name9 := new(string)
			if !settingsFlagItem5.Name.IsUnknown() && !settingsFlagItem5.Name.IsNull() {
				*name9 = settingsFlagItem5.Name.ValueString()
			} else {
				name9 = nil
			}
			enabled5 := new(bool)
			if !settingsFlagItem5.Enabled.IsUnknown() && !settingsFlagItem5.Enabled.IsNull() {
				*enabled5 = settingsFlagItem5.Enabled.ValueBool()
			} else {
				enabled5 = nil
			}
			settingsFlag5 = append(settingsFlag5, shared.SettingFlag{
				Name:    name9,
				Enabled: enabled5,
			})
		}
		valueFormatter1 := new(string)
		if !attributesItem1.ValueFormatter.IsUnknown() && !attributesItem1.ValueFormatter.IsNull() {
			*valueFormatter1 = attributesItem1.ValueFormatter.ValueString()
		} else {
			valueFormatter1 = nil
		}
		previewValueFormatter1 := new(string)
		if !attributesItem1.PreviewValueFormatter.IsUnknown() && !attributesItem1.PreviewValueFormatter.IsNull() {
			*previewValueFormatter1 = attributesItem1.PreviewValueFormatter.ValueString()
		} else {
			previewValueFormatter1 = nil
		}
		entityBuilderDisableEdit1 := new(bool)
		if !attributesItem1.EntityBuilderDisableEdit.IsUnknown() && !attributesItem1.EntityBuilderDisableEdit.IsNull() {
			*entityBuilderDisableEdit1 = attributesItem1.EntityBuilderDisableEdit.ValueBool()
		} else {
			entityBuilderDisableEdit1 = nil
		}
		protected1 := new(bool)
		if !attributesItem1.Protected.IsUnknown() && !attributesItem1.Protected.IsNull() {
			*protected1 = attributesItem1.Protected.ValueBool()
		} else {
			protected1 = nil
		}
		var infoHelpers1 *shared.InfoHelpers
		if attributesItem1.InfoHelpers != nil {
			hintText1 := new(string)
			if !attributesItem1.InfoHelpers.HintText.IsUnknown() && !attributesItem1.InfoHelpers.HintText.IsNull() {
				*hintText1 = attributesItem1.InfoHelpers.HintText.ValueString()
			} else {
				hintText1 = nil
			}
			hintTextKey1 := new(string)
			if !attributesItem1.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem1.InfoHelpers.HintTextKey.IsNull() {
				*hintTextKey1 = attributesItem1.InfoHelpers.HintTextKey.ValueString()
			} else {
				hintTextKey1 = nil
			}
			hintCustomComponent1 := new(string)
			if !attributesItem1.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem1.InfoHelpers.HintCustomComponent.IsNull() {
				*hintCustomComponent1 = attributesItem1.InfoHelpers.HintCustomComponent.ValueString()
			} else {
				hintCustomComponent1 = nil
			}
			hintTooltipPlacement1 := new(string)
			if !attributesItem1.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem1.InfoHelpers.HintTooltipPlacement.IsNull() {
				*hintTooltipPlacement1 = attributesItem1.InfoHelpers.HintTooltipPlacement.ValueString()
			} else {
				hintTooltipPlacement1 = nil
			}
			infoHelpers1 = &shared.InfoHelpers{
				HintText:             hintText1,
				HintTextKey:          hintTextKey1,
				HintCustomComponent:  hintCustomComponent1,
				HintTooltipPlacement: hintTooltipPlacement1,
			}
		}
		type3 := shared.Type(attributesItem1.Type.ValueString())
		multiline1 := new(bool)
		if !attributesItem1.Multiline.IsUnknown() && !attributesItem1.Multiline.IsNull() {
			*multiline1 = attributesItem1.Multiline.ValueBool()
		} else {
			multiline1 = nil
		}
		var options2 []string = []string{}
		for _, optionsItem2 := range attributesItem1.Options {
			options2 = append(options2, optionsItem2.ValueString())
		}
		allowAny1 := new(bool)
		if !attributesItem1.AllowAny.IsUnknown() && !attributesItem1.AllowAny.IsNull() {
			*allowAny1 = attributesItem1.AllowAny.ValueBool()
		} else {
			allowAny1 = nil
		}
		disableCaseSensitive1 := new(bool)
		if !attributesItem1.DisableCaseSensitive.IsUnknown() && !attributesItem1.DisableCaseSensitive.IsNull() {
			*disableCaseSensitive1 = attributesItem1.DisableCaseSensitive.ValueBool()
		} else {
			disableCaseSensitive1 = nil
		}
		allowExtraOptions1 := new(bool)
		if !attributesItem1.AllowExtraOptions.IsUnknown() && !attributesItem1.AllowExtraOptions.IsNull() {
			*allowExtraOptions1 = attributesItem1.AllowExtraOptions.ValueBool()
		} else {
			allowExtraOptions1 = nil
		}
		prefix1 := new(string)
		if !attributesItem1.Prefix.IsUnknown() && !attributesItem1.Prefix.IsNull() {
			*prefix1 = attributesItem1.Prefix.ValueString()
		} else {
			prefix1 = nil
		}
		startNumber1 := new(int64)
		if !attributesItem1.StartNumber.IsUnknown() && !attributesItem1.StartNumber.IsNull() {
			*startNumber1 = attributesItem1.StartNumber.ValueInt64()
		} else {
			startNumber1 = nil
		}
		relationType1 := new(shared.RelationType)
		if !attributesItem1.RelationType.IsUnknown() && !attributesItem1.RelationType.IsNull() {
			*relationType1 = shared.RelationType(attributesItem1.RelationType.ValueString())
		} else {
			relationType1 = nil
		}
		reverseAttributes1 := make(map[string]string)
		for reverseAttributesKey1, reverseAttributesValue1 := range attributesItem1.ReverseAttributes {
			reverseAttributesInst1 := reverseAttributesValue1.ValueString()
			reverseAttributes1[reverseAttributesKey1] = reverseAttributesInst1
		}
		relationAffinityMode1 := new(shared.RelationAffinityMode)
		if !attributesItem1.RelationAffinityMode.IsUnknown() && !attributesItem1.RelationAffinityMode.IsNull() {
			*relationAffinityMode1 = shared.RelationAffinityMode(attributesItem1.RelationAffinityMode.ValueString())
		} else {
			relationAffinityMode1 = nil
		}
		enableRelationPicker1 := new(bool)
		if !attributesItem1.EnableRelationPicker.IsUnknown() && !attributesItem1.EnableRelationPicker.IsNull() {
			*enableRelationPicker1 = attributesItem1.EnableRelationPicker.ValueBool()
		} else {
			enableRelationPicker1 = nil
		}
		editMode1 := new(shared.EditMode)
		if !attributesItem1.EditMode.IsUnknown() && !attributesItem1.EditMode.IsNull() {
			*editMode1 = shared.EditMode(attributesItem1.EditMode.ValueString())
		} else {
			editMode1 = nil
		}
		detailsViewModeEnabled1 := new(bool)
		if !attributesItem1.DetailsViewModeEnabled.IsUnknown() && !attributesItem1.DetailsViewModeEnabled.IsNull() {
			*detailsViewModeEnabled1 = attributesItem1.DetailsViewModeEnabled.ValueBool()
		} else {
			detailsViewModeEnabled1 = nil
		}
		var actions1 []shared.Actions = []shared.Actions{}
		for _, actionsItem1 := range attributesItem1.Actions {
			actionType1 := new(shared.ActionType)
			if !actionsItem1.ActionType.IsUnknown() && !actionsItem1.ActionType.IsNull() {
				*actionType1 = shared.ActionType(actionsItem1.ActionType.ValueString())
			} else {
				actionType1 = nil
			}
			label9 := new(string)
			if !actionsItem1.Label.IsUnknown() && !actionsItem1.Label.IsNull() {
				*label9 = actionsItem1.Label.ValueString()
			} else {
				label9 = nil
			}
			default1 := new(bool)
			if !actionsItem1.Default.IsUnknown() && !actionsItem1.Default.IsNull() {
				*default1 = actionsItem1.Default.ValueBool()
			} else {
				default1 = nil
			}
			featureFlag7 := new(string)
			if !actionsItem1.FeatureFlag.IsUnknown() && !actionsItem1.FeatureFlag.IsNull() {
				*featureFlag7 = actionsItem1.FeatureFlag.ValueString()
			} else {
				featureFlag7 = nil
			}
			var settingsFlag6 []shared.SettingFlag = []shared.SettingFlag{}
			for _, settingsFlagItem6 := range actionsItem1.SettingsFlag {
				name10 := new(string)
				if !settingsFlagItem6.Name.IsUnknown() && !settingsFlagItem6.Name.IsNull() {
					*name10 = settingsFlagItem6.Name.ValueString()
				} else {
					name10 = nil
				}
				enabled6 := new(bool)
				if !settingsFlagItem6.Enabled.IsUnknown() && !settingsFlagItem6.Enabled.IsNull() {
					*enabled6 = settingsFlagItem6.Enabled.ValueBool()
				} else {
					enabled6 = nil
				}
				settingsFlag6 = append(settingsFlag6, shared.SettingFlag{
					Name:    name10,
					Enabled: enabled6,
				})
			}
			var newEntityItem1 *shared.NewEntityItem
			if actionsItem1.NewEntityItem != nil {
				id6 := actionsItem1.NewEntityItem.ID.ValueString()
				org1 := actionsItem1.NewEntityItem.Org.ValueString()
				var owners1 []shared.EntityOwner = []shared.EntityOwner{}
				for _, ownersItem1 := range actionsItem1.NewEntityItem.Owners {
					orgId1 := ownersItem1.OrgID.ValueString()
					userId1 := new(string)
					if !ownersItem1.UserID.IsUnknown() && !ownersItem1.UserID.IsNull() {
						*userId1 = ownersItem1.UserID.ValueString()
					} else {
						userId1 = nil
					}
					owners1 = append(owners1, shared.EntityOwner{
						OrgID:  orgId1,
						UserID: userId1,
					})
				}
				schema1 := actionsItem1.NewEntityItem.Schema.ValueString()
				title3 := new(string)
				if !actionsItem1.NewEntityItem.Title.IsUnknown() && !actionsItem1.NewEntityItem.Title.IsNull() {
					*title3 = actionsItem1.NewEntityItem.Title.ValueString()
				} else {
					title3 = nil
				}
				var tags1 []string = []string{}
				for _, tagsItem1 := range actionsItem1.NewEntityItem.Tags {
					tags1 = append(tags1, tagsItem1.ValueString())
				}
				createdAt3 := new(time.Time)
				if !actionsItem1.NewEntityItem.CreatedAt.IsUnknown() && !actionsItem1.NewEntityItem.CreatedAt.IsNull() {
					*createdAt3, _ = time.Parse(time.RFC3339Nano, actionsItem1.NewEntityItem.CreatedAt.ValueString())
				} else {
					createdAt3 = nil
				}
				updatedAt3 := new(time.Time)
				if !actionsItem1.NewEntityItem.UpdatedAt.IsUnknown() && !actionsItem1.NewEntityItem.UpdatedAt.IsNull() {
					*updatedAt3, _ = time.Parse(time.RFC3339Nano, actionsItem1.NewEntityItem.UpdatedAt.ValueString())
				} else {
					updatedAt3 = nil
				}
				var acl1 *shared.EntityACL
				if actionsItem1.NewEntityItem.ACL != nil {
					var view1 []string = []string{}
					for _, viewItem1 := range actionsItem1.NewEntityItem.ACL.View {
						view1 = append(view1, viewItem1.ValueString())
					}
					var edit1 []string = []string{}
					for _, editItem1 := range actionsItem1.NewEntityItem.ACL.Edit {
						edit1 = append(edit1, editItem1.ValueString())
					}
					var delete1 []string = []string{}
					for _, deleteItem1 := range actionsItem1.NewEntityItem.ACL.Delete {
						delete1 = append(delete1, deleteItem1.ValueString())
					}
					var additionalProperties4 interface{}
					if !actionsItem1.NewEntityItem.ACL.AdditionalProperties.IsUnknown() && !actionsItem1.NewEntityItem.ACL.AdditionalProperties.IsNull() {
						_ = json.Unmarshal([]byte(actionsItem1.NewEntityItem.ACL.AdditionalProperties.ValueString()), &additionalProperties4)
					}
					acl1 = &shared.EntityACL{
						View:                 view1,
						Edit:                 edit1,
						Delete:               delete1,
						AdditionalProperties: additionalProperties4,
					}
				}
				var additionalProperties5 interface{}
				if !actionsItem1.NewEntityItem.AdditionalProperties.IsUnknown() && !actionsItem1.NewEntityItem.AdditionalProperties.IsNull() {
					_ = json.Unmarshal([]byte(actionsItem1.NewEntityItem.AdditionalProperties.ValueString()), &additionalProperties5)
				}
				newEntityItem1 = &shared.NewEntityItem{
					ID:                   id6,
					Org:                  org1,
					Owners:               owners1,
					Schema:               schema1,
					Title:                title3,
					Tags:                 tags1,
					CreatedAt:            createdAt3,
					UpdatedAt:            updatedAt3,
					ACL:                  acl1,
					AdditionalProperties: additionalProperties5,
				}
			}
			actions1 = append(actions1, shared.Actions{
				ActionType:    actionType1,
				Label:         label9,
				Default:       default1,
				FeatureFlag:   featureFlag7,
				SettingsFlag:  settingsFlag6,
				NewEntityItem: newEntityItem1,
			})
		}
		drawerSize1 := new(shared.DrawerSize)
		if !attributesItem1.DrawerSize.IsUnknown() && !attributesItem1.DrawerSize.IsNull() {
			*drawerSize1 = shared.DrawerSize(attributesItem1.DrawerSize.ValueString())
		} else {
			drawerSize1 = nil
		}
		var summaryFields1 []shared.SummaryFields = []shared.SummaryFields{}
		for _, summaryFieldsItem1 := range attributesItem1.SummaryFields {
			if !summaryFieldsItem1.Str.IsUnknown() && !summaryFieldsItem1.Str.IsNull() {
				str4 := summaryFieldsItem1.Str.ValueString()
				summaryFields1 = append(summaryFields1, shared.SummaryFields{
					Str: &str4,
				})
			}
			if summaryFieldsItem1.SummaryField != nil {
				field1 := new(string)
				if !summaryFieldsItem1.SummaryField.Field.IsUnknown() && !summaryFieldsItem1.SummaryField.Field.IsNull() {
					*field1 = summaryFieldsItem1.SummaryField.Field.ValueString()
				} else {
					field1 = nil
				}
				displayAs1 := new(string)
				if !summaryFieldsItem1.SummaryField.DisplayAs.IsUnknown() && !summaryFieldsItem1.SummaryField.DisplayAs.IsNull() {
					*displayAs1 = summaryFieldsItem1.SummaryField.DisplayAs.ValueString()
				} else {
					displayAs1 = nil
				}
				summaryField1 := shared.SummaryField{
					Field:     field1,
					DisplayAs: displayAs1,
				}
				summaryFields1 = append(summaryFields1, shared.SummaryFields{
					SummaryField: &summaryField1,
				})
			}
		}
		hasPrimary1 := new(bool)
		if !attributesItem1.HasPrimary.IsUnknown() && !attributesItem1.HasPrimary.IsNull() {
			*hasPrimary1 = attributesItem1.HasPrimary.ValueBool()
		} else {
			hasPrimary1 = nil
		}
		var allowedSchemas1 []string = []string{}
		for _, allowedSchemasItem1 := range attributesItem1.AllowedSchemas {
			allowedSchemas1 = append(allowedSchemas1, allowedSchemasItem1.ValueString())
		}
		enableRelationTags1 := new(bool)
		if !attributesItem1.EnableRelationTags.IsUnknown() && !attributesItem1.EnableRelationTags.IsNull() {
			*enableRelationTags1 = attributesItem1.EnableRelationTags.ValueBool()
		} else {
			enableRelationTags1 = nil
		}
		addButtonLabel1 := new(string)
		if !attributesItem1.AddButtonLabel.IsUnknown() && !attributesItem1.AddButtonLabel.IsNull() {
			*addButtonLabel1 = attributesItem1.AddButtonLabel.ValueString()
		} else {
			addButtonLabel1 = nil
		}
		searchPlaceholder1 := new(string)
		if !attributesItem1.SearchPlaceholder.IsUnknown() && !attributesItem1.SearchPlaceholder.IsNull() {
			*searchPlaceholder1 = attributesItem1.SearchPlaceholder.ValueString()
		} else {
			searchPlaceholder1 = nil
		}
		multiple1 := new(bool)
		if !attributesItem1.Multiple.IsUnknown() && !attributesItem1.Multiple.IsNull() {
			*multiple1 = attributesItem1.Multiple.ValueBool()
		} else {
			multiple1 = nil
		}
		currencySelectorOnly1 := new(bool)
		if !attributesItem1.CurrencySelectorOnly.IsUnknown() && !attributesItem1.CurrencySelectorOnly.IsNull() {
			*currencySelectorOnly1 = attributesItem1.CurrencySelectorOnly.ValueBool()
		} else {
			currencySelectorOnly1 = nil
		}
		var currency1 []shared.Currency = []shared.Currency{}
		for _, currencyItem1 := range attributesItem1.Currency {
			if currencyItem1.One != nil {
				code1 := currencyItem1.One.Code.ValueString()
				description1 := currencyItem1.One.Description.ValueString()
				symbol1 := currencyItem1.One.Symbol.ValueString()
				flag1 := new(string)
				if !currencyItem1.One.Flag.IsUnknown() && !currencyItem1.One.Flag.IsNull() {
					*flag1 = currencyItem1.One.Flag.ValueString()
				} else {
					flag1 = nil
				}
				eleven := shared.One{
					Code:        code1,
					Description: description1,
					Symbol:      symbol1,
					Flag:        flag1,
				}
				currency1 = append(currency1, shared.Currency{
					One: &eleven,
				})
			}
		}
		repeatable1 := new(bool)
		if !attributesItem1.Repeatable.IsUnknown() && !attributesItem1.Repeatable.IsNull() {
			*repeatable1 = attributesItem1.Repeatable.ValueBool()
		} else {
			repeatable1 = nil
		}
		var suggestions1 []string = []string{}
		for _, suggestionsItem1 := range attributesItem1.Suggestions {
			suggestions1 = append(suggestions1, suggestionsItem1.ValueString())
		}
		format1 := new(string)
		if !attributesItem1.Format.IsUnknown() && !attributesItem1.Format.IsNull() {
			*format1 = attributesItem1.Format.ValueString()
		} else {
			format1 = nil
		}
		topic1 := new(string)
		if !attributesItem1.Topic.IsUnknown() && !attributesItem1.Topic.IsNull() {
			*topic1 = attributesItem1.Topic.ValueString()
		} else {
			topic1 = nil
		}
		var identifiers1 []string = []string{}
		for _, identifiersItem1 := range attributesItem1.Identifiers {
			identifiers1 = append(identifiers1, identifiersItem1.ValueString())
		}
		var allowedExtensions1 []string = []string{}
		for _, allowedExtensionsItem1 := range attributesItem1.AllowedExtensions {
			allowedExtensions1 = append(allowedExtensions1, allowedExtensionsItem1.ValueString())
		}
		displayImagesLandscaped1 := new(bool)
		if !attributesItem1.DisplayImagesLandscaped.IsUnknown() && !attributesItem1.DisplayImagesLandscaped.IsNull() {
			*displayImagesLandscaped1 = attributesItem1.DisplayImagesLandscaped.ValueBool()
		} else {
			displayImagesLandscaped1 = nil
		}
		enableDescription1 := new(bool)
		if !attributesItem1.EnableDescription.IsUnknown() && !attributesItem1.EnableDescription.IsNull() {
			*enableDescription1 = attributesItem1.EnableDescription.ValueBool()
		} else {
			enableDescription1 = nil
		}
		defaultAccessControl1 := new(shared.DefaultAccessControl)
		if !attributesItem1.DefaultAccessControl.IsUnknown() && !attributesItem1.DefaultAccessControl.IsNull() {
			*defaultAccessControl1 = shared.DefaultAccessControl(attributesItem1.DefaultAccessControl.ValueString())
		} else {
			defaultAccessControl1 = nil
		}
		slug2 := new(string)
		if !attributesItem1.Slug.IsUnknown() && !attributesItem1.Slug.IsNull() {
			*slug2 = attributesItem1.Slug.ValueString()
		} else {
			slug2 = nil
		}
		var parents1 []string = []string{}
		for _, parentsItem1 := range attributesItem1.Parents {
			parents1 = append(parents1, parentsItem1.ValueString())
		}
		createdAt4 := new(time.Time)
		if !attributesItem1.CreatedAt.IsUnknown() && !attributesItem1.CreatedAt.IsNull() {
			*createdAt4, _ = time.Parse(time.RFC3339Nano, attributesItem1.CreatedAt.ValueString())
		} else {
			createdAt4 = nil
		}
		updatedAt4 := new(time.Time)
		if !attributesItem1.UpdatedAt.IsUnknown() && !attributesItem1.UpdatedAt.IsNull() {
			*updatedAt4, _ = time.Parse(time.RFC3339Nano, attributesItem1.UpdatedAt.ValueString())
		} else {
			updatedAt4 = nil
		}
		attributes1 = append(attributes1, shared.Attribute{
			ID:                       id5,
			Name:                     name8,
			Label:                    label8,
			Placeholder:              placeholder1,
			Hidden:                   hidden1,
			ShowInTable:              showInTable1,
			Sortable:                 sortable1,
			Required:                 required1,
			Readonly:                 readonly1,
			Deprecated:               deprecated1,
			DefaultValue:             defaultValue1,
			Group:                    group1,
			Order:                    order3,
			Layout:                   layout1,
			HideLabel:                hideLabel1,
			Icon:                     icon6,
			RenderCondition:          renderCondition4,
			Purpose:                  purpose3,
			Constraints:              constraints1,
			FeatureFlag:              featureFlag6,
			SettingsFlag:             settingsFlag5,
			ValueFormatter:           valueFormatter1,
			PreviewValueFormatter:    previewValueFormatter1,
			EntityBuilderDisableEdit: entityBuilderDisableEdit1,
			Protected:                protected1,
			InfoHelpers:              infoHelpers1,
			Type:                     type3,
			Multiline:                multiline1,
			Options:                  options2,
			AllowAny:                 allowAny1,
			DisableCaseSensitive:     disableCaseSensitive1,
			AllowExtraOptions:        allowExtraOptions1,
			Prefix:                   prefix1,
			StartNumber:              startNumber1,
			RelationType:             relationType1,
			ReverseAttributes:        reverseAttributes1,
			RelationAffinityMode:     relationAffinityMode1,
			EnableRelationPicker:     enableRelationPicker1,
			EditMode:                 editMode1,
			DetailsViewModeEnabled:   detailsViewModeEnabled1,
			Actions:                  actions1,
			DrawerSize:               drawerSize1,
			SummaryFields:            summaryFields1,
			HasPrimary:               hasPrimary1,
			AllowedSchemas:           allowedSchemas1,
			EnableRelationTags:       enableRelationTags1,
			AddButtonLabel:           addButtonLabel1,
			SearchPlaceholder:        searchPlaceholder1,
			Multiple:                 multiple1,
			CurrencySelectorOnly:     currencySelectorOnly1,
			Currency:                 currency1,
			Repeatable:               repeatable1,
			Suggestions:              suggestions1,
			Format:                   format1,
			Topic:                    topic1,
			Identifiers:              identifiers1,
			AllowedExtensions:        allowedExtensions1,
			DisplayImagesLandscaped:  displayImagesLandscaped1,
			EnableDescription:        enableDescription1,
			DefaultAccessControl:     defaultAccessControl1,
			Slug:                     slug2,
			Parents:                  parents1,
			CreatedAt:                createdAt4,
			UpdatedAt:                updatedAt4,
		})
	}
	explicitSearchMappings := make(map[string]shared.SearchMappings)
	for explicitSearchMappingsKey, explicitSearchMappingsValue := range r.ExplicitSearchMappings {
		index := new(bool)
		if !explicitSearchMappingsValue.Index.IsUnknown() && !explicitSearchMappingsValue.Index.IsNull() {
			*index = explicitSearchMappingsValue.Index.ValueBool()
		} else {
			index = nil
		}
		typeVar1 := new(shared.SearchMappingsType)
		if !explicitSearchMappingsValue.Type.IsUnknown() && !explicitSearchMappingsValue.Type.IsNull() {
			*typeVar1 = shared.SearchMappingsType(explicitSearchMappingsValue.Type.ValueString())
		} else {
			typeVar1 = nil
		}
		fields := make(map[string]interface{})
		for fieldsKey, fieldsValue := range explicitSearchMappingsValue.Fields {
			var fieldsInst interface{}
			_ = json.Unmarshal([]byte(fieldsValue.ValueString()), &fieldsInst)
			fields[fieldsKey] = fieldsInst
		}
		explicitSearchMappingsInst := shared.SearchMappings{
			Index:  index,
			Type:   typeVar1,
			Fields: fields,
		}
		explicitSearchMappings[explicitSearchMappingsKey] = explicitSearchMappingsInst
	}
	out := shared.EntitySchemaItem{
		ID:                     id,
		CreatedAt:              createdAt,
		UpdatedAt:              updatedAt,
		Comment:                comment,
		Source:                 source,
		Slug:                   slug,
		Version:                version,
		Blueprint:              blueprint,
		FeatureFlag:            featureFlag,
		EnableSetting:          enableSetting,
		Name:                   name,
		Plural:                 plural,
		Published:              published,
		Draft:                  draft,
		Icon:                   icon,
		TitleTemplate:          titleTemplate,
		UIConfig:               uiConfig,
		Capabilities:           capabilities,
		GroupSettings:          groupSettings,
		LayoutSettings:         layoutSettings,
		DialogConfig:           dialogConfig,
		Attributes:             attributes1,
		ExplicitSearchMappings: explicitSearchMappings,
	}
	return &out
}

func (r *SchemaResourceModel) RefreshFromSharedEntitySchemaItem(resp *shared.EntitySchemaItem) {
	if resp != nil {
		if len(r.Attributes) > len(resp.Attributes) {
			r.Attributes = r.Attributes[:len(resp.Attributes)]
		}
		for attributesCount, attributesItem := range resp.Attributes {
			var attributes1 tfTypes.Attribute
			attributes1.Purpose = []types.String{}
			for _, v := range attributesItem.Purpose {
				attributes1.Purpose = append(attributes1.Purpose, types.StringValue(v))
			}
			for actionsCount, actionsItem := range attributesItem.Actions {
				var actions1 tfTypes.Actions
				if actionsItem.ActionType != nil {
					actions1.ActionType = types.StringValue(string(*actionsItem.ActionType))
				} else {
					actions1.ActionType = types.StringNull()
				}
				actions1.Default = types.BoolPointerValue(actionsItem.Default)
				actions1.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
				actions1.Label = types.StringPointerValue(actionsItem.Label)
				if actionsItem.NewEntityItem == nil {
					actions1.NewEntityItem = nil
				} else {
					actions1.NewEntityItem = &tfTypes.NewEntityItem{}
					if actionsItem.NewEntityItem.ACL == nil {
						actions1.NewEntityItem.ACL = nil
					} else {
						actions1.NewEntityItem.ACL = &tfTypes.EntityACL{}
						if actionsItem.NewEntityItem.ACL.AdditionalProperties == nil {
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult, _ := json.Marshal(actionsItem.NewEntityItem.ACL.AdditionalProperties)
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
						}
						actions1.NewEntityItem.ACL.Delete = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Delete {
							actions1.NewEntityItem.ACL.Delete = append(actions1.NewEntityItem.ACL.Delete, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.Edit = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Edit {
							actions1.NewEntityItem.ACL.Edit = append(actions1.NewEntityItem.ACL.Edit, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.View = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.View {
							actions1.NewEntityItem.ACL.View = append(actions1.NewEntityItem.ACL.View, types.StringValue(v))
						}
					}
					if actionsItem.NewEntityItem.CreatedAt != nil {
						actions1.NewEntityItem.CreatedAt = types.StringValue(actionsItem.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.CreatedAt = types.StringNull()
					}
					actions1.NewEntityItem.ID = types.StringValue(actionsItem.NewEntityItem.ID)
					actions1.NewEntityItem.Org = types.StringValue(actionsItem.NewEntityItem.Org)
					for ownersCount, ownersItem := range actionsItem.NewEntityItem.Owners {
						var owners1 tfTypes.EntityOwner
						owners1.OrgID = types.StringValue(ownersItem.OrgID)
						owners1.UserID = types.StringPointerValue(ownersItem.UserID)
						if ownersCount+1 > len(actions1.NewEntityItem.Owners) {
							actions1.NewEntityItem.Owners = append(actions1.NewEntityItem.Owners, owners1)
						} else {
							actions1.NewEntityItem.Owners[ownersCount].OrgID = owners1.OrgID
							actions1.NewEntityItem.Owners[ownersCount].UserID = owners1.UserID
						}
					}
					actions1.NewEntityItem.Schema = types.StringValue(actionsItem.NewEntityItem.Schema)
					actions1.NewEntityItem.Tags = []types.String{}
					for _, v := range actionsItem.NewEntityItem.Tags {
						actions1.NewEntityItem.Tags = append(actions1.NewEntityItem.Tags, types.StringValue(v))
					}
					actions1.NewEntityItem.Title = types.StringPointerValue(actionsItem.NewEntityItem.Title)
					if actionsItem.NewEntityItem.UpdatedAt != nil {
						actions1.NewEntityItem.UpdatedAt = types.StringValue(actionsItem.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.UpdatedAt = types.StringNull()
					}
					if actionsItem.NewEntityItem.AdditionalProperties == nil {
						actions1.NewEntityItem.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult1, _ := json.Marshal(actionsItem.NewEntityItem.AdditionalProperties)
						actions1.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
					}
				}
				for settingsFlagCount, settingsFlagItem := range actionsItem.SettingsFlag {
					var settingsFlag1 tfTypes.SettingFlag
					settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
					settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
					if settingsFlagCount+1 > len(actions1.SettingsFlag) {
						actions1.SettingsFlag = append(actions1.SettingsFlag, settingsFlag1)
					} else {
						actions1.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
						actions1.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
					}
				}
				if actionsCount+1 > len(attributes1.Actions) {
					attributes1.Actions = append(attributes1.Actions, actions1)
				} else {
					attributes1.Actions[actionsCount].ActionType = actions1.ActionType
					attributes1.Actions[actionsCount].Default = actions1.Default
					attributes1.Actions[actionsCount].FeatureFlag = actions1.FeatureFlag
					attributes1.Actions[actionsCount].Label = actions1.Label
					attributes1.Actions[actionsCount].NewEntityItem = actions1.NewEntityItem
					attributes1.Actions[actionsCount].SettingsFlag = actions1.SettingsFlag
				}
			}
			attributes1.AddButtonLabel = types.StringPointerValue(attributesItem.AddButtonLabel)
			attributes1.AllowAny = types.BoolPointerValue(attributesItem.AllowAny)
			attributes1.AllowExtraOptions = types.BoolPointerValue(attributesItem.AllowExtraOptions)
			attributes1.AllowedExtensions = []types.String{}
			for _, v := range attributesItem.AllowedExtensions {
				attributes1.AllowedExtensions = append(attributes1.AllowedExtensions, types.StringValue(v))
			}
			attributes1.AllowedSchemas = []types.String{}
			for _, v := range attributesItem.AllowedSchemas {
				attributes1.AllowedSchemas = append(attributes1.AllowedSchemas, types.StringValue(v))
			}
			if attributesItem.Constraints == nil {
				attributes1.Constraints = nil
			} else {
				attributes1.Constraints = &tfTypes.Constraints{}
			}
			if attributesItem.CreatedAt != nil {
				attributes1.CreatedAt = types.StringValue(attributesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				attributes1.CreatedAt = types.StringNull()
			}
			for currencyCount, currencyItem := range attributesItem.Currency {
				var currency1 tfTypes.Currency
				if currencyItem.One != nil {
					currency1.One = &tfTypes.One{}
					currency1.One.Code = types.StringValue(currencyItem.One.Code)
					currency1.One.Description = types.StringValue(currencyItem.One.Description)
					currency1.One.Flag = types.StringPointerValue(currencyItem.One.Flag)
					currency1.One.Symbol = types.StringValue(currencyItem.One.Symbol)
				}
				if currencyCount+1 > len(attributes1.Currency) {
					attributes1.Currency = append(attributes1.Currency, currency1)
				} else {
					attributes1.Currency[currencyCount].One = currency1.One
				}
			}
			attributes1.CurrencySelectorOnly = types.BoolPointerValue(attributesItem.CurrencySelectorOnly)
			if attributesItem.DefaultAccessControl != nil {
				attributes1.DefaultAccessControl = types.StringValue(string(*attributesItem.DefaultAccessControl))
			} else {
				attributes1.DefaultAccessControl = types.StringNull()
			}
			if attributesItem.DefaultValue == nil {
				attributes1.DefaultValue = types.StringNull()
			} else {
				defaultValueResult, _ := json.Marshal(attributesItem.DefaultValue)
				attributes1.DefaultValue = types.StringValue(string(defaultValueResult))
			}
			attributes1.Deprecated = types.BoolPointerValue(attributesItem.Deprecated)
			attributes1.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem.DetailsViewModeEnabled)
			attributes1.DisableCaseSensitive = types.BoolPointerValue(attributesItem.DisableCaseSensitive)
			attributes1.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem.DisplayImagesLandscaped)
			if attributesItem.DrawerSize != nil {
				attributes1.DrawerSize = types.StringValue(string(*attributesItem.DrawerSize))
			} else {
				attributes1.DrawerSize = types.StringNull()
			}
			if attributesItem.EditMode != nil {
				attributes1.EditMode = types.StringValue(string(*attributesItem.EditMode))
			} else {
				attributes1.EditMode = types.StringNull()
			}
			attributes1.EnableDescription = types.BoolPointerValue(attributesItem.EnableDescription)
			attributes1.EnableRelationPicker = types.BoolPointerValue(attributesItem.EnableRelationPicker)
			attributes1.EnableRelationTags = types.BoolPointerValue(attributesItem.EnableRelationTags)
			attributes1.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.EntityBuilderDisableEdit)
			attributes1.FeatureFlag = types.StringPointerValue(attributesItem.FeatureFlag)
			attributes1.Format = types.StringPointerValue(attributesItem.Format)
			attributes1.Group = types.StringPointerValue(attributesItem.Group)
			attributes1.HasPrimary = types.BoolPointerValue(attributesItem.HasPrimary)
			attributes1.Hidden = types.BoolPointerValue(attributesItem.Hidden)
			attributes1.HideLabel = types.BoolPointerValue(attributesItem.HideLabel)
			attributes1.Icon = types.StringPointerValue(attributesItem.Icon)
			attributes1.ID = types.StringPointerValue(attributesItem.ID)
			attributes1.Identifiers = []types.String{}
			for _, v := range attributesItem.Identifiers {
				attributes1.Identifiers = append(attributes1.Identifiers, types.StringValue(v))
			}
			if attributesItem.InfoHelpers == nil {
				attributes1.InfoHelpers = nil
			} else {
				attributes1.InfoHelpers = &tfTypes.InfoHelpers{}
				attributes1.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InfoHelpers.HintCustomComponent)
				attributes1.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InfoHelpers.HintText)
				attributes1.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InfoHelpers.HintTextKey)
				attributes1.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InfoHelpers.HintTooltipPlacement)
			}
			attributes1.Label = types.StringValue(attributesItem.Label)
			attributes1.Layout = types.StringPointerValue(attributesItem.Layout)
			attributes1.Multiline = types.BoolPointerValue(attributesItem.Multiline)
			attributes1.Multiple = types.BoolPointerValue(attributesItem.Multiple)
			attributes1.Name = types.StringValue(attributesItem.Name)
			attributes1.Options = []types.String{}
			for _, v := range attributesItem.Options {
				attributes1.Options = append(attributes1.Options, types.StringValue(v))
			}
			attributes1.Order = types.Int64PointerValue(attributesItem.Order)
			attributes1.Parents = []types.String{}
			for _, v := range attributesItem.Parents {
				attributes1.Parents = append(attributes1.Parents, types.StringValue(v))
			}
			attributes1.Placeholder = types.StringPointerValue(attributesItem.Placeholder)
			attributes1.Prefix = types.StringPointerValue(attributesItem.Prefix)
			attributes1.PreviewValueFormatter = types.StringPointerValue(attributesItem.PreviewValueFormatter)
			attributes1.Protected = types.BoolPointerValue(attributesItem.Protected)
			attributes1.Readonly = types.BoolPointerValue(attributesItem.Readonly)
			if attributesItem.RelationAffinityMode != nil {
				attributes1.RelationAffinityMode = types.StringValue(string(*attributesItem.RelationAffinityMode))
			} else {
				attributes1.RelationAffinityMode = types.StringNull()
			}
			if attributesItem.RelationType != nil {
				attributes1.RelationType = types.StringValue(string(*attributesItem.RelationType))
			} else {
				attributes1.RelationType = types.StringNull()
			}
			attributes1.RenderCondition = types.StringPointerValue(attributesItem.RenderCondition)
			attributes1.Repeatable = types.BoolPointerValue(attributesItem.Repeatable)
			attributes1.Required = types.BoolPointerValue(attributesItem.Required)
			if len(attributesItem.ReverseAttributes) > 0 {
				attributes1.ReverseAttributes = make(map[string]types.String)
				for key, value := range attributesItem.ReverseAttributes {
					attributes1.ReverseAttributes[key] = types.StringValue(value)
				}
			}
			attributes1.SearchPlaceholder = types.StringPointerValue(attributesItem.SearchPlaceholder)
			for settingsFlagCount1, settingsFlagItem1 := range attributesItem.SettingsFlag {
				var settingsFlag3 tfTypes.SettingFlag
				settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
				settingsFlag3.Name = types.StringPointerValue(settingsFlagItem1.Name)
				if settingsFlagCount1+1 > len(attributes1.SettingsFlag) {
					attributes1.SettingsFlag = append(attributes1.SettingsFlag, settingsFlag3)
				} else {
					attributes1.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag3.Enabled
					attributes1.SettingsFlag[settingsFlagCount1].Name = settingsFlag3.Name
				}
			}
			attributes1.ShowInTable = types.BoolPointerValue(attributesItem.ShowInTable)
			attributes1.Slug = types.StringPointerValue(attributesItem.Slug)
			attributes1.Sortable = types.BoolPointerValue(attributesItem.Sortable)
			attributes1.StartNumber = types.Int64PointerValue(attributesItem.StartNumber)
			attributes1.Suggestions = []types.String{}
			for _, v := range attributesItem.Suggestions {
				attributes1.Suggestions = append(attributes1.Suggestions, types.StringValue(v))
			}
			for summaryFieldsCount, summaryFieldsItem := range attributesItem.SummaryFields {
				var summaryFields1 tfTypes.SummaryFields
				if summaryFieldsItem.Str != nil {
					summaryFields1.Str = types.StringPointerValue(summaryFieldsItem.Str)
				}
				if summaryFieldsItem.SummaryField != nil {
					summaryFields1.SummaryField = &tfTypes.SummaryField{}
					summaryFields1.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
					summaryFields1.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
				}
				if summaryFieldsCount+1 > len(attributes1.SummaryFields) {
					attributes1.SummaryFields = append(attributes1.SummaryFields, summaryFields1)
				} else {
					attributes1.SummaryFields[summaryFieldsCount].Str = summaryFields1.Str
					attributes1.SummaryFields[summaryFieldsCount].SummaryField = summaryFields1.SummaryField
				}
			}
			attributes1.Topic = types.StringPointerValue(attributesItem.Topic)
			attributes1.Type = types.StringValue(string(attributesItem.Type))
			if attributesItem.UpdatedAt != nil {
				attributes1.UpdatedAt = types.StringValue(attributesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				attributes1.UpdatedAt = types.StringNull()
			}
			attributes1.ValueFormatter = types.StringPointerValue(attributesItem.ValueFormatter)
			if attributesCount+1 > len(r.Attributes) {
				r.Attributes = append(r.Attributes, attributes1)
			} else {
				r.Attributes[attributesCount].Purpose = attributes1.Purpose
				r.Attributes[attributesCount].Actions = attributes1.Actions
				r.Attributes[attributesCount].AddButtonLabel = attributes1.AddButtonLabel
				r.Attributes[attributesCount].AllowAny = attributes1.AllowAny
				r.Attributes[attributesCount].AllowExtraOptions = attributes1.AllowExtraOptions
				r.Attributes[attributesCount].AllowedExtensions = attributes1.AllowedExtensions
				r.Attributes[attributesCount].AllowedSchemas = attributes1.AllowedSchemas
				r.Attributes[attributesCount].Constraints = attributes1.Constraints
				r.Attributes[attributesCount].CreatedAt = attributes1.CreatedAt
				r.Attributes[attributesCount].Currency = attributes1.Currency
				r.Attributes[attributesCount].CurrencySelectorOnly = attributes1.CurrencySelectorOnly
				r.Attributes[attributesCount].DefaultAccessControl = attributes1.DefaultAccessControl
				r.Attributes[attributesCount].DefaultValue = attributes1.DefaultValue
				r.Attributes[attributesCount].Deprecated = attributes1.Deprecated
				r.Attributes[attributesCount].DetailsViewModeEnabled = attributes1.DetailsViewModeEnabled
				r.Attributes[attributesCount].DisableCaseSensitive = attributes1.DisableCaseSensitive
				r.Attributes[attributesCount].DisplayImagesLandscaped = attributes1.DisplayImagesLandscaped
				r.Attributes[attributesCount].DrawerSize = attributes1.DrawerSize
				r.Attributes[attributesCount].EditMode = attributes1.EditMode
				r.Attributes[attributesCount].EnableDescription = attributes1.EnableDescription
				r.Attributes[attributesCount].EnableRelationPicker = attributes1.EnableRelationPicker
				r.Attributes[attributesCount].EnableRelationTags = attributes1.EnableRelationTags
				r.Attributes[attributesCount].EntityBuilderDisableEdit = attributes1.EntityBuilderDisableEdit
				r.Attributes[attributesCount].FeatureFlag = attributes1.FeatureFlag
				r.Attributes[attributesCount].Format = attributes1.Format
				r.Attributes[attributesCount].Group = attributes1.Group
				r.Attributes[attributesCount].HasPrimary = attributes1.HasPrimary
				r.Attributes[attributesCount].Hidden = attributes1.Hidden
				r.Attributes[attributesCount].HideLabel = attributes1.HideLabel
				r.Attributes[attributesCount].Icon = attributes1.Icon
				r.Attributes[attributesCount].ID = attributes1.ID
				r.Attributes[attributesCount].Identifiers = attributes1.Identifiers
				r.Attributes[attributesCount].InfoHelpers = attributes1.InfoHelpers
				r.Attributes[attributesCount].Label = attributes1.Label
				r.Attributes[attributesCount].Layout = attributes1.Layout
				r.Attributes[attributesCount].Multiline = attributes1.Multiline
				r.Attributes[attributesCount].Multiple = attributes1.Multiple
				r.Attributes[attributesCount].Name = attributes1.Name
				r.Attributes[attributesCount].Options = attributes1.Options
				r.Attributes[attributesCount].Order = attributes1.Order
				r.Attributes[attributesCount].Parents = attributes1.Parents
				r.Attributes[attributesCount].Placeholder = attributes1.Placeholder
				r.Attributes[attributesCount].Prefix = attributes1.Prefix
				r.Attributes[attributesCount].PreviewValueFormatter = attributes1.PreviewValueFormatter
				r.Attributes[attributesCount].Protected = attributes1.Protected
				r.Attributes[attributesCount].Readonly = attributes1.Readonly
				r.Attributes[attributesCount].RelationAffinityMode = attributes1.RelationAffinityMode
				r.Attributes[attributesCount].RelationType = attributes1.RelationType
				r.Attributes[attributesCount].RenderCondition = attributes1.RenderCondition
				r.Attributes[attributesCount].Repeatable = attributes1.Repeatable
				r.Attributes[attributesCount].Required = attributes1.Required
				r.Attributes[attributesCount].ReverseAttributes = attributes1.ReverseAttributes
				r.Attributes[attributesCount].SearchPlaceholder = attributes1.SearchPlaceholder
				r.Attributes[attributesCount].SettingsFlag = attributes1.SettingsFlag
				r.Attributes[attributesCount].ShowInTable = attributes1.ShowInTable
				r.Attributes[attributesCount].Slug = attributes1.Slug
				r.Attributes[attributesCount].Sortable = attributes1.Sortable
				r.Attributes[attributesCount].StartNumber = attributes1.StartNumber
				r.Attributes[attributesCount].Suggestions = attributes1.Suggestions
				r.Attributes[attributesCount].SummaryFields = attributes1.SummaryFields
				r.Attributes[attributesCount].Topic = attributes1.Topic
				r.Attributes[attributesCount].Type = attributes1.Type
				r.Attributes[attributesCount].UpdatedAt = attributes1.UpdatedAt
				r.Attributes[attributesCount].ValueFormatter = attributes1.ValueFormatter
			}
		}
		r.Blueprint = types.StringPointerValue(resp.Blueprint)
		if len(r.Capabilities) > len(resp.Capabilities) {
			r.Capabilities = r.Capabilities[:len(resp.Capabilities)]
		}
		for capabilitiesCount, capabilitiesItem := range resp.Capabilities {
			var capabilities1 tfTypes.EntityCapability
			capabilities1.Purpose = []types.String{}
			for _, v := range capabilitiesItem.Purpose {
				capabilities1.Purpose = append(capabilities1.Purpose, types.StringValue(v))
			}
			for attributesCount1, attributesItem1 := range capabilitiesItem.Attributes {
				var attributes3 tfTypes.Attribute
				attributes3.Purpose = []types.String{}
				for _, v := range attributesItem1.Purpose {
					attributes3.Purpose = append(attributes3.Purpose, types.StringValue(v))
				}
				for actionsCount1, actionsItem1 := range attributesItem1.Actions {
					var actions3 tfTypes.Actions
					if actionsItem1.ActionType != nil {
						actions3.ActionType = types.StringValue(string(*actionsItem1.ActionType))
					} else {
						actions3.ActionType = types.StringNull()
					}
					actions3.Default = types.BoolPointerValue(actionsItem1.Default)
					actions3.FeatureFlag = types.StringPointerValue(actionsItem1.FeatureFlag)
					actions3.Label = types.StringPointerValue(actionsItem1.Label)
					if actionsItem1.NewEntityItem == nil {
						actions3.NewEntityItem = nil
					} else {
						actions3.NewEntityItem = &tfTypes.NewEntityItem{}
						if actionsItem1.NewEntityItem.ACL == nil {
							actions3.NewEntityItem.ACL = nil
						} else {
							actions3.NewEntityItem.ACL = &tfTypes.EntityACL{}
							if actionsItem1.NewEntityItem.ACL.AdditionalProperties == nil {
								actions3.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
							} else {
								additionalPropertiesResult2, _ := json.Marshal(actionsItem1.NewEntityItem.ACL.AdditionalProperties)
								actions3.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult2))
							}
							actions3.NewEntityItem.ACL.Delete = []types.String{}
							for _, v := range actionsItem1.NewEntityItem.ACL.Delete {
								actions3.NewEntityItem.ACL.Delete = append(actions3.NewEntityItem.ACL.Delete, types.StringValue(v))
							}
							actions3.NewEntityItem.ACL.Edit = []types.String{}
							for _, v := range actionsItem1.NewEntityItem.ACL.Edit {
								actions3.NewEntityItem.ACL.Edit = append(actions3.NewEntityItem.ACL.Edit, types.StringValue(v))
							}
							actions3.NewEntityItem.ACL.View = []types.String{}
							for _, v := range actionsItem1.NewEntityItem.ACL.View {
								actions3.NewEntityItem.ACL.View = append(actions3.NewEntityItem.ACL.View, types.StringValue(v))
							}
						}
						if actionsItem1.NewEntityItem.CreatedAt != nil {
							actions3.NewEntityItem.CreatedAt = types.StringValue(actionsItem1.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							actions3.NewEntityItem.CreatedAt = types.StringNull()
						}
						actions3.NewEntityItem.ID = types.StringValue(actionsItem1.NewEntityItem.ID)
						actions3.NewEntityItem.Org = types.StringValue(actionsItem1.NewEntityItem.Org)
						for ownersCount1, ownersItem1 := range actionsItem1.NewEntityItem.Owners {
							var owners3 tfTypes.EntityOwner
							owners3.OrgID = types.StringValue(ownersItem1.OrgID)
							owners3.UserID = types.StringPointerValue(ownersItem1.UserID)
							if ownersCount1+1 > len(actions3.NewEntityItem.Owners) {
								actions3.NewEntityItem.Owners = append(actions3.NewEntityItem.Owners, owners3)
							} else {
								actions3.NewEntityItem.Owners[ownersCount1].OrgID = owners3.OrgID
								actions3.NewEntityItem.Owners[ownersCount1].UserID = owners3.UserID
							}
						}
						actions3.NewEntityItem.Schema = types.StringValue(actionsItem1.NewEntityItem.Schema)
						actions3.NewEntityItem.Tags = []types.String{}
						for _, v := range actionsItem1.NewEntityItem.Tags {
							actions3.NewEntityItem.Tags = append(actions3.NewEntityItem.Tags, types.StringValue(v))
						}
						actions3.NewEntityItem.Title = types.StringPointerValue(actionsItem1.NewEntityItem.Title)
						if actionsItem1.NewEntityItem.UpdatedAt != nil {
							actions3.NewEntityItem.UpdatedAt = types.StringValue(actionsItem1.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							actions3.NewEntityItem.UpdatedAt = types.StringNull()
						}
						if actionsItem1.NewEntityItem.AdditionalProperties == nil {
							actions3.NewEntityItem.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult3, _ := json.Marshal(actionsItem1.NewEntityItem.AdditionalProperties)
							actions3.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult3))
						}
					}
					for settingsFlagCount2, settingsFlagItem2 := range actionsItem1.SettingsFlag {
						var settingsFlag5 tfTypes.SettingFlag
						settingsFlag5.Enabled = types.BoolPointerValue(settingsFlagItem2.Enabled)
						settingsFlag5.Name = types.StringPointerValue(settingsFlagItem2.Name)
						if settingsFlagCount2+1 > len(actions3.SettingsFlag) {
							actions3.SettingsFlag = append(actions3.SettingsFlag, settingsFlag5)
						} else {
							actions3.SettingsFlag[settingsFlagCount2].Enabled = settingsFlag5.Enabled
							actions3.SettingsFlag[settingsFlagCount2].Name = settingsFlag5.Name
						}
					}
					if actionsCount1+1 > len(attributes3.Actions) {
						attributes3.Actions = append(attributes3.Actions, actions3)
					} else {
						attributes3.Actions[actionsCount1].ActionType = actions3.ActionType
						attributes3.Actions[actionsCount1].Default = actions3.Default
						attributes3.Actions[actionsCount1].FeatureFlag = actions3.FeatureFlag
						attributes3.Actions[actionsCount1].Label = actions3.Label
						attributes3.Actions[actionsCount1].NewEntityItem = actions3.NewEntityItem
						attributes3.Actions[actionsCount1].SettingsFlag = actions3.SettingsFlag
					}
				}
				attributes3.AddButtonLabel = types.StringPointerValue(attributesItem1.AddButtonLabel)
				attributes3.AllowAny = types.BoolPointerValue(attributesItem1.AllowAny)
				attributes3.AllowExtraOptions = types.BoolPointerValue(attributesItem1.AllowExtraOptions)
				attributes3.AllowedExtensions = []types.String{}
				for _, v := range attributesItem1.AllowedExtensions {
					attributes3.AllowedExtensions = append(attributes3.AllowedExtensions, types.StringValue(v))
				}
				attributes3.AllowedSchemas = []types.String{}
				for _, v := range attributesItem1.AllowedSchemas {
					attributes3.AllowedSchemas = append(attributes3.AllowedSchemas, types.StringValue(v))
				}
				if attributesItem1.Constraints == nil {
					attributes3.Constraints = nil
				} else {
					attributes3.Constraints = &tfTypes.Constraints{}
				}
				if attributesItem1.CreatedAt != nil {
					attributes3.CreatedAt = types.StringValue(attributesItem1.CreatedAt.Format(time.RFC3339Nano))
				} else {
					attributes3.CreatedAt = types.StringNull()
				}
				for currencyCount1, currencyItem1 := range attributesItem1.Currency {
					var currency3 tfTypes.Currency
					if currencyItem1.One != nil {
						currency3.One = &tfTypes.One{}
						currency3.One.Code = types.StringValue(currencyItem1.One.Code)
						currency3.One.Description = types.StringValue(currencyItem1.One.Description)
						currency3.One.Flag = types.StringPointerValue(currencyItem1.One.Flag)
						currency3.One.Symbol = types.StringValue(currencyItem1.One.Symbol)
					}
					if currencyCount1+1 > len(attributes3.Currency) {
						attributes3.Currency = append(attributes3.Currency, currency3)
					} else {
						attributes3.Currency[currencyCount1].One = currency3.One
					}
				}
				attributes3.CurrencySelectorOnly = types.BoolPointerValue(attributesItem1.CurrencySelectorOnly)
				if attributesItem1.DefaultAccessControl != nil {
					attributes3.DefaultAccessControl = types.StringValue(string(*attributesItem1.DefaultAccessControl))
				} else {
					attributes3.DefaultAccessControl = types.StringNull()
				}
				if attributesItem1.DefaultValue == nil {
					attributes3.DefaultValue = types.StringNull()
				} else {
					defaultValueResult1, _ := json.Marshal(attributesItem1.DefaultValue)
					attributes3.DefaultValue = types.StringValue(string(defaultValueResult1))
				}
				attributes3.Deprecated = types.BoolPointerValue(attributesItem1.Deprecated)
				attributes3.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem1.DetailsViewModeEnabled)
				attributes3.DisableCaseSensitive = types.BoolPointerValue(attributesItem1.DisableCaseSensitive)
				attributes3.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem1.DisplayImagesLandscaped)
				if attributesItem1.DrawerSize != nil {
					attributes3.DrawerSize = types.StringValue(string(*attributesItem1.DrawerSize))
				} else {
					attributes3.DrawerSize = types.StringNull()
				}
				if attributesItem1.EditMode != nil {
					attributes3.EditMode = types.StringValue(string(*attributesItem1.EditMode))
				} else {
					attributes3.EditMode = types.StringNull()
				}
				attributes3.EnableDescription = types.BoolPointerValue(attributesItem1.EnableDescription)
				attributes3.EnableRelationPicker = types.BoolPointerValue(attributesItem1.EnableRelationPicker)
				attributes3.EnableRelationTags = types.BoolPointerValue(attributesItem1.EnableRelationTags)
				attributes3.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem1.EntityBuilderDisableEdit)
				attributes3.FeatureFlag = types.StringPointerValue(attributesItem1.FeatureFlag)
				attributes3.Format = types.StringPointerValue(attributesItem1.Format)
				attributes3.Group = types.StringPointerValue(attributesItem1.Group)
				attributes3.HasPrimary = types.BoolPointerValue(attributesItem1.HasPrimary)
				attributes3.Hidden = types.BoolPointerValue(attributesItem1.Hidden)
				attributes3.HideLabel = types.BoolPointerValue(attributesItem1.HideLabel)
				attributes3.Icon = types.StringPointerValue(attributesItem1.Icon)
				attributes3.ID = types.StringPointerValue(attributesItem1.ID)
				attributes3.Identifiers = []types.String{}
				for _, v := range attributesItem1.Identifiers {
					attributes3.Identifiers = append(attributes3.Identifiers, types.StringValue(v))
				}
				if attributesItem1.InfoHelpers == nil {
					attributes3.InfoHelpers = nil
				} else {
					attributes3.InfoHelpers = &tfTypes.InfoHelpers{}
					attributes3.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem1.InfoHelpers.HintCustomComponent)
					attributes3.InfoHelpers.HintText = types.StringPointerValue(attributesItem1.InfoHelpers.HintText)
					attributes3.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem1.InfoHelpers.HintTextKey)
					attributes3.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem1.InfoHelpers.HintTooltipPlacement)
				}
				attributes3.Label = types.StringValue(attributesItem1.Label)
				attributes3.Layout = types.StringPointerValue(attributesItem1.Layout)
				attributes3.Multiline = types.BoolPointerValue(attributesItem1.Multiline)
				attributes3.Multiple = types.BoolPointerValue(attributesItem1.Multiple)
				attributes3.Name = types.StringValue(attributesItem1.Name)
				attributes3.Options = []types.String{}
				for _, v := range attributesItem1.Options {
					attributes3.Options = append(attributes3.Options, types.StringValue(v))
				}
				attributes3.Order = types.Int64PointerValue(attributesItem1.Order)
				attributes3.Parents = []types.String{}
				for _, v := range attributesItem1.Parents {
					attributes3.Parents = append(attributes3.Parents, types.StringValue(v))
				}
				attributes3.Placeholder = types.StringPointerValue(attributesItem1.Placeholder)
				attributes3.Prefix = types.StringPointerValue(attributesItem1.Prefix)
				attributes3.PreviewValueFormatter = types.StringPointerValue(attributesItem1.PreviewValueFormatter)
				attributes3.Protected = types.BoolPointerValue(attributesItem1.Protected)
				attributes3.Readonly = types.BoolPointerValue(attributesItem1.Readonly)
				if attributesItem1.RelationAffinityMode != nil {
					attributes3.RelationAffinityMode = types.StringValue(string(*attributesItem1.RelationAffinityMode))
				} else {
					attributes3.RelationAffinityMode = types.StringNull()
				}
				if attributesItem1.RelationType != nil {
					attributes3.RelationType = types.StringValue(string(*attributesItem1.RelationType))
				} else {
					attributes3.RelationType = types.StringNull()
				}
				attributes3.RenderCondition = types.StringPointerValue(attributesItem1.RenderCondition)
				attributes3.Repeatable = types.BoolPointerValue(attributesItem1.Repeatable)
				attributes3.Required = types.BoolPointerValue(attributesItem1.Required)
				if len(attributesItem1.ReverseAttributes) > 0 {
					attributes3.ReverseAttributes = make(map[string]types.String)
					for key1, value1 := range attributesItem1.ReverseAttributes {
						attributes3.ReverseAttributes[key1] = types.StringValue(value1)
					}
				}
				attributes3.SearchPlaceholder = types.StringPointerValue(attributesItem1.SearchPlaceholder)
				for settingsFlagCount3, settingsFlagItem3 := range attributesItem1.SettingsFlag {
					var settingsFlag7 tfTypes.SettingFlag
					settingsFlag7.Enabled = types.BoolPointerValue(settingsFlagItem3.Enabled)
					settingsFlag7.Name = types.StringPointerValue(settingsFlagItem3.Name)
					if settingsFlagCount3+1 > len(attributes3.SettingsFlag) {
						attributes3.SettingsFlag = append(attributes3.SettingsFlag, settingsFlag7)
					} else {
						attributes3.SettingsFlag[settingsFlagCount3].Enabled = settingsFlag7.Enabled
						attributes3.SettingsFlag[settingsFlagCount3].Name = settingsFlag7.Name
					}
				}
				attributes3.ShowInTable = types.BoolPointerValue(attributesItem1.ShowInTable)
				attributes3.Slug = types.StringPointerValue(attributesItem1.Slug)
				attributes3.Sortable = types.BoolPointerValue(attributesItem1.Sortable)
				attributes3.StartNumber = types.Int64PointerValue(attributesItem1.StartNumber)
				attributes3.Suggestions = []types.String{}
				for _, v := range attributesItem1.Suggestions {
					attributes3.Suggestions = append(attributes3.Suggestions, types.StringValue(v))
				}
				for summaryFieldsCount1, summaryFieldsItem1 := range attributesItem1.SummaryFields {
					var summaryFields3 tfTypes.SummaryFields
					if summaryFieldsItem1.Str != nil {
						summaryFields3.Str = types.StringPointerValue(summaryFieldsItem1.Str)
					}
					if summaryFieldsItem1.SummaryField != nil {
						summaryFields3.SummaryField = &tfTypes.SummaryField{}
						summaryFields3.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem1.SummaryField.DisplayAs)
						summaryFields3.SummaryField.Field = types.StringPointerValue(summaryFieldsItem1.SummaryField.Field)
					}
					if summaryFieldsCount1+1 > len(attributes3.SummaryFields) {
						attributes3.SummaryFields = append(attributes3.SummaryFields, summaryFields3)
					} else {
						attributes3.SummaryFields[summaryFieldsCount1].Str = summaryFields3.Str
						attributes3.SummaryFields[summaryFieldsCount1].SummaryField = summaryFields3.SummaryField
					}
				}
				attributes3.Topic = types.StringPointerValue(attributesItem1.Topic)
				attributes3.Type = types.StringValue(string(attributesItem1.Type))
				if attributesItem1.UpdatedAt != nil {
					attributes3.UpdatedAt = types.StringValue(attributesItem1.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					attributes3.UpdatedAt = types.StringNull()
				}
				attributes3.ValueFormatter = types.StringPointerValue(attributesItem1.ValueFormatter)
				if attributesCount1+1 > len(capabilities1.Attributes) {
					capabilities1.Attributes = append(capabilities1.Attributes, attributes3)
				} else {
					capabilities1.Attributes[attributesCount1].Purpose = attributes3.Purpose
					capabilities1.Attributes[attributesCount1].Actions = attributes3.Actions
					capabilities1.Attributes[attributesCount1].AddButtonLabel = attributes3.AddButtonLabel
					capabilities1.Attributes[attributesCount1].AllowAny = attributes3.AllowAny
					capabilities1.Attributes[attributesCount1].AllowExtraOptions = attributes3.AllowExtraOptions
					capabilities1.Attributes[attributesCount1].AllowedExtensions = attributes3.AllowedExtensions
					capabilities1.Attributes[attributesCount1].AllowedSchemas = attributes3.AllowedSchemas
					capabilities1.Attributes[attributesCount1].Constraints = attributes3.Constraints
					capabilities1.Attributes[attributesCount1].CreatedAt = attributes3.CreatedAt
					capabilities1.Attributes[attributesCount1].Currency = attributes3.Currency
					capabilities1.Attributes[attributesCount1].CurrencySelectorOnly = attributes3.CurrencySelectorOnly
					capabilities1.Attributes[attributesCount1].DefaultAccessControl = attributes3.DefaultAccessControl
					capabilities1.Attributes[attributesCount1].DefaultValue = attributes3.DefaultValue
					capabilities1.Attributes[attributesCount1].Deprecated = attributes3.Deprecated
					capabilities1.Attributes[attributesCount1].DetailsViewModeEnabled = attributes3.DetailsViewModeEnabled
					capabilities1.Attributes[attributesCount1].DisableCaseSensitive = attributes3.DisableCaseSensitive
					capabilities1.Attributes[attributesCount1].DisplayImagesLandscaped = attributes3.DisplayImagesLandscaped
					capabilities1.Attributes[attributesCount1].DrawerSize = attributes3.DrawerSize
					capabilities1.Attributes[attributesCount1].EditMode = attributes3.EditMode
					capabilities1.Attributes[attributesCount1].EnableDescription = attributes3.EnableDescription
					capabilities1.Attributes[attributesCount1].EnableRelationPicker = attributes3.EnableRelationPicker
					capabilities1.Attributes[attributesCount1].EnableRelationTags = attributes3.EnableRelationTags
					capabilities1.Attributes[attributesCount1].EntityBuilderDisableEdit = attributes3.EntityBuilderDisableEdit
					capabilities1.Attributes[attributesCount1].FeatureFlag = attributes3.FeatureFlag
					capabilities1.Attributes[attributesCount1].Format = attributes3.Format
					capabilities1.Attributes[attributesCount1].Group = attributes3.Group
					capabilities1.Attributes[attributesCount1].HasPrimary = attributes3.HasPrimary
					capabilities1.Attributes[attributesCount1].Hidden = attributes3.Hidden
					capabilities1.Attributes[attributesCount1].HideLabel = attributes3.HideLabel
					capabilities1.Attributes[attributesCount1].Icon = attributes3.Icon
					capabilities1.Attributes[attributesCount1].ID = attributes3.ID
					capabilities1.Attributes[attributesCount1].Identifiers = attributes3.Identifiers
					capabilities1.Attributes[attributesCount1].InfoHelpers = attributes3.InfoHelpers
					capabilities1.Attributes[attributesCount1].Label = attributes3.Label
					capabilities1.Attributes[attributesCount1].Layout = attributes3.Layout
					capabilities1.Attributes[attributesCount1].Multiline = attributes3.Multiline
					capabilities1.Attributes[attributesCount1].Multiple = attributes3.Multiple
					capabilities1.Attributes[attributesCount1].Name = attributes3.Name
					capabilities1.Attributes[attributesCount1].Options = attributes3.Options
					capabilities1.Attributes[attributesCount1].Order = attributes3.Order
					capabilities1.Attributes[attributesCount1].Parents = attributes3.Parents
					capabilities1.Attributes[attributesCount1].Placeholder = attributes3.Placeholder
					capabilities1.Attributes[attributesCount1].Prefix = attributes3.Prefix
					capabilities1.Attributes[attributesCount1].PreviewValueFormatter = attributes3.PreviewValueFormatter
					capabilities1.Attributes[attributesCount1].Protected = attributes3.Protected
					capabilities1.Attributes[attributesCount1].Readonly = attributes3.Readonly
					capabilities1.Attributes[attributesCount1].RelationAffinityMode = attributes3.RelationAffinityMode
					capabilities1.Attributes[attributesCount1].RelationType = attributes3.RelationType
					capabilities1.Attributes[attributesCount1].RenderCondition = attributes3.RenderCondition
					capabilities1.Attributes[attributesCount1].Repeatable = attributes3.Repeatable
					capabilities1.Attributes[attributesCount1].Required = attributes3.Required
					capabilities1.Attributes[attributesCount1].ReverseAttributes = attributes3.ReverseAttributes
					capabilities1.Attributes[attributesCount1].SearchPlaceholder = attributes3.SearchPlaceholder
					capabilities1.Attributes[attributesCount1].SettingsFlag = attributes3.SettingsFlag
					capabilities1.Attributes[attributesCount1].ShowInTable = attributes3.ShowInTable
					capabilities1.Attributes[attributesCount1].Slug = attributes3.Slug
					capabilities1.Attributes[attributesCount1].Sortable = attributes3.Sortable
					capabilities1.Attributes[attributesCount1].StartNumber = attributes3.StartNumber
					capabilities1.Attributes[attributesCount1].Suggestions = attributes3.Suggestions
					capabilities1.Attributes[attributesCount1].SummaryFields = attributes3.SummaryFields
					capabilities1.Attributes[attributesCount1].Topic = attributes3.Topic
					capabilities1.Attributes[attributesCount1].Type = attributes3.Type
					capabilities1.Attributes[attributesCount1].UpdatedAt = attributes3.UpdatedAt
					capabilities1.Attributes[attributesCount1].ValueFormatter = attributes3.ValueFormatter
				}
			}
			capabilities1.FeatureFlag = types.StringPointerValue(capabilitiesItem.FeatureFlag)
			capabilities1.Name = types.StringValue(capabilitiesItem.Name)
			for settingsFlagCount4, settingsFlagItem4 := range capabilitiesItem.SettingsFlag {
				var settingsFlag9 tfTypes.SettingFlag
				settingsFlag9.Enabled = types.BoolPointerValue(settingsFlagItem4.Enabled)
				settingsFlag9.Name = types.StringPointerValue(settingsFlagItem4.Name)
				if settingsFlagCount4+1 > len(capabilities1.SettingsFlag) {
					capabilities1.SettingsFlag = append(capabilities1.SettingsFlag, settingsFlag9)
				} else {
					capabilities1.SettingsFlag[settingsFlagCount4].Enabled = settingsFlag9.Enabled
					capabilities1.SettingsFlag[settingsFlagCount4].Name = settingsFlag9.Name
				}
			}
			capabilities1.Title = types.StringPointerValue(capabilitiesItem.Title)
			for uiHooksCount, uiHooksItem := range capabilitiesItem.UIHooks {
				var uiHooks1 tfTypes.UIHooks
				if uiHooksItem.AdditionalProperties == nil {
					uiHooks1.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult4, _ := json.Marshal(uiHooksItem.AdditionalProperties)
					uiHooks1.AdditionalProperties = types.StringValue(string(additionalPropertiesResult4))
				}
				uiHooks1.Component = types.StringPointerValue(uiHooksItem.Component)
				uiHooks1.Disabled = types.BoolPointerValue(uiHooksItem.Disabled)
				uiHooks1.GroupExpanded = types.BoolPointerValue(uiHooksItem.GroupExpanded)
				uiHooks1.Header = types.BoolPointerValue(uiHooksItem.Header)
				uiHooks1.Hook = types.StringValue(uiHooksItem.Hook)
				uiHooks1.Icon = types.StringPointerValue(uiHooksItem.Icon)
				uiHooks1.Import = types.StringPointerValue(uiHooksItem.Import)
				uiHooks1.Order = types.Int64PointerValue(uiHooksItem.Order)
				uiHooks1.RenderCondition = types.StringPointerValue(uiHooksItem.RenderCondition)
				if uiHooksItem.RequiredPermission == nil {
					uiHooks1.RequiredPermission = nil
				} else {
					uiHooks1.RequiredPermission = &tfTypes.RequiredPermission{}
					uiHooks1.RequiredPermission.Action = types.StringValue(uiHooksItem.RequiredPermission.Action)
					uiHooks1.RequiredPermission.Resource = types.StringPointerValue(uiHooksItem.RequiredPermission.Resource)
				}
				uiHooks1.Route = types.StringPointerValue(uiHooksItem.Route)
				uiHooks1.Title = types.StringPointerValue(uiHooksItem.Title)
				if uiHooksCount+1 > len(capabilities1.UIHooks) {
					capabilities1.UIHooks = append(capabilities1.UIHooks, uiHooks1)
				} else {
					capabilities1.UIHooks[uiHooksCount].AdditionalProperties = uiHooks1.AdditionalProperties
					capabilities1.UIHooks[uiHooksCount].Component = uiHooks1.Component
					capabilities1.UIHooks[uiHooksCount].Disabled = uiHooks1.Disabled
					capabilities1.UIHooks[uiHooksCount].GroupExpanded = uiHooks1.GroupExpanded
					capabilities1.UIHooks[uiHooksCount].Header = uiHooks1.Header
					capabilities1.UIHooks[uiHooksCount].Hook = uiHooks1.Hook
					capabilities1.UIHooks[uiHooksCount].Icon = uiHooks1.Icon
					capabilities1.UIHooks[uiHooksCount].Import = uiHooks1.Import
					capabilities1.UIHooks[uiHooksCount].Order = uiHooks1.Order
					capabilities1.UIHooks[uiHooksCount].RenderCondition = uiHooks1.RenderCondition
					capabilities1.UIHooks[uiHooksCount].RequiredPermission = uiHooks1.RequiredPermission
					capabilities1.UIHooks[uiHooksCount].Route = uiHooks1.Route
					capabilities1.UIHooks[uiHooksCount].Title = uiHooks1.Title
				}
			}
			if capabilitiesCount+1 > len(r.Capabilities) {
				r.Capabilities = append(r.Capabilities, capabilities1)
			} else {
				r.Capabilities[capabilitiesCount].Purpose = capabilities1.Purpose
				r.Capabilities[capabilitiesCount].Attributes = capabilities1.Attributes
				r.Capabilities[capabilitiesCount].FeatureFlag = capabilities1.FeatureFlag
				r.Capabilities[capabilitiesCount].Name = capabilities1.Name
				r.Capabilities[capabilitiesCount].SettingsFlag = capabilities1.SettingsFlag
				r.Capabilities[capabilitiesCount].Title = capabilities1.Title
				r.Capabilities[capabilitiesCount].UIHooks = capabilities1.UIHooks
			}
		}
		r.Comment = types.StringPointerValue(resp.Comment)
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		if len(resp.DialogConfig) > 0 {
			r.DialogConfig = make(map[string]types.String)
			for key2, value2 := range resp.DialogConfig {
				result, _ := json.Marshal(value2)
				r.DialogConfig[key2] = types.StringValue(string(result))
			}
		}
		r.Draft = types.BoolPointerValue(resp.Draft)
		r.EnableSetting = []types.String{}
		for _, v := range resp.EnableSetting {
			r.EnableSetting = append(r.EnableSetting, types.StringValue(v))
		}
		if len(resp.ExplicitSearchMappings) > 0 {
			r.ExplicitSearchMappings = make(map[string]tfTypes.SearchMappings)
			for searchMappingsKey, searchMappingsValue := range resp.ExplicitSearchMappings {
				var searchMappingsResult tfTypes.SearchMappings
				if len(searchMappingsValue.Fields) > 0 {
					searchMappingsResult.Fields = make(map[string]types.String)
					for key3, value3 := range searchMappingsValue.Fields {
						result1, _ := json.Marshal(value3)
						searchMappingsResult.Fields[key3] = types.StringValue(string(result1))
					}
				}
				searchMappingsResult.Index = types.BoolPointerValue(searchMappingsValue.Index)
				if searchMappingsValue.Type != nil {
					searchMappingsResult.Type = types.StringValue(string(*searchMappingsValue.Type))
				} else {
					searchMappingsResult.Type = types.StringNull()
				}
				r.ExplicitSearchMappings[searchMappingsKey] = searchMappingsResult
			}
		}
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		if len(r.GroupSettings) > len(resp.GroupSettings) {
			r.GroupSettings = r.GroupSettings[:len(resp.GroupSettings)]
		}
		for groupSettingsCount, groupSettingsItem := range resp.GroupSettings {
			var groupSettings1 tfTypes.GroupSettings
			groupSettings1.Purpose = []types.String{}
			for _, v := range groupSettingsItem.Purpose {
				groupSettings1.Purpose = append(groupSettings1.Purpose, types.StringValue(v))
			}
			groupSettings1.Expanded = types.BoolPointerValue(groupSettingsItem.Expanded)
			groupSettings1.FeatureFlag = types.StringPointerValue(groupSettingsItem.FeatureFlag)
			groupSettings1.ID = types.StringPointerValue(groupSettingsItem.ID)
			if groupSettingsItem.InfoTooltipTitle == nil {
				groupSettings1.InfoTooltipTitle = nil
			} else {
				groupSettings1.InfoTooltipTitle = &tfTypes.InfoTooltipTitle{}
				groupSettings1.InfoTooltipTitle.Default = types.StringPointerValue(groupSettingsItem.InfoTooltipTitle.Default)
				groupSettings1.InfoTooltipTitle.Key = types.StringPointerValue(groupSettingsItem.InfoTooltipTitle.Key)
			}
			groupSettings1.Label = types.StringValue(groupSettingsItem.Label)
			groupSettings1.Order = types.Int64PointerValue(groupSettingsItem.Order)
			groupSettings1.RenderCondition = types.StringPointerValue(groupSettingsItem.RenderCondition)
			for settingsFlagCount5, settingsFlagItem5 := range groupSettingsItem.SettingsFlag {
				var settingsFlag11 tfTypes.SettingFlag
				settingsFlag11.Enabled = types.BoolPointerValue(settingsFlagItem5.Enabled)
				settingsFlag11.Name = types.StringPointerValue(settingsFlagItem5.Name)
				if settingsFlagCount5+1 > len(groupSettings1.SettingsFlag) {
					groupSettings1.SettingsFlag = append(groupSettings1.SettingsFlag, settingsFlag11)
				} else {
					groupSettings1.SettingsFlag[settingsFlagCount5].Enabled = settingsFlag11.Enabled
					groupSettings1.SettingsFlag[settingsFlagCount5].Name = settingsFlag11.Name
				}
			}
			if groupSettingsCount+1 > len(r.GroupSettings) {
				r.GroupSettings = append(r.GroupSettings, groupSettings1)
			} else {
				r.GroupSettings[groupSettingsCount].Purpose = groupSettings1.Purpose
				r.GroupSettings[groupSettingsCount].Expanded = groupSettings1.Expanded
				r.GroupSettings[groupSettingsCount].FeatureFlag = groupSettings1.FeatureFlag
				r.GroupSettings[groupSettingsCount].ID = groupSettings1.ID
				r.GroupSettings[groupSettingsCount].InfoTooltipTitle = groupSettings1.InfoTooltipTitle
				r.GroupSettings[groupSettingsCount].Label = groupSettings1.Label
				r.GroupSettings[groupSettingsCount].Order = groupSettings1.Order
				r.GroupSettings[groupSettingsCount].RenderCondition = groupSettings1.RenderCondition
				r.GroupSettings[groupSettingsCount].SettingsFlag = groupSettings1.SettingsFlag
			}
		}
		r.Icon = types.StringPointerValue(resp.Icon)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.LayoutSettings == nil {
			r.LayoutSettings = nil
		} else {
			r.LayoutSettings = &tfTypes.LayoutSettings{}
			if resp.LayoutSettings.AdditionalProperties == nil {
				r.LayoutSettings.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult5, _ := json.Marshal(resp.LayoutSettings.AdditionalProperties)
				r.LayoutSettings.AdditionalProperties = types.StringValue(string(additionalPropertiesResult5))
			}
			r.LayoutSettings.GridGap = types.StringPointerValue(resp.LayoutSettings.GridGap)
			r.LayoutSettings.GridTemplateColumns = types.StringPointerValue(resp.LayoutSettings.GridTemplateColumns)
		}
		r.Name = types.StringValue(resp.Name)
		r.Plural = types.StringValue(resp.Plural)
		r.Published = types.BoolPointerValue(resp.Published)
		r.Slug = types.StringValue(resp.Slug)
		if resp.Source == nil {
			r.Source = nil
		} else {
			r.Source = &tfTypes.Source{}
			r.Source.ID = types.StringPointerValue(resp.Source.ID)
			r.Source.Type = types.StringPointerValue(resp.Source.Type)
		}
		r.TitleTemplate = types.StringPointerValue(resp.TitleTemplate)
		if resp.UIConfig == nil {
			r.UIConfig = nil
		} else {
			r.UIConfig = &tfTypes.UIConfig{}
			if resp.UIConfig.CreateView == nil {
				r.UIConfig.CreateView = nil
			} else {
				r.UIConfig.CreateView = &tfTypes.CreateView{}
				if resp.UIConfig.CreateView.EntityDefaultCreate != nil {
					r.UIConfig.CreateView.Default = &tfTypes.EntityDefaultCreate{}
					if len(resp.UIConfig.CreateView.EntityDefaultCreate.SearchParams) > 0 {
						r.UIConfig.CreateView.Default.SearchParams = make(map[string]types.String)
						for key5, value4 := range resp.UIConfig.CreateView.EntityDefaultCreate.SearchParams {
							r.UIConfig.CreateView.Default.SearchParams[key5] = types.StringValue(value4)
						}
					}
					if resp.UIConfig.CreateView.EntityDefaultCreate.ViewType != nil {
						r.UIConfig.CreateView.Default.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.EntityDefaultCreate.ViewType))
					} else {
						r.UIConfig.CreateView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.CreateView.EntityViewDisabled != nil {
					r.UIConfig.CreateView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.CreateView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.CreateView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.CreateView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.CreateView.RedirectEntityView != nil {
					r.UIConfig.CreateView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.CreateView.Redirect.Route = types.StringPointerValue(resp.UIConfig.CreateView.RedirectEntityView.Route)
					if resp.UIConfig.CreateView.RedirectEntityView.ViewType != nil {
						r.UIConfig.CreateView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.CreateView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.CreateView.Redirect.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.EditView == nil {
				r.UIConfig.EditView = nil
			} else {
				r.UIConfig.EditView = &tfTypes.EditView{}
				if resp.UIConfig.EditView.EntityDefaultEdit != nil {
					r.UIConfig.EditView.Default = &tfTypes.EntityDefaultEdit{}
					if len(resp.UIConfig.EditView.EntityDefaultEdit.SearchParams) > 0 {
						r.UIConfig.EditView.Default.SearchParams = make(map[string]types.String)
						for key6, value5 := range resp.UIConfig.EditView.EntityDefaultEdit.SearchParams {
							r.UIConfig.EditView.Default.SearchParams[key6] = types.StringValue(value5)
						}
					}
					r.UIConfig.EditView.Default.SummaryAttributes = []types.String{}
					for _, v := range resp.UIConfig.EditView.EntityDefaultEdit.SummaryAttributes {
						r.UIConfig.EditView.Default.SummaryAttributes = append(r.UIConfig.EditView.Default.SummaryAttributes, types.StringValue(v))
					}
					if resp.UIConfig.EditView.EntityDefaultEdit.ViewType != nil {
						r.UIConfig.EditView.Default.ViewType = types.StringValue(string(*resp.UIConfig.EditView.EntityDefaultEdit.ViewType))
					} else {
						r.UIConfig.EditView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.EditView.EntityViewDisabled != nil {
					r.UIConfig.EditView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.EditView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.EditView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.EditView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.EditView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.EditView.RedirectEntityView != nil {
					r.UIConfig.EditView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.EditView.Redirect.Route = types.StringPointerValue(resp.UIConfig.EditView.RedirectEntityView.Route)
					if resp.UIConfig.EditView.RedirectEntityView.ViewType != nil {
						r.UIConfig.EditView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.EditView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.EditView.Redirect.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.ListItem == nil {
				r.UIConfig.ListItem = nil
			} else {
				r.UIConfig.ListItem = &tfTypes.ListItem{}
				if len(r.UIConfig.ListItem.QuickActions) > len(resp.UIConfig.ListItem.QuickActions) {
					r.UIConfig.ListItem.QuickActions = r.UIConfig.ListItem.QuickActions[:len(resp.UIConfig.ListItem.QuickActions)]
				}
				for quickActionsCount, quickActionsItem := range resp.UIConfig.ListItem.QuickActions {
					var quickActions1 tfTypes.EntityAction
					quickActions1.Action = types.StringValue(quickActionsItem.Action)
					quickActions1.Icon = types.StringPointerValue(quickActionsItem.Icon)
					quickActions1.Label = types.StringValue(quickActionsItem.Label)
					quickActions1.Permission = types.StringPointerValue(quickActionsItem.Permission)
					if quickActionsCount+1 > len(r.UIConfig.ListItem.QuickActions) {
						r.UIConfig.ListItem.QuickActions = append(r.UIConfig.ListItem.QuickActions, quickActions1)
					} else {
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Action = quickActions1.Action
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Icon = quickActions1.Icon
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Label = quickActions1.Label
						r.UIConfig.ListItem.QuickActions[quickActionsCount].Permission = quickActions1.Permission
					}
				}
				if len(r.UIConfig.ListItem.SummaryAttributes) > len(resp.UIConfig.ListItem.SummaryAttributes) {
					r.UIConfig.ListItem.SummaryAttributes = r.UIConfig.ListItem.SummaryAttributes[:len(resp.UIConfig.ListItem.SummaryAttributes)]
				}
				for summaryAttributesCount, summaryAttributesItem := range resp.UIConfig.ListItem.SummaryAttributes {
					var summaryAttributes2 tfTypes.SummaryAttributes
					if summaryAttributesItem.Str != nil {
						summaryAttributes2.Str = types.StringPointerValue(summaryAttributesItem.Str)
					}
					if summaryAttributesItem.SummaryAttribute != nil {
						summaryAttributes2.SummaryAttribute = &tfTypes.SummaryAttribute{}
						summaryAttributes2.SummaryAttribute.FeatureFlag = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.FeatureFlag)
						summaryAttributes2.SummaryAttribute.Label = types.StringValue(summaryAttributesItem.SummaryAttribute.Label)
						summaryAttributes2.SummaryAttribute.RenderCondition = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.RenderCondition)
						for settingsFlagCount6, settingsFlagItem6 := range summaryAttributesItem.SummaryAttribute.SettingsFlag {
							var settingsFlag13 tfTypes.SettingFlag
							settingsFlag13.Enabled = types.BoolPointerValue(settingsFlagItem6.Enabled)
							settingsFlag13.Name = types.StringPointerValue(settingsFlagItem6.Name)
							if settingsFlagCount6+1 > len(summaryAttributes2.SummaryAttribute.SettingsFlag) {
								summaryAttributes2.SummaryAttribute.SettingsFlag = append(summaryAttributes2.SummaryAttribute.SettingsFlag, settingsFlag13)
							} else {
								summaryAttributes2.SummaryAttribute.SettingsFlag[settingsFlagCount6].Enabled = settingsFlag13.Enabled
								summaryAttributes2.SummaryAttribute.SettingsFlag[settingsFlagCount6].Name = settingsFlag13.Name
							}
						}
						summaryAttributes2.SummaryAttribute.ShowAsTag = types.BoolPointerValue(summaryAttributesItem.SummaryAttribute.ShowAsTag)
						summaryAttributes2.SummaryAttribute.TagColor = types.StringPointerValue(summaryAttributesItem.SummaryAttribute.TagColor)
						summaryAttributes2.SummaryAttribute.Value = types.StringValue(summaryAttributesItem.SummaryAttribute.Value)
					}
					if summaryAttributesCount+1 > len(r.UIConfig.ListItem.SummaryAttributes) {
						r.UIConfig.ListItem.SummaryAttributes = append(r.UIConfig.ListItem.SummaryAttributes, summaryAttributes2)
					} else {
						r.UIConfig.ListItem.SummaryAttributes[summaryAttributesCount].Str = summaryAttributes2.Str
						r.UIConfig.ListItem.SummaryAttributes[summaryAttributesCount].SummaryAttribute = summaryAttributes2.SummaryAttribute
					}
				}
			}
			if resp.UIConfig.Sharing == nil {
				r.UIConfig.Sharing = nil
			} else {
				r.UIConfig.Sharing = &tfTypes.Sharing{}
				r.UIConfig.Sharing.ShowSharingButton = types.BoolPointerValue(resp.UIConfig.Sharing.ShowSharingButton)
			}
			if resp.UIConfig.SingleView == nil {
				r.UIConfig.SingleView = nil
			} else {
				r.UIConfig.SingleView = &tfTypes.EditView{}
				if resp.UIConfig.SingleView.EntityDefaultEdit != nil {
					r.UIConfig.SingleView.Default = &tfTypes.EntityDefaultEdit{}
					if len(resp.UIConfig.SingleView.EntityDefaultEdit.SearchParams) > 0 {
						r.UIConfig.SingleView.Default.SearchParams = make(map[string]types.String)
						for key7, value7 := range resp.UIConfig.SingleView.EntityDefaultEdit.SearchParams {
							r.UIConfig.SingleView.Default.SearchParams[key7] = types.StringValue(value7)
						}
					}
					r.UIConfig.SingleView.Default.SummaryAttributes = []types.String{}
					for _, v := range resp.UIConfig.SingleView.EntityDefaultEdit.SummaryAttributes {
						r.UIConfig.SingleView.Default.SummaryAttributes = append(r.UIConfig.SingleView.Default.SummaryAttributes, types.StringValue(v))
					}
					if resp.UIConfig.SingleView.EntityDefaultEdit.ViewType != nil {
						r.UIConfig.SingleView.Default.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.EntityDefaultEdit.ViewType))
					} else {
						r.UIConfig.SingleView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.SingleView.EntityViewDisabled != nil {
					r.UIConfig.SingleView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.SingleView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.SingleView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.SingleView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.SingleView.RedirectEntityView != nil {
					r.UIConfig.SingleView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.SingleView.Redirect.Route = types.StringPointerValue(resp.UIConfig.SingleView.RedirectEntityView.Route)
					if resp.UIConfig.SingleView.RedirectEntityView.ViewType != nil {
						r.UIConfig.SingleView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.SingleView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.SingleView.Redirect.ViewType = types.StringNull()
					}
				}
			}
			if resp.UIConfig.TableView == nil {
				r.UIConfig.TableView = nil
			} else {
				r.UIConfig.TableView = &tfTypes.TableView{}
				if resp.UIConfig.TableView.EntityDefaultTable != nil {
					r.UIConfig.TableView.Default = &tfTypes.EntityDefaultTable{}
					if len(r.UIConfig.TableView.Default.BulkActions) > len(resp.UIConfig.TableView.EntityDefaultTable.BulkActions) {
						r.UIConfig.TableView.Default.BulkActions = r.UIConfig.TableView.Default.BulkActions[:len(resp.UIConfig.TableView.EntityDefaultTable.BulkActions)]
					}
					for bulkActionsCount, bulkActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.BulkActions {
						var bulkActions1 tfTypes.BulkActions
						if bulkActionsItem.Str != nil {
							bulkActions1.Str = types.StringPointerValue(bulkActionsItem.Str)
						}
						if bulkActionsItem.EntityAction != nil {
							bulkActions1.EntityAction = &tfTypes.EntityAction{}
							bulkActions1.EntityAction.Action = types.StringValue(bulkActionsItem.EntityAction.Action)
							bulkActions1.EntityAction.Icon = types.StringPointerValue(bulkActionsItem.EntityAction.Icon)
							bulkActions1.EntityAction.Label = types.StringValue(bulkActionsItem.EntityAction.Label)
							bulkActions1.EntityAction.Permission = types.StringPointerValue(bulkActionsItem.EntityAction.Permission)
						}
						if bulkActionsCount+1 > len(r.UIConfig.TableView.Default.BulkActions) {
							r.UIConfig.TableView.Default.BulkActions = append(r.UIConfig.TableView.Default.BulkActions, bulkActions1)
						} else {
							r.UIConfig.TableView.Default.BulkActions[bulkActionsCount].Str = bulkActions1.Str
							r.UIConfig.TableView.Default.BulkActions[bulkActionsCount].EntityAction = bulkActions1.EntityAction
						}
					}
					r.UIConfig.TableView.Default.EnableThumbnails = types.BoolPointerValue(resp.UIConfig.TableView.EntityDefaultTable.EnableThumbnails)
					if len(r.UIConfig.TableView.Default.NavbarActions) > len(resp.UIConfig.TableView.EntityDefaultTable.NavbarActions) {
						r.UIConfig.TableView.Default.NavbarActions = r.UIConfig.TableView.Default.NavbarActions[:len(resp.UIConfig.TableView.EntityDefaultTable.NavbarActions)]
					}
					for navbarActionsCount, navbarActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.NavbarActions {
						var navbarActions1 tfTypes.NavbarActions
						for optionsCount, optionsItem := range navbarActionsItem.Options {
							var options3 tfTypes.Options
							options3.Label = types.StringValue(optionsItem.Label)
							if optionsItem.Params == nil {
								options3.Params = nil
							} else {
								options3.Params = &tfTypes.Constraints{}
							}
							if optionsCount+1 > len(navbarActions1.Options) {
								navbarActions1.Options = append(navbarActions1.Options, options3)
							} else {
								navbarActions1.Options[optionsCount].Label = options3.Label
								navbarActions1.Options[optionsCount].Params = options3.Params
							}
						}
						navbarActions1.Type = types.StringValue(navbarActionsItem.Type)
						if navbarActionsCount+1 > len(r.UIConfig.TableView.Default.NavbarActions) {
							r.UIConfig.TableView.Default.NavbarActions = append(r.UIConfig.TableView.Default.NavbarActions, navbarActions1)
						} else {
							r.UIConfig.TableView.Default.NavbarActions[navbarActionsCount].Options = navbarActions1.Options
							r.UIConfig.TableView.Default.NavbarActions[navbarActionsCount].Type = navbarActions1.Type
						}
					}
					if len(r.UIConfig.TableView.Default.RowActions) > len(resp.UIConfig.TableView.EntityDefaultTable.RowActions) {
						r.UIConfig.TableView.Default.RowActions = r.UIConfig.TableView.Default.RowActions[:len(resp.UIConfig.TableView.EntityDefaultTable.RowActions)]
					}
					for rowActionsCount, rowActionsItem := range resp.UIConfig.TableView.EntityDefaultTable.RowActions {
						var rowActions1 tfTypes.BulkActions
						if rowActionsItem.Str != nil {
							rowActions1.Str = types.StringPointerValue(rowActionsItem.Str)
						}
						if rowActionsItem.EntityAction != nil {
							rowActions1.EntityAction = &tfTypes.EntityAction{}
							rowActions1.EntityAction.Action = types.StringValue(rowActionsItem.EntityAction.Action)
							rowActions1.EntityAction.Icon = types.StringPointerValue(rowActionsItem.EntityAction.Icon)
							rowActions1.EntityAction.Label = types.StringValue(rowActionsItem.EntityAction.Label)
							rowActions1.EntityAction.Permission = types.StringPointerValue(rowActionsItem.EntityAction.Permission)
						}
						if rowActionsCount+1 > len(r.UIConfig.TableView.Default.RowActions) {
							r.UIConfig.TableView.Default.RowActions = append(r.UIConfig.TableView.Default.RowActions, rowActions1)
						} else {
							r.UIConfig.TableView.Default.RowActions[rowActionsCount].Str = rowActions1.Str
							r.UIConfig.TableView.Default.RowActions[rowActionsCount].EntityAction = rowActions1.EntityAction
						}
					}
					if resp.UIConfig.TableView.EntityDefaultTable.ViewType != nil {
						r.UIConfig.TableView.Default.ViewType = types.StringValue(string(*resp.UIConfig.TableView.EntityDefaultTable.ViewType))
					} else {
						r.UIConfig.TableView.Default.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.TableView.EntityViewDisabled != nil {
					r.UIConfig.TableView.Disabled = &tfTypes.EntityViewDisabled{}
					if resp.UIConfig.TableView.EntityViewDisabled.ViewType != nil {
						r.UIConfig.TableView.Disabled.ViewType = types.StringValue(string(*resp.UIConfig.TableView.EntityViewDisabled.ViewType))
					} else {
						r.UIConfig.TableView.Disabled.ViewType = types.StringNull()
					}
				}
				if resp.UIConfig.TableView.RedirectEntityView != nil {
					r.UIConfig.TableView.Redirect = &tfTypes.RedirectEntityView{}
					r.UIConfig.TableView.Redirect.Route = types.StringPointerValue(resp.UIConfig.TableView.RedirectEntityView.Route)
					if resp.UIConfig.TableView.RedirectEntityView.ViewType != nil {
						r.UIConfig.TableView.Redirect.ViewType = types.StringValue(string(*resp.UIConfig.TableView.RedirectEntityView.ViewType))
					} else {
						r.UIConfig.TableView.Redirect.ViewType = types.StringNull()
					}
				}
			}
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
		r.Version = types.Int64PointerValue(resp.Version)
	}
}
