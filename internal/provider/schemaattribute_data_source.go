// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SchemaAttributeDataSource{}
var _ datasource.DataSourceWithConfigure = &SchemaAttributeDataSource{}

func NewSchemaAttributeDataSource() datasource.DataSource {
	return &SchemaAttributeDataSource{}
}

// SchemaAttributeDataSource is the data source implementation.
type SchemaAttributeDataSource struct {
	client *sdk.SDK
}

// SchemaAttributeDataSourceModel describes the data model.
type SchemaAttributeDataSourceModel struct {
	Purpose                                      []types.String                       `tfsdk:"purpose"`
	Constraints                                  *AddressRelationAttributeConstraints `tfsdk:"constraints"`
	DefaultValue                                 types.String                         `tfsdk:"default_value"`
	Deprecated                                   types.Bool                           `tfsdk:"deprecated"`
	EntityBuilderDisableEdit                     types.Bool                           `tfsdk:"entity_builder_disable_edit"`
	FeatureFlag                                  types.String                         `tfsdk:"feature_flag"`
	Group                                        types.String                         `tfsdk:"group"`
	Hidden                                       types.Bool                           `tfsdk:"hidden"`
	HideLabel                                    types.Bool                           `tfsdk:"hide_label"`
	Icon                                         types.String                         `tfsdk:"icon"`
	InfoHelpers                                  *AddressRelationAttributeInfoHelpers `tfsdk:"info_helpers"`
	Label                                        types.String                         `tfsdk:"label"`
	Layout                                       types.String                         `tfsdk:"layout"`
	LessThanSlugGreaterThanLessThanIDGreaterThan types.String                         `tfsdk:"less_than_slug_greater_than_less_than_id_greater_than"`
	Name                                         types.String                         `tfsdk:"name"`
	Order                                        types.Int64                          `tfsdk:"order"`
	Placeholder                                  types.String                         `tfsdk:"placeholder"`
	PreviewValueFormatter                        types.String                         `tfsdk:"preview_value_formatter"`
	Protected                                    types.Bool                           `tfsdk:"protected"`
	RenderCondition                              types.String                         `tfsdk:"render_condition"`
	Required                                     types.Bool                           `tfsdk:"required"`
	SettingsFlag                                 []SettingFlag                        `tfsdk:"settings_flag"`
	ShowInTable                                  types.Bool                           `tfsdk:"show_in_table"`
	Sortable                                     types.Bool                           `tfsdk:"sortable"`
	ValueFormatter                               types.String                         `tfsdk:"value_formatter"`
}

// Metadata returns the data source type name.
func (r *SchemaAttributeDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema_attribute"
}

// Schema defines the schema for the data source.
func (r *SchemaAttributeDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SchemaAttribute DataSource",

		Attributes: map[string]schema.Attribute{
			"purpose": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"constraints": schema.SingleNestedAttribute{
				Computed:   true,
				Attributes: map[string]schema.Attribute{},
				MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
					`These constraints should and will be enforced by the attribute renderer.` + "\n" +
					``,
			},
			"default_value": schema.StringAttribute{
				Computed:    true,
				Description: `Parsed as JSON.`,
			},
			"deprecated": schema.BoolAttribute{
				Computed:    true,
				Description: `Default: false`,
			},
			"entity_builder_disable_edit": schema.BoolAttribute{
				Computed:    true,
				Description: `Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI. Default: false`,
			},
			"feature_flag": schema.StringAttribute{
				Computed:    true,
				Description: `This attribute should only be active when the feature flag is enabled`,
			},
			"group": schema.StringAttribute{
				Computed:    true,
				Description: `Which group the attribute should appear in. Accepts group ID or group name`,
			},
			"hidden": schema.BoolAttribute{
				Computed:    true,
				Description: `Do not render attribute in entity views. Default: false`,
			},
			"hide_label": schema.BoolAttribute{
				Computed:    true,
				Description: `When set to true, will hide the label of the field.`,
			},
			"icon": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
					`The value must be a valid @epilot/base-elements Icon name` + "\n" +
					``,
			},
			"info_helpers": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"hint_custom_component": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The name of the custom component to be used as the hint helper.` + "\n" +
							`The component should be registered in the ` + "`" + `@epilot360/entity-ui` + "`" + ` on the index of the components directory.` + "\n" +
							`When specified it overrides the ` + "`" + `hint_text` + "`" + ` or ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
							``,
					},
					"hint_text": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The text to be displayed in the attribute hint helper.` + "\n" +
							`When specified it overrides the ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
							``,
					},
					"hint_text_key": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The key of the hint text to be displayed in the attribute hint helper.` + "\n" +
							`The key should be a valid i18n key.` + "\n" +
							``,
					},
					"hint_tooltip_placement": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The placement of the hint tooltip.` + "\n" +
							`The value should be a valid ` + "`" + `@mui/core` + "`" + ` tooltip placement.` + "\n" +
							``,
					},
				},
				Description: `A set of configurations meant to document and assist the user in filling the attribute.`,
			},
			"label": schema.StringAttribute{
				Computed: true,
			},
			"layout": schema.StringAttribute{
				Computed: true,
			},
			"less_than_slug_greater_than_less_than_id_greater_than": schema.StringAttribute{
				Required:    true,
				Description: `Schema Slug and the Attribute ID`,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"order": schema.Int64Attribute{
				Computed:    true,
				Description: `Attribute sort order (ascending) in group`,
			},
			"placeholder": schema.StringAttribute{
				Computed: true,
			},
			"preview_value_formatter": schema.StringAttribute{
				Computed: true,
			},
			"protected": schema.BoolAttribute{
				Computed:    true,
				Description: `Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted. Default: true`,
			},
			"render_condition": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
					`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
					`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
					``,
			},
			"required": schema.BoolAttribute{
				Computed:    true,
				Description: `Default: false`,
			},
			"settings_flag": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Whether the setting should be enabled or not`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the organization setting to check`,
						},
					},
				},
				Description: `This attribute should only be active when all the settings have the correct value`,
			},
			"show_in_table": schema.BoolAttribute{
				Computed:    true,
				Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
			},
			"sortable": schema.BoolAttribute{
				Computed:    true,
				Description: `Allow sorting by this attribute in table views if ` + "`" + `show_in_table` + "`" + ` is true. Default: true`,
			},
			"value_formatter": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SchemaAttributeDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaAttributeDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SchemaAttributeDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	compositeID := data.LessThanSlugGreaterThanLessThanIDGreaterThan.ValueString()
	request := operations.GetSchemaAttributeRequest{
		CompositeID: compositeID,
	}
	res, err := r.client.Schemas.GetSchemaAttribute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.BaseAttribute == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedBaseAttribute(res.BaseAttribute)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
