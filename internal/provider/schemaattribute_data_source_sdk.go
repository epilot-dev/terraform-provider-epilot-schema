// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaAttributeDataSourceModel) RefreshFromSharedAttribute(resp *shared.Attribute) {
	if resp != nil {
		if len(r.Actions) > len(resp.Actions) {
			r.Actions = r.Actions[:len(resp.Actions)]
		}
		for actionsCount, actionsItem := range resp.Actions {
			var actions1 tfTypes.Actions
			if actionsItem.ActionType != nil {
				actions1.ActionType = types.StringValue(string(*actionsItem.ActionType))
			} else {
				actions1.ActionType = types.StringNull()
			}
			actions1.Default = types.BoolPointerValue(actionsItem.Default)
			actions1.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
			actions1.Label = types.StringPointerValue(actionsItem.Label)
			if actionsItem.NewEntityItem == nil {
				actions1.NewEntityItem = nil
			} else {
				actions1.NewEntityItem = &tfTypes.NewEntityItem{}
				if actionsItem.NewEntityItem.ACL == nil {
					actions1.NewEntityItem.ACL = nil
				} else {
					actions1.NewEntityItem.ACL = &tfTypes.EntityACL{}
					if actionsItem.NewEntityItem.ACL.AdditionalProperties == nil {
						actions1.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult, _ := json.Marshal(actionsItem.NewEntityItem.ACL.AdditionalProperties)
						actions1.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
					}
					actions1.NewEntityItem.ACL.Delete = []types.String{}
					for _, v := range actionsItem.NewEntityItem.ACL.Delete {
						actions1.NewEntityItem.ACL.Delete = append(actions1.NewEntityItem.ACL.Delete, types.StringValue(v))
					}
					actions1.NewEntityItem.ACL.Edit = []types.String{}
					for _, v := range actionsItem.NewEntityItem.ACL.Edit {
						actions1.NewEntityItem.ACL.Edit = append(actions1.NewEntityItem.ACL.Edit, types.StringValue(v))
					}
					actions1.NewEntityItem.ACL.View = []types.String{}
					for _, v := range actionsItem.NewEntityItem.ACL.View {
						actions1.NewEntityItem.ACL.View = append(actions1.NewEntityItem.ACL.View, types.StringValue(v))
					}
				}
				if actionsItem.NewEntityItem.CreatedAt != nil {
					actions1.NewEntityItem.CreatedAt = types.StringValue(actionsItem.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					actions1.NewEntityItem.CreatedAt = types.StringNull()
				}
				actions1.NewEntityItem.ID = types.StringValue(actionsItem.NewEntityItem.ID)
				actions1.NewEntityItem.Org = types.StringValue(actionsItem.NewEntityItem.Org)
				for ownersCount, ownersItem := range actionsItem.NewEntityItem.Owners {
					var owners1 tfTypes.EntityOwner
					owners1.OrgID = types.StringValue(ownersItem.OrgID)
					owners1.UserID = types.StringPointerValue(ownersItem.UserID)
					if ownersCount+1 > len(actions1.NewEntityItem.Owners) {
						actions1.NewEntityItem.Owners = append(actions1.NewEntityItem.Owners, owners1)
					} else {
						actions1.NewEntityItem.Owners[ownersCount].OrgID = owners1.OrgID
						actions1.NewEntityItem.Owners[ownersCount].UserID = owners1.UserID
					}
				}
				actions1.NewEntityItem.Schema = types.StringValue(actionsItem.NewEntityItem.Schema)
				actions1.NewEntityItem.Tags = []types.String{}
				for _, v := range actionsItem.NewEntityItem.Tags {
					actions1.NewEntityItem.Tags = append(actions1.NewEntityItem.Tags, types.StringValue(v))
				}
				actions1.NewEntityItem.Title = types.StringPointerValue(actionsItem.NewEntityItem.Title)
				if actionsItem.NewEntityItem.UpdatedAt != nil {
					actions1.NewEntityItem.UpdatedAt = types.StringValue(actionsItem.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					actions1.NewEntityItem.UpdatedAt = types.StringNull()
				}
				if actionsItem.NewEntityItem.AdditionalProperties == nil {
					actions1.NewEntityItem.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(actionsItem.NewEntityItem.AdditionalProperties)
					actions1.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
			}
			for settingsFlagCount, settingsFlagItem := range actionsItem.SettingsFlag {
				var settingsFlag1 tfTypes.SettingFlag
				settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
				settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
				if settingsFlagCount+1 > len(actions1.SettingsFlag) {
					actions1.SettingsFlag = append(actions1.SettingsFlag, settingsFlag1)
				} else {
					actions1.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
					actions1.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
				}
			}
			if actionsCount+1 > len(r.Actions) {
				r.Actions = append(r.Actions, actions1)
			} else {
				r.Actions[actionsCount].ActionType = actions1.ActionType
				r.Actions[actionsCount].Default = actions1.Default
				r.Actions[actionsCount].FeatureFlag = actions1.FeatureFlag
				r.Actions[actionsCount].Label = actions1.Label
				r.Actions[actionsCount].NewEntityItem = actions1.NewEntityItem
				r.Actions[actionsCount].SettingsFlag = actions1.SettingsFlag
			}
		}
		r.AddButtonLabel = types.StringPointerValue(resp.AddButtonLabel)
		r.AllowAny = types.BoolPointerValue(resp.AllowAny)
		r.AllowedExtensions = []types.String{}
		for _, v := range resp.AllowedExtensions {
			r.AllowedExtensions = append(r.AllowedExtensions, types.StringValue(v))
		}
		r.AllowedSchemas = []types.String{}
		for _, v := range resp.AllowedSchemas {
			r.AllowedSchemas = append(r.AllowedSchemas, types.StringValue(v))
		}
		r.AllowExtraOptions = types.BoolPointerValue(resp.AllowExtraOptions)
		if resp.Constraints == nil {
			r.Constraints = nil
		} else {
			r.Constraints = &tfTypes.Constraints{}
		}
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		if len(r.Currency) > len(resp.Currency) {
			r.Currency = r.Currency[:len(resp.Currency)]
		}
		for currencyCount, currencyItem := range resp.Currency {
			var currency1 tfTypes.Currency
			if currencyItem.One != nil {
				currency1.One = &tfTypes.One{}
				currency1.One.Code = types.StringValue(currencyItem.One.Code)
				currency1.One.Description = types.StringValue(currencyItem.One.Description)
				currency1.One.Flag = types.StringPointerValue(currencyItem.One.Flag)
				currency1.One.Symbol = types.StringValue(currencyItem.One.Symbol)
			}
			if currencyCount+1 > len(r.Currency) {
				r.Currency = append(r.Currency, currency1)
			} else {
				r.Currency[currencyCount].One = currency1.One
			}
		}
		r.CurrencySelectorOnly = types.BoolPointerValue(resp.CurrencySelectorOnly)
		if resp.DefaultAccessControl != nil {
			r.DefaultAccessControl = types.StringValue(string(*resp.DefaultAccessControl))
		} else {
			r.DefaultAccessControl = types.StringNull()
		}
		if resp.DefaultValue == nil {
			r.DefaultValue = types.StringNull()
		} else {
			defaultValueResult, _ := json.Marshal(resp.DefaultValue)
			r.DefaultValue = types.StringValue(string(defaultValueResult))
		}
		r.Deprecated = types.BoolPointerValue(resp.Deprecated)
		r.DetailsViewModeEnabled = types.BoolPointerValue(resp.DetailsViewModeEnabled)
		r.DisableCaseSensitive = types.BoolPointerValue(resp.DisableCaseSensitive)
		r.DisplayImagesLandscaped = types.BoolPointerValue(resp.DisplayImagesLandscaped)
		if resp.DrawerSize != nil {
			r.DrawerSize = types.StringValue(string(*resp.DrawerSize))
		} else {
			r.DrawerSize = types.StringNull()
		}
		if resp.EditMode != nil {
			r.EditMode = types.StringValue(string(*resp.EditMode))
		} else {
			r.EditMode = types.StringNull()
		}
		r.EnableDescription = types.BoolPointerValue(resp.EnableDescription)
		r.EnableRelationPicker = types.BoolPointerValue(resp.EnableRelationPicker)
		r.EnableRelationTags = types.BoolPointerValue(resp.EnableRelationTags)
		r.EntityBuilderDisableEdit = types.BoolPointerValue(resp.EntityBuilderDisableEdit)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.Format = types.StringPointerValue(resp.Format)
		r.Group = types.StringPointerValue(resp.Group)
		r.HasPrimary = types.BoolPointerValue(resp.HasPrimary)
		r.Hidden = types.BoolPointerValue(resp.Hidden)
		r.HideLabel = types.BoolPointerValue(resp.HideLabel)
		r.Icon = types.StringPointerValue(resp.Icon)
		r.ID = types.StringPointerValue(resp.ID)
		r.Identifiers = []types.String{}
		for _, v := range resp.Identifiers {
			r.Identifiers = append(r.Identifiers, types.StringValue(v))
		}
		if resp.InfoHelpers == nil {
			r.InfoHelpers = nil
		} else {
			r.InfoHelpers = &tfTypes.InfoHelpers{}
			r.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.InfoHelpers.HintCustomComponent)
			r.InfoHelpers.HintText = types.StringPointerValue(resp.InfoHelpers.HintText)
			r.InfoHelpers.HintTextKey = types.StringPointerValue(resp.InfoHelpers.HintTextKey)
			r.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.InfoHelpers.HintTooltipPlacement)
		}
		r.Label = types.StringValue(resp.Label)
		r.Layout = types.StringPointerValue(resp.Layout)
		r.Multiline = types.BoolPointerValue(resp.Multiline)
		r.Multiple = types.BoolPointerValue(resp.Multiple)
		r.Name = types.StringValue(resp.Name)
		r.Options = []types.String{}
		for _, v := range resp.Options {
			r.Options = append(r.Options, types.StringValue(v))
		}
		r.Order = types.Int64PointerValue(resp.Order)
		r.Parents = []types.String{}
		for _, v := range resp.Parents {
			r.Parents = append(r.Parents, types.StringValue(v))
		}
		r.Placeholder = types.StringPointerValue(resp.Placeholder)
		r.Prefix = types.StringPointerValue(resp.Prefix)
		r.PreviewValueFormatter = types.StringPointerValue(resp.PreviewValueFormatter)
		r.Protected = types.BoolPointerValue(resp.Protected)
		r.Purpose = []types.String{}
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.Readonly = types.BoolPointerValue(resp.Readonly)
		if resp.RelationAffinityMode != nil {
			r.RelationAffinityMode = types.StringValue(string(*resp.RelationAffinityMode))
		} else {
			r.RelationAffinityMode = types.StringNull()
		}
		if resp.RelationType != nil {
			r.RelationType = types.StringValue(string(*resp.RelationType))
		} else {
			r.RelationType = types.StringNull()
		}
		r.RenderCondition = types.StringPointerValue(resp.RenderCondition)
		r.Repeatable = types.BoolPointerValue(resp.Repeatable)
		r.Required = types.BoolPointerValue(resp.Required)
		if len(resp.ReverseAttributes) > 0 {
			r.ReverseAttributes = make(map[string]types.String)
			for key, value := range resp.ReverseAttributes {
				r.ReverseAttributes[key] = types.StringValue(value)
			}
		}
		r.SearchPlaceholder = types.StringPointerValue(resp.SearchPlaceholder)
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount1, settingsFlagItem1 := range resp.SettingsFlag {
			var settingsFlag3 tfTypes.SettingFlag
			settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
			settingsFlag3.Name = types.StringPointerValue(settingsFlagItem1.Name)
			if settingsFlagCount1+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag3)
			} else {
				r.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag3.Enabled
				r.SettingsFlag[settingsFlagCount1].Name = settingsFlag3.Name
			}
		}
		r.ShowInTable = types.BoolPointerValue(resp.ShowInTable)
		r.Slug = types.StringPointerValue(resp.Slug)
		r.Sortable = types.BoolPointerValue(resp.Sortable)
		r.StartNumber = types.Int64PointerValue(resp.StartNumber)
		r.Suggestions = []types.String{}
		for _, v := range resp.Suggestions {
			r.Suggestions = append(r.Suggestions, types.StringValue(v))
		}
		if len(r.SummaryFields) > len(resp.SummaryFields) {
			r.SummaryFields = r.SummaryFields[:len(resp.SummaryFields)]
		}
		for summaryFieldsCount, summaryFieldsItem := range resp.SummaryFields {
			var summaryFields1 tfTypes.SummaryFields
			if summaryFieldsItem.Str != nil {
				summaryFields1.Str = types.StringPointerValue(summaryFieldsItem.Str)
			}
			if summaryFieldsItem.SummaryField != nil {
				summaryFields1.SummaryField = &tfTypes.SummaryField{}
				summaryFields1.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
				summaryFields1.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
			}
			if summaryFieldsCount+1 > len(r.SummaryFields) {
				r.SummaryFields = append(r.SummaryFields, summaryFields1)
			} else {
				r.SummaryFields[summaryFieldsCount].Str = summaryFields1.Str
				r.SummaryFields[summaryFieldsCount].SummaryField = summaryFields1.SummaryField
			}
		}
		r.Topic = types.StringPointerValue(resp.Topic)
		r.Type = types.StringValue(string(resp.Type))
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		r.ValueFormatter = types.StringPointerValue(resp.ValueFormatter)
	}
}
