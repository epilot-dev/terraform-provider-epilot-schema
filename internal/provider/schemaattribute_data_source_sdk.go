// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaAttributeDataSourceModel) RefreshFromSharedAttribute(resp *shared.Attribute) {
	if resp != nil {
		if resp.AddressRelationAttribute != nil {
			r.AddressRelationAttribute = &tfTypes.AddressRelationAttribute{}
			r.AddressRelationAttribute.Purpose = []types.String{}
			for _, v := range resp.AddressRelationAttribute.Purpose {
				r.AddressRelationAttribute.Purpose = append(r.AddressRelationAttribute.Purpose, types.StringValue(v))
			}
			if resp.AddressRelationAttribute.Constraints == nil {
				r.AddressRelationAttribute.Constraints = nil
			} else {
				r.AddressRelationAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.AddressRelationAttribute.DefaultValue == nil {
				r.AddressRelationAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult, _ := json.Marshal(resp.AddressRelationAttribute.DefaultValue)
				r.AddressRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult))
			}
			r.AddressRelationAttribute.Deprecated = types.BoolPointerValue(resp.AddressRelationAttribute.Deprecated)
			r.Deprecated = r.AddressRelationAttribute.Deprecated
			r.AddressRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.AddressRelationAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.AddressRelationAttribute.EntityBuilderDisableEdit
			r.AddressRelationAttribute.FeatureFlag = types.StringPointerValue(resp.AddressRelationAttribute.FeatureFlag)
			r.FeatureFlag = r.AddressRelationAttribute.FeatureFlag
			r.AddressRelationAttribute.Group = types.StringPointerValue(resp.AddressRelationAttribute.Group)
			r.Group = r.AddressRelationAttribute.Group
			r.AddressRelationAttribute.HasPrimary = types.BoolPointerValue(resp.AddressRelationAttribute.HasPrimary)
			r.AddressRelationAttribute.Hidden = types.BoolPointerValue(resp.AddressRelationAttribute.Hidden)
			r.Hidden = r.AddressRelationAttribute.Hidden
			r.AddressRelationAttribute.HideLabel = types.BoolPointerValue(resp.AddressRelationAttribute.HideLabel)
			r.HideLabel = r.AddressRelationAttribute.HideLabel
			r.AddressRelationAttribute.Icon = types.StringPointerValue(resp.AddressRelationAttribute.Icon)
			r.Icon = r.AddressRelationAttribute.Icon
			r.AddressRelationAttribute.ID = types.StringPointerValue(resp.AddressRelationAttribute.ID)
			r.ID = r.AddressRelationAttribute.ID
			if resp.AddressRelationAttribute.InfoHelpers == nil {
				r.AddressRelationAttribute.InfoHelpers = nil
			} else {
				r.AddressRelationAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.AddressRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.AddressRelationAttribute.InfoHelpers.HintCustomComponent)
				r.AddressRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.AddressRelationAttribute.InfoHelpers.HintText)
				r.AddressRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.AddressRelationAttribute.InfoHelpers.HintTextKey)
				r.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.AddressRelationAttribute.Label = types.StringValue(resp.AddressRelationAttribute.Label)
			r.Label = r.AddressRelationAttribute.Label
			r.AddressRelationAttribute.Layout = types.StringPointerValue(resp.AddressRelationAttribute.Layout)
			r.Layout = r.AddressRelationAttribute.Layout
			r.AddressRelationAttribute.Name = types.StringValue(resp.AddressRelationAttribute.Name)
			r.Name = r.AddressRelationAttribute.Name
			r.AddressRelationAttribute.Order = types.Int64PointerValue(resp.AddressRelationAttribute.Order)
			r.Order = r.AddressRelationAttribute.Order
			r.AddressRelationAttribute.Placeholder = types.StringPointerValue(resp.AddressRelationAttribute.Placeholder)
			r.Placeholder = r.AddressRelationAttribute.Placeholder
			r.AddressRelationAttribute.PreviewValueFormatter = types.StringPointerValue(resp.AddressRelationAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.AddressRelationAttribute.PreviewValueFormatter
			r.AddressRelationAttribute.Protected = types.BoolPointerValue(resp.AddressRelationAttribute.Protected)
			r.Protected = r.AddressRelationAttribute.Protected
			r.AddressRelationAttribute.Readonly = types.BoolPointerValue(resp.AddressRelationAttribute.Readonly)
			r.Readonly = r.AddressRelationAttribute.Readonly
			r.AddressRelationAttribute.RenderCondition = types.StringPointerValue(resp.AddressRelationAttribute.RenderCondition)
			r.RenderCondition = r.AddressRelationAttribute.RenderCondition
			r.AddressRelationAttribute.Required = types.BoolPointerValue(resp.AddressRelationAttribute.Required)
			r.Required = r.AddressRelationAttribute.Required
			if len(r.AddressRelationAttribute.SettingsFlag) > len(resp.AddressRelationAttribute.SettingsFlag) {
				r.AddressRelationAttribute.SettingsFlag = r.AddressRelationAttribute.SettingsFlag[:len(resp.AddressRelationAttribute.SettingsFlag)]
			}
			for settingsFlagCount, settingsFlagItem := range resp.AddressRelationAttribute.SettingsFlag {
				var settingsFlag1 tfTypes.SettingFlag
				settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
				settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
				if settingsFlagCount+1 > len(r.AddressRelationAttribute.SettingsFlag) {
					r.AddressRelationAttribute.SettingsFlag = append(r.AddressRelationAttribute.SettingsFlag, settingsFlag1)
				} else {
					r.AddressRelationAttribute.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
					r.AddressRelationAttribute.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
				}
			}
			r.AddressRelationAttribute.ShowInTable = types.BoolPointerValue(resp.AddressRelationAttribute.ShowInTable)
			r.ShowInTable = r.AddressRelationAttribute.ShowInTable
			r.AddressRelationAttribute.Sortable = types.BoolPointerValue(resp.AddressRelationAttribute.Sortable)
			r.Sortable = r.AddressRelationAttribute.Sortable
			if resp.AddressRelationAttribute.Type != nil {
				r.AddressRelationAttribute.Type = types.StringValue(string(*resp.AddressRelationAttribute.Type))
			} else {
				r.AddressRelationAttribute.Type = types.StringNull()
			}
			r.AddressRelationAttribute.ValueFormatter = types.StringPointerValue(resp.AddressRelationAttribute.ValueFormatter)
			r.ValueFormatter = r.AddressRelationAttribute.ValueFormatter
		}
		if resp.AutomationAttribute != nil {
			r.AutomationAttribute = &tfTypes.AutomationAttribute{}
			r.AutomationAttribute.Purpose = []types.String{}
			for _, v := range resp.AutomationAttribute.Purpose {
				r.AutomationAttribute.Purpose = append(r.AutomationAttribute.Purpose, types.StringValue(v))
			}
			if resp.AutomationAttribute.Constraints == nil {
				r.AutomationAttribute.Constraints = nil
			} else {
				r.AutomationAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.AutomationAttribute.DefaultValue == nil {
				r.AutomationAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult1, _ := json.Marshal(resp.AutomationAttribute.DefaultValue)
				r.AutomationAttribute.DefaultValue = types.StringValue(string(defaultValueResult1))
			}
			r.AutomationAttribute.Deprecated = types.BoolPointerValue(resp.AutomationAttribute.Deprecated)
			r.Deprecated = r.AutomationAttribute.Deprecated
			r.AutomationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.AutomationAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.AutomationAttribute.EntityBuilderDisableEdit
			r.AutomationAttribute.FeatureFlag = types.StringPointerValue(resp.AutomationAttribute.FeatureFlag)
			r.FeatureFlag = r.AutomationAttribute.FeatureFlag
			r.AutomationAttribute.Group = types.StringPointerValue(resp.AutomationAttribute.Group)
			r.Group = r.AutomationAttribute.Group
			r.AutomationAttribute.Hidden = types.BoolPointerValue(resp.AutomationAttribute.Hidden)
			r.Hidden = r.AutomationAttribute.Hidden
			r.AutomationAttribute.HideLabel = types.BoolPointerValue(resp.AutomationAttribute.HideLabel)
			r.HideLabel = r.AutomationAttribute.HideLabel
			r.AutomationAttribute.Icon = types.StringPointerValue(resp.AutomationAttribute.Icon)
			r.Icon = r.AutomationAttribute.Icon
			r.AutomationAttribute.ID = types.StringPointerValue(resp.AutomationAttribute.ID)
			r.ID = r.AutomationAttribute.ID
			if resp.AutomationAttribute.InfoHelpers == nil {
				r.AutomationAttribute.InfoHelpers = nil
			} else {
				r.AutomationAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.AutomationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.AutomationAttribute.InfoHelpers.HintCustomComponent)
				r.AutomationAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.AutomationAttribute.InfoHelpers.HintText)
				r.AutomationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.AutomationAttribute.InfoHelpers.HintTextKey)
				r.AutomationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.AutomationAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.AutomationAttribute.Label = types.StringValue(resp.AutomationAttribute.Label)
			r.Label = r.AutomationAttribute.Label
			r.AutomationAttribute.Layout = types.StringPointerValue(resp.AutomationAttribute.Layout)
			r.Layout = r.AutomationAttribute.Layout
			r.AutomationAttribute.Name = types.StringValue(resp.AutomationAttribute.Name)
			r.Name = r.AutomationAttribute.Name
			r.AutomationAttribute.Order = types.Int64PointerValue(resp.AutomationAttribute.Order)
			r.Order = r.AutomationAttribute.Order
			r.AutomationAttribute.Placeholder = types.StringPointerValue(resp.AutomationAttribute.Placeholder)
			r.Placeholder = r.AutomationAttribute.Placeholder
			r.AutomationAttribute.PreviewValueFormatter = types.StringPointerValue(resp.AutomationAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.AutomationAttribute.PreviewValueFormatter
			r.AutomationAttribute.Protected = types.BoolPointerValue(resp.AutomationAttribute.Protected)
			r.Protected = r.AutomationAttribute.Protected
			r.AutomationAttribute.Readonly = types.BoolPointerValue(resp.AutomationAttribute.Readonly)
			r.Readonly = r.AutomationAttribute.Readonly
			r.AutomationAttribute.RenderCondition = types.StringPointerValue(resp.AutomationAttribute.RenderCondition)
			r.RenderCondition = r.AutomationAttribute.RenderCondition
			r.AutomationAttribute.Required = types.BoolPointerValue(resp.AutomationAttribute.Required)
			r.Required = r.AutomationAttribute.Required
			if len(r.AutomationAttribute.SettingsFlag) > len(resp.AutomationAttribute.SettingsFlag) {
				r.AutomationAttribute.SettingsFlag = r.AutomationAttribute.SettingsFlag[:len(resp.AutomationAttribute.SettingsFlag)]
			}
			for settingsFlagCount1, settingsFlagItem1 := range resp.AutomationAttribute.SettingsFlag {
				var settingsFlag3 tfTypes.SettingFlag
				settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
				settingsFlag3.Name = types.StringPointerValue(settingsFlagItem1.Name)
				if settingsFlagCount1+1 > len(r.AutomationAttribute.SettingsFlag) {
					r.AutomationAttribute.SettingsFlag = append(r.AutomationAttribute.SettingsFlag, settingsFlag3)
				} else {
					r.AutomationAttribute.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag3.Enabled
					r.AutomationAttribute.SettingsFlag[settingsFlagCount1].Name = settingsFlag3.Name
				}
			}
			r.AutomationAttribute.ShowInTable = types.BoolPointerValue(resp.AutomationAttribute.ShowInTable)
			r.ShowInTable = r.AutomationAttribute.ShowInTable
			r.AutomationAttribute.Sortable = types.BoolPointerValue(resp.AutomationAttribute.Sortable)
			r.Sortable = r.AutomationAttribute.Sortable
			if resp.AutomationAttribute.Type != nil {
				r.AutomationAttribute.Type = types.StringValue(string(*resp.AutomationAttribute.Type))
			} else {
				r.AutomationAttribute.Type = types.StringNull()
			}
			r.AutomationAttribute.ValueFormatter = types.StringPointerValue(resp.AutomationAttribute.ValueFormatter)
			r.ValueFormatter = r.AutomationAttribute.ValueFormatter
		}
		if resp.BooleanAttribute != nil {
			r.BooleanAttribute = &tfTypes.BooleanAttribute{}
			r.BooleanAttribute.Purpose = []types.String{}
			for _, v := range resp.BooleanAttribute.Purpose {
				r.BooleanAttribute.Purpose = append(r.BooleanAttribute.Purpose, types.StringValue(v))
			}
			if resp.BooleanAttribute.Constraints == nil {
				r.BooleanAttribute.Constraints = nil
			} else {
				r.BooleanAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.BooleanAttribute.DefaultValue == nil {
				r.BooleanAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult2, _ := json.Marshal(resp.BooleanAttribute.DefaultValue)
				r.BooleanAttribute.DefaultValue = types.StringValue(string(defaultValueResult2))
			}
			r.BooleanAttribute.Deprecated = types.BoolPointerValue(resp.BooleanAttribute.Deprecated)
			r.Deprecated = r.BooleanAttribute.Deprecated
			r.BooleanAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.BooleanAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.BooleanAttribute.EntityBuilderDisableEdit
			r.BooleanAttribute.FeatureFlag = types.StringPointerValue(resp.BooleanAttribute.FeatureFlag)
			r.FeatureFlag = r.BooleanAttribute.FeatureFlag
			r.BooleanAttribute.Group = types.StringPointerValue(resp.BooleanAttribute.Group)
			r.Group = r.BooleanAttribute.Group
			r.BooleanAttribute.Hidden = types.BoolPointerValue(resp.BooleanAttribute.Hidden)
			r.Hidden = r.BooleanAttribute.Hidden
			r.BooleanAttribute.HideLabel = types.BoolPointerValue(resp.BooleanAttribute.HideLabel)
			r.HideLabel = r.BooleanAttribute.HideLabel
			r.BooleanAttribute.Icon = types.StringPointerValue(resp.BooleanAttribute.Icon)
			r.Icon = r.BooleanAttribute.Icon
			r.BooleanAttribute.ID = types.StringPointerValue(resp.BooleanAttribute.ID)
			r.ID = r.BooleanAttribute.ID
			if resp.BooleanAttribute.InfoHelpers == nil {
				r.BooleanAttribute.InfoHelpers = nil
			} else {
				r.BooleanAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.BooleanAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.BooleanAttribute.InfoHelpers.HintCustomComponent)
				r.BooleanAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.BooleanAttribute.InfoHelpers.HintText)
				r.BooleanAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.BooleanAttribute.InfoHelpers.HintTextKey)
				r.BooleanAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.BooleanAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.BooleanAttribute.Label = types.StringValue(resp.BooleanAttribute.Label)
			r.Label = r.BooleanAttribute.Label
			r.BooleanAttribute.Layout = types.StringPointerValue(resp.BooleanAttribute.Layout)
			r.Layout = r.BooleanAttribute.Layout
			r.BooleanAttribute.Name = types.StringValue(resp.BooleanAttribute.Name)
			r.Name = r.BooleanAttribute.Name
			r.BooleanAttribute.Order = types.Int64PointerValue(resp.BooleanAttribute.Order)
			r.Order = r.BooleanAttribute.Order
			r.BooleanAttribute.Placeholder = types.StringPointerValue(resp.BooleanAttribute.Placeholder)
			r.Placeholder = r.BooleanAttribute.Placeholder
			r.BooleanAttribute.PreviewValueFormatter = types.StringPointerValue(resp.BooleanAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.BooleanAttribute.PreviewValueFormatter
			r.BooleanAttribute.Protected = types.BoolPointerValue(resp.BooleanAttribute.Protected)
			r.Protected = r.BooleanAttribute.Protected
			r.BooleanAttribute.Readonly = types.BoolPointerValue(resp.BooleanAttribute.Readonly)
			r.Readonly = r.BooleanAttribute.Readonly
			r.BooleanAttribute.RenderCondition = types.StringPointerValue(resp.BooleanAttribute.RenderCondition)
			r.RenderCondition = r.BooleanAttribute.RenderCondition
			r.BooleanAttribute.Required = types.BoolPointerValue(resp.BooleanAttribute.Required)
			r.Required = r.BooleanAttribute.Required
			if len(r.BooleanAttribute.SettingsFlag) > len(resp.BooleanAttribute.SettingsFlag) {
				r.BooleanAttribute.SettingsFlag = r.BooleanAttribute.SettingsFlag[:len(resp.BooleanAttribute.SettingsFlag)]
			}
			for settingsFlagCount2, settingsFlagItem2 := range resp.BooleanAttribute.SettingsFlag {
				var settingsFlag5 tfTypes.SettingFlag
				settingsFlag5.Enabled = types.BoolPointerValue(settingsFlagItem2.Enabled)
				settingsFlag5.Name = types.StringPointerValue(settingsFlagItem2.Name)
				if settingsFlagCount2+1 > len(r.BooleanAttribute.SettingsFlag) {
					r.BooleanAttribute.SettingsFlag = append(r.BooleanAttribute.SettingsFlag, settingsFlag5)
				} else {
					r.BooleanAttribute.SettingsFlag[settingsFlagCount2].Enabled = settingsFlag5.Enabled
					r.BooleanAttribute.SettingsFlag[settingsFlagCount2].Name = settingsFlag5.Name
				}
			}
			r.BooleanAttribute.ShowInTable = types.BoolPointerValue(resp.BooleanAttribute.ShowInTable)
			r.ShowInTable = r.BooleanAttribute.ShowInTable
			r.BooleanAttribute.Sortable = types.BoolPointerValue(resp.BooleanAttribute.Sortable)
			r.Sortable = r.BooleanAttribute.Sortable
			if resp.BooleanAttribute.Type != nil {
				r.BooleanAttribute.Type = types.StringValue(string(*resp.BooleanAttribute.Type))
			} else {
				r.BooleanAttribute.Type = types.StringNull()
			}
			r.BooleanAttribute.ValueFormatter = types.StringPointerValue(resp.BooleanAttribute.ValueFormatter)
			r.ValueFormatter = r.BooleanAttribute.ValueFormatter
		}
		if resp.ComputedAttribute != nil {
			r.ComputedAttribute = &tfTypes.ComputedAttribute{}
			r.ComputedAttribute.Purpose = []types.String{}
			for _, v := range resp.ComputedAttribute.Purpose {
				r.ComputedAttribute.Purpose = append(r.ComputedAttribute.Purpose, types.StringValue(v))
			}
			if resp.ComputedAttribute.Constraints == nil {
				r.ComputedAttribute.Constraints = nil
			} else {
				r.ComputedAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.ComputedAttribute.DefaultValue == nil {
				r.ComputedAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult3, _ := json.Marshal(resp.ComputedAttribute.DefaultValue)
				r.ComputedAttribute.DefaultValue = types.StringValue(string(defaultValueResult3))
			}
			r.ComputedAttribute.Deprecated = types.BoolPointerValue(resp.ComputedAttribute.Deprecated)
			r.Deprecated = r.ComputedAttribute.Deprecated
			r.ComputedAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.ComputedAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.ComputedAttribute.EntityBuilderDisableEdit
			r.ComputedAttribute.FeatureFlag = types.StringPointerValue(resp.ComputedAttribute.FeatureFlag)
			r.FeatureFlag = r.ComputedAttribute.FeatureFlag
			r.ComputedAttribute.Group = types.StringPointerValue(resp.ComputedAttribute.Group)
			r.Group = r.ComputedAttribute.Group
			r.ComputedAttribute.Hidden = types.BoolPointerValue(resp.ComputedAttribute.Hidden)
			r.Hidden = r.ComputedAttribute.Hidden
			r.ComputedAttribute.HideLabel = types.BoolPointerValue(resp.ComputedAttribute.HideLabel)
			r.HideLabel = r.ComputedAttribute.HideLabel
			r.ComputedAttribute.Icon = types.StringPointerValue(resp.ComputedAttribute.Icon)
			r.Icon = r.ComputedAttribute.Icon
			r.ComputedAttribute.ID = types.StringPointerValue(resp.ComputedAttribute.ID)
			r.ID = r.ComputedAttribute.ID
			if resp.ComputedAttribute.InfoHelpers == nil {
				r.ComputedAttribute.InfoHelpers = nil
			} else {
				r.ComputedAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.ComputedAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.ComputedAttribute.InfoHelpers.HintCustomComponent)
				r.ComputedAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.ComputedAttribute.InfoHelpers.HintText)
				r.ComputedAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.ComputedAttribute.InfoHelpers.HintTextKey)
				r.ComputedAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.ComputedAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.ComputedAttribute.Label = types.StringValue(resp.ComputedAttribute.Label)
			r.Label = r.ComputedAttribute.Label
			r.ComputedAttribute.Layout = types.StringPointerValue(resp.ComputedAttribute.Layout)
			r.Layout = r.ComputedAttribute.Layout
			r.ComputedAttribute.Name = types.StringValue(resp.ComputedAttribute.Name)
			r.Name = r.ComputedAttribute.Name
			r.ComputedAttribute.Order = types.Int64PointerValue(resp.ComputedAttribute.Order)
			r.Order = r.ComputedAttribute.Order
			r.ComputedAttribute.Placeholder = types.StringPointerValue(resp.ComputedAttribute.Placeholder)
			r.Placeholder = r.ComputedAttribute.Placeholder
			r.ComputedAttribute.PreviewValueFormatter = types.StringPointerValue(resp.ComputedAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.ComputedAttribute.PreviewValueFormatter
			r.ComputedAttribute.Protected = types.BoolPointerValue(resp.ComputedAttribute.Protected)
			r.Protected = r.ComputedAttribute.Protected
			r.ComputedAttribute.Readonly = types.BoolPointerValue(resp.ComputedAttribute.Readonly)
			r.Readonly = r.ComputedAttribute.Readonly
			r.ComputedAttribute.RenderCondition = types.StringPointerValue(resp.ComputedAttribute.RenderCondition)
			r.RenderCondition = r.ComputedAttribute.RenderCondition
			r.ComputedAttribute.Required = types.BoolPointerValue(resp.ComputedAttribute.Required)
			r.Required = r.ComputedAttribute.Required
			if len(r.ComputedAttribute.SettingsFlag) > len(resp.ComputedAttribute.SettingsFlag) {
				r.ComputedAttribute.SettingsFlag = r.ComputedAttribute.SettingsFlag[:len(resp.ComputedAttribute.SettingsFlag)]
			}
			for settingsFlagCount3, settingsFlagItem3 := range resp.ComputedAttribute.SettingsFlag {
				var settingsFlag7 tfTypes.SettingFlag
				settingsFlag7.Enabled = types.BoolPointerValue(settingsFlagItem3.Enabled)
				settingsFlag7.Name = types.StringPointerValue(settingsFlagItem3.Name)
				if settingsFlagCount3+1 > len(r.ComputedAttribute.SettingsFlag) {
					r.ComputedAttribute.SettingsFlag = append(r.ComputedAttribute.SettingsFlag, settingsFlag7)
				} else {
					r.ComputedAttribute.SettingsFlag[settingsFlagCount3].Enabled = settingsFlag7.Enabled
					r.ComputedAttribute.SettingsFlag[settingsFlagCount3].Name = settingsFlag7.Name
				}
			}
			r.ComputedAttribute.ShowInTable = types.BoolPointerValue(resp.ComputedAttribute.ShowInTable)
			r.ShowInTable = r.ComputedAttribute.ShowInTable
			r.ComputedAttribute.Sortable = types.BoolPointerValue(resp.ComputedAttribute.Sortable)
			r.Sortable = r.ComputedAttribute.Sortable
			if resp.ComputedAttribute.Type != nil {
				r.ComputedAttribute.Type = types.StringValue(string(*resp.ComputedAttribute.Type))
			} else {
				r.ComputedAttribute.Type = types.StringNull()
			}
			r.ComputedAttribute.ValueFormatter = types.StringPointerValue(resp.ComputedAttribute.ValueFormatter)
			r.ValueFormatter = r.ComputedAttribute.ValueFormatter
		}
		if resp.ConsentAttribute != nil {
			r.ConsentAttribute = &tfTypes.ConsentAttribute{}
			r.ConsentAttribute.Purpose = []types.String{}
			for _, v := range resp.ConsentAttribute.Purpose {
				r.ConsentAttribute.Purpose = append(r.ConsentAttribute.Purpose, types.StringValue(v))
			}
			if resp.ConsentAttribute.Constraints == nil {
				r.ConsentAttribute.Constraints = nil
			} else {
				r.ConsentAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.ConsentAttribute.DefaultValue == nil {
				r.ConsentAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult4, _ := json.Marshal(resp.ConsentAttribute.DefaultValue)
				r.ConsentAttribute.DefaultValue = types.StringValue(string(defaultValueResult4))
			}
			r.ConsentAttribute.Deprecated = types.BoolPointerValue(resp.ConsentAttribute.Deprecated)
			r.Deprecated = r.ConsentAttribute.Deprecated
			r.ConsentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.ConsentAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.ConsentAttribute.EntityBuilderDisableEdit
			r.ConsentAttribute.FeatureFlag = types.StringPointerValue(resp.ConsentAttribute.FeatureFlag)
			r.FeatureFlag = r.ConsentAttribute.FeatureFlag
			r.ConsentAttribute.Group = types.StringPointerValue(resp.ConsentAttribute.Group)
			r.Group = r.ConsentAttribute.Group
			r.ConsentAttribute.Hidden = types.BoolPointerValue(resp.ConsentAttribute.Hidden)
			r.Hidden = r.ConsentAttribute.Hidden
			r.ConsentAttribute.HideLabel = types.BoolPointerValue(resp.ConsentAttribute.HideLabel)
			r.HideLabel = r.ConsentAttribute.HideLabel
			r.ConsentAttribute.Icon = types.StringPointerValue(resp.ConsentAttribute.Icon)
			r.Icon = r.ConsentAttribute.Icon
			r.ConsentAttribute.ID = types.StringPointerValue(resp.ConsentAttribute.ID)
			r.ID = r.ConsentAttribute.ID
			r.ConsentAttribute.Identifiers = []types.String{}
			for _, v := range resp.ConsentAttribute.Identifiers {
				r.ConsentAttribute.Identifiers = append(r.ConsentAttribute.Identifiers, types.StringValue(v))
			}
			if resp.ConsentAttribute.InfoHelpers == nil {
				r.ConsentAttribute.InfoHelpers = nil
			} else {
				r.ConsentAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.ConsentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.ConsentAttribute.InfoHelpers.HintCustomComponent)
				r.ConsentAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.ConsentAttribute.InfoHelpers.HintText)
				r.ConsentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.ConsentAttribute.InfoHelpers.HintTextKey)
				r.ConsentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.ConsentAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.ConsentAttribute.Label = types.StringValue(resp.ConsentAttribute.Label)
			r.Label = r.ConsentAttribute.Label
			r.ConsentAttribute.Layout = types.StringPointerValue(resp.ConsentAttribute.Layout)
			r.Layout = r.ConsentAttribute.Layout
			r.ConsentAttribute.Name = types.StringValue(resp.ConsentAttribute.Name)
			r.Name = r.ConsentAttribute.Name
			r.ConsentAttribute.Order = types.Int64PointerValue(resp.ConsentAttribute.Order)
			r.Order = r.ConsentAttribute.Order
			r.ConsentAttribute.Placeholder = types.StringPointerValue(resp.ConsentAttribute.Placeholder)
			r.Placeholder = r.ConsentAttribute.Placeholder
			r.ConsentAttribute.PreviewValueFormatter = types.StringPointerValue(resp.ConsentAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.ConsentAttribute.PreviewValueFormatter
			r.ConsentAttribute.Protected = types.BoolPointerValue(resp.ConsentAttribute.Protected)
			r.Protected = r.ConsentAttribute.Protected
			r.ConsentAttribute.Readonly = types.BoolPointerValue(resp.ConsentAttribute.Readonly)
			r.Readonly = r.ConsentAttribute.Readonly
			r.ConsentAttribute.RenderCondition = types.StringPointerValue(resp.ConsentAttribute.RenderCondition)
			r.RenderCondition = r.ConsentAttribute.RenderCondition
			r.ConsentAttribute.Required = types.BoolPointerValue(resp.ConsentAttribute.Required)
			r.Required = r.ConsentAttribute.Required
			if len(r.ConsentAttribute.SettingsFlag) > len(resp.ConsentAttribute.SettingsFlag) {
				r.ConsentAttribute.SettingsFlag = r.ConsentAttribute.SettingsFlag[:len(resp.ConsentAttribute.SettingsFlag)]
			}
			for settingsFlagCount4, settingsFlagItem4 := range resp.ConsentAttribute.SettingsFlag {
				var settingsFlag9 tfTypes.SettingFlag
				settingsFlag9.Enabled = types.BoolPointerValue(settingsFlagItem4.Enabled)
				settingsFlag9.Name = types.StringPointerValue(settingsFlagItem4.Name)
				if settingsFlagCount4+1 > len(r.ConsentAttribute.SettingsFlag) {
					r.ConsentAttribute.SettingsFlag = append(r.ConsentAttribute.SettingsFlag, settingsFlag9)
				} else {
					r.ConsentAttribute.SettingsFlag[settingsFlagCount4].Enabled = settingsFlag9.Enabled
					r.ConsentAttribute.SettingsFlag[settingsFlagCount4].Name = settingsFlag9.Name
				}
			}
			r.ConsentAttribute.ShowInTable = types.BoolPointerValue(resp.ConsentAttribute.ShowInTable)
			r.ShowInTable = r.ConsentAttribute.ShowInTable
			r.ConsentAttribute.Sortable = types.BoolPointerValue(resp.ConsentAttribute.Sortable)
			r.Sortable = r.ConsentAttribute.Sortable
			r.ConsentAttribute.Topic = types.StringValue(resp.ConsentAttribute.Topic)
			r.ConsentAttribute.Type = types.StringValue(string(resp.ConsentAttribute.Type))
			r.ConsentAttribute.ValueFormatter = types.StringPointerValue(resp.ConsentAttribute.ValueFormatter)
			r.ValueFormatter = r.ConsentAttribute.ValueFormatter
		}
		if resp.CountryAttribute != nil {
			r.CountryAttribute = &tfTypes.CountryAttribute{}
			r.CountryAttribute.Purpose = []types.String{}
			for _, v := range resp.CountryAttribute.Purpose {
				r.CountryAttribute.Purpose = append(r.CountryAttribute.Purpose, types.StringValue(v))
			}
			if resp.CountryAttribute.Constraints == nil {
				r.CountryAttribute.Constraints = nil
			} else {
				r.CountryAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.CountryAttribute.DefaultValue == nil {
				r.CountryAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult5, _ := json.Marshal(resp.CountryAttribute.DefaultValue)
				r.CountryAttribute.DefaultValue = types.StringValue(string(defaultValueResult5))
			}
			r.CountryAttribute.Deprecated = types.BoolPointerValue(resp.CountryAttribute.Deprecated)
			r.Deprecated = r.CountryAttribute.Deprecated
			r.CountryAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.CountryAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.CountryAttribute.EntityBuilderDisableEdit
			r.CountryAttribute.FeatureFlag = types.StringPointerValue(resp.CountryAttribute.FeatureFlag)
			r.FeatureFlag = r.CountryAttribute.FeatureFlag
			r.CountryAttribute.Group = types.StringPointerValue(resp.CountryAttribute.Group)
			r.Group = r.CountryAttribute.Group
			r.CountryAttribute.Hidden = types.BoolPointerValue(resp.CountryAttribute.Hidden)
			r.Hidden = r.CountryAttribute.Hidden
			r.CountryAttribute.HideLabel = types.BoolPointerValue(resp.CountryAttribute.HideLabel)
			r.HideLabel = r.CountryAttribute.HideLabel
			r.CountryAttribute.Icon = types.StringPointerValue(resp.CountryAttribute.Icon)
			r.Icon = r.CountryAttribute.Icon
			r.CountryAttribute.ID = types.StringPointerValue(resp.CountryAttribute.ID)
			r.ID = r.CountryAttribute.ID
			if resp.CountryAttribute.InfoHelpers == nil {
				r.CountryAttribute.InfoHelpers = nil
			} else {
				r.CountryAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.CountryAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.CountryAttribute.InfoHelpers.HintCustomComponent)
				r.CountryAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.CountryAttribute.InfoHelpers.HintText)
				r.CountryAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.CountryAttribute.InfoHelpers.HintTextKey)
				r.CountryAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.CountryAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.CountryAttribute.Label = types.StringValue(resp.CountryAttribute.Label)
			r.Label = r.CountryAttribute.Label
			r.CountryAttribute.Layout = types.StringPointerValue(resp.CountryAttribute.Layout)
			r.Layout = r.CountryAttribute.Layout
			r.CountryAttribute.Name = types.StringValue(resp.CountryAttribute.Name)
			r.Name = r.CountryAttribute.Name
			r.CountryAttribute.Order = types.Int64PointerValue(resp.CountryAttribute.Order)
			r.Order = r.CountryAttribute.Order
			r.CountryAttribute.Placeholder = types.StringPointerValue(resp.CountryAttribute.Placeholder)
			r.Placeholder = r.CountryAttribute.Placeholder
			r.CountryAttribute.PreviewValueFormatter = types.StringPointerValue(resp.CountryAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.CountryAttribute.PreviewValueFormatter
			r.CountryAttribute.Protected = types.BoolPointerValue(resp.CountryAttribute.Protected)
			r.Protected = r.CountryAttribute.Protected
			r.CountryAttribute.Readonly = types.BoolPointerValue(resp.CountryAttribute.Readonly)
			r.Readonly = r.CountryAttribute.Readonly
			r.CountryAttribute.RenderCondition = types.StringPointerValue(resp.CountryAttribute.RenderCondition)
			r.RenderCondition = r.CountryAttribute.RenderCondition
			r.CountryAttribute.Required = types.BoolPointerValue(resp.CountryAttribute.Required)
			r.Required = r.CountryAttribute.Required
			if len(r.CountryAttribute.SettingsFlag) > len(resp.CountryAttribute.SettingsFlag) {
				r.CountryAttribute.SettingsFlag = r.CountryAttribute.SettingsFlag[:len(resp.CountryAttribute.SettingsFlag)]
			}
			for settingsFlagCount5, settingsFlagItem5 := range resp.CountryAttribute.SettingsFlag {
				var settingsFlag11 tfTypes.SettingFlag
				settingsFlag11.Enabled = types.BoolPointerValue(settingsFlagItem5.Enabled)
				settingsFlag11.Name = types.StringPointerValue(settingsFlagItem5.Name)
				if settingsFlagCount5+1 > len(r.CountryAttribute.SettingsFlag) {
					r.CountryAttribute.SettingsFlag = append(r.CountryAttribute.SettingsFlag, settingsFlag11)
				} else {
					r.CountryAttribute.SettingsFlag[settingsFlagCount5].Enabled = settingsFlag11.Enabled
					r.CountryAttribute.SettingsFlag[settingsFlagCount5].Name = settingsFlag11.Name
				}
			}
			r.CountryAttribute.ShowInTable = types.BoolPointerValue(resp.CountryAttribute.ShowInTable)
			r.ShowInTable = r.CountryAttribute.ShowInTable
			r.CountryAttribute.Sortable = types.BoolPointerValue(resp.CountryAttribute.Sortable)
			r.Sortable = r.CountryAttribute.Sortable
			if resp.CountryAttribute.Type != nil {
				r.CountryAttribute.Type = types.StringValue(string(*resp.CountryAttribute.Type))
			} else {
				r.CountryAttribute.Type = types.StringNull()
			}
			r.CountryAttribute.ValueFormatter = types.StringPointerValue(resp.CountryAttribute.ValueFormatter)
			r.ValueFormatter = r.CountryAttribute.ValueFormatter
		}
		if resp.CurrencyAttribute != nil {
			r.CurrencyAttribute = &tfTypes.CurrencyAttribute{}
			r.CurrencyAttribute.Purpose = []types.String{}
			for _, v := range resp.CurrencyAttribute.Purpose {
				r.CurrencyAttribute.Purpose = append(r.CurrencyAttribute.Purpose, types.StringValue(v))
			}
			if resp.CurrencyAttribute.Constraints == nil {
				r.CurrencyAttribute.Constraints = nil
			} else {
				r.CurrencyAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if len(r.CurrencyAttribute.Currency) > len(resp.CurrencyAttribute.Currency) {
				r.CurrencyAttribute.Currency = r.CurrencyAttribute.Currency[:len(resp.CurrencyAttribute.Currency)]
			}
			for currencyCount, currencyItem := range resp.CurrencyAttribute.Currency {
				var currency1 tfTypes.Currency
				if currencyItem.Currency1 != nil {
					currency1.One = &tfTypes.Currency1{}
					currency1.One.Code = types.StringValue(currencyItem.Currency1.Code)
					currency1.One.Description = types.StringValue(currencyItem.Currency1.Description)
					currency1.One.Flag = types.StringPointerValue(currencyItem.Currency1.Flag)
					currency1.One.Symbol = types.StringValue(currencyItem.Currency1.Symbol)
				}
				if currencyCount+1 > len(r.CurrencyAttribute.Currency) {
					r.CurrencyAttribute.Currency = append(r.CurrencyAttribute.Currency, currency1)
				} else {
					r.CurrencyAttribute.Currency[currencyCount].One = currency1.One
				}
			}
			r.CurrencyAttribute.CurrencySelectorOnly = types.BoolPointerValue(resp.CurrencyAttribute.CurrencySelectorOnly)
			if resp.CurrencyAttribute.DefaultValue == nil {
				r.CurrencyAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult6, _ := json.Marshal(resp.CurrencyAttribute.DefaultValue)
				r.CurrencyAttribute.DefaultValue = types.StringValue(string(defaultValueResult6))
			}
			r.CurrencyAttribute.Deprecated = types.BoolPointerValue(resp.CurrencyAttribute.Deprecated)
			r.Deprecated = r.CurrencyAttribute.Deprecated
			r.CurrencyAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.CurrencyAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.CurrencyAttribute.EntityBuilderDisableEdit
			r.CurrencyAttribute.FeatureFlag = types.StringPointerValue(resp.CurrencyAttribute.FeatureFlag)
			r.FeatureFlag = r.CurrencyAttribute.FeatureFlag
			r.CurrencyAttribute.Group = types.StringPointerValue(resp.CurrencyAttribute.Group)
			r.Group = r.CurrencyAttribute.Group
			r.CurrencyAttribute.Hidden = types.BoolPointerValue(resp.CurrencyAttribute.Hidden)
			r.Hidden = r.CurrencyAttribute.Hidden
			r.CurrencyAttribute.HideLabel = types.BoolPointerValue(resp.CurrencyAttribute.HideLabel)
			r.HideLabel = r.CurrencyAttribute.HideLabel
			r.CurrencyAttribute.Icon = types.StringPointerValue(resp.CurrencyAttribute.Icon)
			r.Icon = r.CurrencyAttribute.Icon
			r.CurrencyAttribute.ID = types.StringPointerValue(resp.CurrencyAttribute.ID)
			r.ID = r.CurrencyAttribute.ID
			if resp.CurrencyAttribute.InfoHelpers == nil {
				r.CurrencyAttribute.InfoHelpers = nil
			} else {
				r.CurrencyAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.CurrencyAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.CurrencyAttribute.InfoHelpers.HintCustomComponent)
				r.CurrencyAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.CurrencyAttribute.InfoHelpers.HintText)
				r.CurrencyAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.CurrencyAttribute.InfoHelpers.HintTextKey)
				r.CurrencyAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.CurrencyAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.CurrencyAttribute.Label = types.StringValue(resp.CurrencyAttribute.Label)
			r.Label = r.CurrencyAttribute.Label
			r.CurrencyAttribute.Layout = types.StringPointerValue(resp.CurrencyAttribute.Layout)
			r.Layout = r.CurrencyAttribute.Layout
			r.CurrencyAttribute.Name = types.StringValue(resp.CurrencyAttribute.Name)
			r.Name = r.CurrencyAttribute.Name
			r.CurrencyAttribute.Order = types.Int64PointerValue(resp.CurrencyAttribute.Order)
			r.Order = r.CurrencyAttribute.Order
			r.CurrencyAttribute.Placeholder = types.StringPointerValue(resp.CurrencyAttribute.Placeholder)
			r.Placeholder = r.CurrencyAttribute.Placeholder
			r.CurrencyAttribute.PreviewValueFormatter = types.StringPointerValue(resp.CurrencyAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.CurrencyAttribute.PreviewValueFormatter
			r.CurrencyAttribute.Protected = types.BoolPointerValue(resp.CurrencyAttribute.Protected)
			r.Protected = r.CurrencyAttribute.Protected
			r.CurrencyAttribute.Readonly = types.BoolPointerValue(resp.CurrencyAttribute.Readonly)
			r.Readonly = r.CurrencyAttribute.Readonly
			r.CurrencyAttribute.RenderCondition = types.StringPointerValue(resp.CurrencyAttribute.RenderCondition)
			r.RenderCondition = r.CurrencyAttribute.RenderCondition
			r.CurrencyAttribute.Required = types.BoolPointerValue(resp.CurrencyAttribute.Required)
			r.Required = r.CurrencyAttribute.Required
			if len(r.CurrencyAttribute.SettingsFlag) > len(resp.CurrencyAttribute.SettingsFlag) {
				r.CurrencyAttribute.SettingsFlag = r.CurrencyAttribute.SettingsFlag[:len(resp.CurrencyAttribute.SettingsFlag)]
			}
			for settingsFlagCount6, settingsFlagItem6 := range resp.CurrencyAttribute.SettingsFlag {
				var settingsFlag13 tfTypes.SettingFlag
				settingsFlag13.Enabled = types.BoolPointerValue(settingsFlagItem6.Enabled)
				settingsFlag13.Name = types.StringPointerValue(settingsFlagItem6.Name)
				if settingsFlagCount6+1 > len(r.CurrencyAttribute.SettingsFlag) {
					r.CurrencyAttribute.SettingsFlag = append(r.CurrencyAttribute.SettingsFlag, settingsFlag13)
				} else {
					r.CurrencyAttribute.SettingsFlag[settingsFlagCount6].Enabled = settingsFlag13.Enabled
					r.CurrencyAttribute.SettingsFlag[settingsFlagCount6].Name = settingsFlag13.Name
				}
			}
			r.CurrencyAttribute.ShowInTable = types.BoolPointerValue(resp.CurrencyAttribute.ShowInTable)
			r.ShowInTable = r.CurrencyAttribute.ShowInTable
			r.CurrencyAttribute.Sortable = types.BoolPointerValue(resp.CurrencyAttribute.Sortable)
			r.Sortable = r.CurrencyAttribute.Sortable
			r.CurrencyAttribute.Type = types.StringValue(string(resp.CurrencyAttribute.Type))
			r.CurrencyAttribute.ValueFormatter = types.StringPointerValue(resp.CurrencyAttribute.ValueFormatter)
			r.ValueFormatter = r.CurrencyAttribute.ValueFormatter
		}
		if resp.DateAttribute != nil {
			r.DateAttribute = &tfTypes.DateAttribute{}
			r.DateAttribute.Purpose = []types.String{}
			for _, v := range resp.DateAttribute.Purpose {
				r.DateAttribute.Purpose = append(r.DateAttribute.Purpose, types.StringValue(v))
			}
			if resp.DateAttribute.Constraints == nil {
				r.DateAttribute.Constraints = nil
			} else {
				r.DateAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.DateAttribute.DefaultValue == nil {
				r.DateAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult7, _ := json.Marshal(resp.DateAttribute.DefaultValue)
				r.DateAttribute.DefaultValue = types.StringValue(string(defaultValueResult7))
			}
			r.DateAttribute.Deprecated = types.BoolPointerValue(resp.DateAttribute.Deprecated)
			r.Deprecated = r.DateAttribute.Deprecated
			r.DateAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.DateAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.DateAttribute.EntityBuilderDisableEdit
			r.DateAttribute.FeatureFlag = types.StringPointerValue(resp.DateAttribute.FeatureFlag)
			r.FeatureFlag = r.DateAttribute.FeatureFlag
			r.DateAttribute.Group = types.StringPointerValue(resp.DateAttribute.Group)
			r.Group = r.DateAttribute.Group
			r.DateAttribute.Hidden = types.BoolPointerValue(resp.DateAttribute.Hidden)
			r.Hidden = r.DateAttribute.Hidden
			r.DateAttribute.HideLabel = types.BoolPointerValue(resp.DateAttribute.HideLabel)
			r.HideLabel = r.DateAttribute.HideLabel
			r.DateAttribute.Icon = types.StringPointerValue(resp.DateAttribute.Icon)
			r.Icon = r.DateAttribute.Icon
			r.DateAttribute.ID = types.StringPointerValue(resp.DateAttribute.ID)
			r.ID = r.DateAttribute.ID
			if resp.DateAttribute.InfoHelpers == nil {
				r.DateAttribute.InfoHelpers = nil
			} else {
				r.DateAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.DateAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.DateAttribute.InfoHelpers.HintCustomComponent)
				r.DateAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.DateAttribute.InfoHelpers.HintText)
				r.DateAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.DateAttribute.InfoHelpers.HintTextKey)
				r.DateAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.DateAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.DateAttribute.Label = types.StringValue(resp.DateAttribute.Label)
			r.Label = r.DateAttribute.Label
			r.DateAttribute.Layout = types.StringPointerValue(resp.DateAttribute.Layout)
			r.Layout = r.DateAttribute.Layout
			r.DateAttribute.Name = types.StringValue(resp.DateAttribute.Name)
			r.Name = r.DateAttribute.Name
			r.DateAttribute.Order = types.Int64PointerValue(resp.DateAttribute.Order)
			r.Order = r.DateAttribute.Order
			r.DateAttribute.Placeholder = types.StringPointerValue(resp.DateAttribute.Placeholder)
			r.Placeholder = r.DateAttribute.Placeholder
			r.DateAttribute.PreviewValueFormatter = types.StringPointerValue(resp.DateAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.DateAttribute.PreviewValueFormatter
			r.DateAttribute.Protected = types.BoolPointerValue(resp.DateAttribute.Protected)
			r.Protected = r.DateAttribute.Protected
			r.DateAttribute.Readonly = types.BoolPointerValue(resp.DateAttribute.Readonly)
			r.Readonly = r.DateAttribute.Readonly
			r.DateAttribute.RenderCondition = types.StringPointerValue(resp.DateAttribute.RenderCondition)
			r.RenderCondition = r.DateAttribute.RenderCondition
			r.DateAttribute.Required = types.BoolPointerValue(resp.DateAttribute.Required)
			r.Required = r.DateAttribute.Required
			if len(r.DateAttribute.SettingsFlag) > len(resp.DateAttribute.SettingsFlag) {
				r.DateAttribute.SettingsFlag = r.DateAttribute.SettingsFlag[:len(resp.DateAttribute.SettingsFlag)]
			}
			for settingsFlagCount7, settingsFlagItem7 := range resp.DateAttribute.SettingsFlag {
				var settingsFlag15 tfTypes.SettingFlag
				settingsFlag15.Enabled = types.BoolPointerValue(settingsFlagItem7.Enabled)
				settingsFlag15.Name = types.StringPointerValue(settingsFlagItem7.Name)
				if settingsFlagCount7+1 > len(r.DateAttribute.SettingsFlag) {
					r.DateAttribute.SettingsFlag = append(r.DateAttribute.SettingsFlag, settingsFlag15)
				} else {
					r.DateAttribute.SettingsFlag[settingsFlagCount7].Enabled = settingsFlag15.Enabled
					r.DateAttribute.SettingsFlag[settingsFlagCount7].Name = settingsFlag15.Name
				}
			}
			r.DateAttribute.ShowInTable = types.BoolPointerValue(resp.DateAttribute.ShowInTable)
			r.ShowInTable = r.DateAttribute.ShowInTable
			r.DateAttribute.Sortable = types.BoolPointerValue(resp.DateAttribute.Sortable)
			r.Sortable = r.DateAttribute.Sortable
			if resp.DateAttribute.Type != nil {
				r.DateAttribute.Type = types.StringValue(string(*resp.DateAttribute.Type))
			} else {
				r.DateAttribute.Type = types.StringNull()
			}
			r.DateAttribute.ValueFormatter = types.StringPointerValue(resp.DateAttribute.ValueFormatter)
			r.ValueFormatter = r.DateAttribute.ValueFormatter
		}
		if resp.FileAttribute != nil {
			r.FileAttribute = &tfTypes.FileAttribute{}
			r.FileAttribute.Purpose = []types.String{}
			for _, v := range resp.FileAttribute.Purpose {
				r.FileAttribute.Purpose = append(r.FileAttribute.Purpose, types.StringValue(v))
			}
			r.FileAttribute.AllowedExtensions = []types.String{}
			for _, v := range resp.FileAttribute.AllowedExtensions {
				r.FileAttribute.AllowedExtensions = append(r.FileAttribute.AllowedExtensions, types.StringValue(v))
			}
			if resp.FileAttribute.Constraints == nil {
				r.FileAttribute.Constraints = nil
			} else {
				r.FileAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.FileAttribute.DefaultAccessControl != nil {
				r.FileAttribute.DefaultAccessControl = types.StringValue(string(*resp.FileAttribute.DefaultAccessControl))
			} else {
				r.FileAttribute.DefaultAccessControl = types.StringNull()
			}
			if resp.FileAttribute.DefaultValue == nil {
				r.FileAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult8, _ := json.Marshal(resp.FileAttribute.DefaultValue)
				r.FileAttribute.DefaultValue = types.StringValue(string(defaultValueResult8))
			}
			r.FileAttribute.Deprecated = types.BoolPointerValue(resp.FileAttribute.Deprecated)
			r.Deprecated = r.FileAttribute.Deprecated
			r.FileAttribute.DisplayImagesLandscaped = types.BoolPointerValue(resp.FileAttribute.DisplayImagesLandscaped)
			r.FileAttribute.EnableDescription = types.BoolPointerValue(resp.FileAttribute.EnableDescription)
			r.FileAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.FileAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.FileAttribute.EntityBuilderDisableEdit
			r.FileAttribute.FeatureFlag = types.StringPointerValue(resp.FileAttribute.FeatureFlag)
			r.FeatureFlag = r.FileAttribute.FeatureFlag
			r.FileAttribute.Group = types.StringPointerValue(resp.FileAttribute.Group)
			r.Group = r.FileAttribute.Group
			r.FileAttribute.Hidden = types.BoolPointerValue(resp.FileAttribute.Hidden)
			r.Hidden = r.FileAttribute.Hidden
			r.FileAttribute.HideLabel = types.BoolPointerValue(resp.FileAttribute.HideLabel)
			r.HideLabel = r.FileAttribute.HideLabel
			r.FileAttribute.Icon = types.StringPointerValue(resp.FileAttribute.Icon)
			r.Icon = r.FileAttribute.Icon
			r.FileAttribute.ID = types.StringPointerValue(resp.FileAttribute.ID)
			r.ID = r.FileAttribute.ID
			if resp.FileAttribute.InfoHelpers == nil {
				r.FileAttribute.InfoHelpers = nil
			} else {
				r.FileAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.FileAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.FileAttribute.InfoHelpers.HintCustomComponent)
				r.FileAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.FileAttribute.InfoHelpers.HintText)
				r.FileAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.FileAttribute.InfoHelpers.HintTextKey)
				r.FileAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.FileAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.FileAttribute.Label = types.StringValue(resp.FileAttribute.Label)
			r.Label = r.FileAttribute.Label
			r.FileAttribute.Layout = types.StringPointerValue(resp.FileAttribute.Layout)
			r.Layout = r.FileAttribute.Layout
			r.FileAttribute.Multiple = types.BoolPointerValue(resp.FileAttribute.Multiple)
			r.FileAttribute.Name = types.StringValue(resp.FileAttribute.Name)
			r.Name = r.FileAttribute.Name
			r.FileAttribute.Order = types.Int64PointerValue(resp.FileAttribute.Order)
			r.Order = r.FileAttribute.Order
			r.FileAttribute.Placeholder = types.StringPointerValue(resp.FileAttribute.Placeholder)
			r.Placeholder = r.FileAttribute.Placeholder
			r.FileAttribute.PreviewValueFormatter = types.StringPointerValue(resp.FileAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.FileAttribute.PreviewValueFormatter
			r.FileAttribute.Protected = types.BoolPointerValue(resp.FileAttribute.Protected)
			r.Protected = r.FileAttribute.Protected
			r.FileAttribute.Readonly = types.BoolPointerValue(resp.FileAttribute.Readonly)
			r.Readonly = r.FileAttribute.Readonly
			r.FileAttribute.RenderCondition = types.StringPointerValue(resp.FileAttribute.RenderCondition)
			r.RenderCondition = r.FileAttribute.RenderCondition
			r.FileAttribute.Required = types.BoolPointerValue(resp.FileAttribute.Required)
			r.Required = r.FileAttribute.Required
			if len(r.FileAttribute.SettingsFlag) > len(resp.FileAttribute.SettingsFlag) {
				r.FileAttribute.SettingsFlag = r.FileAttribute.SettingsFlag[:len(resp.FileAttribute.SettingsFlag)]
			}
			for settingsFlagCount8, settingsFlagItem8 := range resp.FileAttribute.SettingsFlag {
				var settingsFlag17 tfTypes.SettingFlag
				settingsFlag17.Enabled = types.BoolPointerValue(settingsFlagItem8.Enabled)
				settingsFlag17.Name = types.StringPointerValue(settingsFlagItem8.Name)
				if settingsFlagCount8+1 > len(r.FileAttribute.SettingsFlag) {
					r.FileAttribute.SettingsFlag = append(r.FileAttribute.SettingsFlag, settingsFlag17)
				} else {
					r.FileAttribute.SettingsFlag[settingsFlagCount8].Enabled = settingsFlag17.Enabled
					r.FileAttribute.SettingsFlag[settingsFlagCount8].Name = settingsFlag17.Name
				}
			}
			r.FileAttribute.ShowInTable = types.BoolPointerValue(resp.FileAttribute.ShowInTable)
			r.ShowInTable = r.FileAttribute.ShowInTable
			r.FileAttribute.Sortable = types.BoolPointerValue(resp.FileAttribute.Sortable)
			r.Sortable = r.FileAttribute.Sortable
			r.FileAttribute.Type = types.StringValue(string(resp.FileAttribute.Type))
			r.FileAttribute.ValueFormatter = types.StringPointerValue(resp.FileAttribute.ValueFormatter)
			r.ValueFormatter = r.FileAttribute.ValueFormatter
		}
		if resp.InternalAttribute != nil {
			r.InternalAttribute = &tfTypes.InternalAttribute{}
			r.InternalAttribute.Purpose = []types.String{}
			for _, v := range resp.InternalAttribute.Purpose {
				r.InternalAttribute.Purpose = append(r.InternalAttribute.Purpose, types.StringValue(v))
			}
			if resp.InternalAttribute.Constraints == nil {
				r.InternalAttribute.Constraints = nil
			} else {
				r.InternalAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.InternalAttribute.DefaultValue == nil {
				r.InternalAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult9, _ := json.Marshal(resp.InternalAttribute.DefaultValue)
				r.InternalAttribute.DefaultValue = types.StringValue(string(defaultValueResult9))
			}
			r.InternalAttribute.Deprecated = types.BoolPointerValue(resp.InternalAttribute.Deprecated)
			r.Deprecated = r.InternalAttribute.Deprecated
			r.InternalAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.InternalAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.InternalAttribute.EntityBuilderDisableEdit
			r.InternalAttribute.FeatureFlag = types.StringPointerValue(resp.InternalAttribute.FeatureFlag)
			r.FeatureFlag = r.InternalAttribute.FeatureFlag
			r.InternalAttribute.Group = types.StringPointerValue(resp.InternalAttribute.Group)
			r.Group = r.InternalAttribute.Group
			r.InternalAttribute.Hidden = types.BoolPointerValue(resp.InternalAttribute.Hidden)
			r.Hidden = r.InternalAttribute.Hidden
			r.InternalAttribute.HideLabel = types.BoolPointerValue(resp.InternalAttribute.HideLabel)
			r.HideLabel = r.InternalAttribute.HideLabel
			r.InternalAttribute.Icon = types.StringPointerValue(resp.InternalAttribute.Icon)
			r.Icon = r.InternalAttribute.Icon
			r.InternalAttribute.ID = types.StringPointerValue(resp.InternalAttribute.ID)
			r.ID = r.InternalAttribute.ID
			if resp.InternalAttribute.InfoHelpers == nil {
				r.InternalAttribute.InfoHelpers = nil
			} else {
				r.InternalAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.InternalAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.InternalAttribute.InfoHelpers.HintCustomComponent)
				r.InternalAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.InternalAttribute.InfoHelpers.HintText)
				r.InternalAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.InternalAttribute.InfoHelpers.HintTextKey)
				r.InternalAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.InternalAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.InternalAttribute.Label = types.StringValue(resp.InternalAttribute.Label)
			r.Label = r.InternalAttribute.Label
			r.InternalAttribute.Layout = types.StringPointerValue(resp.InternalAttribute.Layout)
			r.Layout = r.InternalAttribute.Layout
			r.InternalAttribute.Name = types.StringValue(resp.InternalAttribute.Name)
			r.Name = r.InternalAttribute.Name
			r.InternalAttribute.Order = types.Int64PointerValue(resp.InternalAttribute.Order)
			r.Order = r.InternalAttribute.Order
			r.InternalAttribute.Placeholder = types.StringPointerValue(resp.InternalAttribute.Placeholder)
			r.Placeholder = r.InternalAttribute.Placeholder
			r.InternalAttribute.PreviewValueFormatter = types.StringPointerValue(resp.InternalAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.InternalAttribute.PreviewValueFormatter
			r.InternalAttribute.Protected = types.BoolPointerValue(resp.InternalAttribute.Protected)
			r.Protected = r.InternalAttribute.Protected
			r.InternalAttribute.Readonly = types.BoolPointerValue(resp.InternalAttribute.Readonly)
			r.Readonly = r.InternalAttribute.Readonly
			r.InternalAttribute.RenderCondition = types.StringPointerValue(resp.InternalAttribute.RenderCondition)
			r.RenderCondition = r.InternalAttribute.RenderCondition
			r.InternalAttribute.Required = types.BoolPointerValue(resp.InternalAttribute.Required)
			r.Required = r.InternalAttribute.Required
			if len(r.InternalAttribute.SettingsFlag) > len(resp.InternalAttribute.SettingsFlag) {
				r.InternalAttribute.SettingsFlag = r.InternalAttribute.SettingsFlag[:len(resp.InternalAttribute.SettingsFlag)]
			}
			for settingsFlagCount9, settingsFlagItem9 := range resp.InternalAttribute.SettingsFlag {
				var settingsFlag19 tfTypes.SettingFlag
				settingsFlag19.Enabled = types.BoolPointerValue(settingsFlagItem9.Enabled)
				settingsFlag19.Name = types.StringPointerValue(settingsFlagItem9.Name)
				if settingsFlagCount9+1 > len(r.InternalAttribute.SettingsFlag) {
					r.InternalAttribute.SettingsFlag = append(r.InternalAttribute.SettingsFlag, settingsFlag19)
				} else {
					r.InternalAttribute.SettingsFlag[settingsFlagCount9].Enabled = settingsFlag19.Enabled
					r.InternalAttribute.SettingsFlag[settingsFlagCount9].Name = settingsFlag19.Name
				}
			}
			r.InternalAttribute.ShowInTable = types.BoolPointerValue(resp.InternalAttribute.ShowInTable)
			r.ShowInTable = r.InternalAttribute.ShowInTable
			r.InternalAttribute.Sortable = types.BoolPointerValue(resp.InternalAttribute.Sortable)
			r.Sortable = r.InternalAttribute.Sortable
			if resp.InternalAttribute.Type != nil {
				r.InternalAttribute.Type = types.StringValue(string(*resp.InternalAttribute.Type))
			} else {
				r.InternalAttribute.Type = types.StringNull()
			}
			r.InternalAttribute.ValueFormatter = types.StringPointerValue(resp.InternalAttribute.ValueFormatter)
			r.ValueFormatter = r.InternalAttribute.ValueFormatter
		}
		if resp.InternalUserAttribute != nil {
			r.InternalUserAttribute = &tfTypes.InternalUserAttribute{}
			r.InternalUserAttribute.Purpose = []types.String{}
			for _, v := range resp.InternalUserAttribute.Purpose {
				r.InternalUserAttribute.Purpose = append(r.InternalUserAttribute.Purpose, types.StringValue(v))
			}
			if resp.InternalUserAttribute.Constraints == nil {
				r.InternalUserAttribute.Constraints = nil
			} else {
				r.InternalUserAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.InternalUserAttribute.DefaultValue == nil {
				r.InternalUserAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult10, _ := json.Marshal(resp.InternalUserAttribute.DefaultValue)
				r.InternalUserAttribute.DefaultValue = types.StringValue(string(defaultValueResult10))
			}
			r.InternalUserAttribute.Deprecated = types.BoolPointerValue(resp.InternalUserAttribute.Deprecated)
			r.Deprecated = r.InternalUserAttribute.Deprecated
			r.InternalUserAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.InternalUserAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.InternalUserAttribute.EntityBuilderDisableEdit
			r.InternalUserAttribute.FeatureFlag = types.StringPointerValue(resp.InternalUserAttribute.FeatureFlag)
			r.FeatureFlag = r.InternalUserAttribute.FeatureFlag
			r.InternalUserAttribute.Group = types.StringPointerValue(resp.InternalUserAttribute.Group)
			r.Group = r.InternalUserAttribute.Group
			r.InternalUserAttribute.Hidden = types.BoolPointerValue(resp.InternalUserAttribute.Hidden)
			r.Hidden = r.InternalUserAttribute.Hidden
			r.InternalUserAttribute.HideLabel = types.BoolPointerValue(resp.InternalUserAttribute.HideLabel)
			r.HideLabel = r.InternalUserAttribute.HideLabel
			r.InternalUserAttribute.Icon = types.StringPointerValue(resp.InternalUserAttribute.Icon)
			r.Icon = r.InternalUserAttribute.Icon
			r.InternalUserAttribute.ID = types.StringPointerValue(resp.InternalUserAttribute.ID)
			r.ID = r.InternalUserAttribute.ID
			if resp.InternalUserAttribute.InfoHelpers == nil {
				r.InternalUserAttribute.InfoHelpers = nil
			} else {
				r.InternalUserAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.InternalUserAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.InternalUserAttribute.InfoHelpers.HintCustomComponent)
				r.InternalUserAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.InternalUserAttribute.InfoHelpers.HintText)
				r.InternalUserAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.InternalUserAttribute.InfoHelpers.HintTextKey)
				r.InternalUserAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.InternalUserAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.InternalUserAttribute.Label = types.StringValue(resp.InternalUserAttribute.Label)
			r.Label = r.InternalUserAttribute.Label
			r.InternalUserAttribute.Layout = types.StringPointerValue(resp.InternalUserAttribute.Layout)
			r.Layout = r.InternalUserAttribute.Layout
			r.InternalUserAttribute.Name = types.StringValue(resp.InternalUserAttribute.Name)
			r.Name = r.InternalUserAttribute.Name
			r.InternalUserAttribute.Order = types.Int64PointerValue(resp.InternalUserAttribute.Order)
			r.Order = r.InternalUserAttribute.Order
			r.InternalUserAttribute.Placeholder = types.StringPointerValue(resp.InternalUserAttribute.Placeholder)
			r.Placeholder = r.InternalUserAttribute.Placeholder
			r.InternalUserAttribute.PreviewValueFormatter = types.StringPointerValue(resp.InternalUserAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.InternalUserAttribute.PreviewValueFormatter
			r.InternalUserAttribute.Protected = types.BoolPointerValue(resp.InternalUserAttribute.Protected)
			r.Protected = r.InternalUserAttribute.Protected
			r.InternalUserAttribute.Readonly = types.BoolPointerValue(resp.InternalUserAttribute.Readonly)
			r.Readonly = r.InternalUserAttribute.Readonly
			r.InternalUserAttribute.RenderCondition = types.StringPointerValue(resp.InternalUserAttribute.RenderCondition)
			r.RenderCondition = r.InternalUserAttribute.RenderCondition
			r.InternalUserAttribute.Required = types.BoolPointerValue(resp.InternalUserAttribute.Required)
			r.Required = r.InternalUserAttribute.Required
			if len(r.InternalUserAttribute.SettingsFlag) > len(resp.InternalUserAttribute.SettingsFlag) {
				r.InternalUserAttribute.SettingsFlag = r.InternalUserAttribute.SettingsFlag[:len(resp.InternalUserAttribute.SettingsFlag)]
			}
			for settingsFlagCount10, settingsFlagItem10 := range resp.InternalUserAttribute.SettingsFlag {
				var settingsFlag21 tfTypes.SettingFlag
				settingsFlag21.Enabled = types.BoolPointerValue(settingsFlagItem10.Enabled)
				settingsFlag21.Name = types.StringPointerValue(settingsFlagItem10.Name)
				if settingsFlagCount10+1 > len(r.InternalUserAttribute.SettingsFlag) {
					r.InternalUserAttribute.SettingsFlag = append(r.InternalUserAttribute.SettingsFlag, settingsFlag21)
				} else {
					r.InternalUserAttribute.SettingsFlag[settingsFlagCount10].Enabled = settingsFlag21.Enabled
					r.InternalUserAttribute.SettingsFlag[settingsFlagCount10].Name = settingsFlag21.Name
				}
			}
			r.InternalUserAttribute.ShowInTable = types.BoolPointerValue(resp.InternalUserAttribute.ShowInTable)
			r.ShowInTable = r.InternalUserAttribute.ShowInTable
			r.InternalUserAttribute.Sortable = types.BoolPointerValue(resp.InternalUserAttribute.Sortable)
			r.Sortable = r.InternalUserAttribute.Sortable
			if resp.InternalUserAttribute.Type != nil {
				r.InternalUserAttribute.Type = types.StringValue(string(*resp.InternalUserAttribute.Type))
			} else {
				r.InternalUserAttribute.Type = types.StringNull()
			}
			r.InternalUserAttribute.ValueFormatter = types.StringPointerValue(resp.InternalUserAttribute.ValueFormatter)
			r.ValueFormatter = r.InternalUserAttribute.ValueFormatter
		}
		if resp.InvitationEmailAttribute != nil {
			r.InvitationEmailAttribute = &tfTypes.InvitationEmailAttribute{}
			r.InvitationEmailAttribute.Purpose = []types.String{}
			for _, v := range resp.InvitationEmailAttribute.Purpose {
				r.InvitationEmailAttribute.Purpose = append(r.InvitationEmailAttribute.Purpose, types.StringValue(v))
			}
			if resp.InvitationEmailAttribute.Constraints == nil {
				r.InvitationEmailAttribute.Constraints = nil
			} else {
				r.InvitationEmailAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.InvitationEmailAttribute.DefaultValue == nil {
				r.InvitationEmailAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult11, _ := json.Marshal(resp.InvitationEmailAttribute.DefaultValue)
				r.InvitationEmailAttribute.DefaultValue = types.StringValue(string(defaultValueResult11))
			}
			r.InvitationEmailAttribute.Deprecated = types.BoolPointerValue(resp.InvitationEmailAttribute.Deprecated)
			r.Deprecated = r.InvitationEmailAttribute.Deprecated
			r.InvitationEmailAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.InvitationEmailAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.InvitationEmailAttribute.EntityBuilderDisableEdit
			r.InvitationEmailAttribute.FeatureFlag = types.StringPointerValue(resp.InvitationEmailAttribute.FeatureFlag)
			r.FeatureFlag = r.InvitationEmailAttribute.FeatureFlag
			r.InvitationEmailAttribute.Group = types.StringPointerValue(resp.InvitationEmailAttribute.Group)
			r.Group = r.InvitationEmailAttribute.Group
			r.InvitationEmailAttribute.Hidden = types.BoolPointerValue(resp.InvitationEmailAttribute.Hidden)
			r.Hidden = r.InvitationEmailAttribute.Hidden
			r.InvitationEmailAttribute.HideLabel = types.BoolPointerValue(resp.InvitationEmailAttribute.HideLabel)
			r.HideLabel = r.InvitationEmailAttribute.HideLabel
			r.InvitationEmailAttribute.Icon = types.StringPointerValue(resp.InvitationEmailAttribute.Icon)
			r.Icon = r.InvitationEmailAttribute.Icon
			r.InvitationEmailAttribute.ID = types.StringPointerValue(resp.InvitationEmailAttribute.ID)
			r.ID = r.InvitationEmailAttribute.ID
			if resp.InvitationEmailAttribute.InfoHelpers == nil {
				r.InvitationEmailAttribute.InfoHelpers = nil
			} else {
				r.InvitationEmailAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.InvitationEmailAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.InvitationEmailAttribute.InfoHelpers.HintCustomComponent)
				r.InvitationEmailAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.InvitationEmailAttribute.InfoHelpers.HintText)
				r.InvitationEmailAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.InvitationEmailAttribute.InfoHelpers.HintTextKey)
				r.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.InvitationEmailAttribute.Label = types.StringValue(resp.InvitationEmailAttribute.Label)
			r.Label = r.InvitationEmailAttribute.Label
			r.InvitationEmailAttribute.Layout = types.StringPointerValue(resp.InvitationEmailAttribute.Layout)
			r.Layout = r.InvitationEmailAttribute.Layout
			r.InvitationEmailAttribute.Name = types.StringValue(resp.InvitationEmailAttribute.Name)
			r.Name = r.InvitationEmailAttribute.Name
			r.InvitationEmailAttribute.Order = types.Int64PointerValue(resp.InvitationEmailAttribute.Order)
			r.Order = r.InvitationEmailAttribute.Order
			r.InvitationEmailAttribute.Placeholder = types.StringPointerValue(resp.InvitationEmailAttribute.Placeholder)
			r.Placeholder = r.InvitationEmailAttribute.Placeholder
			r.InvitationEmailAttribute.PreviewValueFormatter = types.StringPointerValue(resp.InvitationEmailAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.InvitationEmailAttribute.PreviewValueFormatter
			r.InvitationEmailAttribute.Protected = types.BoolPointerValue(resp.InvitationEmailAttribute.Protected)
			r.Protected = r.InvitationEmailAttribute.Protected
			r.InvitationEmailAttribute.Readonly = types.BoolPointerValue(resp.InvitationEmailAttribute.Readonly)
			r.Readonly = r.InvitationEmailAttribute.Readonly
			r.InvitationEmailAttribute.RenderCondition = types.StringPointerValue(resp.InvitationEmailAttribute.RenderCondition)
			r.RenderCondition = r.InvitationEmailAttribute.RenderCondition
			r.InvitationEmailAttribute.Required = types.BoolPointerValue(resp.InvitationEmailAttribute.Required)
			r.Required = r.InvitationEmailAttribute.Required
			if len(r.InvitationEmailAttribute.SettingsFlag) > len(resp.InvitationEmailAttribute.SettingsFlag) {
				r.InvitationEmailAttribute.SettingsFlag = r.InvitationEmailAttribute.SettingsFlag[:len(resp.InvitationEmailAttribute.SettingsFlag)]
			}
			for settingsFlagCount11, settingsFlagItem11 := range resp.InvitationEmailAttribute.SettingsFlag {
				var settingsFlag23 tfTypes.SettingFlag
				settingsFlag23.Enabled = types.BoolPointerValue(settingsFlagItem11.Enabled)
				settingsFlag23.Name = types.StringPointerValue(settingsFlagItem11.Name)
				if settingsFlagCount11+1 > len(r.InvitationEmailAttribute.SettingsFlag) {
					r.InvitationEmailAttribute.SettingsFlag = append(r.InvitationEmailAttribute.SettingsFlag, settingsFlag23)
				} else {
					r.InvitationEmailAttribute.SettingsFlag[settingsFlagCount11].Enabled = settingsFlag23.Enabled
					r.InvitationEmailAttribute.SettingsFlag[settingsFlagCount11].Name = settingsFlag23.Name
				}
			}
			r.InvitationEmailAttribute.ShowInTable = types.BoolPointerValue(resp.InvitationEmailAttribute.ShowInTable)
			r.ShowInTable = r.InvitationEmailAttribute.ShowInTable
			r.InvitationEmailAttribute.Sortable = types.BoolPointerValue(resp.InvitationEmailAttribute.Sortable)
			r.Sortable = r.InvitationEmailAttribute.Sortable
			if resp.InvitationEmailAttribute.Type != nil {
				r.InvitationEmailAttribute.Type = types.StringValue(string(*resp.InvitationEmailAttribute.Type))
			} else {
				r.InvitationEmailAttribute.Type = types.StringNull()
			}
			r.InvitationEmailAttribute.ValueFormatter = types.StringPointerValue(resp.InvitationEmailAttribute.ValueFormatter)
			r.ValueFormatter = r.InvitationEmailAttribute.ValueFormatter
		}
		if resp.LinkAttribute != nil {
			r.LinkAttribute = &tfTypes.LinkAttribute{}
			r.LinkAttribute.Purpose = []types.String{}
			for _, v := range resp.LinkAttribute.Purpose {
				r.LinkAttribute.Purpose = append(r.LinkAttribute.Purpose, types.StringValue(v))
			}
			if resp.LinkAttribute.Constraints == nil {
				r.LinkAttribute.Constraints = nil
			} else {
				r.LinkAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.LinkAttribute.DefaultValue == nil {
				r.LinkAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult12, _ := json.Marshal(resp.LinkAttribute.DefaultValue)
				r.LinkAttribute.DefaultValue = types.StringValue(string(defaultValueResult12))
			}
			r.LinkAttribute.Deprecated = types.BoolPointerValue(resp.LinkAttribute.Deprecated)
			r.Deprecated = r.LinkAttribute.Deprecated
			r.LinkAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.LinkAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.LinkAttribute.EntityBuilderDisableEdit
			r.LinkAttribute.FeatureFlag = types.StringPointerValue(resp.LinkAttribute.FeatureFlag)
			r.FeatureFlag = r.LinkAttribute.FeatureFlag
			r.LinkAttribute.Group = types.StringPointerValue(resp.LinkAttribute.Group)
			r.Group = r.LinkAttribute.Group
			r.LinkAttribute.Hidden = types.BoolPointerValue(resp.LinkAttribute.Hidden)
			r.Hidden = r.LinkAttribute.Hidden
			r.LinkAttribute.HideLabel = types.BoolPointerValue(resp.LinkAttribute.HideLabel)
			r.HideLabel = r.LinkAttribute.HideLabel
			r.LinkAttribute.Icon = types.StringPointerValue(resp.LinkAttribute.Icon)
			r.Icon = r.LinkAttribute.Icon
			r.LinkAttribute.ID = types.StringPointerValue(resp.LinkAttribute.ID)
			r.ID = r.LinkAttribute.ID
			if resp.LinkAttribute.InfoHelpers == nil {
				r.LinkAttribute.InfoHelpers = nil
			} else {
				r.LinkAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.LinkAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.LinkAttribute.InfoHelpers.HintCustomComponent)
				r.LinkAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.LinkAttribute.InfoHelpers.HintText)
				r.LinkAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.LinkAttribute.InfoHelpers.HintTextKey)
				r.LinkAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.LinkAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.LinkAttribute.Label = types.StringValue(resp.LinkAttribute.Label)
			r.Label = r.LinkAttribute.Label
			r.LinkAttribute.Layout = types.StringPointerValue(resp.LinkAttribute.Layout)
			r.Layout = r.LinkAttribute.Layout
			r.LinkAttribute.Name = types.StringValue(resp.LinkAttribute.Name)
			r.Name = r.LinkAttribute.Name
			r.LinkAttribute.Order = types.Int64PointerValue(resp.LinkAttribute.Order)
			r.Order = r.LinkAttribute.Order
			r.LinkAttribute.Placeholder = types.StringPointerValue(resp.LinkAttribute.Placeholder)
			r.Placeholder = r.LinkAttribute.Placeholder
			r.LinkAttribute.PreviewValueFormatter = types.StringPointerValue(resp.LinkAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.LinkAttribute.PreviewValueFormatter
			r.LinkAttribute.Protected = types.BoolPointerValue(resp.LinkAttribute.Protected)
			r.Protected = r.LinkAttribute.Protected
			r.LinkAttribute.Readonly = types.BoolPointerValue(resp.LinkAttribute.Readonly)
			r.Readonly = r.LinkAttribute.Readonly
			r.LinkAttribute.RenderCondition = types.StringPointerValue(resp.LinkAttribute.RenderCondition)
			r.RenderCondition = r.LinkAttribute.RenderCondition
			r.LinkAttribute.Required = types.BoolPointerValue(resp.LinkAttribute.Required)
			r.Required = r.LinkAttribute.Required
			if len(r.LinkAttribute.SettingsFlag) > len(resp.LinkAttribute.SettingsFlag) {
				r.LinkAttribute.SettingsFlag = r.LinkAttribute.SettingsFlag[:len(resp.LinkAttribute.SettingsFlag)]
			}
			for settingsFlagCount12, settingsFlagItem12 := range resp.LinkAttribute.SettingsFlag {
				var settingsFlag25 tfTypes.SettingFlag
				settingsFlag25.Enabled = types.BoolPointerValue(settingsFlagItem12.Enabled)
				settingsFlag25.Name = types.StringPointerValue(settingsFlagItem12.Name)
				if settingsFlagCount12+1 > len(r.LinkAttribute.SettingsFlag) {
					r.LinkAttribute.SettingsFlag = append(r.LinkAttribute.SettingsFlag, settingsFlag25)
				} else {
					r.LinkAttribute.SettingsFlag[settingsFlagCount12].Enabled = settingsFlag25.Enabled
					r.LinkAttribute.SettingsFlag[settingsFlagCount12].Name = settingsFlag25.Name
				}
			}
			r.LinkAttribute.ShowInTable = types.BoolPointerValue(resp.LinkAttribute.ShowInTable)
			r.ShowInTable = r.LinkAttribute.ShowInTable
			r.LinkAttribute.Sortable = types.BoolPointerValue(resp.LinkAttribute.Sortable)
			r.Sortable = r.LinkAttribute.Sortable
			if resp.LinkAttribute.Type != nil {
				r.LinkAttribute.Type = types.StringValue(string(*resp.LinkAttribute.Type))
			} else {
				r.LinkAttribute.Type = types.StringNull()
			}
			r.LinkAttribute.ValueFormatter = types.StringPointerValue(resp.LinkAttribute.ValueFormatter)
			r.ValueFormatter = r.LinkAttribute.ValueFormatter
		}
		if resp.MultiSelectAttribute != nil {
			r.MultiSelectAttribute = &tfTypes.MultiSelectAttribute{}
			r.MultiSelectAttribute.Purpose = []types.String{}
			for _, v := range resp.MultiSelectAttribute.Purpose {
				r.MultiSelectAttribute.Purpose = append(r.MultiSelectAttribute.Purpose, types.StringValue(v))
			}
			r.MultiSelectAttribute.AllowAny = types.BoolPointerValue(resp.MultiSelectAttribute.AllowAny)
			r.MultiSelectAttribute.AllowExtraOptions = types.BoolPointerValue(resp.MultiSelectAttribute.AllowExtraOptions)
			if resp.MultiSelectAttribute.Constraints == nil {
				r.MultiSelectAttribute.Constraints = nil
			} else {
				r.MultiSelectAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.MultiSelectAttribute.DefaultValue == nil {
				r.MultiSelectAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult13, _ := json.Marshal(resp.MultiSelectAttribute.DefaultValue)
				r.MultiSelectAttribute.DefaultValue = types.StringValue(string(defaultValueResult13))
			}
			r.MultiSelectAttribute.Deprecated = types.BoolPointerValue(resp.MultiSelectAttribute.Deprecated)
			r.Deprecated = r.MultiSelectAttribute.Deprecated
			r.MultiSelectAttribute.DisableCaseSensitive = types.BoolPointerValue(resp.MultiSelectAttribute.DisableCaseSensitive)
			r.MultiSelectAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.MultiSelectAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.MultiSelectAttribute.EntityBuilderDisableEdit
			r.MultiSelectAttribute.FeatureFlag = types.StringPointerValue(resp.MultiSelectAttribute.FeatureFlag)
			r.FeatureFlag = r.MultiSelectAttribute.FeatureFlag
			r.MultiSelectAttribute.Group = types.StringPointerValue(resp.MultiSelectAttribute.Group)
			r.Group = r.MultiSelectAttribute.Group
			r.MultiSelectAttribute.Hidden = types.BoolPointerValue(resp.MultiSelectAttribute.Hidden)
			r.Hidden = r.MultiSelectAttribute.Hidden
			r.MultiSelectAttribute.HideLabel = types.BoolPointerValue(resp.MultiSelectAttribute.HideLabel)
			r.HideLabel = r.MultiSelectAttribute.HideLabel
			r.MultiSelectAttribute.Icon = types.StringPointerValue(resp.MultiSelectAttribute.Icon)
			r.Icon = r.MultiSelectAttribute.Icon
			r.MultiSelectAttribute.ID = types.StringPointerValue(resp.MultiSelectAttribute.ID)
			r.ID = r.MultiSelectAttribute.ID
			if resp.MultiSelectAttribute.InfoHelpers == nil {
				r.MultiSelectAttribute.InfoHelpers = nil
			} else {
				r.MultiSelectAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.MultiSelectAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.MultiSelectAttribute.InfoHelpers.HintCustomComponent)
				r.MultiSelectAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.MultiSelectAttribute.InfoHelpers.HintText)
				r.MultiSelectAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.MultiSelectAttribute.InfoHelpers.HintTextKey)
				r.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.MultiSelectAttribute.Label = types.StringValue(resp.MultiSelectAttribute.Label)
			r.Label = r.MultiSelectAttribute.Label
			r.MultiSelectAttribute.Layout = types.StringPointerValue(resp.MultiSelectAttribute.Layout)
			r.Layout = r.MultiSelectAttribute.Layout
			r.MultiSelectAttribute.Name = types.StringValue(resp.MultiSelectAttribute.Name)
			r.Name = r.MultiSelectAttribute.Name
			if len(r.MultiSelectAttribute.Options) > len(resp.MultiSelectAttribute.Options) {
				r.MultiSelectAttribute.Options = r.MultiSelectAttribute.Options[:len(resp.MultiSelectAttribute.Options)]
			}
			for optionsCount, optionsItem := range resp.MultiSelectAttribute.Options {
				var options1 tfTypes.MultiSelectAttributeOptions
				if optionsItem.Str != nil {
					options1.Str = types.StringPointerValue(optionsItem.Str)
				}
				if optionsItem.Two != nil {
					options1.Two = &tfTypes.Two{}
					options1.Two.Title = types.StringPointerValue(optionsItem.Two.Title)
					options1.Two.Value = types.StringValue(optionsItem.Two.Value)
				}
				if optionsCount+1 > len(r.MultiSelectAttribute.Options) {
					r.MultiSelectAttribute.Options = append(r.MultiSelectAttribute.Options, options1)
				} else {
					r.MultiSelectAttribute.Options[optionsCount].Str = options1.Str
					r.MultiSelectAttribute.Options[optionsCount].Two = options1.Two
				}
			}
			r.MultiSelectAttribute.Order = types.Int64PointerValue(resp.MultiSelectAttribute.Order)
			r.Order = r.MultiSelectAttribute.Order
			r.MultiSelectAttribute.Placeholder = types.StringPointerValue(resp.MultiSelectAttribute.Placeholder)
			r.Placeholder = r.MultiSelectAttribute.Placeholder
			r.MultiSelectAttribute.PreviewValueFormatter = types.StringPointerValue(resp.MultiSelectAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.MultiSelectAttribute.PreviewValueFormatter
			r.MultiSelectAttribute.Protected = types.BoolPointerValue(resp.MultiSelectAttribute.Protected)
			r.Protected = r.MultiSelectAttribute.Protected
			r.MultiSelectAttribute.Readonly = types.BoolPointerValue(resp.MultiSelectAttribute.Readonly)
			r.Readonly = r.MultiSelectAttribute.Readonly
			r.MultiSelectAttribute.RenderCondition = types.StringPointerValue(resp.MultiSelectAttribute.RenderCondition)
			r.RenderCondition = r.MultiSelectAttribute.RenderCondition
			r.MultiSelectAttribute.Required = types.BoolPointerValue(resp.MultiSelectAttribute.Required)
			r.Required = r.MultiSelectAttribute.Required
			if len(r.MultiSelectAttribute.SettingsFlag) > len(resp.MultiSelectAttribute.SettingsFlag) {
				r.MultiSelectAttribute.SettingsFlag = r.MultiSelectAttribute.SettingsFlag[:len(resp.MultiSelectAttribute.SettingsFlag)]
			}
			for settingsFlagCount13, settingsFlagItem13 := range resp.MultiSelectAttribute.SettingsFlag {
				var settingsFlag27 tfTypes.SettingFlag
				settingsFlag27.Enabled = types.BoolPointerValue(settingsFlagItem13.Enabled)
				settingsFlag27.Name = types.StringPointerValue(settingsFlagItem13.Name)
				if settingsFlagCount13+1 > len(r.MultiSelectAttribute.SettingsFlag) {
					r.MultiSelectAttribute.SettingsFlag = append(r.MultiSelectAttribute.SettingsFlag, settingsFlag27)
				} else {
					r.MultiSelectAttribute.SettingsFlag[settingsFlagCount13].Enabled = settingsFlag27.Enabled
					r.MultiSelectAttribute.SettingsFlag[settingsFlagCount13].Name = settingsFlag27.Name
				}
			}
			r.MultiSelectAttribute.ShowInTable = types.BoolPointerValue(resp.MultiSelectAttribute.ShowInTable)
			r.ShowInTable = r.MultiSelectAttribute.ShowInTable
			r.MultiSelectAttribute.Sortable = types.BoolPointerValue(resp.MultiSelectAttribute.Sortable)
			r.Sortable = r.MultiSelectAttribute.Sortable
			if resp.MultiSelectAttribute.Type != nil {
				r.MultiSelectAttribute.Type = types.StringValue(string(*resp.MultiSelectAttribute.Type))
			} else {
				r.MultiSelectAttribute.Type = types.StringNull()
			}
			r.MultiSelectAttribute.ValueFormatter = types.StringPointerValue(resp.MultiSelectAttribute.ValueFormatter)
			r.ValueFormatter = r.MultiSelectAttribute.ValueFormatter
		}
		if resp.NumberAttribute != nil {
			r.NumberAttribute = &tfTypes.NumberAttribute{}
			r.NumberAttribute.Purpose = []types.String{}
			for _, v := range resp.NumberAttribute.Purpose {
				r.NumberAttribute.Purpose = append(r.NumberAttribute.Purpose, types.StringValue(v))
			}
			if resp.NumberAttribute.Constraints == nil {
				r.NumberAttribute.Constraints = nil
			} else {
				r.NumberAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.NumberAttribute.DefaultValue == nil {
				r.NumberAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult14, _ := json.Marshal(resp.NumberAttribute.DefaultValue)
				r.NumberAttribute.DefaultValue = types.StringValue(string(defaultValueResult14))
			}
			r.NumberAttribute.Deprecated = types.BoolPointerValue(resp.NumberAttribute.Deprecated)
			r.Deprecated = r.NumberAttribute.Deprecated
			r.NumberAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.NumberAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.NumberAttribute.EntityBuilderDisableEdit
			r.NumberAttribute.FeatureFlag = types.StringPointerValue(resp.NumberAttribute.FeatureFlag)
			r.FeatureFlag = r.NumberAttribute.FeatureFlag
			r.NumberAttribute.Format = types.StringPointerValue(resp.NumberAttribute.Format)
			r.NumberAttribute.Group = types.StringPointerValue(resp.NumberAttribute.Group)
			r.Group = r.NumberAttribute.Group
			r.NumberAttribute.Hidden = types.BoolPointerValue(resp.NumberAttribute.Hidden)
			r.Hidden = r.NumberAttribute.Hidden
			r.NumberAttribute.HideLabel = types.BoolPointerValue(resp.NumberAttribute.HideLabel)
			r.HideLabel = r.NumberAttribute.HideLabel
			r.NumberAttribute.Icon = types.StringPointerValue(resp.NumberAttribute.Icon)
			r.Icon = r.NumberAttribute.Icon
			r.NumberAttribute.ID = types.StringPointerValue(resp.NumberAttribute.ID)
			r.ID = r.NumberAttribute.ID
			if resp.NumberAttribute.InfoHelpers == nil {
				r.NumberAttribute.InfoHelpers = nil
			} else {
				r.NumberAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.NumberAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.NumberAttribute.InfoHelpers.HintCustomComponent)
				r.NumberAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.NumberAttribute.InfoHelpers.HintText)
				r.NumberAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.NumberAttribute.InfoHelpers.HintTextKey)
				r.NumberAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.NumberAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.NumberAttribute.Label = types.StringValue(resp.NumberAttribute.Label)
			r.Label = r.NumberAttribute.Label
			r.NumberAttribute.Layout = types.StringPointerValue(resp.NumberAttribute.Layout)
			r.Layout = r.NumberAttribute.Layout
			r.NumberAttribute.Name = types.StringValue(resp.NumberAttribute.Name)
			r.Name = r.NumberAttribute.Name
			r.NumberAttribute.Order = types.Int64PointerValue(resp.NumberAttribute.Order)
			r.Order = r.NumberAttribute.Order
			r.NumberAttribute.Placeholder = types.StringPointerValue(resp.NumberAttribute.Placeholder)
			r.Placeholder = r.NumberAttribute.Placeholder
			r.NumberAttribute.PreviewValueFormatter = types.StringPointerValue(resp.NumberAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.NumberAttribute.PreviewValueFormatter
			r.NumberAttribute.Protected = types.BoolPointerValue(resp.NumberAttribute.Protected)
			r.Protected = r.NumberAttribute.Protected
			r.NumberAttribute.Readonly = types.BoolPointerValue(resp.NumberAttribute.Readonly)
			r.Readonly = r.NumberAttribute.Readonly
			r.NumberAttribute.RenderCondition = types.StringPointerValue(resp.NumberAttribute.RenderCondition)
			r.RenderCondition = r.NumberAttribute.RenderCondition
			r.NumberAttribute.Required = types.BoolPointerValue(resp.NumberAttribute.Required)
			r.Required = r.NumberAttribute.Required
			if len(r.NumberAttribute.SettingsFlag) > len(resp.NumberAttribute.SettingsFlag) {
				r.NumberAttribute.SettingsFlag = r.NumberAttribute.SettingsFlag[:len(resp.NumberAttribute.SettingsFlag)]
			}
			for settingsFlagCount14, settingsFlagItem14 := range resp.NumberAttribute.SettingsFlag {
				var settingsFlag29 tfTypes.SettingFlag
				settingsFlag29.Enabled = types.BoolPointerValue(settingsFlagItem14.Enabled)
				settingsFlag29.Name = types.StringPointerValue(settingsFlagItem14.Name)
				if settingsFlagCount14+1 > len(r.NumberAttribute.SettingsFlag) {
					r.NumberAttribute.SettingsFlag = append(r.NumberAttribute.SettingsFlag, settingsFlag29)
				} else {
					r.NumberAttribute.SettingsFlag[settingsFlagCount14].Enabled = settingsFlag29.Enabled
					r.NumberAttribute.SettingsFlag[settingsFlagCount14].Name = settingsFlag29.Name
				}
			}
			r.NumberAttribute.ShowInTable = types.BoolPointerValue(resp.NumberAttribute.ShowInTable)
			r.ShowInTable = r.NumberAttribute.ShowInTable
			r.NumberAttribute.Sortable = types.BoolPointerValue(resp.NumberAttribute.Sortable)
			r.Sortable = r.NumberAttribute.Sortable
			if resp.NumberAttribute.Type != nil {
				r.NumberAttribute.Type = types.StringValue(string(*resp.NumberAttribute.Type))
			} else {
				r.NumberAttribute.Type = types.StringNull()
			}
			r.NumberAttribute.ValueFormatter = types.StringPointerValue(resp.NumberAttribute.ValueFormatter)
			r.ValueFormatter = r.NumberAttribute.ValueFormatter
		}
		if resp.OrderedListAttribute != nil {
			r.OrderedListAttribute = &tfTypes.OrderedListAttribute{}
			r.OrderedListAttribute.Purpose = []types.String{}
			for _, v := range resp.OrderedListAttribute.Purpose {
				r.OrderedListAttribute.Purpose = append(r.OrderedListAttribute.Purpose, types.StringValue(v))
			}
			if resp.OrderedListAttribute.Constraints == nil {
				r.OrderedListAttribute.Constraints = nil
			} else {
				r.OrderedListAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.OrderedListAttribute.DefaultValue == nil {
				r.OrderedListAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult15, _ := json.Marshal(resp.OrderedListAttribute.DefaultValue)
				r.OrderedListAttribute.DefaultValue = types.StringValue(string(defaultValueResult15))
			}
			r.OrderedListAttribute.Deprecated = types.BoolPointerValue(resp.OrderedListAttribute.Deprecated)
			r.Deprecated = r.OrderedListAttribute.Deprecated
			r.OrderedListAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.OrderedListAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.OrderedListAttribute.EntityBuilderDisableEdit
			r.OrderedListAttribute.FeatureFlag = types.StringPointerValue(resp.OrderedListAttribute.FeatureFlag)
			r.FeatureFlag = r.OrderedListAttribute.FeatureFlag
			r.OrderedListAttribute.Group = types.StringPointerValue(resp.OrderedListAttribute.Group)
			r.Group = r.OrderedListAttribute.Group
			r.OrderedListAttribute.Hidden = types.BoolPointerValue(resp.OrderedListAttribute.Hidden)
			r.Hidden = r.OrderedListAttribute.Hidden
			r.OrderedListAttribute.HideLabel = types.BoolPointerValue(resp.OrderedListAttribute.HideLabel)
			r.HideLabel = r.OrderedListAttribute.HideLabel
			r.OrderedListAttribute.Icon = types.StringPointerValue(resp.OrderedListAttribute.Icon)
			r.Icon = r.OrderedListAttribute.Icon
			r.OrderedListAttribute.ID = types.StringPointerValue(resp.OrderedListAttribute.ID)
			r.ID = r.OrderedListAttribute.ID
			if resp.OrderedListAttribute.InfoHelpers == nil {
				r.OrderedListAttribute.InfoHelpers = nil
			} else {
				r.OrderedListAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.OrderedListAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.OrderedListAttribute.InfoHelpers.HintCustomComponent)
				r.OrderedListAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.OrderedListAttribute.InfoHelpers.HintText)
				r.OrderedListAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.OrderedListAttribute.InfoHelpers.HintTextKey)
				r.OrderedListAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.OrderedListAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.OrderedListAttribute.Label = types.StringValue(resp.OrderedListAttribute.Label)
			r.Label = r.OrderedListAttribute.Label
			r.OrderedListAttribute.Layout = types.StringPointerValue(resp.OrderedListAttribute.Layout)
			r.Layout = r.OrderedListAttribute.Layout
			r.OrderedListAttribute.Name = types.StringValue(resp.OrderedListAttribute.Name)
			r.Name = r.OrderedListAttribute.Name
			r.OrderedListAttribute.Order = types.Int64PointerValue(resp.OrderedListAttribute.Order)
			r.Order = r.OrderedListAttribute.Order
			r.OrderedListAttribute.Placeholder = types.StringPointerValue(resp.OrderedListAttribute.Placeholder)
			r.Placeholder = r.OrderedListAttribute.Placeholder
			r.OrderedListAttribute.PreviewValueFormatter = types.StringPointerValue(resp.OrderedListAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.OrderedListAttribute.PreviewValueFormatter
			r.OrderedListAttribute.Protected = types.BoolPointerValue(resp.OrderedListAttribute.Protected)
			r.Protected = r.OrderedListAttribute.Protected
			r.OrderedListAttribute.Readonly = types.BoolPointerValue(resp.OrderedListAttribute.Readonly)
			r.Readonly = r.OrderedListAttribute.Readonly
			r.OrderedListAttribute.RenderCondition = types.StringPointerValue(resp.OrderedListAttribute.RenderCondition)
			r.RenderCondition = r.OrderedListAttribute.RenderCondition
			r.OrderedListAttribute.Required = types.BoolPointerValue(resp.OrderedListAttribute.Required)
			r.Required = r.OrderedListAttribute.Required
			if len(r.OrderedListAttribute.SettingsFlag) > len(resp.OrderedListAttribute.SettingsFlag) {
				r.OrderedListAttribute.SettingsFlag = r.OrderedListAttribute.SettingsFlag[:len(resp.OrderedListAttribute.SettingsFlag)]
			}
			for settingsFlagCount15, settingsFlagItem15 := range resp.OrderedListAttribute.SettingsFlag {
				var settingsFlag31 tfTypes.SettingFlag
				settingsFlag31.Enabled = types.BoolPointerValue(settingsFlagItem15.Enabled)
				settingsFlag31.Name = types.StringPointerValue(settingsFlagItem15.Name)
				if settingsFlagCount15+1 > len(r.OrderedListAttribute.SettingsFlag) {
					r.OrderedListAttribute.SettingsFlag = append(r.OrderedListAttribute.SettingsFlag, settingsFlag31)
				} else {
					r.OrderedListAttribute.SettingsFlag[settingsFlagCount15].Enabled = settingsFlag31.Enabled
					r.OrderedListAttribute.SettingsFlag[settingsFlagCount15].Name = settingsFlag31.Name
				}
			}
			r.OrderedListAttribute.ShowInTable = types.BoolPointerValue(resp.OrderedListAttribute.ShowInTable)
			r.ShowInTable = r.OrderedListAttribute.ShowInTable
			r.OrderedListAttribute.Sortable = types.BoolPointerValue(resp.OrderedListAttribute.Sortable)
			r.Sortable = r.OrderedListAttribute.Sortable
			if resp.OrderedListAttribute.Type != nil {
				r.OrderedListAttribute.Type = types.StringValue(string(*resp.OrderedListAttribute.Type))
			} else {
				r.OrderedListAttribute.Type = types.StringNull()
			}
			r.OrderedListAttribute.ValueFormatter = types.StringPointerValue(resp.OrderedListAttribute.ValueFormatter)
			r.ValueFormatter = r.OrderedListAttribute.ValueFormatter
		}
		if resp.PartnerOrganisationAttribute != nil {
			r.PartnerOrganisationAttribute = &tfTypes.PartnerOrganisationAttribute{}
			r.PartnerOrganisationAttribute.Purpose = []types.String{}
			for _, v := range resp.PartnerOrganisationAttribute.Purpose {
				r.PartnerOrganisationAttribute.Purpose = append(r.PartnerOrganisationAttribute.Purpose, types.StringValue(v))
			}
			if resp.PartnerOrganisationAttribute.Constraints == nil {
				r.PartnerOrganisationAttribute.Constraints = nil
			} else {
				r.PartnerOrganisationAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.PartnerOrganisationAttribute.DefaultValue == nil {
				r.PartnerOrganisationAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult16, _ := json.Marshal(resp.PartnerOrganisationAttribute.DefaultValue)
				r.PartnerOrganisationAttribute.DefaultValue = types.StringValue(string(defaultValueResult16))
			}
			r.PartnerOrganisationAttribute.Deprecated = types.BoolPointerValue(resp.PartnerOrganisationAttribute.Deprecated)
			r.Deprecated = r.PartnerOrganisationAttribute.Deprecated
			r.PartnerOrganisationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.PartnerOrganisationAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.PartnerOrganisationAttribute.EntityBuilderDisableEdit
			r.PartnerOrganisationAttribute.FeatureFlag = types.StringPointerValue(resp.PartnerOrganisationAttribute.FeatureFlag)
			r.FeatureFlag = r.PartnerOrganisationAttribute.FeatureFlag
			r.PartnerOrganisationAttribute.Group = types.StringPointerValue(resp.PartnerOrganisationAttribute.Group)
			r.Group = r.PartnerOrganisationAttribute.Group
			r.PartnerOrganisationAttribute.Hidden = types.BoolPointerValue(resp.PartnerOrganisationAttribute.Hidden)
			r.Hidden = r.PartnerOrganisationAttribute.Hidden
			r.PartnerOrganisationAttribute.HideLabel = types.BoolPointerValue(resp.PartnerOrganisationAttribute.HideLabel)
			r.HideLabel = r.PartnerOrganisationAttribute.HideLabel
			r.PartnerOrganisationAttribute.Icon = types.StringPointerValue(resp.PartnerOrganisationAttribute.Icon)
			r.Icon = r.PartnerOrganisationAttribute.Icon
			r.PartnerOrganisationAttribute.ID = types.StringPointerValue(resp.PartnerOrganisationAttribute.ID)
			r.ID = r.PartnerOrganisationAttribute.ID
			if resp.PartnerOrganisationAttribute.InfoHelpers == nil {
				r.PartnerOrganisationAttribute.InfoHelpers = nil
			} else {
				r.PartnerOrganisationAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent)
				r.PartnerOrganisationAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.PartnerOrganisationAttribute.InfoHelpers.HintText)
				r.PartnerOrganisationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.PartnerOrganisationAttribute.InfoHelpers.HintTextKey)
				r.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.PartnerOrganisationAttribute.Label = types.StringValue(resp.PartnerOrganisationAttribute.Label)
			r.Label = r.PartnerOrganisationAttribute.Label
			r.PartnerOrganisationAttribute.Layout = types.StringPointerValue(resp.PartnerOrganisationAttribute.Layout)
			r.Layout = r.PartnerOrganisationAttribute.Layout
			r.PartnerOrganisationAttribute.Name = types.StringValue(resp.PartnerOrganisationAttribute.Name)
			r.Name = r.PartnerOrganisationAttribute.Name
			r.PartnerOrganisationAttribute.Order = types.Int64PointerValue(resp.PartnerOrganisationAttribute.Order)
			r.Order = r.PartnerOrganisationAttribute.Order
			r.PartnerOrganisationAttribute.Placeholder = types.StringPointerValue(resp.PartnerOrganisationAttribute.Placeholder)
			r.Placeholder = r.PartnerOrganisationAttribute.Placeholder
			r.PartnerOrganisationAttribute.PreviewValueFormatter = types.StringPointerValue(resp.PartnerOrganisationAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.PartnerOrganisationAttribute.PreviewValueFormatter
			r.PartnerOrganisationAttribute.Protected = types.BoolPointerValue(resp.PartnerOrganisationAttribute.Protected)
			r.Protected = r.PartnerOrganisationAttribute.Protected
			r.PartnerOrganisationAttribute.Readonly = types.BoolPointerValue(resp.PartnerOrganisationAttribute.Readonly)
			r.Readonly = r.PartnerOrganisationAttribute.Readonly
			r.PartnerOrganisationAttribute.RenderCondition = types.StringPointerValue(resp.PartnerOrganisationAttribute.RenderCondition)
			r.RenderCondition = r.PartnerOrganisationAttribute.RenderCondition
			r.PartnerOrganisationAttribute.Required = types.BoolPointerValue(resp.PartnerOrganisationAttribute.Required)
			r.Required = r.PartnerOrganisationAttribute.Required
			if len(r.PartnerOrganisationAttribute.SettingsFlag) > len(resp.PartnerOrganisationAttribute.SettingsFlag) {
				r.PartnerOrganisationAttribute.SettingsFlag = r.PartnerOrganisationAttribute.SettingsFlag[:len(resp.PartnerOrganisationAttribute.SettingsFlag)]
			}
			for settingsFlagCount16, settingsFlagItem16 := range resp.PartnerOrganisationAttribute.SettingsFlag {
				var settingsFlag33 tfTypes.SettingFlag
				settingsFlag33.Enabled = types.BoolPointerValue(settingsFlagItem16.Enabled)
				settingsFlag33.Name = types.StringPointerValue(settingsFlagItem16.Name)
				if settingsFlagCount16+1 > len(r.PartnerOrganisationAttribute.SettingsFlag) {
					r.PartnerOrganisationAttribute.SettingsFlag = append(r.PartnerOrganisationAttribute.SettingsFlag, settingsFlag33)
				} else {
					r.PartnerOrganisationAttribute.SettingsFlag[settingsFlagCount16].Enabled = settingsFlag33.Enabled
					r.PartnerOrganisationAttribute.SettingsFlag[settingsFlagCount16].Name = settingsFlag33.Name
				}
			}
			r.PartnerOrganisationAttribute.ShowInTable = types.BoolPointerValue(resp.PartnerOrganisationAttribute.ShowInTable)
			r.ShowInTable = r.PartnerOrganisationAttribute.ShowInTable
			r.PartnerOrganisationAttribute.Sortable = types.BoolPointerValue(resp.PartnerOrganisationAttribute.Sortable)
			r.Sortable = r.PartnerOrganisationAttribute.Sortable
			if resp.PartnerOrganisationAttribute.Type != nil {
				r.PartnerOrganisationAttribute.Type = types.StringValue(string(*resp.PartnerOrganisationAttribute.Type))
			} else {
				r.PartnerOrganisationAttribute.Type = types.StringNull()
			}
			r.PartnerOrganisationAttribute.ValueFormatter = types.StringPointerValue(resp.PartnerOrganisationAttribute.ValueFormatter)
			r.ValueFormatter = r.PartnerOrganisationAttribute.ValueFormatter
		}
		if resp.PartnerStatusAttribute != nil {
			r.PartnerStatusAttribute = &tfTypes.PartnerStatusAttribute{}
			r.PartnerStatusAttribute.Purpose = []types.String{}
			for _, v := range resp.PartnerStatusAttribute.Purpose {
				r.PartnerStatusAttribute.Purpose = append(r.PartnerStatusAttribute.Purpose, types.StringValue(v))
			}
			if resp.PartnerStatusAttribute.Constraints == nil {
				r.PartnerStatusAttribute.Constraints = nil
			} else {
				r.PartnerStatusAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.PartnerStatusAttribute.DefaultValue == nil {
				r.PartnerStatusAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult17, _ := json.Marshal(resp.PartnerStatusAttribute.DefaultValue)
				r.PartnerStatusAttribute.DefaultValue = types.StringValue(string(defaultValueResult17))
			}
			r.PartnerStatusAttribute.Deprecated = types.BoolPointerValue(resp.PartnerStatusAttribute.Deprecated)
			r.Deprecated = r.PartnerStatusAttribute.Deprecated
			r.PartnerStatusAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.PartnerStatusAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.PartnerStatusAttribute.EntityBuilderDisableEdit
			r.PartnerStatusAttribute.FeatureFlag = types.StringPointerValue(resp.PartnerStatusAttribute.FeatureFlag)
			r.FeatureFlag = r.PartnerStatusAttribute.FeatureFlag
			r.PartnerStatusAttribute.Group = types.StringPointerValue(resp.PartnerStatusAttribute.Group)
			r.Group = r.PartnerStatusAttribute.Group
			r.PartnerStatusAttribute.Hidden = types.BoolPointerValue(resp.PartnerStatusAttribute.Hidden)
			r.Hidden = r.PartnerStatusAttribute.Hidden
			r.PartnerStatusAttribute.HideLabel = types.BoolPointerValue(resp.PartnerStatusAttribute.HideLabel)
			r.HideLabel = r.PartnerStatusAttribute.HideLabel
			r.PartnerStatusAttribute.Icon = types.StringPointerValue(resp.PartnerStatusAttribute.Icon)
			r.Icon = r.PartnerStatusAttribute.Icon
			r.PartnerStatusAttribute.ID = types.StringPointerValue(resp.PartnerStatusAttribute.ID)
			r.ID = r.PartnerStatusAttribute.ID
			if resp.PartnerStatusAttribute.InfoHelpers == nil {
				r.PartnerStatusAttribute.InfoHelpers = nil
			} else {
				r.PartnerStatusAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.PartnerStatusAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.PartnerStatusAttribute.InfoHelpers.HintCustomComponent)
				r.PartnerStatusAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.PartnerStatusAttribute.InfoHelpers.HintText)
				r.PartnerStatusAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.PartnerStatusAttribute.InfoHelpers.HintTextKey)
				r.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.PartnerStatusAttribute.Label = types.StringValue(resp.PartnerStatusAttribute.Label)
			r.Label = r.PartnerStatusAttribute.Label
			r.PartnerStatusAttribute.Layout = types.StringPointerValue(resp.PartnerStatusAttribute.Layout)
			r.Layout = r.PartnerStatusAttribute.Layout
			r.PartnerStatusAttribute.Name = types.StringValue(resp.PartnerStatusAttribute.Name)
			r.Name = r.PartnerStatusAttribute.Name
			r.PartnerStatusAttribute.Order = types.Int64PointerValue(resp.PartnerStatusAttribute.Order)
			r.Order = r.PartnerStatusAttribute.Order
			r.PartnerStatusAttribute.Placeholder = types.StringPointerValue(resp.PartnerStatusAttribute.Placeholder)
			r.Placeholder = r.PartnerStatusAttribute.Placeholder
			r.PartnerStatusAttribute.PreviewValueFormatter = types.StringPointerValue(resp.PartnerStatusAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.PartnerStatusAttribute.PreviewValueFormatter
			r.PartnerStatusAttribute.Protected = types.BoolPointerValue(resp.PartnerStatusAttribute.Protected)
			r.Protected = r.PartnerStatusAttribute.Protected
			r.PartnerStatusAttribute.Readonly = types.BoolPointerValue(resp.PartnerStatusAttribute.Readonly)
			r.Readonly = r.PartnerStatusAttribute.Readonly
			r.PartnerStatusAttribute.RenderCondition = types.StringPointerValue(resp.PartnerStatusAttribute.RenderCondition)
			r.RenderCondition = r.PartnerStatusAttribute.RenderCondition
			r.PartnerStatusAttribute.Required = types.BoolPointerValue(resp.PartnerStatusAttribute.Required)
			r.Required = r.PartnerStatusAttribute.Required
			if len(r.PartnerStatusAttribute.SettingsFlag) > len(resp.PartnerStatusAttribute.SettingsFlag) {
				r.PartnerStatusAttribute.SettingsFlag = r.PartnerStatusAttribute.SettingsFlag[:len(resp.PartnerStatusAttribute.SettingsFlag)]
			}
			for settingsFlagCount17, settingsFlagItem17 := range resp.PartnerStatusAttribute.SettingsFlag {
				var settingsFlag35 tfTypes.SettingFlag
				settingsFlag35.Enabled = types.BoolPointerValue(settingsFlagItem17.Enabled)
				settingsFlag35.Name = types.StringPointerValue(settingsFlagItem17.Name)
				if settingsFlagCount17+1 > len(r.PartnerStatusAttribute.SettingsFlag) {
					r.PartnerStatusAttribute.SettingsFlag = append(r.PartnerStatusAttribute.SettingsFlag, settingsFlag35)
				} else {
					r.PartnerStatusAttribute.SettingsFlag[settingsFlagCount17].Enabled = settingsFlag35.Enabled
					r.PartnerStatusAttribute.SettingsFlag[settingsFlagCount17].Name = settingsFlag35.Name
				}
			}
			r.PartnerStatusAttribute.ShowInTable = types.BoolPointerValue(resp.PartnerStatusAttribute.ShowInTable)
			r.ShowInTable = r.PartnerStatusAttribute.ShowInTable
			r.PartnerStatusAttribute.Sortable = types.BoolPointerValue(resp.PartnerStatusAttribute.Sortable)
			r.Sortable = r.PartnerStatusAttribute.Sortable
			if resp.PartnerStatusAttribute.Type != nil {
				r.PartnerStatusAttribute.Type = types.StringValue(string(*resp.PartnerStatusAttribute.Type))
			} else {
				r.PartnerStatusAttribute.Type = types.StringNull()
			}
			r.PartnerStatusAttribute.ValueFormatter = types.StringPointerValue(resp.PartnerStatusAttribute.ValueFormatter)
			r.ValueFormatter = r.PartnerStatusAttribute.ValueFormatter
		}
		if resp.PaymentMethodRelationAttribute != nil {
			r.PaymentMethodRelationAttribute = &tfTypes.PaymentMethodRelationAttribute{}
			r.PaymentMethodRelationAttribute.Purpose = []types.String{}
			for _, v := range resp.PaymentMethodRelationAttribute.Purpose {
				r.PaymentMethodRelationAttribute.Purpose = append(r.PaymentMethodRelationAttribute.Purpose, types.StringValue(v))
			}
			if resp.PaymentMethodRelationAttribute.Constraints == nil {
				r.PaymentMethodRelationAttribute.Constraints = nil
			} else {
				r.PaymentMethodRelationAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.PaymentMethodRelationAttribute.DefaultValue == nil {
				r.PaymentMethodRelationAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult18, _ := json.Marshal(resp.PaymentMethodRelationAttribute.DefaultValue)
				r.PaymentMethodRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult18))
			}
			r.PaymentMethodRelationAttribute.Deprecated = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.Deprecated)
			r.Deprecated = r.PaymentMethodRelationAttribute.Deprecated
			r.PaymentMethodRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.PaymentMethodRelationAttribute.EntityBuilderDisableEdit
			r.PaymentMethodRelationAttribute.FeatureFlag = types.StringPointerValue(resp.PaymentMethodRelationAttribute.FeatureFlag)
			r.FeatureFlag = r.PaymentMethodRelationAttribute.FeatureFlag
			r.PaymentMethodRelationAttribute.Group = types.StringPointerValue(resp.PaymentMethodRelationAttribute.Group)
			r.Group = r.PaymentMethodRelationAttribute.Group
			r.PaymentMethodRelationAttribute.HasPrimary = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.HasPrimary)
			r.PaymentMethodRelationAttribute.Hidden = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.Hidden)
			r.Hidden = r.PaymentMethodRelationAttribute.Hidden
			r.PaymentMethodRelationAttribute.HideLabel = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.HideLabel)
			r.HideLabel = r.PaymentMethodRelationAttribute.HideLabel
			r.PaymentMethodRelationAttribute.Icon = types.StringPointerValue(resp.PaymentMethodRelationAttribute.Icon)
			r.Icon = r.PaymentMethodRelationAttribute.Icon
			r.PaymentMethodRelationAttribute.ID = types.StringPointerValue(resp.PaymentMethodRelationAttribute.ID)
			r.ID = r.PaymentMethodRelationAttribute.ID
			if resp.PaymentMethodRelationAttribute.InfoHelpers == nil {
				r.PaymentMethodRelationAttribute.InfoHelpers = nil
			} else {
				r.PaymentMethodRelationAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent)
				r.PaymentMethodRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.PaymentMethodRelationAttribute.InfoHelpers.HintText)
				r.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey)
				r.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.PaymentMethodRelationAttribute.Label = types.StringValue(resp.PaymentMethodRelationAttribute.Label)
			r.Label = r.PaymentMethodRelationAttribute.Label
			r.PaymentMethodRelationAttribute.Layout = types.StringPointerValue(resp.PaymentMethodRelationAttribute.Layout)
			r.Layout = r.PaymentMethodRelationAttribute.Layout
			r.PaymentMethodRelationAttribute.Name = types.StringValue(resp.PaymentMethodRelationAttribute.Name)
			r.Name = r.PaymentMethodRelationAttribute.Name
			r.PaymentMethodRelationAttribute.Order = types.Int64PointerValue(resp.PaymentMethodRelationAttribute.Order)
			r.Order = r.PaymentMethodRelationAttribute.Order
			r.PaymentMethodRelationAttribute.Placeholder = types.StringPointerValue(resp.PaymentMethodRelationAttribute.Placeholder)
			r.Placeholder = r.PaymentMethodRelationAttribute.Placeholder
			r.PaymentMethodRelationAttribute.PreviewValueFormatter = types.StringPointerValue(resp.PaymentMethodRelationAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.PaymentMethodRelationAttribute.PreviewValueFormatter
			r.PaymentMethodRelationAttribute.Protected = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.Protected)
			r.Protected = r.PaymentMethodRelationAttribute.Protected
			r.PaymentMethodRelationAttribute.Readonly = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.Readonly)
			r.Readonly = r.PaymentMethodRelationAttribute.Readonly
			r.PaymentMethodRelationAttribute.RenderCondition = types.StringPointerValue(resp.PaymentMethodRelationAttribute.RenderCondition)
			r.RenderCondition = r.PaymentMethodRelationAttribute.RenderCondition
			r.PaymentMethodRelationAttribute.Required = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.Required)
			r.Required = r.PaymentMethodRelationAttribute.Required
			if len(r.PaymentMethodRelationAttribute.SettingsFlag) > len(resp.PaymentMethodRelationAttribute.SettingsFlag) {
				r.PaymentMethodRelationAttribute.SettingsFlag = r.PaymentMethodRelationAttribute.SettingsFlag[:len(resp.PaymentMethodRelationAttribute.SettingsFlag)]
			}
			for settingsFlagCount18, settingsFlagItem18 := range resp.PaymentMethodRelationAttribute.SettingsFlag {
				var settingsFlag37 tfTypes.SettingFlag
				settingsFlag37.Enabled = types.BoolPointerValue(settingsFlagItem18.Enabled)
				settingsFlag37.Name = types.StringPointerValue(settingsFlagItem18.Name)
				if settingsFlagCount18+1 > len(r.PaymentMethodRelationAttribute.SettingsFlag) {
					r.PaymentMethodRelationAttribute.SettingsFlag = append(r.PaymentMethodRelationAttribute.SettingsFlag, settingsFlag37)
				} else {
					r.PaymentMethodRelationAttribute.SettingsFlag[settingsFlagCount18].Enabled = settingsFlag37.Enabled
					r.PaymentMethodRelationAttribute.SettingsFlag[settingsFlagCount18].Name = settingsFlag37.Name
				}
			}
			r.PaymentMethodRelationAttribute.ShowInTable = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.ShowInTable)
			r.ShowInTable = r.PaymentMethodRelationAttribute.ShowInTable
			r.PaymentMethodRelationAttribute.Sortable = types.BoolPointerValue(resp.PaymentMethodRelationAttribute.Sortable)
			r.Sortable = r.PaymentMethodRelationAttribute.Sortable
			if resp.PaymentMethodRelationAttribute.Type != nil {
				r.PaymentMethodRelationAttribute.Type = types.StringValue(string(*resp.PaymentMethodRelationAttribute.Type))
			} else {
				r.PaymentMethodRelationAttribute.Type = types.StringNull()
			}
			r.PaymentMethodRelationAttribute.ValueFormatter = types.StringPointerValue(resp.PaymentMethodRelationAttribute.ValueFormatter)
			r.ValueFormatter = r.PaymentMethodRelationAttribute.ValueFormatter
		}
		if resp.PurposeAttribute != nil {
			r.PurposeAttribute = &tfTypes.PurposeAttribute{}
			r.PurposeAttribute.Purpose = []types.String{}
			for _, v := range resp.PurposeAttribute.Purpose {
				r.PurposeAttribute.Purpose = append(r.PurposeAttribute.Purpose, types.StringValue(v))
			}
			if resp.PurposeAttribute.Constraints == nil {
				r.PurposeAttribute.Constraints = nil
			} else {
				r.PurposeAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.PurposeAttribute.CreatedAt != nil {
				r.PurposeAttribute.CreatedAt = types.StringValue(resp.PurposeAttribute.CreatedAt.Format(time.RFC3339Nano))
			} else {
				r.PurposeAttribute.CreatedAt = types.StringNull()
			}
			if resp.PurposeAttribute.DefaultValue == nil {
				r.PurposeAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult19, _ := json.Marshal(resp.PurposeAttribute.DefaultValue)
				r.PurposeAttribute.DefaultValue = types.StringValue(string(defaultValueResult19))
			}
			r.PurposeAttribute.Deprecated = types.BoolPointerValue(resp.PurposeAttribute.Deprecated)
			r.Deprecated = r.PurposeAttribute.Deprecated
			r.PurposeAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.PurposeAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.PurposeAttribute.EntityBuilderDisableEdit
			r.PurposeAttribute.FeatureFlag = types.StringPointerValue(resp.PurposeAttribute.FeatureFlag)
			r.FeatureFlag = r.PurposeAttribute.FeatureFlag
			r.PurposeAttribute.Group = types.StringPointerValue(resp.PurposeAttribute.Group)
			r.Group = r.PurposeAttribute.Group
			r.PurposeAttribute.Hidden = types.BoolPointerValue(resp.PurposeAttribute.Hidden)
			r.Hidden = r.PurposeAttribute.Hidden
			r.PurposeAttribute.HideLabel = types.BoolPointerValue(resp.PurposeAttribute.HideLabel)
			r.HideLabel = r.PurposeAttribute.HideLabel
			r.PurposeAttribute.Icon = types.StringPointerValue(resp.PurposeAttribute.Icon)
			r.Icon = r.PurposeAttribute.Icon
			r.PurposeAttribute.ID = types.StringPointerValue(resp.PurposeAttribute.ID)
			r.ID = r.PurposeAttribute.ID
			if resp.PurposeAttribute.InfoHelpers == nil {
				r.PurposeAttribute.InfoHelpers = nil
			} else {
				r.PurposeAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.PurposeAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.PurposeAttribute.InfoHelpers.HintCustomComponent)
				r.PurposeAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.PurposeAttribute.InfoHelpers.HintText)
				r.PurposeAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.PurposeAttribute.InfoHelpers.HintTextKey)
				r.PurposeAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.PurposeAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.PurposeAttribute.Label = types.StringValue(resp.PurposeAttribute.Label)
			r.Label = r.PurposeAttribute.Label
			r.PurposeAttribute.Layout = types.StringPointerValue(resp.PurposeAttribute.Layout)
			r.Layout = r.PurposeAttribute.Layout
			r.PurposeAttribute.Name = types.StringValue(resp.PurposeAttribute.Name)
			r.Name = r.PurposeAttribute.Name
			r.PurposeAttribute.Order = types.Int64PointerValue(resp.PurposeAttribute.Order)
			r.Order = r.PurposeAttribute.Order
			r.PurposeAttribute.Parents = []types.String{}
			for _, v := range resp.PurposeAttribute.Parents {
				r.PurposeAttribute.Parents = append(r.PurposeAttribute.Parents, types.StringValue(v))
			}
			r.PurposeAttribute.Placeholder = types.StringPointerValue(resp.PurposeAttribute.Placeholder)
			r.Placeholder = r.PurposeAttribute.Placeholder
			r.PurposeAttribute.PreviewValueFormatter = types.StringPointerValue(resp.PurposeAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.PurposeAttribute.PreviewValueFormatter
			r.PurposeAttribute.Protected = types.BoolPointerValue(resp.PurposeAttribute.Protected)
			r.Protected = r.PurposeAttribute.Protected
			r.PurposeAttribute.Readonly = types.BoolPointerValue(resp.PurposeAttribute.Readonly)
			r.Readonly = r.PurposeAttribute.Readonly
			r.PurposeAttribute.RenderCondition = types.StringPointerValue(resp.PurposeAttribute.RenderCondition)
			r.RenderCondition = r.PurposeAttribute.RenderCondition
			r.PurposeAttribute.Required = types.BoolPointerValue(resp.PurposeAttribute.Required)
			r.Required = r.PurposeAttribute.Required
			if len(r.PurposeAttribute.SettingsFlag) > len(resp.PurposeAttribute.SettingsFlag) {
				r.PurposeAttribute.SettingsFlag = r.PurposeAttribute.SettingsFlag[:len(resp.PurposeAttribute.SettingsFlag)]
			}
			for settingsFlagCount19, settingsFlagItem19 := range resp.PurposeAttribute.SettingsFlag {
				var settingsFlag39 tfTypes.SettingFlag
				settingsFlag39.Enabled = types.BoolPointerValue(settingsFlagItem19.Enabled)
				settingsFlag39.Name = types.StringPointerValue(settingsFlagItem19.Name)
				if settingsFlagCount19+1 > len(r.PurposeAttribute.SettingsFlag) {
					r.PurposeAttribute.SettingsFlag = append(r.PurposeAttribute.SettingsFlag, settingsFlag39)
				} else {
					r.PurposeAttribute.SettingsFlag[settingsFlagCount19].Enabled = settingsFlag39.Enabled
					r.PurposeAttribute.SettingsFlag[settingsFlagCount19].Name = settingsFlag39.Name
				}
			}
			r.PurposeAttribute.ShowInTable = types.BoolPointerValue(resp.PurposeAttribute.ShowInTable)
			r.ShowInTable = r.PurposeAttribute.ShowInTable
			r.PurposeAttribute.Slug = types.StringPointerValue(resp.PurposeAttribute.Slug)
			r.PurposeAttribute.Sortable = types.BoolPointerValue(resp.PurposeAttribute.Sortable)
			r.Sortable = r.PurposeAttribute.Sortable
			if resp.PurposeAttribute.Type != nil {
				r.PurposeAttribute.Type = types.StringValue(string(*resp.PurposeAttribute.Type))
			} else {
				r.PurposeAttribute.Type = types.StringNull()
			}
			if resp.PurposeAttribute.UpdatedAt != nil {
				r.PurposeAttribute.UpdatedAt = types.StringValue(resp.PurposeAttribute.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				r.PurposeAttribute.UpdatedAt = types.StringNull()
			}
			r.PurposeAttribute.ValueFormatter = types.StringPointerValue(resp.PurposeAttribute.ValueFormatter)
			r.ValueFormatter = r.PurposeAttribute.ValueFormatter
		}
		if resp.RelationAttribute != nil {
			r.RelationAttribute = &tfTypes.RelationAttribute{}
			r.RelationAttribute.Purpose = []types.String{}
			for _, v := range resp.RelationAttribute.Purpose {
				r.RelationAttribute.Purpose = append(r.RelationAttribute.Purpose, types.StringValue(v))
			}
			if len(r.RelationAttribute.Actions) > len(resp.RelationAttribute.Actions) {
				r.RelationAttribute.Actions = r.RelationAttribute.Actions[:len(resp.RelationAttribute.Actions)]
			}
			for actionsCount, actionsItem := range resp.RelationAttribute.Actions {
				var actions1 tfTypes.Actions
				if actionsItem.ActionType != nil {
					actions1.ActionType = types.StringValue(string(*actionsItem.ActionType))
				} else {
					actions1.ActionType = types.StringNull()
				}
				actions1.Default = types.BoolPointerValue(actionsItem.Default)
				actions1.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
				actions1.Label = types.StringPointerValue(actionsItem.Label)
				if actionsItem.NewEntityItem == nil {
					actions1.NewEntityItem = nil
				} else {
					actions1.NewEntityItem = &tfTypes.NewEntityItem{}
					if actionsItem.NewEntityItem.ACL == nil {
						actions1.NewEntityItem.ACL = nil
					} else {
						actions1.NewEntityItem.ACL = &tfTypes.EntityACL{}
						if actionsItem.NewEntityItem.ACL.AdditionalProperties == nil {
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult, _ := json.Marshal(actionsItem.NewEntityItem.ACL.AdditionalProperties)
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
						}
						actions1.NewEntityItem.ACL.Delete = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Delete {
							actions1.NewEntityItem.ACL.Delete = append(actions1.NewEntityItem.ACL.Delete, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.Edit = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Edit {
							actions1.NewEntityItem.ACL.Edit = append(actions1.NewEntityItem.ACL.Edit, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.View = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.View {
							actions1.NewEntityItem.ACL.View = append(actions1.NewEntityItem.ACL.View, types.StringValue(v))
						}
					}
					if actionsItem.NewEntityItem.CreatedAt != nil {
						actions1.NewEntityItem.CreatedAt = types.StringValue(actionsItem.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.CreatedAt = types.StringNull()
					}
					actions1.NewEntityItem.ID = types.StringValue(actionsItem.NewEntityItem.ID)
					actions1.NewEntityItem.Org = types.StringValue(actionsItem.NewEntityItem.Org)
					for ownersCount, ownersItem := range actionsItem.NewEntityItem.Owners {
						var owners1 tfTypes.EntityOwner
						owners1.OrgID = types.StringValue(ownersItem.OrgID)
						owners1.UserID = types.StringPointerValue(ownersItem.UserID)
						if ownersCount+1 > len(actions1.NewEntityItem.Owners) {
							actions1.NewEntityItem.Owners = append(actions1.NewEntityItem.Owners, owners1)
						} else {
							actions1.NewEntityItem.Owners[ownersCount].OrgID = owners1.OrgID
							actions1.NewEntityItem.Owners[ownersCount].UserID = owners1.UserID
						}
					}
					actions1.NewEntityItem.Schema = types.StringValue(actionsItem.NewEntityItem.Schema)
					actions1.NewEntityItem.Tags = []types.String{}
					for _, v := range actionsItem.NewEntityItem.Tags {
						actions1.NewEntityItem.Tags = append(actions1.NewEntityItem.Tags, types.StringValue(v))
					}
					actions1.NewEntityItem.Title = types.StringPointerValue(actionsItem.NewEntityItem.Title)
					if actionsItem.NewEntityItem.UpdatedAt != nil {
						actions1.NewEntityItem.UpdatedAt = types.StringValue(actionsItem.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.UpdatedAt = types.StringNull()
					}
					if actionsItem.NewEntityItem.AdditionalProperties == nil {
						actions1.NewEntityItem.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult1, _ := json.Marshal(actionsItem.NewEntityItem.AdditionalProperties)
						actions1.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
					}
				}
				for settingsFlagCount20, settingsFlagItem20 := range actionsItem.SettingsFlag {
					var settingsFlag41 tfTypes.SettingFlag
					settingsFlag41.Enabled = types.BoolPointerValue(settingsFlagItem20.Enabled)
					settingsFlag41.Name = types.StringPointerValue(settingsFlagItem20.Name)
					if settingsFlagCount20+1 > len(actions1.SettingsFlag) {
						actions1.SettingsFlag = append(actions1.SettingsFlag, settingsFlag41)
					} else {
						actions1.SettingsFlag[settingsFlagCount20].Enabled = settingsFlag41.Enabled
						actions1.SettingsFlag[settingsFlagCount20].Name = settingsFlag41.Name
					}
				}
				if actionsCount+1 > len(r.RelationAttribute.Actions) {
					r.RelationAttribute.Actions = append(r.RelationAttribute.Actions, actions1)
				} else {
					r.RelationAttribute.Actions[actionsCount].ActionType = actions1.ActionType
					r.RelationAttribute.Actions[actionsCount].Default = actions1.Default
					r.RelationAttribute.Actions[actionsCount].FeatureFlag = actions1.FeatureFlag
					r.RelationAttribute.Actions[actionsCount].Label = actions1.Label
					r.RelationAttribute.Actions[actionsCount].NewEntityItem = actions1.NewEntityItem
					r.RelationAttribute.Actions[actionsCount].SettingsFlag = actions1.SettingsFlag
				}
			}
			r.RelationAttribute.AddButtonLabel = types.StringPointerValue(resp.RelationAttribute.AddButtonLabel)
			r.RelationAttribute.AllowedSchemas = []types.String{}
			for _, v := range resp.RelationAttribute.AllowedSchemas {
				r.RelationAttribute.AllowedSchemas = append(r.RelationAttribute.AllowedSchemas, types.StringValue(v))
			}
			if resp.RelationAttribute.Constraints == nil {
				r.RelationAttribute.Constraints = nil
			} else {
				r.RelationAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.RelationAttribute.DefaultValue == nil {
				r.RelationAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult20, _ := json.Marshal(resp.RelationAttribute.DefaultValue)
				r.RelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult20))
			}
			r.RelationAttribute.Deprecated = types.BoolPointerValue(resp.RelationAttribute.Deprecated)
			r.Deprecated = r.RelationAttribute.Deprecated
			r.RelationAttribute.DetailsViewModeEnabled = types.BoolPointerValue(resp.RelationAttribute.DetailsViewModeEnabled)
			if resp.RelationAttribute.DrawerSize != nil {
				r.RelationAttribute.DrawerSize = types.StringValue(string(*resp.RelationAttribute.DrawerSize))
			} else {
				r.RelationAttribute.DrawerSize = types.StringNull()
			}
			if resp.RelationAttribute.EditMode != nil {
				r.RelationAttribute.EditMode = types.StringValue(string(*resp.RelationAttribute.EditMode))
			} else {
				r.RelationAttribute.EditMode = types.StringNull()
			}
			r.RelationAttribute.EnableRelationPicker = types.BoolPointerValue(resp.RelationAttribute.EnableRelationPicker)
			r.RelationAttribute.EnableRelationTags = types.BoolPointerValue(resp.RelationAttribute.EnableRelationTags)
			r.RelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.RelationAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.RelationAttribute.EntityBuilderDisableEdit
			r.RelationAttribute.FeatureFlag = types.StringPointerValue(resp.RelationAttribute.FeatureFlag)
			r.FeatureFlag = r.RelationAttribute.FeatureFlag
			r.RelationAttribute.Group = types.StringPointerValue(resp.RelationAttribute.Group)
			r.Group = r.RelationAttribute.Group
			r.RelationAttribute.HasPrimary = types.BoolPointerValue(resp.RelationAttribute.HasPrimary)
			r.RelationAttribute.Hidden = types.BoolPointerValue(resp.RelationAttribute.Hidden)
			r.Hidden = r.RelationAttribute.Hidden
			r.RelationAttribute.HideLabel = types.BoolPointerValue(resp.RelationAttribute.HideLabel)
			r.HideLabel = r.RelationAttribute.HideLabel
			r.RelationAttribute.Icon = types.StringPointerValue(resp.RelationAttribute.Icon)
			r.Icon = r.RelationAttribute.Icon
			r.RelationAttribute.ID = types.StringPointerValue(resp.RelationAttribute.ID)
			r.ID = r.RelationAttribute.ID
			if resp.RelationAttribute.InfoHelpers == nil {
				r.RelationAttribute.InfoHelpers = nil
			} else {
				r.RelationAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.RelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.RelationAttribute.InfoHelpers.HintCustomComponent)
				r.RelationAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.RelationAttribute.InfoHelpers.HintText)
				r.RelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.RelationAttribute.InfoHelpers.HintTextKey)
				r.RelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.RelationAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.RelationAttribute.Label = types.StringValue(resp.RelationAttribute.Label)
			r.Label = r.RelationAttribute.Label
			r.RelationAttribute.Layout = types.StringPointerValue(resp.RelationAttribute.Layout)
			r.Layout = r.RelationAttribute.Layout
			r.RelationAttribute.Name = types.StringValue(resp.RelationAttribute.Name)
			r.Name = r.RelationAttribute.Name
			r.RelationAttribute.Order = types.Int64PointerValue(resp.RelationAttribute.Order)
			r.Order = r.RelationAttribute.Order
			r.RelationAttribute.Placeholder = types.StringPointerValue(resp.RelationAttribute.Placeholder)
			r.Placeholder = r.RelationAttribute.Placeholder
			r.RelationAttribute.PreviewValueFormatter = types.StringPointerValue(resp.RelationAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.RelationAttribute.PreviewValueFormatter
			r.RelationAttribute.Protected = types.BoolPointerValue(resp.RelationAttribute.Protected)
			r.Protected = r.RelationAttribute.Protected
			r.RelationAttribute.Readonly = types.BoolPointerValue(resp.RelationAttribute.Readonly)
			r.Readonly = r.RelationAttribute.Readonly
			if resp.RelationAttribute.RelationAffinityMode != nil {
				r.RelationAttribute.RelationAffinityMode = types.StringValue(string(*resp.RelationAttribute.RelationAffinityMode))
			} else {
				r.RelationAttribute.RelationAffinityMode = types.StringNull()
			}
			if resp.RelationAttribute.RelationType != nil {
				r.RelationAttribute.RelationType = types.StringValue(string(*resp.RelationAttribute.RelationType))
			} else {
				r.RelationAttribute.RelationType = types.StringNull()
			}
			r.RelationAttribute.RenderCondition = types.StringPointerValue(resp.RelationAttribute.RenderCondition)
			r.RenderCondition = r.RelationAttribute.RenderCondition
			r.RelationAttribute.Required = types.BoolPointerValue(resp.RelationAttribute.Required)
			r.Required = r.RelationAttribute.Required
			if len(resp.RelationAttribute.ReverseAttributes) > 0 {
				r.RelationAttribute.ReverseAttributes = make(map[string]types.String)
				for key, value1 := range resp.RelationAttribute.ReverseAttributes {
					r.RelationAttribute.ReverseAttributes[key] = types.StringValue(value1)
				}
			}
			r.RelationAttribute.SearchPlaceholder = types.StringPointerValue(resp.RelationAttribute.SearchPlaceholder)
			if len(r.RelationAttribute.SettingsFlag) > len(resp.RelationAttribute.SettingsFlag) {
				r.RelationAttribute.SettingsFlag = r.RelationAttribute.SettingsFlag[:len(resp.RelationAttribute.SettingsFlag)]
			}
			for settingsFlagCount21, settingsFlagItem21 := range resp.RelationAttribute.SettingsFlag {
				var settingsFlag43 tfTypes.SettingFlag
				settingsFlag43.Enabled = types.BoolPointerValue(settingsFlagItem21.Enabled)
				settingsFlag43.Name = types.StringPointerValue(settingsFlagItem21.Name)
				if settingsFlagCount21+1 > len(r.RelationAttribute.SettingsFlag) {
					r.RelationAttribute.SettingsFlag = append(r.RelationAttribute.SettingsFlag, settingsFlag43)
				} else {
					r.RelationAttribute.SettingsFlag[settingsFlagCount21].Enabled = settingsFlag43.Enabled
					r.RelationAttribute.SettingsFlag[settingsFlagCount21].Name = settingsFlag43.Name
				}
			}
			r.RelationAttribute.ShowInTable = types.BoolPointerValue(resp.RelationAttribute.ShowInTable)
			r.ShowInTable = r.RelationAttribute.ShowInTable
			r.RelationAttribute.Sortable = types.BoolPointerValue(resp.RelationAttribute.Sortable)
			r.Sortable = r.RelationAttribute.Sortable
			if len(r.RelationAttribute.SummaryFields) > len(resp.RelationAttribute.SummaryFields) {
				r.RelationAttribute.SummaryFields = r.RelationAttribute.SummaryFields[:len(resp.RelationAttribute.SummaryFields)]
			}
			for summaryFieldsCount, summaryFieldsItem := range resp.RelationAttribute.SummaryFields {
				var summaryFields1 tfTypes.SummaryFields
				if summaryFieldsItem.Str != nil {
					summaryFields1.Str = types.StringPointerValue(summaryFieldsItem.Str)
				}
				if summaryFieldsItem.SummaryField != nil {
					summaryFields1.SummaryField = &tfTypes.SummaryField{}
					summaryFields1.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
					summaryFields1.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
				}
				if summaryFieldsCount+1 > len(r.RelationAttribute.SummaryFields) {
					r.RelationAttribute.SummaryFields = append(r.RelationAttribute.SummaryFields, summaryFields1)
				} else {
					r.RelationAttribute.SummaryFields[summaryFieldsCount].Str = summaryFields1.Str
					r.RelationAttribute.SummaryFields[summaryFieldsCount].SummaryField = summaryFields1.SummaryField
				}
			}
			if resp.RelationAttribute.Type != nil {
				r.RelationAttribute.Type = types.StringValue(string(*resp.RelationAttribute.Type))
			} else {
				r.RelationAttribute.Type = types.StringNull()
			}
			r.RelationAttribute.ValueFormatter = types.StringPointerValue(resp.RelationAttribute.ValueFormatter)
			r.ValueFormatter = r.RelationAttribute.ValueFormatter
		}
		if resp.RepeatableAttribute != nil {
			r.RepeatableAttribute = &tfTypes.RepeatableAttribute{}
			r.RepeatableAttribute.Purpose = []types.String{}
			for _, v := range resp.RepeatableAttribute.Purpose {
				r.RepeatableAttribute.Purpose = append(r.RepeatableAttribute.Purpose, types.StringValue(v))
			}
			if resp.RepeatableAttribute.Constraints == nil {
				r.RepeatableAttribute.Constraints = nil
			} else {
				r.RepeatableAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.RepeatableAttribute.DefaultValue == nil {
				r.RepeatableAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult21, _ := json.Marshal(resp.RepeatableAttribute.DefaultValue)
				r.RepeatableAttribute.DefaultValue = types.StringValue(string(defaultValueResult21))
			}
			r.RepeatableAttribute.Deprecated = types.BoolPointerValue(resp.RepeatableAttribute.Deprecated)
			r.Deprecated = r.RepeatableAttribute.Deprecated
			r.RepeatableAttribute.EnableRelationPicker = types.BoolPointerValue(resp.RepeatableAttribute.EnableRelationPicker)
			r.RepeatableAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.RepeatableAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.RepeatableAttribute.EntityBuilderDisableEdit
			r.RepeatableAttribute.FeatureFlag = types.StringPointerValue(resp.RepeatableAttribute.FeatureFlag)
			r.FeatureFlag = r.RepeatableAttribute.FeatureFlag
			r.RepeatableAttribute.Group = types.StringPointerValue(resp.RepeatableAttribute.Group)
			r.Group = r.RepeatableAttribute.Group
			r.RepeatableAttribute.HasPrimary = types.BoolPointerValue(resp.RepeatableAttribute.HasPrimary)
			r.RepeatableAttribute.Hidden = types.BoolPointerValue(resp.RepeatableAttribute.Hidden)
			r.Hidden = r.RepeatableAttribute.Hidden
			r.RepeatableAttribute.HideLabel = types.BoolPointerValue(resp.RepeatableAttribute.HideLabel)
			r.HideLabel = r.RepeatableAttribute.HideLabel
			r.RepeatableAttribute.Icon = types.StringPointerValue(resp.RepeatableAttribute.Icon)
			r.Icon = r.RepeatableAttribute.Icon
			r.RepeatableAttribute.ID = types.StringPointerValue(resp.RepeatableAttribute.ID)
			r.ID = r.RepeatableAttribute.ID
			if resp.RepeatableAttribute.InfoHelpers == nil {
				r.RepeatableAttribute.InfoHelpers = nil
			} else {
				r.RepeatableAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.RepeatableAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.RepeatableAttribute.InfoHelpers.HintCustomComponent)
				r.RepeatableAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.RepeatableAttribute.InfoHelpers.HintText)
				r.RepeatableAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.RepeatableAttribute.InfoHelpers.HintTextKey)
				r.RepeatableAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.RepeatableAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.RepeatableAttribute.Label = types.StringValue(resp.RepeatableAttribute.Label)
			r.Label = r.RepeatableAttribute.Label
			r.RepeatableAttribute.Layout = types.StringPointerValue(resp.RepeatableAttribute.Layout)
			r.Layout = r.RepeatableAttribute.Layout
			r.RepeatableAttribute.Name = types.StringValue(resp.RepeatableAttribute.Name)
			r.Name = r.RepeatableAttribute.Name
			r.RepeatableAttribute.Order = types.Int64PointerValue(resp.RepeatableAttribute.Order)
			r.Order = r.RepeatableAttribute.Order
			r.RepeatableAttribute.Placeholder = types.StringPointerValue(resp.RepeatableAttribute.Placeholder)
			r.Placeholder = r.RepeatableAttribute.Placeholder
			r.RepeatableAttribute.PreviewValueFormatter = types.StringPointerValue(resp.RepeatableAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.RepeatableAttribute.PreviewValueFormatter
			r.RepeatableAttribute.Protected = types.BoolPointerValue(resp.RepeatableAttribute.Protected)
			r.Protected = r.RepeatableAttribute.Protected
			r.RepeatableAttribute.Readonly = types.BoolPointerValue(resp.RepeatableAttribute.Readonly)
			r.Readonly = r.RepeatableAttribute.Readonly
			if resp.RepeatableAttribute.RelationAffinityMode != nil {
				r.RepeatableAttribute.RelationAffinityMode = types.StringValue(string(*resp.RepeatableAttribute.RelationAffinityMode))
			} else {
				r.RepeatableAttribute.RelationAffinityMode = types.StringNull()
			}
			r.RepeatableAttribute.RenderCondition = types.StringPointerValue(resp.RepeatableAttribute.RenderCondition)
			r.RenderCondition = r.RepeatableAttribute.RenderCondition
			r.RepeatableAttribute.Repeatable = types.BoolPointerValue(resp.RepeatableAttribute.Repeatable)
			r.RepeatableAttribute.Required = types.BoolPointerValue(resp.RepeatableAttribute.Required)
			r.Required = r.RepeatableAttribute.Required
			if len(r.RepeatableAttribute.SettingsFlag) > len(resp.RepeatableAttribute.SettingsFlag) {
				r.RepeatableAttribute.SettingsFlag = r.RepeatableAttribute.SettingsFlag[:len(resp.RepeatableAttribute.SettingsFlag)]
			}
			for settingsFlagCount22, settingsFlagItem22 := range resp.RepeatableAttribute.SettingsFlag {
				var settingsFlag45 tfTypes.SettingFlag
				settingsFlag45.Enabled = types.BoolPointerValue(settingsFlagItem22.Enabled)
				settingsFlag45.Name = types.StringPointerValue(settingsFlagItem22.Name)
				if settingsFlagCount22+1 > len(r.RepeatableAttribute.SettingsFlag) {
					r.RepeatableAttribute.SettingsFlag = append(r.RepeatableAttribute.SettingsFlag, settingsFlag45)
				} else {
					r.RepeatableAttribute.SettingsFlag[settingsFlagCount22].Enabled = settingsFlag45.Enabled
					r.RepeatableAttribute.SettingsFlag[settingsFlagCount22].Name = settingsFlag45.Name
				}
			}
			r.RepeatableAttribute.ShowInTable = types.BoolPointerValue(resp.RepeatableAttribute.ShowInTable)
			r.ShowInTable = r.RepeatableAttribute.ShowInTable
			r.RepeatableAttribute.Sortable = types.BoolPointerValue(resp.RepeatableAttribute.Sortable)
			r.Sortable = r.RepeatableAttribute.Sortable
			if resp.RepeatableAttribute.Type != nil {
				r.RepeatableAttribute.Type = types.StringValue(string(*resp.RepeatableAttribute.Type))
			} else {
				r.RepeatableAttribute.Type = types.StringNull()
			}
			r.RepeatableAttribute.ValueFormatter = types.StringPointerValue(resp.RepeatableAttribute.ValueFormatter)
			r.ValueFormatter = r.RepeatableAttribute.ValueFormatter
		}
		if resp.SelectAttribute != nil {
			r.SelectAttribute = &tfTypes.SelectAttribute{}
			r.SelectAttribute.Purpose = []types.String{}
			for _, v := range resp.SelectAttribute.Purpose {
				r.SelectAttribute.Purpose = append(r.SelectAttribute.Purpose, types.StringValue(v))
			}
			r.SelectAttribute.AllowAny = types.BoolPointerValue(resp.SelectAttribute.AllowAny)
			if resp.SelectAttribute.Constraints == nil {
				r.SelectAttribute.Constraints = nil
			} else {
				r.SelectAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.SelectAttribute.DefaultValue == nil {
				r.SelectAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult22, _ := json.Marshal(resp.SelectAttribute.DefaultValue)
				r.SelectAttribute.DefaultValue = types.StringValue(string(defaultValueResult22))
			}
			r.SelectAttribute.Deprecated = types.BoolPointerValue(resp.SelectAttribute.Deprecated)
			r.Deprecated = r.SelectAttribute.Deprecated
			r.SelectAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.SelectAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.SelectAttribute.EntityBuilderDisableEdit
			r.SelectAttribute.FeatureFlag = types.StringPointerValue(resp.SelectAttribute.FeatureFlag)
			r.FeatureFlag = r.SelectAttribute.FeatureFlag
			r.SelectAttribute.Group = types.StringPointerValue(resp.SelectAttribute.Group)
			r.Group = r.SelectAttribute.Group
			r.SelectAttribute.Hidden = types.BoolPointerValue(resp.SelectAttribute.Hidden)
			r.Hidden = r.SelectAttribute.Hidden
			r.SelectAttribute.HideLabel = types.BoolPointerValue(resp.SelectAttribute.HideLabel)
			r.HideLabel = r.SelectAttribute.HideLabel
			r.SelectAttribute.Icon = types.StringPointerValue(resp.SelectAttribute.Icon)
			r.Icon = r.SelectAttribute.Icon
			r.SelectAttribute.ID = types.StringPointerValue(resp.SelectAttribute.ID)
			r.ID = r.SelectAttribute.ID
			if resp.SelectAttribute.InfoHelpers == nil {
				r.SelectAttribute.InfoHelpers = nil
			} else {
				r.SelectAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.SelectAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.SelectAttribute.InfoHelpers.HintCustomComponent)
				r.SelectAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.SelectAttribute.InfoHelpers.HintText)
				r.SelectAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.SelectAttribute.InfoHelpers.HintTextKey)
				r.SelectAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.SelectAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.SelectAttribute.Label = types.StringValue(resp.SelectAttribute.Label)
			r.Label = r.SelectAttribute.Label
			r.SelectAttribute.Layout = types.StringPointerValue(resp.SelectAttribute.Layout)
			r.Layout = r.SelectAttribute.Layout
			r.SelectAttribute.Name = types.StringValue(resp.SelectAttribute.Name)
			r.Name = r.SelectAttribute.Name
			if len(r.SelectAttribute.Options) > len(resp.SelectAttribute.Options) {
				r.SelectAttribute.Options = r.SelectAttribute.Options[:len(resp.SelectAttribute.Options)]
			}
			for optionsCount1, optionsItem1 := range resp.SelectAttribute.Options {
				var options3 tfTypes.SelectAttributeOptions
				if optionsItem1.Str != nil {
					options3.Str = types.StringPointerValue(optionsItem1.Str)
				}
				if optionsItem1.One != nil {
					options3.One = &tfTypes.Two{}
					options3.One.Title = types.StringPointerValue(optionsItem1.One.Title)
					options3.One.Value = types.StringValue(optionsItem1.One.Value)
				}
				if optionsCount1+1 > len(r.SelectAttribute.Options) {
					r.SelectAttribute.Options = append(r.SelectAttribute.Options, options3)
				} else {
					r.SelectAttribute.Options[optionsCount1].Str = options3.Str
					r.SelectAttribute.Options[optionsCount1].One = options3.One
				}
			}
			r.SelectAttribute.Order = types.Int64PointerValue(resp.SelectAttribute.Order)
			r.Order = r.SelectAttribute.Order
			r.SelectAttribute.Placeholder = types.StringPointerValue(resp.SelectAttribute.Placeholder)
			r.Placeholder = r.SelectAttribute.Placeholder
			r.SelectAttribute.PreviewValueFormatter = types.StringPointerValue(resp.SelectAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.SelectAttribute.PreviewValueFormatter
			r.SelectAttribute.Protected = types.BoolPointerValue(resp.SelectAttribute.Protected)
			r.Protected = r.SelectAttribute.Protected
			r.SelectAttribute.Readonly = types.BoolPointerValue(resp.SelectAttribute.Readonly)
			r.Readonly = r.SelectAttribute.Readonly
			r.SelectAttribute.RenderCondition = types.StringPointerValue(resp.SelectAttribute.RenderCondition)
			r.RenderCondition = r.SelectAttribute.RenderCondition
			r.SelectAttribute.Required = types.BoolPointerValue(resp.SelectAttribute.Required)
			r.Required = r.SelectAttribute.Required
			if len(r.SelectAttribute.SettingsFlag) > len(resp.SelectAttribute.SettingsFlag) {
				r.SelectAttribute.SettingsFlag = r.SelectAttribute.SettingsFlag[:len(resp.SelectAttribute.SettingsFlag)]
			}
			for settingsFlagCount23, settingsFlagItem23 := range resp.SelectAttribute.SettingsFlag {
				var settingsFlag47 tfTypes.SettingFlag
				settingsFlag47.Enabled = types.BoolPointerValue(settingsFlagItem23.Enabled)
				settingsFlag47.Name = types.StringPointerValue(settingsFlagItem23.Name)
				if settingsFlagCount23+1 > len(r.SelectAttribute.SettingsFlag) {
					r.SelectAttribute.SettingsFlag = append(r.SelectAttribute.SettingsFlag, settingsFlag47)
				} else {
					r.SelectAttribute.SettingsFlag[settingsFlagCount23].Enabled = settingsFlag47.Enabled
					r.SelectAttribute.SettingsFlag[settingsFlagCount23].Name = settingsFlag47.Name
				}
			}
			r.SelectAttribute.ShowInTable = types.BoolPointerValue(resp.SelectAttribute.ShowInTable)
			r.ShowInTable = r.SelectAttribute.ShowInTable
			r.SelectAttribute.Sortable = types.BoolPointerValue(resp.SelectAttribute.Sortable)
			r.Sortable = r.SelectAttribute.Sortable
			if resp.SelectAttribute.Type != nil {
				r.SelectAttribute.Type = types.StringValue(string(*resp.SelectAttribute.Type))
			} else {
				r.SelectAttribute.Type = types.StringNull()
			}
			r.SelectAttribute.ValueFormatter = types.StringPointerValue(resp.SelectAttribute.ValueFormatter)
			r.ValueFormatter = r.SelectAttribute.ValueFormatter
		}
		if resp.SequenceAttribute != nil {
			r.SequenceAttribute = &tfTypes.SequenceAttribute{}
			r.SequenceAttribute.Purpose = []types.String{}
			for _, v := range resp.SequenceAttribute.Purpose {
				r.SequenceAttribute.Purpose = append(r.SequenceAttribute.Purpose, types.StringValue(v))
			}
			if resp.SequenceAttribute.Constraints == nil {
				r.SequenceAttribute.Constraints = nil
			} else {
				r.SequenceAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.SequenceAttribute.DefaultValue == nil {
				r.SequenceAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult23, _ := json.Marshal(resp.SequenceAttribute.DefaultValue)
				r.SequenceAttribute.DefaultValue = types.StringValue(string(defaultValueResult23))
			}
			r.SequenceAttribute.Deprecated = types.BoolPointerValue(resp.SequenceAttribute.Deprecated)
			r.Deprecated = r.SequenceAttribute.Deprecated
			r.SequenceAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.SequenceAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.SequenceAttribute.EntityBuilderDisableEdit
			r.SequenceAttribute.FeatureFlag = types.StringPointerValue(resp.SequenceAttribute.FeatureFlag)
			r.FeatureFlag = r.SequenceAttribute.FeatureFlag
			r.SequenceAttribute.Group = types.StringPointerValue(resp.SequenceAttribute.Group)
			r.Group = r.SequenceAttribute.Group
			r.SequenceAttribute.Hidden = types.BoolPointerValue(resp.SequenceAttribute.Hidden)
			r.Hidden = r.SequenceAttribute.Hidden
			r.SequenceAttribute.HideLabel = types.BoolPointerValue(resp.SequenceAttribute.HideLabel)
			r.HideLabel = r.SequenceAttribute.HideLabel
			r.SequenceAttribute.Icon = types.StringPointerValue(resp.SequenceAttribute.Icon)
			r.Icon = r.SequenceAttribute.Icon
			r.SequenceAttribute.ID = types.StringPointerValue(resp.SequenceAttribute.ID)
			r.ID = r.SequenceAttribute.ID
			if resp.SequenceAttribute.InfoHelpers == nil {
				r.SequenceAttribute.InfoHelpers = nil
			} else {
				r.SequenceAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.SequenceAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.SequenceAttribute.InfoHelpers.HintCustomComponent)
				r.SequenceAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.SequenceAttribute.InfoHelpers.HintText)
				r.SequenceAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.SequenceAttribute.InfoHelpers.HintTextKey)
				r.SequenceAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.SequenceAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.SequenceAttribute.Label = types.StringValue(resp.SequenceAttribute.Label)
			r.Label = r.SequenceAttribute.Label
			r.SequenceAttribute.Layout = types.StringPointerValue(resp.SequenceAttribute.Layout)
			r.Layout = r.SequenceAttribute.Layout
			r.SequenceAttribute.Name = types.StringValue(resp.SequenceAttribute.Name)
			r.Name = r.SequenceAttribute.Name
			r.SequenceAttribute.Order = types.Int64PointerValue(resp.SequenceAttribute.Order)
			r.Order = r.SequenceAttribute.Order
			r.SequenceAttribute.Placeholder = types.StringPointerValue(resp.SequenceAttribute.Placeholder)
			r.Placeholder = r.SequenceAttribute.Placeholder
			r.SequenceAttribute.Prefix = types.StringPointerValue(resp.SequenceAttribute.Prefix)
			r.SequenceAttribute.PreviewValueFormatter = types.StringPointerValue(resp.SequenceAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.SequenceAttribute.PreviewValueFormatter
			r.SequenceAttribute.Protected = types.BoolPointerValue(resp.SequenceAttribute.Protected)
			r.Protected = r.SequenceAttribute.Protected
			r.SequenceAttribute.Readonly = types.BoolPointerValue(resp.SequenceAttribute.Readonly)
			r.Readonly = r.SequenceAttribute.Readonly
			r.SequenceAttribute.RenderCondition = types.StringPointerValue(resp.SequenceAttribute.RenderCondition)
			r.RenderCondition = r.SequenceAttribute.RenderCondition
			r.SequenceAttribute.Required = types.BoolPointerValue(resp.SequenceAttribute.Required)
			r.Required = r.SequenceAttribute.Required
			if len(r.SequenceAttribute.SettingsFlag) > len(resp.SequenceAttribute.SettingsFlag) {
				r.SequenceAttribute.SettingsFlag = r.SequenceAttribute.SettingsFlag[:len(resp.SequenceAttribute.SettingsFlag)]
			}
			for settingsFlagCount24, settingsFlagItem24 := range resp.SequenceAttribute.SettingsFlag {
				var settingsFlag49 tfTypes.SettingFlag
				settingsFlag49.Enabled = types.BoolPointerValue(settingsFlagItem24.Enabled)
				settingsFlag49.Name = types.StringPointerValue(settingsFlagItem24.Name)
				if settingsFlagCount24+1 > len(r.SequenceAttribute.SettingsFlag) {
					r.SequenceAttribute.SettingsFlag = append(r.SequenceAttribute.SettingsFlag, settingsFlag49)
				} else {
					r.SequenceAttribute.SettingsFlag[settingsFlagCount24].Enabled = settingsFlag49.Enabled
					r.SequenceAttribute.SettingsFlag[settingsFlagCount24].Name = settingsFlag49.Name
				}
			}
			r.SequenceAttribute.ShowInTable = types.BoolPointerValue(resp.SequenceAttribute.ShowInTable)
			r.ShowInTable = r.SequenceAttribute.ShowInTable
			r.SequenceAttribute.Sortable = types.BoolPointerValue(resp.SequenceAttribute.Sortable)
			r.Sortable = r.SequenceAttribute.Sortable
			r.SequenceAttribute.StartNumber = types.Int64PointerValue(resp.SequenceAttribute.StartNumber)
			if resp.SequenceAttribute.Type != nil {
				r.SequenceAttribute.Type = types.StringValue(string(*resp.SequenceAttribute.Type))
			} else {
				r.SequenceAttribute.Type = types.StringNull()
			}
			r.SequenceAttribute.ValueFormatter = types.StringPointerValue(resp.SequenceAttribute.ValueFormatter)
			r.ValueFormatter = r.SequenceAttribute.ValueFormatter
		}
		if resp.StatusAttribute != nil {
			r.StatusAttribute = &tfTypes.StatusAttribute{}
			r.StatusAttribute.Purpose = []types.String{}
			for _, v := range resp.StatusAttribute.Purpose {
				r.StatusAttribute.Purpose = append(r.StatusAttribute.Purpose, types.StringValue(v))
			}
			if resp.StatusAttribute.Constraints == nil {
				r.StatusAttribute.Constraints = nil
			} else {
				r.StatusAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.StatusAttribute.DefaultValue == nil {
				r.StatusAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult24, _ := json.Marshal(resp.StatusAttribute.DefaultValue)
				r.StatusAttribute.DefaultValue = types.StringValue(string(defaultValueResult24))
			}
			r.StatusAttribute.Deprecated = types.BoolPointerValue(resp.StatusAttribute.Deprecated)
			r.Deprecated = r.StatusAttribute.Deprecated
			r.StatusAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.StatusAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.StatusAttribute.EntityBuilderDisableEdit
			r.StatusAttribute.FeatureFlag = types.StringPointerValue(resp.StatusAttribute.FeatureFlag)
			r.FeatureFlag = r.StatusAttribute.FeatureFlag
			r.StatusAttribute.Group = types.StringPointerValue(resp.StatusAttribute.Group)
			r.Group = r.StatusAttribute.Group
			r.StatusAttribute.Hidden = types.BoolPointerValue(resp.StatusAttribute.Hidden)
			r.Hidden = r.StatusAttribute.Hidden
			r.StatusAttribute.HideLabel = types.BoolPointerValue(resp.StatusAttribute.HideLabel)
			r.HideLabel = r.StatusAttribute.HideLabel
			r.StatusAttribute.Icon = types.StringPointerValue(resp.StatusAttribute.Icon)
			r.Icon = r.StatusAttribute.Icon
			r.StatusAttribute.ID = types.StringPointerValue(resp.StatusAttribute.ID)
			r.ID = r.StatusAttribute.ID
			if resp.StatusAttribute.InfoHelpers == nil {
				r.StatusAttribute.InfoHelpers = nil
			} else {
				r.StatusAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.StatusAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.StatusAttribute.InfoHelpers.HintCustomComponent)
				r.StatusAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.StatusAttribute.InfoHelpers.HintText)
				r.StatusAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.StatusAttribute.InfoHelpers.HintTextKey)
				r.StatusAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.StatusAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.StatusAttribute.Label = types.StringValue(resp.StatusAttribute.Label)
			r.Label = r.StatusAttribute.Label
			r.StatusAttribute.Layout = types.StringPointerValue(resp.StatusAttribute.Layout)
			r.Layout = r.StatusAttribute.Layout
			r.StatusAttribute.Name = types.StringValue(resp.StatusAttribute.Name)
			r.Name = r.StatusAttribute.Name
			if len(r.StatusAttribute.Options) > len(resp.StatusAttribute.Options) {
				r.StatusAttribute.Options = r.StatusAttribute.Options[:len(resp.StatusAttribute.Options)]
			}
			for optionsCount2, optionsItem2 := range resp.StatusAttribute.Options {
				var options5 tfTypes.MultiSelectAttributeOptions
				if optionsItem2.Str != nil {
					options5.Str = types.StringPointerValue(optionsItem2.Str)
				}
				if optionsItem2.Options2 != nil {
					options5.Two = &tfTypes.Two{}
					options5.Two.Title = types.StringPointerValue(optionsItem2.Options2.Title)
					options5.Two.Value = types.StringValue(optionsItem2.Options2.Value)
				}
				if optionsCount2+1 > len(r.StatusAttribute.Options) {
					r.StatusAttribute.Options = append(r.StatusAttribute.Options, options5)
				} else {
					r.StatusAttribute.Options[optionsCount2].Str = options5.Str
					r.StatusAttribute.Options[optionsCount2].Two = options5.Two
				}
			}
			r.StatusAttribute.Order = types.Int64PointerValue(resp.StatusAttribute.Order)
			r.Order = r.StatusAttribute.Order
			r.StatusAttribute.Placeholder = types.StringPointerValue(resp.StatusAttribute.Placeholder)
			r.Placeholder = r.StatusAttribute.Placeholder
			r.StatusAttribute.PreviewValueFormatter = types.StringPointerValue(resp.StatusAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.StatusAttribute.PreviewValueFormatter
			r.StatusAttribute.Protected = types.BoolPointerValue(resp.StatusAttribute.Protected)
			r.Protected = r.StatusAttribute.Protected
			r.StatusAttribute.Readonly = types.BoolPointerValue(resp.StatusAttribute.Readonly)
			r.Readonly = r.StatusAttribute.Readonly
			r.StatusAttribute.RenderCondition = types.StringPointerValue(resp.StatusAttribute.RenderCondition)
			r.RenderCondition = r.StatusAttribute.RenderCondition
			r.StatusAttribute.Required = types.BoolPointerValue(resp.StatusAttribute.Required)
			r.Required = r.StatusAttribute.Required
			if len(r.StatusAttribute.SettingsFlag) > len(resp.StatusAttribute.SettingsFlag) {
				r.StatusAttribute.SettingsFlag = r.StatusAttribute.SettingsFlag[:len(resp.StatusAttribute.SettingsFlag)]
			}
			for settingsFlagCount25, settingsFlagItem25 := range resp.StatusAttribute.SettingsFlag {
				var settingsFlag51 tfTypes.SettingFlag
				settingsFlag51.Enabled = types.BoolPointerValue(settingsFlagItem25.Enabled)
				settingsFlag51.Name = types.StringPointerValue(settingsFlagItem25.Name)
				if settingsFlagCount25+1 > len(r.StatusAttribute.SettingsFlag) {
					r.StatusAttribute.SettingsFlag = append(r.StatusAttribute.SettingsFlag, settingsFlag51)
				} else {
					r.StatusAttribute.SettingsFlag[settingsFlagCount25].Enabled = settingsFlag51.Enabled
					r.StatusAttribute.SettingsFlag[settingsFlagCount25].Name = settingsFlag51.Name
				}
			}
			r.StatusAttribute.ShowInTable = types.BoolPointerValue(resp.StatusAttribute.ShowInTable)
			r.ShowInTable = r.StatusAttribute.ShowInTable
			r.StatusAttribute.Sortable = types.BoolPointerValue(resp.StatusAttribute.Sortable)
			r.Sortable = r.StatusAttribute.Sortable
			if resp.StatusAttribute.Type != nil {
				r.StatusAttribute.Type = types.StringValue(string(*resp.StatusAttribute.Type))
			} else {
				r.StatusAttribute.Type = types.StringNull()
			}
			r.StatusAttribute.ValueFormatter = types.StringPointerValue(resp.StatusAttribute.ValueFormatter)
			r.ValueFormatter = r.StatusAttribute.ValueFormatter
		}
		if resp.TagsAttribute != nil {
			r.TagsAttribute = &tfTypes.TagsAttribute{}
			r.TagsAttribute.Purpose = []types.String{}
			for _, v := range resp.TagsAttribute.Purpose {
				r.TagsAttribute.Purpose = append(r.TagsAttribute.Purpose, types.StringValue(v))
			}
			if resp.TagsAttribute.Constraints == nil {
				r.TagsAttribute.Constraints = nil
			} else {
				r.TagsAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.TagsAttribute.DefaultValue == nil {
				r.TagsAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult25, _ := json.Marshal(resp.TagsAttribute.DefaultValue)
				r.TagsAttribute.DefaultValue = types.StringValue(string(defaultValueResult25))
			}
			r.TagsAttribute.Deprecated = types.BoolPointerValue(resp.TagsAttribute.Deprecated)
			r.Deprecated = r.TagsAttribute.Deprecated
			r.TagsAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.TagsAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.TagsAttribute.EntityBuilderDisableEdit
			r.TagsAttribute.FeatureFlag = types.StringPointerValue(resp.TagsAttribute.FeatureFlag)
			r.FeatureFlag = r.TagsAttribute.FeatureFlag
			r.TagsAttribute.Group = types.StringPointerValue(resp.TagsAttribute.Group)
			r.Group = r.TagsAttribute.Group
			r.TagsAttribute.Hidden = types.BoolPointerValue(resp.TagsAttribute.Hidden)
			r.Hidden = r.TagsAttribute.Hidden
			r.TagsAttribute.HideLabel = types.BoolPointerValue(resp.TagsAttribute.HideLabel)
			r.HideLabel = r.TagsAttribute.HideLabel
			r.TagsAttribute.Icon = types.StringPointerValue(resp.TagsAttribute.Icon)
			r.Icon = r.TagsAttribute.Icon
			r.TagsAttribute.ID = types.StringPointerValue(resp.TagsAttribute.ID)
			r.ID = r.TagsAttribute.ID
			if resp.TagsAttribute.InfoHelpers == nil {
				r.TagsAttribute.InfoHelpers = nil
			} else {
				r.TagsAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.TagsAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.TagsAttribute.InfoHelpers.HintCustomComponent)
				r.TagsAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.TagsAttribute.InfoHelpers.HintText)
				r.TagsAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.TagsAttribute.InfoHelpers.HintTextKey)
				r.TagsAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.TagsAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.TagsAttribute.Label = types.StringValue(resp.TagsAttribute.Label)
			r.Label = r.TagsAttribute.Label
			r.TagsAttribute.Layout = types.StringPointerValue(resp.TagsAttribute.Layout)
			r.Layout = r.TagsAttribute.Layout
			r.TagsAttribute.Name = types.StringValue(resp.TagsAttribute.Name)
			r.Name = r.TagsAttribute.Name
			r.TagsAttribute.Options = []types.String{}
			for _, v := range resp.TagsAttribute.Options {
				r.TagsAttribute.Options = append(r.TagsAttribute.Options, types.StringValue(v))
			}
			r.TagsAttribute.Order = types.Int64PointerValue(resp.TagsAttribute.Order)
			r.Order = r.TagsAttribute.Order
			r.TagsAttribute.Placeholder = types.StringPointerValue(resp.TagsAttribute.Placeholder)
			r.Placeholder = r.TagsAttribute.Placeholder
			r.TagsAttribute.PreviewValueFormatter = types.StringPointerValue(resp.TagsAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.TagsAttribute.PreviewValueFormatter
			r.TagsAttribute.Protected = types.BoolPointerValue(resp.TagsAttribute.Protected)
			r.Protected = r.TagsAttribute.Protected
			r.TagsAttribute.Readonly = types.BoolPointerValue(resp.TagsAttribute.Readonly)
			r.Readonly = r.TagsAttribute.Readonly
			r.TagsAttribute.RenderCondition = types.StringPointerValue(resp.TagsAttribute.RenderCondition)
			r.RenderCondition = r.TagsAttribute.RenderCondition
			r.TagsAttribute.Required = types.BoolPointerValue(resp.TagsAttribute.Required)
			r.Required = r.TagsAttribute.Required
			if len(r.TagsAttribute.SettingsFlag) > len(resp.TagsAttribute.SettingsFlag) {
				r.TagsAttribute.SettingsFlag = r.TagsAttribute.SettingsFlag[:len(resp.TagsAttribute.SettingsFlag)]
			}
			for settingsFlagCount26, settingsFlagItem26 := range resp.TagsAttribute.SettingsFlag {
				var settingsFlag53 tfTypes.SettingFlag
				settingsFlag53.Enabled = types.BoolPointerValue(settingsFlagItem26.Enabled)
				settingsFlag53.Name = types.StringPointerValue(settingsFlagItem26.Name)
				if settingsFlagCount26+1 > len(r.TagsAttribute.SettingsFlag) {
					r.TagsAttribute.SettingsFlag = append(r.TagsAttribute.SettingsFlag, settingsFlag53)
				} else {
					r.TagsAttribute.SettingsFlag[settingsFlagCount26].Enabled = settingsFlag53.Enabled
					r.TagsAttribute.SettingsFlag[settingsFlagCount26].Name = settingsFlag53.Name
				}
			}
			r.TagsAttribute.ShowInTable = types.BoolPointerValue(resp.TagsAttribute.ShowInTable)
			r.ShowInTable = r.TagsAttribute.ShowInTable
			r.TagsAttribute.Sortable = types.BoolPointerValue(resp.TagsAttribute.Sortable)
			r.Sortable = r.TagsAttribute.Sortable
			r.TagsAttribute.Suggestions = []types.String{}
			for _, v := range resp.TagsAttribute.Suggestions {
				r.TagsAttribute.Suggestions = append(r.TagsAttribute.Suggestions, types.StringValue(v))
			}
			if resp.TagsAttribute.Type != nil {
				r.TagsAttribute.Type = types.StringValue(string(*resp.TagsAttribute.Type))
			} else {
				r.TagsAttribute.Type = types.StringNull()
			}
			r.TagsAttribute.ValueFormatter = types.StringPointerValue(resp.TagsAttribute.ValueFormatter)
			r.ValueFormatter = r.TagsAttribute.ValueFormatter
		}
		if resp.TextAttribute != nil {
			r.TextAttribute = &tfTypes.TextAttribute{}
			r.TextAttribute.Purpose = []types.String{}
			for _, v := range resp.TextAttribute.Purpose {
				r.TextAttribute.Purpose = append(r.TextAttribute.Purpose, types.StringValue(v))
			}
			if resp.TextAttribute.Constraints == nil {
				r.TextAttribute.Constraints = nil
			} else {
				r.TextAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.TextAttribute.DefaultValue == nil {
				r.TextAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult26, _ := json.Marshal(resp.TextAttribute.DefaultValue)
				r.TextAttribute.DefaultValue = types.StringValue(string(defaultValueResult26))
			}
			r.TextAttribute.Deprecated = types.BoolPointerValue(resp.TextAttribute.Deprecated)
			r.Deprecated = r.TextAttribute.Deprecated
			r.TextAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.TextAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.TextAttribute.EntityBuilderDisableEdit
			r.TextAttribute.FeatureFlag = types.StringPointerValue(resp.TextAttribute.FeatureFlag)
			r.FeatureFlag = r.TextAttribute.FeatureFlag
			r.TextAttribute.Group = types.StringPointerValue(resp.TextAttribute.Group)
			r.Group = r.TextAttribute.Group
			r.TextAttribute.Hidden = types.BoolPointerValue(resp.TextAttribute.Hidden)
			r.Hidden = r.TextAttribute.Hidden
			r.TextAttribute.HideLabel = types.BoolPointerValue(resp.TextAttribute.HideLabel)
			r.HideLabel = r.TextAttribute.HideLabel
			r.TextAttribute.Icon = types.StringPointerValue(resp.TextAttribute.Icon)
			r.Icon = r.TextAttribute.Icon
			r.TextAttribute.ID = types.StringPointerValue(resp.TextAttribute.ID)
			r.ID = r.TextAttribute.ID
			if resp.TextAttribute.InfoHelpers == nil {
				r.TextAttribute.InfoHelpers = nil
			} else {
				r.TextAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.TextAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.TextAttribute.InfoHelpers.HintCustomComponent)
				r.TextAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.TextAttribute.InfoHelpers.HintText)
				r.TextAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.TextAttribute.InfoHelpers.HintTextKey)
				r.TextAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.TextAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.TextAttribute.Label = types.StringValue(resp.TextAttribute.Label)
			r.Label = r.TextAttribute.Label
			r.TextAttribute.Layout = types.StringPointerValue(resp.TextAttribute.Layout)
			r.Layout = r.TextAttribute.Layout
			r.TextAttribute.Multiline = types.BoolPointerValue(resp.TextAttribute.Multiline)
			r.TextAttribute.Name = types.StringValue(resp.TextAttribute.Name)
			r.Name = r.TextAttribute.Name
			r.TextAttribute.Order = types.Int64PointerValue(resp.TextAttribute.Order)
			r.Order = r.TextAttribute.Order
			r.TextAttribute.Placeholder = types.StringPointerValue(resp.TextAttribute.Placeholder)
			r.Placeholder = r.TextAttribute.Placeholder
			r.TextAttribute.PreviewValueFormatter = types.StringPointerValue(resp.TextAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.TextAttribute.PreviewValueFormatter
			r.TextAttribute.Protected = types.BoolPointerValue(resp.TextAttribute.Protected)
			r.Protected = r.TextAttribute.Protected
			r.TextAttribute.Readonly = types.BoolPointerValue(resp.TextAttribute.Readonly)
			r.Readonly = r.TextAttribute.Readonly
			r.TextAttribute.RenderCondition = types.StringPointerValue(resp.TextAttribute.RenderCondition)
			r.RenderCondition = r.TextAttribute.RenderCondition
			r.TextAttribute.Required = types.BoolPointerValue(resp.TextAttribute.Required)
			r.Required = r.TextAttribute.Required
			if len(r.TextAttribute.SettingsFlag) > len(resp.TextAttribute.SettingsFlag) {
				r.TextAttribute.SettingsFlag = r.TextAttribute.SettingsFlag[:len(resp.TextAttribute.SettingsFlag)]
			}
			for settingsFlagCount27, settingsFlagItem27 := range resp.TextAttribute.SettingsFlag {
				var settingsFlag55 tfTypes.SettingFlag
				settingsFlag55.Enabled = types.BoolPointerValue(settingsFlagItem27.Enabled)
				settingsFlag55.Name = types.StringPointerValue(settingsFlagItem27.Name)
				if settingsFlagCount27+1 > len(r.TextAttribute.SettingsFlag) {
					r.TextAttribute.SettingsFlag = append(r.TextAttribute.SettingsFlag, settingsFlag55)
				} else {
					r.TextAttribute.SettingsFlag[settingsFlagCount27].Enabled = settingsFlag55.Enabled
					r.TextAttribute.SettingsFlag[settingsFlagCount27].Name = settingsFlag55.Name
				}
			}
			r.TextAttribute.ShowInTable = types.BoolPointerValue(resp.TextAttribute.ShowInTable)
			r.ShowInTable = r.TextAttribute.ShowInTable
			r.TextAttribute.Sortable = types.BoolPointerValue(resp.TextAttribute.Sortable)
			r.Sortable = r.TextAttribute.Sortable
			if resp.TextAttribute.Type != nil {
				r.TextAttribute.Type = types.StringValue(string(*resp.TextAttribute.Type))
			} else {
				r.TextAttribute.Type = types.StringNull()
			}
			r.TextAttribute.ValueFormatter = types.StringPointerValue(resp.TextAttribute.ValueFormatter)
			r.ValueFormatter = r.TextAttribute.ValueFormatter
		}
		if resp.UserRelationAttribute != nil {
			r.UserRelationAttribute = &tfTypes.UserRelationAttribute{}
			r.UserRelationAttribute.Purpose = []types.String{}
			for _, v := range resp.UserRelationAttribute.Purpose {
				r.UserRelationAttribute.Purpose = append(r.UserRelationAttribute.Purpose, types.StringValue(v))
			}
			if resp.UserRelationAttribute.Constraints == nil {
				r.UserRelationAttribute.Constraints = nil
			} else {
				r.UserRelationAttribute.Constraints = &tfTypes.AddressRelationAttributeConstraints{}
			}
			if resp.UserRelationAttribute.DefaultValue == nil {
				r.UserRelationAttribute.DefaultValue = types.StringNull()
			} else {
				defaultValueResult27, _ := json.Marshal(resp.UserRelationAttribute.DefaultValue)
				r.UserRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult27))
			}
			r.UserRelationAttribute.Deprecated = types.BoolPointerValue(resp.UserRelationAttribute.Deprecated)
			r.Deprecated = r.UserRelationAttribute.Deprecated
			r.UserRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(resp.UserRelationAttribute.EntityBuilderDisableEdit)
			r.EntityBuilderDisableEdit = r.UserRelationAttribute.EntityBuilderDisableEdit
			r.UserRelationAttribute.FeatureFlag = types.StringPointerValue(resp.UserRelationAttribute.FeatureFlag)
			r.FeatureFlag = r.UserRelationAttribute.FeatureFlag
			r.UserRelationAttribute.Group = types.StringPointerValue(resp.UserRelationAttribute.Group)
			r.Group = r.UserRelationAttribute.Group
			r.UserRelationAttribute.Hidden = types.BoolPointerValue(resp.UserRelationAttribute.Hidden)
			r.Hidden = r.UserRelationAttribute.Hidden
			r.UserRelationAttribute.HideLabel = types.BoolPointerValue(resp.UserRelationAttribute.HideLabel)
			r.HideLabel = r.UserRelationAttribute.HideLabel
			r.UserRelationAttribute.Icon = types.StringPointerValue(resp.UserRelationAttribute.Icon)
			r.Icon = r.UserRelationAttribute.Icon
			r.UserRelationAttribute.ID = types.StringPointerValue(resp.UserRelationAttribute.ID)
			r.ID = r.UserRelationAttribute.ID
			if resp.UserRelationAttribute.InfoHelpers == nil {
				r.UserRelationAttribute.InfoHelpers = nil
			} else {
				r.UserRelationAttribute.InfoHelpers = &tfTypes.AddressRelationAttributeInfoHelpers{}
				r.UserRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.UserRelationAttribute.InfoHelpers.HintCustomComponent)
				r.UserRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(resp.UserRelationAttribute.InfoHelpers.HintText)
				r.UserRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(resp.UserRelationAttribute.InfoHelpers.HintTextKey)
				r.UserRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.UserRelationAttribute.InfoHelpers.HintTooltipPlacement)
			}
			r.UserRelationAttribute.Label = types.StringValue(resp.UserRelationAttribute.Label)
			r.Label = r.UserRelationAttribute.Label
			r.UserRelationAttribute.Layout = types.StringPointerValue(resp.UserRelationAttribute.Layout)
			r.Layout = r.UserRelationAttribute.Layout
			r.UserRelationAttribute.Multiple = types.BoolPointerValue(resp.UserRelationAttribute.Multiple)
			r.UserRelationAttribute.Name = types.StringValue(resp.UserRelationAttribute.Name)
			r.Name = r.UserRelationAttribute.Name
			r.UserRelationAttribute.Order = types.Int64PointerValue(resp.UserRelationAttribute.Order)
			r.Order = r.UserRelationAttribute.Order
			r.UserRelationAttribute.Placeholder = types.StringPointerValue(resp.UserRelationAttribute.Placeholder)
			r.Placeholder = r.UserRelationAttribute.Placeholder
			r.UserRelationAttribute.PreviewValueFormatter = types.StringPointerValue(resp.UserRelationAttribute.PreviewValueFormatter)
			r.PreviewValueFormatter = r.UserRelationAttribute.PreviewValueFormatter
			r.UserRelationAttribute.Protected = types.BoolPointerValue(resp.UserRelationAttribute.Protected)
			r.Protected = r.UserRelationAttribute.Protected
			r.UserRelationAttribute.Readonly = types.BoolPointerValue(resp.UserRelationAttribute.Readonly)
			r.Readonly = r.UserRelationAttribute.Readonly
			r.UserRelationAttribute.RenderCondition = types.StringPointerValue(resp.UserRelationAttribute.RenderCondition)
			r.RenderCondition = r.UserRelationAttribute.RenderCondition
			r.UserRelationAttribute.Required = types.BoolPointerValue(resp.UserRelationAttribute.Required)
			r.Required = r.UserRelationAttribute.Required
			if len(r.UserRelationAttribute.SettingsFlag) > len(resp.UserRelationAttribute.SettingsFlag) {
				r.UserRelationAttribute.SettingsFlag = r.UserRelationAttribute.SettingsFlag[:len(resp.UserRelationAttribute.SettingsFlag)]
			}
			for settingsFlagCount28, settingsFlagItem28 := range resp.UserRelationAttribute.SettingsFlag {
				var settingsFlag57 tfTypes.SettingFlag
				settingsFlag57.Enabled = types.BoolPointerValue(settingsFlagItem28.Enabled)
				settingsFlag57.Name = types.StringPointerValue(settingsFlagItem28.Name)
				if settingsFlagCount28+1 > len(r.UserRelationAttribute.SettingsFlag) {
					r.UserRelationAttribute.SettingsFlag = append(r.UserRelationAttribute.SettingsFlag, settingsFlag57)
				} else {
					r.UserRelationAttribute.SettingsFlag[settingsFlagCount28].Enabled = settingsFlag57.Enabled
					r.UserRelationAttribute.SettingsFlag[settingsFlagCount28].Name = settingsFlag57.Name
				}
			}
			r.UserRelationAttribute.ShowInTable = types.BoolPointerValue(resp.UserRelationAttribute.ShowInTable)
			r.ShowInTable = r.UserRelationAttribute.ShowInTable
			r.UserRelationAttribute.Sortable = types.BoolPointerValue(resp.UserRelationAttribute.Sortable)
			r.Sortable = r.UserRelationAttribute.Sortable
			if resp.UserRelationAttribute.Type != nil {
				r.UserRelationAttribute.Type = types.StringValue(string(*resp.UserRelationAttribute.Type))
			} else {
				r.UserRelationAttribute.Type = types.StringNull()
			}
			r.UserRelationAttribute.ValueFormatter = types.StringPointerValue(resp.UserRelationAttribute.ValueFormatter)
			r.ValueFormatter = r.UserRelationAttribute.ValueFormatter
		}
	}
}
