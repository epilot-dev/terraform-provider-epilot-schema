// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/models/shared"
)

func (r *SchemaAttributeDataSourceModel) RefreshFromSharedBaseAttribute(resp *shared.BaseAttribute) {
	r.Purpose = nil
	for _, v := range resp.Purpose {
		r.Purpose = append(r.Purpose, types.StringValue(v))
	}
	if resp.Constraints == nil {
		r.Constraints = nil
	} else {
		r.Constraints = &AddressRelationAttributeConstraints{}
	}
	if resp.DefaultValue == nil {
		r.DefaultValue = types.StringNull()
	} else {
		defaultValueResult, _ := json.Marshal(resp.DefaultValue)
		r.DefaultValue = types.StringValue(string(defaultValueResult))
	}
	r.Deprecated = types.BoolPointerValue(resp.Deprecated)
	r.EntityBuilderDisableEdit = types.BoolPointerValue(resp.EntityBuilderDisableEdit)
	r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
	r.Group = types.StringPointerValue(resp.Group)
	r.Hidden = types.BoolPointerValue(resp.Hidden)
	r.HideLabel = types.BoolPointerValue(resp.HideLabel)
	r.Icon = types.StringPointerValue(resp.Icon)
	if resp.InfoHelpers == nil {
		r.InfoHelpers = nil
	} else {
		r.InfoHelpers = &AddressRelationAttributeInfoHelpers{}
		r.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.InfoHelpers.HintCustomComponent)
		r.InfoHelpers.HintText = types.StringPointerValue(resp.InfoHelpers.HintText)
		r.InfoHelpers.HintTextKey = types.StringPointerValue(resp.InfoHelpers.HintTextKey)
		r.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.InfoHelpers.HintTooltipPlacement)
	}
	r.Label = types.StringValue(resp.Label)
	r.Layout = types.StringPointerValue(resp.Layout)
	r.Name = types.StringValue(resp.Name)
	r.Order = types.Int64PointerValue(resp.Order)
	r.Placeholder = types.StringPointerValue(resp.Placeholder)
	r.PreviewValueFormatter = types.StringPointerValue(resp.PreviewValueFormatter)
	r.Protected = types.BoolPointerValue(resp.Protected)
	r.RenderCondition = types.StringPointerValue(resp.RenderCondition)
	r.Required = types.BoolPointerValue(resp.Required)
	if len(r.SettingsFlag) > len(resp.SettingsFlag) {
		r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
	}
	for settingsFlagCount, settingsFlagItem := range resp.SettingsFlag {
		var settingsFlag1 SettingFlag
		settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
		settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
		if settingsFlagCount+1 > len(r.SettingsFlag) {
			r.SettingsFlag = append(r.SettingsFlag, settingsFlag1)
		} else {
			r.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
			r.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
		}
	}
	r.ShowInTable = types.BoolPointerValue(resp.ShowInTable)
	r.Sortable = types.BoolPointerValue(resp.Sortable)
	r.ValueFormatter = types.StringPointerValue(resp.ValueFormatter)
}
