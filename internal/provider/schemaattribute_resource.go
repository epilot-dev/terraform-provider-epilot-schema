// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/epilot/terraform-provider-epilot-schema/internal/validators"
	speakeasy_stringvalidators "github.com/epilot/terraform-provider-epilot-schema/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SchemaAttributeResource{}
var _ resource.ResourceWithImportState = &SchemaAttributeResource{}

func NewSchemaAttributeResource() resource.Resource {
	return &SchemaAttributeResource{}
}

// SchemaAttributeResource defines the resource implementation.
type SchemaAttributeResource struct {
	client *sdk.SDK
}

// SchemaAttributeResourceModel describes the resource data model.
type SchemaAttributeResourceModel struct {
	Actions                  []tfTypes.Actions       `tfsdk:"actions"`
	AddButtonLabel           types.String            `tfsdk:"add_button_label"`
	AllowAny                 types.Bool              `tfsdk:"allow_any"`
	AllowExtraOptions        types.Bool              `tfsdk:"allow_extra_options"`
	AllowedExtensions        []types.String          `tfsdk:"allowed_extensions"`
	AllowedSchemas           []types.String          `tfsdk:"allowed_schemas"`
	CompositeID              types.String            `tfsdk:"composite_id"`
	Constraints              *tfTypes.Constraints    `tfsdk:"constraints"`
	CreatedAt                types.String            `tfsdk:"created_at"`
	Currency                 []tfTypes.Currency      `tfsdk:"currency"`
	CurrencySelectorOnly     types.Bool              `tfsdk:"currency_selector_only"`
	DefaultAccessControl     types.String            `tfsdk:"default_access_control"`
	DefaultValue             types.String            `tfsdk:"default_value"`
	Deprecated               types.Bool              `tfsdk:"deprecated"`
	DetailsViewModeEnabled   types.Bool              `tfsdk:"details_view_mode_enabled"`
	DisableCaseSensitive     types.Bool              `tfsdk:"disable_case_sensitive"`
	DisplayImagesLandscaped  types.Bool              `tfsdk:"display_images_landscaped"`
	DrawerSize               types.String            `tfsdk:"drawer_size"`
	EditMode                 types.String            `tfsdk:"edit_mode"`
	EnableDescription        types.Bool              `tfsdk:"enable_description"`
	EnableRelationPicker     types.Bool              `tfsdk:"enable_relation_picker"`
	EnableRelationTags       types.Bool              `tfsdk:"enable_relation_tags"`
	EntityBuilderDisableEdit types.Bool              `tfsdk:"entity_builder_disable_edit"`
	FeatureFlag              types.String            `tfsdk:"feature_flag"`
	Format                   types.String            `tfsdk:"format"`
	Group                    types.String            `tfsdk:"group"`
	HasPrimary               types.Bool              `tfsdk:"has_primary"`
	Hidden                   types.Bool              `tfsdk:"hidden"`
	HideLabel                types.Bool              `tfsdk:"hide_label"`
	Icon                     types.String            `tfsdk:"icon"`
	ID                       types.String            `tfsdk:"id"`
	Identifiers              []types.String          `tfsdk:"identifiers"`
	InfoHelpers              *tfTypes.InfoHelpers    `tfsdk:"info_helpers"`
	Label                    types.String            `tfsdk:"label"`
	Layout                   types.String            `tfsdk:"layout"`
	Multiline                types.Bool              `tfsdk:"multiline"`
	Multiple                 types.Bool              `tfsdk:"multiple"`
	Name                     types.String            `tfsdk:"name"`
	Options                  []types.String          `tfsdk:"options"`
	Order                    types.Int64             `tfsdk:"order"`
	Parents                  []types.String          `tfsdk:"parents"`
	Placeholder              types.String            `tfsdk:"placeholder"`
	Prefix                   types.String            `tfsdk:"prefix"`
	PreviewValueFormatter    types.String            `tfsdk:"preview_value_formatter"`
	Protected                types.Bool              `tfsdk:"protected"`
	Purpose                  []types.String          `tfsdk:"purpose"`
	Readonly                 types.Bool              `tfsdk:"readonly"`
	RelationAffinityMode     types.String            `tfsdk:"relation_affinity_mode"`
	RelationType             types.String            `tfsdk:"relation_type"`
	RenderCondition          types.String            `tfsdk:"render_condition"`
	Repeatable               types.Bool              `tfsdk:"repeatable"`
	Required                 types.Bool              `tfsdk:"required"`
	ReverseAttributes        map[string]types.String `tfsdk:"reverse_attributes"`
	SearchPlaceholder        types.String            `tfsdk:"search_placeholder"`
	SettingsFlag             []tfTypes.SettingFlag   `tfsdk:"settings_flag"`
	ShowInTable              types.Bool              `tfsdk:"show_in_table"`
	Slug                     types.String            `tfsdk:"slug"`
	Sortable                 types.Bool              `tfsdk:"sortable"`
	StartNumber              types.Int64             `tfsdk:"start_number"`
	Suggestions              []types.String          `tfsdk:"suggestions"`
	SummaryFields            []tfTypes.SummaryFields `tfsdk:"summary_fields"`
	Topic                    types.String            `tfsdk:"topic"`
	Type                     types.String            `tfsdk:"type"`
	UpdatedAt                types.String            `tfsdk:"updated_at"`
	ValueFormatter           types.String            `tfsdk:"value_formatter"`
}

func (r *SchemaAttributeResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema_attribute"
}

func (r *SchemaAttributeResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SchemaAttribute Resource",
		Attributes: map[string]schema.Attribute{
			"actions": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action_type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							MarkdownDescription: `The action type. Currently supported actions:` + "\n" +
								`` + "\n" +
								`| action | description |` + "\n" +
								`|--------|-------------|` + "\n" +
								`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
								`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
								`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
								`` + "\n" +
								`must be one of ["add_existing", "create_new", "create_from_existing"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"add_existing",
									"create_new",
									"create_from_existing",
								),
							},
						},
						"default": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Sets the action as the default action, visible as the main action button.`,
						},
						"feature_flag": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Name of the feature flag that enables this action`,
						},
						"label": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The action label or action translation key (i18n)`,
						},
						"new_entity_item": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"acl": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"additional_properties": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Parsed as JSON.`,
											Validators: []validator.String{
												validators.IsValidJSON(),
											},
										},
										"delete": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"edit": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
										"view": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
										},
									},
									Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users.`,
								},
								"created_at": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										validators.IsRFC3339(),
									},
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"org": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Organization Id the entity belongs to. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"owners": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"org_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"user_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
								},
								"schema": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `URL-friendly identifier for the entity schema. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"tags": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Title of entity. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"updated_at": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										validators.IsRFC3339(),
									},
								},
								"additional_properties": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Parsed as JSON.`,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
								},
							},
						},
						"settings_flag": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Whether the setting should be enabled or not`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `The name of the organization setting to check`,
									},
								},
							},
							Description: `This action should only be active when all the settings have the correct value`,
						},
					},
				},
			},
			"add_button_label": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.`,
			},
			"allow_any": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Allow arbitrary input values in addition to provided options`,
			},
			"allow_extra_options": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `controls if the 360 ui will allow the user to enter a value which is not defined by the options`,
			},
			"allowed_extensions": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `List of file extensions (without the dot suffix)`,
			},
			"allowed_schemas": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"composite_id": schema.StringAttribute{
				Required:    true,
				Description: `Schema Slug and the Attribute ID`,
			},
			"constraints": schema.SingleNestedAttribute{
				Computed:   true,
				Optional:   true,
				Attributes: map[string]schema.Attribute{},
				MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
					`These constraints should and will be enforced by the attribute renderer.` + "\n" +
					``,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"currency": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"one": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"code": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"description": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"symbol": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
							Description: `A currency configuration`,
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
				Description: `An array of currency configurations with a country code (ISO-4217)`,
			},
			"currency_selector_only": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Default: false`,
			},
			"default_access_control": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `must be one of ["public-read", "private"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"public-read",
						"private",
					),
				},
			},
			"default_value": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"deprecated": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Default: false`,
			},
			"details_view_mode_enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Enables the preview, edition, and creation of relation items on a Master-Details view mode. Default: false`,
			},
			"disable_case_sensitive": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `controls if the matching of values against the options is case sensitive or not`,
			},
			"display_images_landscaped": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Controls how the images are presented to the user during upload on the Entity Details view.`,
			},
			"drawer_size": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `must be one of ["small", "medium", "large"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"small",
						"medium",
						"large",
					),
				},
			},
			"edit_mode": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `must be one of ["list-view"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"list-view",
					),
				},
			},
			"enable_description": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				MarkdownDescription: `When set to true, an i18n description will be used alongside the attribute label.` + "\n" +
					`This description should be set through the platform locales in the form: ` + "`" + `file.{attribute_name}.description_text` + "`" + `.` + "\n" +
					``,
			},
			"enable_relation_picker": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link. Default: true`,
			},
			"enable_relation_tags": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item. Default: true`,
			},
			"entity_builder_disable_edit": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI. Default: false`,
			},
			"feature_flag": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `This attribute should only be active when the feature flag is enabled`,
			},
			"format": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"group": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Which group the attribute should appear in. Accepts group ID or group name`,
			},
			"has_primary": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"hidden": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Do not render attribute in entity views. Default: false`,
			},
			"hide_label": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `When set to true, will hide the label of the field.`,
			},
			"icon": schema.StringAttribute{
				Computed: true,
				Optional: true,
				MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
					`The value must be a valid @epilot/base-elements Icon name` + "\n" +
					``,
			},
			"id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"identifiers": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"info_helpers": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"hint_custom_component": schema.StringAttribute{
						Computed: true,
						Optional: true,
						MarkdownDescription: `The name of the custom component to be used as the hint helper.` + "\n" +
							`The component should be registered in the ` + "`" + `@epilot360/entity-ui` + "`" + ` on the index of the components directory.` + "\n" +
							`When specified it overrides the ` + "`" + `hint_text` + "`" + ` or ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
							``,
					},
					"hint_text": schema.StringAttribute{
						Computed: true,
						Optional: true,
						MarkdownDescription: `The text to be displayed in the attribute hint helper.` + "\n" +
							`When specified it overrides the ` + "`" + `hint_text_key` + "`" + ` configuration.` + "\n" +
							``,
					},
					"hint_text_key": schema.StringAttribute{
						Computed: true,
						Optional: true,
						MarkdownDescription: `The key of the hint text to be displayed in the attribute hint helper.` + "\n" +
							`The key should be a valid i18n key.` + "\n" +
							``,
					},
					"hint_tooltip_placement": schema.StringAttribute{
						Computed: true,
						Optional: true,
						MarkdownDescription: `The placement of the hint tooltip.` + "\n" +
							`The value should be a valid ` + "`" + `@mui/core` + "`" + ` tooltip placement.` + "\n" +
							``,
					},
				},
				Description: `A set of configurations meant to document and assist the user in filling the attribute.`,
			},
			"label": schema.StringAttribute{
				Required: true,
			},
			"layout": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"multiline": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"multiple": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"options": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"order": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Attribute sort order (ascending) in group`,
			},
			"parents": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"placeholder": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"prefix": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Prefix added before the sequence number`,
			},
			"preview_value_formatter": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"protected": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted. Default: true`,
			},
			"purpose": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"readonly": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Default: false`,
			},
			"relation_affinity_mode": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity. must be one of ["weak", "strong"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"weak",
						"strong",
					),
				},
			},
			"relation_type": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `must be one of ["has_many", "has_one"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"has_many",
						"has_one",
					),
				},
			},
			"render_condition": schema.StringAttribute{
				Computed: true,
				Optional: true,
				MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
					`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
					`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
					``,
			},
			"repeatable": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"required": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Default: false`,
			},
			"reverse_attributes": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Map of schema slug to target relation attribute`,
			},
			"search_placeholder": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.`,
			},
			"settings_flag": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Whether the setting should be enabled or not`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The name of the organization setting to check`,
						},
					},
				},
				Description: `This attribute should only be active when all the settings have the correct value`,
			},
			"show_in_table": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
			},
			"slug": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `URL-friendly identifier for the classification`,
			},
			"sortable": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Allow sorting by this attribute in table views if ` + "`" + `show_in_table` + "`" + ` is true. Default: true`,
			},
			"start_number": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
			"suggestions": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"summary_fields": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"str": schema.StringAttribute{
							Computed: true,
							Optional: true,
							Validators: []validator.String{
								stringvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("summary_field"),
								}...),
							},
						},
						"summary_field": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"display_as": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `An hint on how to display the summary field`,
								},
								"field": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The field from the entity attributes to display`,
								},
							},
							Description: `Summary Fields are displayed inside list view as a resume of the relation entity.`,
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("str"),
								}...),
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
			},
			"topic": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `must be one of ["address", "automation", "boolean", "checkbox", "computed", "consent", "country", "currency", "date", "datetime", "email", "file", "image", "internal", "internal_user", "invitation_email", "link", "multiselect", "number", "ordered_list", "partner_organisation", "partner_status", "payment", "phone", "price_component", "purpose", "radio", "relation", "relation_address", "relation_payment_method", "relation_user", "select", "sequence", "status", "string", "tags"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"address",
						"automation",
						"boolean",
						"checkbox",
						"computed",
						"consent",
						"country",
						"currency",
						"date",
						"datetime",
						"email",
						"file",
						"image",
						"internal",
						"internal_user",
						"invitation_email",
						"link",
						"multiselect",
						"number",
						"ordered_list",
						"partner_organisation",
						"partner_status",
						"payment",
						"phone",
						"price_component",
						"purpose",
						"radio",
						"relation",
						"relation_address",
						"relation_payment_method",
						"relation_user",
						"select",
						"sequence",
						"status",
						"string",
						"tags",
					),
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"value_formatter": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
		},
	}
}

func (r *SchemaAttributeResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaAttributeResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SchemaAttributeResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	compositeID := data.CompositeID.ValueString()
	var attributeWithCompositeID *shared.AttributeWithCompositeIDInput
	attribute := data.ToSharedAttribute()
	attributeWithCompositeID = &shared.AttributeWithCompositeIDInput{
		Attribute: attribute,
	}
	request := operations.PutSchemaAttributeRequest{
		CompositeID:              compositeID,
		AttributeWithCompositeID: attributeWithCompositeID,
	}
	res, err := r.client.Schemas.PutSchemaAttribute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AttributeWithCompositeID == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAttribute(res.AttributeWithCompositeID.Attribute)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaAttributeResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SchemaAttributeResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	compositeID := data.CompositeID.ValueString()
	request := operations.GetSchemaAttributeRequest{
		CompositeID: compositeID,
	}
	res, err := r.client.Schemas.GetSchemaAttribute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AttributeWithCompositeID == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAttribute(res.AttributeWithCompositeID.Attribute)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaAttributeResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SchemaAttributeResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	compositeID := data.CompositeID.ValueString()
	var attributeWithCompositeID *shared.AttributeWithCompositeIDInput
	attribute := data.ToSharedAttribute()
	attributeWithCompositeID = &shared.AttributeWithCompositeIDInput{
		Attribute: attribute,
	}
	request := operations.PutSchemaAttributeRequest{
		CompositeID:              compositeID,
		AttributeWithCompositeID: attributeWithCompositeID,
	}
	res, err := r.client.Schemas.PutSchemaAttribute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.AttributeWithCompositeID == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAttribute(res.AttributeWithCompositeID.Attribute)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaAttributeResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SchemaAttributeResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	compositeID := data.CompositeID.ValueString()
	request := operations.DeleteSchemaAttributeRequest{
		CompositeID: compositeID,
	}
	res, err := r.client.Schemas.DeleteSchemaAttribute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SchemaAttributeResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("composite_id"), req.ID)...)
}
