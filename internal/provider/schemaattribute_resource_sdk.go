// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaAttributeResourceModel) ToSharedAttribute() *shared.Attribute {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	name := r.Name.ValueString()
	label := r.Label.ValueString()
	placeholder := new(string)
	if !r.Placeholder.IsUnknown() && !r.Placeholder.IsNull() {
		*placeholder = r.Placeholder.ValueString()
	} else {
		placeholder = nil
	}
	hidden := new(bool)
	if !r.Hidden.IsUnknown() && !r.Hidden.IsNull() {
		*hidden = r.Hidden.ValueBool()
	} else {
		hidden = nil
	}
	showInTable := new(bool)
	if !r.ShowInTable.IsUnknown() && !r.ShowInTable.IsNull() {
		*showInTable = r.ShowInTable.ValueBool()
	} else {
		showInTable = nil
	}
	sortable := new(bool)
	if !r.Sortable.IsUnknown() && !r.Sortable.IsNull() {
		*sortable = r.Sortable.ValueBool()
	} else {
		sortable = nil
	}
	required := new(bool)
	if !r.Required.IsUnknown() && !r.Required.IsNull() {
		*required = r.Required.ValueBool()
	} else {
		required = nil
	}
	readonly := new(bool)
	if !r.Readonly.IsUnknown() && !r.Readonly.IsNull() {
		*readonly = r.Readonly.ValueBool()
	} else {
		readonly = nil
	}
	deprecated := new(bool)
	if !r.Deprecated.IsUnknown() && !r.Deprecated.IsNull() {
		*deprecated = r.Deprecated.ValueBool()
	} else {
		deprecated = nil
	}
	var defaultValue interface{}
	if !r.DefaultValue.IsUnknown() && !r.DefaultValue.IsNull() {
		_ = json.Unmarshal([]byte(r.DefaultValue.ValueString()), &defaultValue)
	}
	group := new(string)
	if !r.Group.IsUnknown() && !r.Group.IsNull() {
		*group = r.Group.ValueString()
	} else {
		group = nil
	}
	order := new(int64)
	if !r.Order.IsUnknown() && !r.Order.IsNull() {
		*order = r.Order.ValueInt64()
	} else {
		order = nil
	}
	layout := new(string)
	if !r.Layout.IsUnknown() && !r.Layout.IsNull() {
		*layout = r.Layout.ValueString()
	} else {
		layout = nil
	}
	hideLabel := new(bool)
	if !r.HideLabel.IsUnknown() && !r.HideLabel.IsNull() {
		*hideLabel = r.HideLabel.ValueBool()
	} else {
		hideLabel = nil
	}
	icon := new(string)
	if !r.Icon.IsUnknown() && !r.Icon.IsNull() {
		*icon = r.Icon.ValueString()
	} else {
		icon = nil
	}
	renderCondition := new(string)
	if !r.RenderCondition.IsUnknown() && !r.RenderCondition.IsNull() {
		*renderCondition = r.RenderCondition.ValueString()
	} else {
		renderCondition = nil
	}
	var purpose []string = []string{}
	for _, purposeItem := range r.Purpose {
		purpose = append(purpose, purposeItem.ValueString())
	}
	var constraints *shared.Constraints
	if r.Constraints != nil {
		constraints = &shared.Constraints{}
	}
	featureFlag := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag = r.FeatureFlag.ValueString()
	} else {
		featureFlag = nil
	}
	var settingsFlag []shared.SettingFlag = []shared.SettingFlag{}
	for _, settingsFlagItem := range r.SettingsFlag {
		name1 := new(string)
		if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
			*name1 = settingsFlagItem.Name.ValueString()
		} else {
			name1 = nil
		}
		enabled := new(bool)
		if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
			*enabled = settingsFlagItem.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		settingsFlag = append(settingsFlag, shared.SettingFlag{
			Name:    name1,
			Enabled: enabled,
		})
	}
	valueFormatter := new(string)
	if !r.ValueFormatter.IsUnknown() && !r.ValueFormatter.IsNull() {
		*valueFormatter = r.ValueFormatter.ValueString()
	} else {
		valueFormatter = nil
	}
	previewValueFormatter := new(string)
	if !r.PreviewValueFormatter.IsUnknown() && !r.PreviewValueFormatter.IsNull() {
		*previewValueFormatter = r.PreviewValueFormatter.ValueString()
	} else {
		previewValueFormatter = nil
	}
	entityBuilderDisableEdit := new(bool)
	if !r.EntityBuilderDisableEdit.IsUnknown() && !r.EntityBuilderDisableEdit.IsNull() {
		*entityBuilderDisableEdit = r.EntityBuilderDisableEdit.ValueBool()
	} else {
		entityBuilderDisableEdit = nil
	}
	protected := new(bool)
	if !r.Protected.IsUnknown() && !r.Protected.IsNull() {
		*protected = r.Protected.ValueBool()
	} else {
		protected = nil
	}
	var infoHelpers *shared.InfoHelpers
	if r.InfoHelpers != nil {
		hintText := new(string)
		if !r.InfoHelpers.HintText.IsUnknown() && !r.InfoHelpers.HintText.IsNull() {
			*hintText = r.InfoHelpers.HintText.ValueString()
		} else {
			hintText = nil
		}
		hintTextKey := new(string)
		if !r.InfoHelpers.HintTextKey.IsUnknown() && !r.InfoHelpers.HintTextKey.IsNull() {
			*hintTextKey = r.InfoHelpers.HintTextKey.ValueString()
		} else {
			hintTextKey = nil
		}
		hintCustomComponent := new(string)
		if !r.InfoHelpers.HintCustomComponent.IsUnknown() && !r.InfoHelpers.HintCustomComponent.IsNull() {
			*hintCustomComponent = r.InfoHelpers.HintCustomComponent.ValueString()
		} else {
			hintCustomComponent = nil
		}
		hintTooltipPlacement := new(string)
		if !r.InfoHelpers.HintTooltipPlacement.IsUnknown() && !r.InfoHelpers.HintTooltipPlacement.IsNull() {
			*hintTooltipPlacement = r.InfoHelpers.HintTooltipPlacement.ValueString()
		} else {
			hintTooltipPlacement = nil
		}
		infoHelpers = &shared.InfoHelpers{
			HintText:             hintText,
			HintTextKey:          hintTextKey,
			HintCustomComponent:  hintCustomComponent,
			HintTooltipPlacement: hintTooltipPlacement,
		}
	}
	typeVar := shared.Type(r.Type.ValueString())
	multiline := new(bool)
	if !r.Multiline.IsUnknown() && !r.Multiline.IsNull() {
		*multiline = r.Multiline.ValueBool()
	} else {
		multiline = nil
	}
	var options []string = []string{}
	for _, optionsItem := range r.Options {
		options = append(options, optionsItem.ValueString())
	}
	allowAny := new(bool)
	if !r.AllowAny.IsUnknown() && !r.AllowAny.IsNull() {
		*allowAny = r.AllowAny.ValueBool()
	} else {
		allowAny = nil
	}
	disableCaseSensitive := new(bool)
	if !r.DisableCaseSensitive.IsUnknown() && !r.DisableCaseSensitive.IsNull() {
		*disableCaseSensitive = r.DisableCaseSensitive.ValueBool()
	} else {
		disableCaseSensitive = nil
	}
	allowExtraOptions := new(bool)
	if !r.AllowExtraOptions.IsUnknown() && !r.AllowExtraOptions.IsNull() {
		*allowExtraOptions = r.AllowExtraOptions.ValueBool()
	} else {
		allowExtraOptions = nil
	}
	prefix := new(string)
	if !r.Prefix.IsUnknown() && !r.Prefix.IsNull() {
		*prefix = r.Prefix.ValueString()
	} else {
		prefix = nil
	}
	startNumber := new(int64)
	if !r.StartNumber.IsUnknown() && !r.StartNumber.IsNull() {
		*startNumber = r.StartNumber.ValueInt64()
	} else {
		startNumber = nil
	}
	relationType := new(shared.RelationType)
	if !r.RelationType.IsUnknown() && !r.RelationType.IsNull() {
		*relationType = shared.RelationType(r.RelationType.ValueString())
	} else {
		relationType = nil
	}
	reverseAttributes := make(map[string]string)
	for reverseAttributesKey, reverseAttributesValue := range r.ReverseAttributes {
		reverseAttributesInst := reverseAttributesValue.ValueString()
		reverseAttributes[reverseAttributesKey] = reverseAttributesInst
	}
	relationAffinityMode := new(shared.RelationAffinityMode)
	if !r.RelationAffinityMode.IsUnknown() && !r.RelationAffinityMode.IsNull() {
		*relationAffinityMode = shared.RelationAffinityMode(r.RelationAffinityMode.ValueString())
	} else {
		relationAffinityMode = nil
	}
	enableRelationPicker := new(bool)
	if !r.EnableRelationPicker.IsUnknown() && !r.EnableRelationPicker.IsNull() {
		*enableRelationPicker = r.EnableRelationPicker.ValueBool()
	} else {
		enableRelationPicker = nil
	}
	editMode := new(shared.EditMode)
	if !r.EditMode.IsUnknown() && !r.EditMode.IsNull() {
		*editMode = shared.EditMode(r.EditMode.ValueString())
	} else {
		editMode = nil
	}
	detailsViewModeEnabled := new(bool)
	if !r.DetailsViewModeEnabled.IsUnknown() && !r.DetailsViewModeEnabled.IsNull() {
		*detailsViewModeEnabled = r.DetailsViewModeEnabled.ValueBool()
	} else {
		detailsViewModeEnabled = nil
	}
	var actions []shared.Actions = []shared.Actions{}
	for _, actionsItem := range r.Actions {
		actionType := new(shared.ActionType)
		if !actionsItem.ActionType.IsUnknown() && !actionsItem.ActionType.IsNull() {
			*actionType = shared.ActionType(actionsItem.ActionType.ValueString())
		} else {
			actionType = nil
		}
		label1 := new(string)
		if !actionsItem.Label.IsUnknown() && !actionsItem.Label.IsNull() {
			*label1 = actionsItem.Label.ValueString()
		} else {
			label1 = nil
		}
		defaultVar := new(bool)
		if !actionsItem.Default.IsUnknown() && !actionsItem.Default.IsNull() {
			*defaultVar = actionsItem.Default.ValueBool()
		} else {
			defaultVar = nil
		}
		featureFlag1 := new(string)
		if !actionsItem.FeatureFlag.IsUnknown() && !actionsItem.FeatureFlag.IsNull() {
			*featureFlag1 = actionsItem.FeatureFlag.ValueString()
		} else {
			featureFlag1 = nil
		}
		var settingsFlag1 []shared.SettingFlag = []shared.SettingFlag{}
		for _, settingsFlagItem1 := range actionsItem.SettingsFlag {
			name2 := new(string)
			if !settingsFlagItem1.Name.IsUnknown() && !settingsFlagItem1.Name.IsNull() {
				*name2 = settingsFlagItem1.Name.ValueString()
			} else {
				name2 = nil
			}
			enabled1 := new(bool)
			if !settingsFlagItem1.Enabled.IsUnknown() && !settingsFlagItem1.Enabled.IsNull() {
				*enabled1 = settingsFlagItem1.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			settingsFlag1 = append(settingsFlag1, shared.SettingFlag{
				Name:    name2,
				Enabled: enabled1,
			})
		}
		var newEntityItem *shared.NewEntityItem
		if actionsItem.NewEntityItem != nil {
			id1 := actionsItem.NewEntityItem.ID.ValueString()
			org := actionsItem.NewEntityItem.Org.ValueString()
			var owners []shared.EntityOwner = []shared.EntityOwner{}
			for _, ownersItem := range actionsItem.NewEntityItem.Owners {
				orgID := ownersItem.OrgID.ValueString()
				userID := new(string)
				if !ownersItem.UserID.IsUnknown() && !ownersItem.UserID.IsNull() {
					*userID = ownersItem.UserID.ValueString()
				} else {
					userID = nil
				}
				owners = append(owners, shared.EntityOwner{
					OrgID:  orgID,
					UserID: userID,
				})
			}
			schema := actionsItem.NewEntityItem.Schema.ValueString()
			title := new(string)
			if !actionsItem.NewEntityItem.Title.IsUnknown() && !actionsItem.NewEntityItem.Title.IsNull() {
				*title = actionsItem.NewEntityItem.Title.ValueString()
			} else {
				title = nil
			}
			var tags []string = []string{}
			for _, tagsItem := range actionsItem.NewEntityItem.Tags {
				tags = append(tags, tagsItem.ValueString())
			}
			createdAt := new(time.Time)
			if !actionsItem.NewEntityItem.CreatedAt.IsUnknown() && !actionsItem.NewEntityItem.CreatedAt.IsNull() {
				*createdAt, _ = time.Parse(time.RFC3339Nano, actionsItem.NewEntityItem.CreatedAt.ValueString())
			} else {
				createdAt = nil
			}
			updatedAt := new(time.Time)
			if !actionsItem.NewEntityItem.UpdatedAt.IsUnknown() && !actionsItem.NewEntityItem.UpdatedAt.IsNull() {
				*updatedAt, _ = time.Parse(time.RFC3339Nano, actionsItem.NewEntityItem.UpdatedAt.ValueString())
			} else {
				updatedAt = nil
			}
			var acl *shared.EntityACL
			if actionsItem.NewEntityItem.ACL != nil {
				var view []string = []string{}
				for _, viewItem := range actionsItem.NewEntityItem.ACL.View {
					view = append(view, viewItem.ValueString())
				}
				var edit []string = []string{}
				for _, editItem := range actionsItem.NewEntityItem.ACL.Edit {
					edit = append(edit, editItem.ValueString())
				}
				var delete []string = []string{}
				for _, deleteItem := range actionsItem.NewEntityItem.ACL.Delete {
					delete = append(delete, deleteItem.ValueString())
				}
				var additionalProperties interface{}
				if !actionsItem.NewEntityItem.ACL.AdditionalProperties.IsUnknown() && !actionsItem.NewEntityItem.ACL.AdditionalProperties.IsNull() {
					_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.ACL.AdditionalProperties.ValueString()), &additionalProperties)
				}
				acl = &shared.EntityACL{
					View:                 view,
					Edit:                 edit,
					Delete:               delete,
					AdditionalProperties: additionalProperties,
				}
			}
			var additionalProperties1 interface{}
			if !actionsItem.NewEntityItem.AdditionalProperties.IsUnknown() && !actionsItem.NewEntityItem.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			newEntityItem = &shared.NewEntityItem{
				ID:                   id1,
				Org:                  org,
				Owners:               owners,
				Schema:               schema,
				Title:                title,
				Tags:                 tags,
				CreatedAt:            createdAt,
				UpdatedAt:            updatedAt,
				ACL:                  acl,
				AdditionalProperties: additionalProperties1,
			}
		}
		actions = append(actions, shared.Actions{
			ActionType:    actionType,
			Label:         label1,
			Default:       defaultVar,
			FeatureFlag:   featureFlag1,
			SettingsFlag:  settingsFlag1,
			NewEntityItem: newEntityItem,
		})
	}
	drawerSize := new(shared.DrawerSize)
	if !r.DrawerSize.IsUnknown() && !r.DrawerSize.IsNull() {
		*drawerSize = shared.DrawerSize(r.DrawerSize.ValueString())
	} else {
		drawerSize = nil
	}
	var summaryFields []shared.SummaryFields = []shared.SummaryFields{}
	for _, summaryFieldsItem := range r.SummaryFields {
		if !summaryFieldsItem.Str.IsUnknown() && !summaryFieldsItem.Str.IsNull() {
			str := summaryFieldsItem.Str.ValueString()
			summaryFields = append(summaryFields, shared.SummaryFields{
				Str: &str,
			})
		}
		if summaryFieldsItem.SummaryField != nil {
			field := new(string)
			if !summaryFieldsItem.SummaryField.Field.IsUnknown() && !summaryFieldsItem.SummaryField.Field.IsNull() {
				*field = summaryFieldsItem.SummaryField.Field.ValueString()
			} else {
				field = nil
			}
			displayAs := new(string)
			if !summaryFieldsItem.SummaryField.DisplayAs.IsUnknown() && !summaryFieldsItem.SummaryField.DisplayAs.IsNull() {
				*displayAs = summaryFieldsItem.SummaryField.DisplayAs.ValueString()
			} else {
				displayAs = nil
			}
			summaryField := shared.SummaryField{
				Field:     field,
				DisplayAs: displayAs,
			}
			summaryFields = append(summaryFields, shared.SummaryFields{
				SummaryField: &summaryField,
			})
		}
	}
	hasPrimary := new(bool)
	if !r.HasPrimary.IsUnknown() && !r.HasPrimary.IsNull() {
		*hasPrimary = r.HasPrimary.ValueBool()
	} else {
		hasPrimary = nil
	}
	var allowedSchemas []string = []string{}
	for _, allowedSchemasItem := range r.AllowedSchemas {
		allowedSchemas = append(allowedSchemas, allowedSchemasItem.ValueString())
	}
	enableRelationTags := new(bool)
	if !r.EnableRelationTags.IsUnknown() && !r.EnableRelationTags.IsNull() {
		*enableRelationTags = r.EnableRelationTags.ValueBool()
	} else {
		enableRelationTags = nil
	}
	addButtonLabel := new(string)
	if !r.AddButtonLabel.IsUnknown() && !r.AddButtonLabel.IsNull() {
		*addButtonLabel = r.AddButtonLabel.ValueString()
	} else {
		addButtonLabel = nil
	}
	searchPlaceholder := new(string)
	if !r.SearchPlaceholder.IsUnknown() && !r.SearchPlaceholder.IsNull() {
		*searchPlaceholder = r.SearchPlaceholder.ValueString()
	} else {
		searchPlaceholder = nil
	}
	multiple := new(bool)
	if !r.Multiple.IsUnknown() && !r.Multiple.IsNull() {
		*multiple = r.Multiple.ValueBool()
	} else {
		multiple = nil
	}
	currencySelectorOnly := new(bool)
	if !r.CurrencySelectorOnly.IsUnknown() && !r.CurrencySelectorOnly.IsNull() {
		*currencySelectorOnly = r.CurrencySelectorOnly.ValueBool()
	} else {
		currencySelectorOnly = nil
	}
	var currency []shared.Currency = []shared.Currency{}
	for _, currencyItem := range r.Currency {
		if currencyItem.One != nil {
			code := currencyItem.One.Code.ValueString()
			description := currencyItem.One.Description.ValueString()
			symbol := currencyItem.One.Symbol.ValueString()
			flag := new(string)
			if !currencyItem.One.Flag.IsUnknown() && !currencyItem.One.Flag.IsNull() {
				*flag = currencyItem.One.Flag.ValueString()
			} else {
				flag = nil
			}
			one := shared.One{
				Code:        code,
				Description: description,
				Symbol:      symbol,
				Flag:        flag,
			}
			currency = append(currency, shared.Currency{
				One: &one,
			})
		}
	}
	repeatable := new(bool)
	if !r.Repeatable.IsUnknown() && !r.Repeatable.IsNull() {
		*repeatable = r.Repeatable.ValueBool()
	} else {
		repeatable = nil
	}
	var suggestions []string = []string{}
	for _, suggestionsItem := range r.Suggestions {
		suggestions = append(suggestions, suggestionsItem.ValueString())
	}
	format := new(string)
	if !r.Format.IsUnknown() && !r.Format.IsNull() {
		*format = r.Format.ValueString()
	} else {
		format = nil
	}
	topic := new(string)
	if !r.Topic.IsUnknown() && !r.Topic.IsNull() {
		*topic = r.Topic.ValueString()
	} else {
		topic = nil
	}
	var identifiers []string = []string{}
	for _, identifiersItem := range r.Identifiers {
		identifiers = append(identifiers, identifiersItem.ValueString())
	}
	var allowedExtensions []string = []string{}
	for _, allowedExtensionsItem := range r.AllowedExtensions {
		allowedExtensions = append(allowedExtensions, allowedExtensionsItem.ValueString())
	}
	displayImagesLandscaped := new(bool)
	if !r.DisplayImagesLandscaped.IsUnknown() && !r.DisplayImagesLandscaped.IsNull() {
		*displayImagesLandscaped = r.DisplayImagesLandscaped.ValueBool()
	} else {
		displayImagesLandscaped = nil
	}
	enableDescription := new(bool)
	if !r.EnableDescription.IsUnknown() && !r.EnableDescription.IsNull() {
		*enableDescription = r.EnableDescription.ValueBool()
	} else {
		enableDescription = nil
	}
	defaultAccessControl := new(shared.DefaultAccessControl)
	if !r.DefaultAccessControl.IsUnknown() && !r.DefaultAccessControl.IsNull() {
		*defaultAccessControl = shared.DefaultAccessControl(r.DefaultAccessControl.ValueString())
	} else {
		defaultAccessControl = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	var parents []string = []string{}
	for _, parentsItem := range r.Parents {
		parents = append(parents, parentsItem.ValueString())
	}
	createdAt1 := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt1, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt1 = nil
	}
	updatedAt1 := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt1, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt1 = nil
	}
	out := shared.Attribute{
		ID:                       id,
		Name:                     name,
		Label:                    label,
		Placeholder:              placeholder,
		Hidden:                   hidden,
		ShowInTable:              showInTable,
		Sortable:                 sortable,
		Required:                 required,
		Readonly:                 readonly,
		Deprecated:               deprecated,
		DefaultValue:             defaultValue,
		Group:                    group,
		Order:                    order,
		Layout:                   layout,
		HideLabel:                hideLabel,
		Icon:                     icon,
		RenderCondition:          renderCondition,
		Purpose:                  purpose,
		Constraints:              constraints,
		FeatureFlag:              featureFlag,
		SettingsFlag:             settingsFlag,
		ValueFormatter:           valueFormatter,
		PreviewValueFormatter:    previewValueFormatter,
		EntityBuilderDisableEdit: entityBuilderDisableEdit,
		Protected:                protected,
		InfoHelpers:              infoHelpers,
		Type:                     typeVar,
		Multiline:                multiline,
		Options:                  options,
		AllowAny:                 allowAny,
		DisableCaseSensitive:     disableCaseSensitive,
		AllowExtraOptions:        allowExtraOptions,
		Prefix:                   prefix,
		StartNumber:              startNumber,
		RelationType:             relationType,
		ReverseAttributes:        reverseAttributes,
		RelationAffinityMode:     relationAffinityMode,
		EnableRelationPicker:     enableRelationPicker,
		EditMode:                 editMode,
		DetailsViewModeEnabled:   detailsViewModeEnabled,
		Actions:                  actions,
		DrawerSize:               drawerSize,
		SummaryFields:            summaryFields,
		HasPrimary:               hasPrimary,
		AllowedSchemas:           allowedSchemas,
		EnableRelationTags:       enableRelationTags,
		AddButtonLabel:           addButtonLabel,
		SearchPlaceholder:        searchPlaceholder,
		Multiple:                 multiple,
		CurrencySelectorOnly:     currencySelectorOnly,
		Currency:                 currency,
		Repeatable:               repeatable,
		Suggestions:              suggestions,
		Format:                   format,
		Topic:                    topic,
		Identifiers:              identifiers,
		AllowedExtensions:        allowedExtensions,
		DisplayImagesLandscaped:  displayImagesLandscaped,
		EnableDescription:        enableDescription,
		DefaultAccessControl:     defaultAccessControl,
		Slug:                     slug,
		Parents:                  parents,
		CreatedAt:                createdAt1,
		UpdatedAt:                updatedAt1,
	}
	return &out
}

func (r *SchemaAttributeResourceModel) RefreshFromSharedAttribute(resp *shared.Attribute) {
	if resp != nil {
		if len(r.Actions) > len(resp.Actions) {
			r.Actions = r.Actions[:len(resp.Actions)]
		}
		for actionsCount, actionsItem := range resp.Actions {
			var actions1 tfTypes.Actions
			if actionsItem.ActionType != nil {
				actions1.ActionType = types.StringValue(string(*actionsItem.ActionType))
			} else {
				actions1.ActionType = types.StringNull()
			}
			actions1.Default = types.BoolPointerValue(actionsItem.Default)
			actions1.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
			actions1.Label = types.StringPointerValue(actionsItem.Label)
			if actionsItem.NewEntityItem == nil {
				actions1.NewEntityItem = nil
			} else {
				actions1.NewEntityItem = &tfTypes.NewEntityItem{}
				if actionsItem.NewEntityItem.ACL == nil {
					actions1.NewEntityItem.ACL = nil
				} else {
					actions1.NewEntityItem.ACL = &tfTypes.EntityACL{}
					if actionsItem.NewEntityItem.ACL.AdditionalProperties == nil {
						actions1.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult, _ := json.Marshal(actionsItem.NewEntityItem.ACL.AdditionalProperties)
						actions1.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
					}
					actions1.NewEntityItem.ACL.Delete = []types.String{}
					for _, v := range actionsItem.NewEntityItem.ACL.Delete {
						actions1.NewEntityItem.ACL.Delete = append(actions1.NewEntityItem.ACL.Delete, types.StringValue(v))
					}
					actions1.NewEntityItem.ACL.Edit = []types.String{}
					for _, v := range actionsItem.NewEntityItem.ACL.Edit {
						actions1.NewEntityItem.ACL.Edit = append(actions1.NewEntityItem.ACL.Edit, types.StringValue(v))
					}
					actions1.NewEntityItem.ACL.View = []types.String{}
					for _, v := range actionsItem.NewEntityItem.ACL.View {
						actions1.NewEntityItem.ACL.View = append(actions1.NewEntityItem.ACL.View, types.StringValue(v))
					}
				}
				if actionsItem.NewEntityItem.CreatedAt != nil {
					actions1.NewEntityItem.CreatedAt = types.StringValue(actionsItem.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					actions1.NewEntityItem.CreatedAt = types.StringNull()
				}
				actions1.NewEntityItem.ID = types.StringValue(actionsItem.NewEntityItem.ID)
				actions1.NewEntityItem.Org = types.StringValue(actionsItem.NewEntityItem.Org)
				for ownersCount, ownersItem := range actionsItem.NewEntityItem.Owners {
					var owners1 tfTypes.EntityOwner
					owners1.OrgID = types.StringValue(ownersItem.OrgID)
					owners1.UserID = types.StringPointerValue(ownersItem.UserID)
					if ownersCount+1 > len(actions1.NewEntityItem.Owners) {
						actions1.NewEntityItem.Owners = append(actions1.NewEntityItem.Owners, owners1)
					} else {
						actions1.NewEntityItem.Owners[ownersCount].OrgID = owners1.OrgID
						actions1.NewEntityItem.Owners[ownersCount].UserID = owners1.UserID
					}
				}
				actions1.NewEntityItem.Schema = types.StringValue(actionsItem.NewEntityItem.Schema)
				actions1.NewEntityItem.Tags = []types.String{}
				for _, v := range actionsItem.NewEntityItem.Tags {
					actions1.NewEntityItem.Tags = append(actions1.NewEntityItem.Tags, types.StringValue(v))
				}
				actions1.NewEntityItem.Title = types.StringPointerValue(actionsItem.NewEntityItem.Title)
				if actionsItem.NewEntityItem.UpdatedAt != nil {
					actions1.NewEntityItem.UpdatedAt = types.StringValue(actionsItem.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					actions1.NewEntityItem.UpdatedAt = types.StringNull()
				}
				if actionsItem.NewEntityItem.AdditionalProperties == nil {
					actions1.NewEntityItem.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(actionsItem.NewEntityItem.AdditionalProperties)
					actions1.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
			}
			for settingsFlagCount, settingsFlagItem := range actionsItem.SettingsFlag {
				var settingsFlag1 tfTypes.SettingFlag
				settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
				settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
				if settingsFlagCount+1 > len(actions1.SettingsFlag) {
					actions1.SettingsFlag = append(actions1.SettingsFlag, settingsFlag1)
				} else {
					actions1.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
					actions1.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
				}
			}
			if actionsCount+1 > len(r.Actions) {
				r.Actions = append(r.Actions, actions1)
			} else {
				r.Actions[actionsCount].ActionType = actions1.ActionType
				r.Actions[actionsCount].Default = actions1.Default
				r.Actions[actionsCount].FeatureFlag = actions1.FeatureFlag
				r.Actions[actionsCount].Label = actions1.Label
				r.Actions[actionsCount].NewEntityItem = actions1.NewEntityItem
				r.Actions[actionsCount].SettingsFlag = actions1.SettingsFlag
			}
		}
		r.AddButtonLabel = types.StringPointerValue(resp.AddButtonLabel)
		r.AllowAny = types.BoolPointerValue(resp.AllowAny)
		r.AllowedExtensions = []types.String{}
		for _, v := range resp.AllowedExtensions {
			r.AllowedExtensions = append(r.AllowedExtensions, types.StringValue(v))
		}
		r.AllowedSchemas = []types.String{}
		for _, v := range resp.AllowedSchemas {
			r.AllowedSchemas = append(r.AllowedSchemas, types.StringValue(v))
		}
		r.AllowExtraOptions = types.BoolPointerValue(resp.AllowExtraOptions)
		if resp.Constraints == nil {
			r.Constraints = nil
		} else {
			r.Constraints = &tfTypes.Constraints{}
		}
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		if len(r.Currency) > len(resp.Currency) {
			r.Currency = r.Currency[:len(resp.Currency)]
		}
		for currencyCount, currencyItem := range resp.Currency {
			var currency1 tfTypes.Currency
			if currencyItem.One != nil {
				currency1.One = &tfTypes.One{}
				currency1.One.Code = types.StringValue(currencyItem.One.Code)
				currency1.One.Description = types.StringValue(currencyItem.One.Description)
				currency1.One.Flag = types.StringPointerValue(currencyItem.One.Flag)
				currency1.One.Symbol = types.StringValue(currencyItem.One.Symbol)
			}
			if currencyCount+1 > len(r.Currency) {
				r.Currency = append(r.Currency, currency1)
			} else {
				r.Currency[currencyCount].One = currency1.One
			}
		}
		r.CurrencySelectorOnly = types.BoolPointerValue(resp.CurrencySelectorOnly)
		if resp.DefaultAccessControl != nil {
			r.DefaultAccessControl = types.StringValue(string(*resp.DefaultAccessControl))
		} else {
			r.DefaultAccessControl = types.StringNull()
		}
		if resp.DefaultValue == nil {
			r.DefaultValue = types.StringNull()
		} else {
			defaultValueResult, _ := json.Marshal(resp.DefaultValue)
			r.DefaultValue = types.StringValue(string(defaultValueResult))
		}
		r.Deprecated = types.BoolPointerValue(resp.Deprecated)
		r.DetailsViewModeEnabled = types.BoolPointerValue(resp.DetailsViewModeEnabled)
		r.DisableCaseSensitive = types.BoolPointerValue(resp.DisableCaseSensitive)
		r.DisplayImagesLandscaped = types.BoolPointerValue(resp.DisplayImagesLandscaped)
		if resp.DrawerSize != nil {
			r.DrawerSize = types.StringValue(string(*resp.DrawerSize))
		} else {
			r.DrawerSize = types.StringNull()
		}
		if resp.EditMode != nil {
			r.EditMode = types.StringValue(string(*resp.EditMode))
		} else {
			r.EditMode = types.StringNull()
		}
		r.EnableDescription = types.BoolPointerValue(resp.EnableDescription)
		r.EnableRelationPicker = types.BoolPointerValue(resp.EnableRelationPicker)
		r.EnableRelationTags = types.BoolPointerValue(resp.EnableRelationTags)
		r.EntityBuilderDisableEdit = types.BoolPointerValue(resp.EntityBuilderDisableEdit)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.Format = types.StringPointerValue(resp.Format)
		r.Group = types.StringPointerValue(resp.Group)
		r.HasPrimary = types.BoolPointerValue(resp.HasPrimary)
		r.Hidden = types.BoolPointerValue(resp.Hidden)
		r.HideLabel = types.BoolPointerValue(resp.HideLabel)
		r.Icon = types.StringPointerValue(resp.Icon)
		r.ID = types.StringPointerValue(resp.ID)
		r.Identifiers = []types.String{}
		for _, v := range resp.Identifiers {
			r.Identifiers = append(r.Identifiers, types.StringValue(v))
		}
		if resp.InfoHelpers == nil {
			r.InfoHelpers = nil
		} else {
			r.InfoHelpers = &tfTypes.InfoHelpers{}
			r.InfoHelpers.HintCustomComponent = types.StringPointerValue(resp.InfoHelpers.HintCustomComponent)
			r.InfoHelpers.HintText = types.StringPointerValue(resp.InfoHelpers.HintText)
			r.InfoHelpers.HintTextKey = types.StringPointerValue(resp.InfoHelpers.HintTextKey)
			r.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(resp.InfoHelpers.HintTooltipPlacement)
		}
		r.Label = types.StringValue(resp.Label)
		r.Layout = types.StringPointerValue(resp.Layout)
		r.Multiline = types.BoolPointerValue(resp.Multiline)
		r.Multiple = types.BoolPointerValue(resp.Multiple)
		r.Name = types.StringValue(resp.Name)
		r.Options = []types.String{}
		for _, v := range resp.Options {
			r.Options = append(r.Options, types.StringValue(v))
		}
		r.Order = types.Int64PointerValue(resp.Order)
		r.Parents = []types.String{}
		for _, v := range resp.Parents {
			r.Parents = append(r.Parents, types.StringValue(v))
		}
		r.Placeholder = types.StringPointerValue(resp.Placeholder)
		r.Prefix = types.StringPointerValue(resp.Prefix)
		r.PreviewValueFormatter = types.StringPointerValue(resp.PreviewValueFormatter)
		r.Protected = types.BoolPointerValue(resp.Protected)
		r.Purpose = []types.String{}
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.Readonly = types.BoolPointerValue(resp.Readonly)
		if resp.RelationAffinityMode != nil {
			r.RelationAffinityMode = types.StringValue(string(*resp.RelationAffinityMode))
		} else {
			r.RelationAffinityMode = types.StringNull()
		}
		if resp.RelationType != nil {
			r.RelationType = types.StringValue(string(*resp.RelationType))
		} else {
			r.RelationType = types.StringNull()
		}
		r.RenderCondition = types.StringPointerValue(resp.RenderCondition)
		r.Repeatable = types.BoolPointerValue(resp.Repeatable)
		r.Required = types.BoolPointerValue(resp.Required)
		if len(resp.ReverseAttributes) > 0 {
			r.ReverseAttributes = make(map[string]types.String)
			for key, value := range resp.ReverseAttributes {
				r.ReverseAttributes[key] = types.StringValue(value)
			}
		}
		r.SearchPlaceholder = types.StringPointerValue(resp.SearchPlaceholder)
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount1, settingsFlagItem1 := range resp.SettingsFlag {
			var settingsFlag3 tfTypes.SettingFlag
			settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
			settingsFlag3.Name = types.StringPointerValue(settingsFlagItem1.Name)
			if settingsFlagCount1+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag3)
			} else {
				r.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag3.Enabled
				r.SettingsFlag[settingsFlagCount1].Name = settingsFlag3.Name
			}
		}
		r.ShowInTable = types.BoolPointerValue(resp.ShowInTable)
		r.Slug = types.StringPointerValue(resp.Slug)
		r.Sortable = types.BoolPointerValue(resp.Sortable)
		r.StartNumber = types.Int64PointerValue(resp.StartNumber)
		r.Suggestions = []types.String{}
		for _, v := range resp.Suggestions {
			r.Suggestions = append(r.Suggestions, types.StringValue(v))
		}
		if len(r.SummaryFields) > len(resp.SummaryFields) {
			r.SummaryFields = r.SummaryFields[:len(resp.SummaryFields)]
		}
		for summaryFieldsCount, summaryFieldsItem := range resp.SummaryFields {
			var summaryFields1 tfTypes.SummaryFields
			if summaryFieldsItem.Str != nil {
				summaryFields1.Str = types.StringPointerValue(summaryFieldsItem.Str)
			}
			if summaryFieldsItem.SummaryField != nil {
				summaryFields1.SummaryField = &tfTypes.SummaryField{}
				summaryFields1.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
				summaryFields1.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
			}
			if summaryFieldsCount+1 > len(r.SummaryFields) {
				r.SummaryFields = append(r.SummaryFields, summaryFields1)
			} else {
				r.SummaryFields[summaryFieldsCount].Str = summaryFields1.Str
				r.SummaryFields[summaryFieldsCount].SummaryField = summaryFields1.SummaryField
			}
		}
		r.Topic = types.StringPointerValue(resp.Topic)
		r.Type = types.StringValue(string(resp.Type))
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		r.ValueFormatter = types.StringPointerValue(resp.ValueFormatter)
	}
}
