// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot/terraform-provider-epilot-schema/internal/provider/typeconvert"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SchemaCapabilityDataSourceModel) ToOperationsGetSchemaCapabilityRequest(ctx context.Context) (*operations.GetSchemaCapabilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	out := operations.GetSchemaCapabilityRequest{
		CompositeID: compositeID,
	}

	return &out, diags
}

func (r *SchemaCapabilityDataSourceModel) RefreshFromSharedEntityCapabilityWithCompositeID(ctx context.Context, resp *shared.EntityCapabilityWithCompositeID) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Manifest != nil {
			r.Manifest = make([]types.String, 0, len(resp.Manifest))
			for _, v := range resp.Manifest {
				r.Manifest = append(r.Manifest, types.StringValue(v))
			}
		}
		r.Purpose = make([]types.String, 0, len(resp.Purpose))
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.Attributes = []tfTypes.Attribute{}
		if len(r.Attributes) > len(resp.Attributes) {
			r.Attributes = r.Attributes[:len(resp.Attributes)]
		}
		for attributesCount, attributesItem := range resp.Attributes {
			var attributes tfTypes.Attribute
			if attributesItem.AddressAttribute != nil {
				attributes.AddressAttribute = &tfTypes.AddressAttribute{}
				if attributesItem.AddressAttribute.Manifest != nil {
					attributes.AddressAttribute.Manifest = make([]types.String, 0, len(attributesItem.AddressAttribute.Manifest))
					for _, v := range attributesItem.AddressAttribute.Manifest {
						attributes.AddressAttribute.Manifest = append(attributes.AddressAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.AddressAttribute.Purpose = make([]types.String, 0, len(attributesItem.AddressAttribute.Purpose))
				for _, v := range attributesItem.AddressAttribute.Purpose {
					attributes.AddressAttribute.Purpose = append(attributes.AddressAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.AddressAttribute.Constraints == nil {
					attributes.AddressAttribute.Constraints = nil
				} else {
					attributes.AddressAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.AddressAttribute.DefaultAddressFields != nil {
					attributes.AddressAttribute.DefaultAddressFields = make([]types.String, 0, len(attributesItem.AddressAttribute.DefaultAddressFields))
					for _, v := range attributesItem.AddressAttribute.DefaultAddressFields {
						attributes.AddressAttribute.DefaultAddressFields = append(attributes.AddressAttribute.DefaultAddressFields, types.StringValue(v))
					}
				}
				if attributesItem.AddressAttribute.DefaultValue == nil {
					attributes.AddressAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult, _ := json.Marshal(attributesItem.AddressAttribute.DefaultValue)
					attributes.AddressAttribute.DefaultValue = types.StringValue(string(defaultValueResult))
				}
				attributes.AddressAttribute.Deprecated = types.BoolPointerValue(attributesItem.AddressAttribute.Deprecated)
				attributes.AddressAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.AddressAttribute.EntityBuilderDisableEdit)
				attributes.AddressAttribute.FeatureFlag = types.StringPointerValue(attributesItem.AddressAttribute.FeatureFlag)
				attributes.AddressAttribute.Group = types.StringPointerValue(attributesItem.AddressAttribute.Group)
				attributes.AddressAttribute.HasPrimary = types.BoolPointerValue(attributesItem.AddressAttribute.HasPrimary)
				attributes.AddressAttribute.Hidden = types.BoolPointerValue(attributesItem.AddressAttribute.Hidden)
				attributes.AddressAttribute.HideLabel = types.BoolPointerValue(attributesItem.AddressAttribute.HideLabel)
				attributes.AddressAttribute.Icon = types.StringPointerValue(attributesItem.AddressAttribute.Icon)
				attributes.AddressAttribute.ID = types.StringPointerValue(attributesItem.AddressAttribute.ID)
				if attributesItem.AddressAttribute.InfoHelpers == nil {
					attributes.AddressAttribute.InfoHelpers = nil
				} else {
					attributes.AddressAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.AddressAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintCustomComponent)
					attributes.AddressAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintText)
					attributes.AddressAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintTextKey)
					attributes.AddressAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.AddressAttribute.Label = types.StringValue(attributesItem.AddressAttribute.Label)
				attributes.AddressAttribute.Layout = types.StringPointerValue(attributesItem.AddressAttribute.Layout)
				attributes.AddressAttribute.Name = types.StringValue(attributesItem.AddressAttribute.Name)
				attributes.AddressAttribute.Order = types.Int64PointerValue(attributesItem.AddressAttribute.Order)
				attributes.AddressAttribute.Placeholder = types.StringPointerValue(attributesItem.AddressAttribute.Placeholder)
				attributes.AddressAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.AddressAttribute.PreviewValueFormatter)
				attributes.AddressAttribute.Protected = types.BoolPointerValue(attributesItem.AddressAttribute.Protected)
				attributes.AddressAttribute.Readonly = types.BoolPointerValue(attributesItem.AddressAttribute.Readonly)
				attributes.AddressAttribute.RenderCondition = types.StringPointerValue(attributesItem.AddressAttribute.RenderCondition)
				attributes.AddressAttribute.Repeatable = types.BoolPointerValue(attributesItem.AddressAttribute.Repeatable)
				attributes.AddressAttribute.Required = types.BoolPointerValue(attributesItem.AddressAttribute.Required)
				attributes.AddressAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount, settingsFlagItem := range attributesItem.AddressAttribute.SettingsFlag {
					var settingsFlag tfTypes.SettingFlag
					settingsFlag.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
					settingsFlag.Name = types.StringPointerValue(settingsFlagItem.Name)
					if settingsFlagCount+1 > len(attributes.AddressAttribute.SettingsFlag) {
						attributes.AddressAttribute.SettingsFlag = append(attributes.AddressAttribute.SettingsFlag, settingsFlag)
					} else {
						attributes.AddressAttribute.SettingsFlag[settingsFlagCount].Enabled = settingsFlag.Enabled
						attributes.AddressAttribute.SettingsFlag[settingsFlagCount].Name = settingsFlag.Name
					}
				}
				attributes.AddressAttribute.ShowInTable = types.BoolPointerValue(attributesItem.AddressAttribute.ShowInTable)
				attributes.AddressAttribute.Sortable = types.BoolPointerValue(attributesItem.AddressAttribute.Sortable)
				attributes.AddressAttribute.Type = types.StringValue(string(attributesItem.AddressAttribute.Type))
				attributes.AddressAttribute.ValueFormatter = types.StringPointerValue(attributesItem.AddressAttribute.ValueFormatter)
			}
			if attributesItem.AddressRelationAttribute != nil {
				attributes.AddressRelationAttribute = &tfTypes.AddressAttribute{}
				if attributesItem.AddressRelationAttribute.Manifest != nil {
					attributes.AddressRelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.AddressRelationAttribute.Manifest))
					for _, v := range attributesItem.AddressRelationAttribute.Manifest {
						attributes.AddressRelationAttribute.Manifest = append(attributes.AddressRelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.AddressRelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.AddressRelationAttribute.Purpose))
				for _, v := range attributesItem.AddressRelationAttribute.Purpose {
					attributes.AddressRelationAttribute.Purpose = append(attributes.AddressRelationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.AddressRelationAttribute.Constraints == nil {
					attributes.AddressRelationAttribute.Constraints = nil
				} else {
					attributes.AddressRelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.AddressRelationAttribute.DefaultAddressFields != nil {
					attributes.AddressRelationAttribute.DefaultAddressFields = make([]types.String, 0, len(attributesItem.AddressRelationAttribute.DefaultAddressFields))
					for _, v := range attributesItem.AddressRelationAttribute.DefaultAddressFields {
						attributes.AddressRelationAttribute.DefaultAddressFields = append(attributes.AddressRelationAttribute.DefaultAddressFields, types.StringValue(v))
					}
				}
				if attributesItem.AddressRelationAttribute.DefaultValue == nil {
					attributes.AddressRelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult1, _ := json.Marshal(attributesItem.AddressRelationAttribute.DefaultValue)
					attributes.AddressRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult1))
				}
				attributes.AddressRelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Deprecated)
				attributes.AddressRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.AddressRelationAttribute.EntityBuilderDisableEdit)
				attributes.AddressRelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.AddressRelationAttribute.FeatureFlag)
				attributes.AddressRelationAttribute.Group = types.StringPointerValue(attributesItem.AddressRelationAttribute.Group)
				attributes.AddressRelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.AddressRelationAttribute.HasPrimary)
				attributes.AddressRelationAttribute.Hidden = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Hidden)
				attributes.AddressRelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.AddressRelationAttribute.HideLabel)
				attributes.AddressRelationAttribute.Icon = types.StringPointerValue(attributesItem.AddressRelationAttribute.Icon)
				attributes.AddressRelationAttribute.ID = types.StringPointerValue(attributesItem.AddressRelationAttribute.ID)
				if attributesItem.AddressRelationAttribute.InfoHelpers == nil {
					attributes.AddressRelationAttribute.InfoHelpers = nil
				} else {
					attributes.AddressRelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.AddressRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.AddressRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintText)
					attributes.AddressRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintTextKey)
					attributes.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.AddressRelationAttribute.Label = types.StringValue(attributesItem.AddressRelationAttribute.Label)
				attributes.AddressRelationAttribute.Layout = types.StringPointerValue(attributesItem.AddressRelationAttribute.Layout)
				attributes.AddressRelationAttribute.Name = types.StringValue(attributesItem.AddressRelationAttribute.Name)
				attributes.AddressRelationAttribute.Order = types.Int64PointerValue(attributesItem.AddressRelationAttribute.Order)
				attributes.AddressRelationAttribute.Placeholder = types.StringPointerValue(attributesItem.AddressRelationAttribute.Placeholder)
				attributes.AddressRelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.AddressRelationAttribute.PreviewValueFormatter)
				attributes.AddressRelationAttribute.Protected = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Protected)
				attributes.AddressRelationAttribute.Readonly = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Readonly)
				attributes.AddressRelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.AddressRelationAttribute.RenderCondition)
				attributes.AddressRelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Repeatable)
				attributes.AddressRelationAttribute.Required = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Required)
				attributes.AddressRelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount1, settingsFlagItem1 := range attributesItem.AddressRelationAttribute.SettingsFlag {
					var settingsFlag1 tfTypes.SettingFlag
					settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
					settingsFlag1.Name = types.StringPointerValue(settingsFlagItem1.Name)
					if settingsFlagCount1+1 > len(attributes.AddressRelationAttribute.SettingsFlag) {
						attributes.AddressRelationAttribute.SettingsFlag = append(attributes.AddressRelationAttribute.SettingsFlag, settingsFlag1)
					} else {
						attributes.AddressRelationAttribute.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag1.Enabled
						attributes.AddressRelationAttribute.SettingsFlag[settingsFlagCount1].Name = settingsFlag1.Name
					}
				}
				attributes.AddressRelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.AddressRelationAttribute.ShowInTable)
				attributes.AddressRelationAttribute.Sortable = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Sortable)
				attributes.AddressRelationAttribute.Type = types.StringValue(string(attributesItem.AddressRelationAttribute.Type))
				attributes.AddressRelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.AddressRelationAttribute.ValueFormatter)
			}
			if attributesItem.AutomationAttribute != nil {
				attributes.AutomationAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.AutomationAttribute.Manifest != nil {
					attributes.AutomationAttribute.Manifest = make([]types.String, 0, len(attributesItem.AutomationAttribute.Manifest))
					for _, v := range attributesItem.AutomationAttribute.Manifest {
						attributes.AutomationAttribute.Manifest = append(attributes.AutomationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.AutomationAttribute.Purpose = make([]types.String, 0, len(attributesItem.AutomationAttribute.Purpose))
				for _, v := range attributesItem.AutomationAttribute.Purpose {
					attributes.AutomationAttribute.Purpose = append(attributes.AutomationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.AutomationAttribute.Constraints == nil {
					attributes.AutomationAttribute.Constraints = nil
				} else {
					attributes.AutomationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.AutomationAttribute.DefaultValue == nil {
					attributes.AutomationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult2, _ := json.Marshal(attributesItem.AutomationAttribute.DefaultValue)
					attributes.AutomationAttribute.DefaultValue = types.StringValue(string(defaultValueResult2))
				}
				attributes.AutomationAttribute.Deprecated = types.BoolPointerValue(attributesItem.AutomationAttribute.Deprecated)
				attributes.AutomationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.AutomationAttribute.EntityBuilderDisableEdit)
				attributes.AutomationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.AutomationAttribute.FeatureFlag)
				attributes.AutomationAttribute.Group = types.StringPointerValue(attributesItem.AutomationAttribute.Group)
				attributes.AutomationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.AutomationAttribute.HasPrimary)
				attributes.AutomationAttribute.Hidden = types.BoolPointerValue(attributesItem.AutomationAttribute.Hidden)
				attributes.AutomationAttribute.HideLabel = types.BoolPointerValue(attributesItem.AutomationAttribute.HideLabel)
				attributes.AutomationAttribute.Icon = types.StringPointerValue(attributesItem.AutomationAttribute.Icon)
				attributes.AutomationAttribute.ID = types.StringPointerValue(attributesItem.AutomationAttribute.ID)
				if attributesItem.AutomationAttribute.InfoHelpers == nil {
					attributes.AutomationAttribute.InfoHelpers = nil
				} else {
					attributes.AutomationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.AutomationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintCustomComponent)
					attributes.AutomationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintText)
					attributes.AutomationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintTextKey)
					attributes.AutomationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.AutomationAttribute.Label = types.StringValue(attributesItem.AutomationAttribute.Label)
				attributes.AutomationAttribute.Layout = types.StringPointerValue(attributesItem.AutomationAttribute.Layout)
				attributes.AutomationAttribute.Name = types.StringValue(attributesItem.AutomationAttribute.Name)
				attributes.AutomationAttribute.Order = types.Int64PointerValue(attributesItem.AutomationAttribute.Order)
				attributes.AutomationAttribute.Placeholder = types.StringPointerValue(attributesItem.AutomationAttribute.Placeholder)
				attributes.AutomationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.AutomationAttribute.PreviewValueFormatter)
				attributes.AutomationAttribute.Protected = types.BoolPointerValue(attributesItem.AutomationAttribute.Protected)
				attributes.AutomationAttribute.Readonly = types.BoolPointerValue(attributesItem.AutomationAttribute.Readonly)
				attributes.AutomationAttribute.RenderCondition = types.StringPointerValue(attributesItem.AutomationAttribute.RenderCondition)
				attributes.AutomationAttribute.Repeatable = types.BoolPointerValue(attributesItem.AutomationAttribute.Repeatable)
				attributes.AutomationAttribute.Required = types.BoolPointerValue(attributesItem.AutomationAttribute.Required)
				attributes.AutomationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount2, settingsFlagItem2 := range attributesItem.AutomationAttribute.SettingsFlag {
					var settingsFlag2 tfTypes.SettingFlag
					settingsFlag2.Enabled = types.BoolPointerValue(settingsFlagItem2.Enabled)
					settingsFlag2.Name = types.StringPointerValue(settingsFlagItem2.Name)
					if settingsFlagCount2+1 > len(attributes.AutomationAttribute.SettingsFlag) {
						attributes.AutomationAttribute.SettingsFlag = append(attributes.AutomationAttribute.SettingsFlag, settingsFlag2)
					} else {
						attributes.AutomationAttribute.SettingsFlag[settingsFlagCount2].Enabled = settingsFlag2.Enabled
						attributes.AutomationAttribute.SettingsFlag[settingsFlagCount2].Name = settingsFlag2.Name
					}
				}
				attributes.AutomationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.AutomationAttribute.ShowInTable)
				attributes.AutomationAttribute.Sortable = types.BoolPointerValue(attributesItem.AutomationAttribute.Sortable)
				attributes.AutomationAttribute.Type = types.StringValue(string(attributesItem.AutomationAttribute.Type))
				attributes.AutomationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.AutomationAttribute.ValueFormatter)
			}
			if attributesItem.BooleanAttribute != nil {
				attributes.BooleanAttribute = &tfTypes.BooleanAttribute{}
				if attributesItem.BooleanAttribute.Manifest != nil {
					attributes.BooleanAttribute.Manifest = make([]types.String, 0, len(attributesItem.BooleanAttribute.Manifest))
					for _, v := range attributesItem.BooleanAttribute.Manifest {
						attributes.BooleanAttribute.Manifest = append(attributes.BooleanAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.BooleanAttribute.Purpose = make([]types.String, 0, len(attributesItem.BooleanAttribute.Purpose))
				for _, v := range attributesItem.BooleanAttribute.Purpose {
					attributes.BooleanAttribute.Purpose = append(attributes.BooleanAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.BooleanAttribute.Constraints == nil {
					attributes.BooleanAttribute.Constraints = nil
				} else {
					attributes.BooleanAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.BooleanAttribute.DefaultValue == nil {
					attributes.BooleanAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult3, _ := json.Marshal(attributesItem.BooleanAttribute.DefaultValue)
					attributes.BooleanAttribute.DefaultValue = types.StringValue(string(defaultValueResult3))
				}
				attributes.BooleanAttribute.Deprecated = types.BoolPointerValue(attributesItem.BooleanAttribute.Deprecated)
				if attributesItem.BooleanAttribute.DisplayType != nil {
					attributes.BooleanAttribute.DisplayType = types.StringValue(string(*attributesItem.BooleanAttribute.DisplayType))
				} else {
					attributes.BooleanAttribute.DisplayType = types.StringNull()
				}
				attributes.BooleanAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.BooleanAttribute.EntityBuilderDisableEdit)
				attributes.BooleanAttribute.FeatureFlag = types.StringPointerValue(attributesItem.BooleanAttribute.FeatureFlag)
				attributes.BooleanAttribute.Group = types.StringPointerValue(attributesItem.BooleanAttribute.Group)
				attributes.BooleanAttribute.HasPrimary = types.BoolPointerValue(attributesItem.BooleanAttribute.HasPrimary)
				attributes.BooleanAttribute.Hidden = types.BoolPointerValue(attributesItem.BooleanAttribute.Hidden)
				attributes.BooleanAttribute.HideLabel = types.BoolPointerValue(attributesItem.BooleanAttribute.HideLabel)
				attributes.BooleanAttribute.Icon = types.StringPointerValue(attributesItem.BooleanAttribute.Icon)
				attributes.BooleanAttribute.ID = types.StringPointerValue(attributesItem.BooleanAttribute.ID)
				if attributesItem.BooleanAttribute.InfoHelpers == nil {
					attributes.BooleanAttribute.InfoHelpers = nil
				} else {
					attributes.BooleanAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.BooleanAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintCustomComponent)
					attributes.BooleanAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintText)
					attributes.BooleanAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintTextKey)
					attributes.BooleanAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.BooleanAttribute.Label = types.StringValue(attributesItem.BooleanAttribute.Label)
				attributes.BooleanAttribute.Layout = types.StringPointerValue(attributesItem.BooleanAttribute.Layout)
				attributes.BooleanAttribute.Name = types.StringValue(attributesItem.BooleanAttribute.Name)
				attributes.BooleanAttribute.Order = types.Int64PointerValue(attributesItem.BooleanAttribute.Order)
				attributes.BooleanAttribute.Placeholder = types.StringPointerValue(attributesItem.BooleanAttribute.Placeholder)
				attributes.BooleanAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.BooleanAttribute.PreviewValueFormatter)
				attributes.BooleanAttribute.Protected = types.BoolPointerValue(attributesItem.BooleanAttribute.Protected)
				attributes.BooleanAttribute.Readonly = types.BoolPointerValue(attributesItem.BooleanAttribute.Readonly)
				attributes.BooleanAttribute.RenderCondition = types.StringPointerValue(attributesItem.BooleanAttribute.RenderCondition)
				attributes.BooleanAttribute.Repeatable = types.BoolPointerValue(attributesItem.BooleanAttribute.Repeatable)
				attributes.BooleanAttribute.Required = types.BoolPointerValue(attributesItem.BooleanAttribute.Required)
				attributes.BooleanAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount3, settingsFlagItem3 := range attributesItem.BooleanAttribute.SettingsFlag {
					var settingsFlag3 tfTypes.SettingFlag
					settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem3.Enabled)
					settingsFlag3.Name = types.StringPointerValue(settingsFlagItem3.Name)
					if settingsFlagCount3+1 > len(attributes.BooleanAttribute.SettingsFlag) {
						attributes.BooleanAttribute.SettingsFlag = append(attributes.BooleanAttribute.SettingsFlag, settingsFlag3)
					} else {
						attributes.BooleanAttribute.SettingsFlag[settingsFlagCount3].Enabled = settingsFlag3.Enabled
						attributes.BooleanAttribute.SettingsFlag[settingsFlagCount3].Name = settingsFlag3.Name
					}
				}
				attributes.BooleanAttribute.ShowInTable = types.BoolPointerValue(attributesItem.BooleanAttribute.ShowInTable)
				attributes.BooleanAttribute.Sortable = types.BoolPointerValue(attributesItem.BooleanAttribute.Sortable)
				attributes.BooleanAttribute.Type = types.StringValue(string(attributesItem.BooleanAttribute.Type))
				attributes.BooleanAttribute.ValueFormatter = types.StringPointerValue(attributesItem.BooleanAttribute.ValueFormatter)
			}
			if attributesItem.ComputedAttribute != nil {
				attributes.ComputedAttribute = &tfTypes.ComputedAttribute{}
				if attributesItem.ComputedAttribute.Manifest != nil {
					attributes.ComputedAttribute.Manifest = make([]types.String, 0, len(attributesItem.ComputedAttribute.Manifest))
					for _, v := range attributesItem.ComputedAttribute.Manifest {
						attributes.ComputedAttribute.Manifest = append(attributes.ComputedAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.ComputedAttribute.Purpose = make([]types.String, 0, len(attributesItem.ComputedAttribute.Purpose))
				for _, v := range attributesItem.ComputedAttribute.Purpose {
					attributes.ComputedAttribute.Purpose = append(attributes.ComputedAttribute.Purpose, types.StringValue(v))
				}
				attributes.ComputedAttribute.AmountField = types.StringPointerValue(attributesItem.ComputedAttribute.AmountField)
				attributes.ComputedAttribute.Computed = types.BoolPointerValue(attributesItem.ComputedAttribute.Computed)
				if attributesItem.ComputedAttribute.Constraints == nil {
					attributes.ComputedAttribute.Constraints = nil
				} else {
					attributes.ComputedAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				attributes.ComputedAttribute.CurrencyField = types.StringPointerValue(attributesItem.ComputedAttribute.CurrencyField)
				if attributesItem.ComputedAttribute.DefaultValue == nil {
					attributes.ComputedAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult4, _ := json.Marshal(attributesItem.ComputedAttribute.DefaultValue)
					attributes.ComputedAttribute.DefaultValue = types.StringValue(string(defaultValueResult4))
				}
				attributes.ComputedAttribute.Deprecated = types.BoolPointerValue(attributesItem.ComputedAttribute.Deprecated)
				attributes.ComputedAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.ComputedAttribute.EntityBuilderDisableEdit)
				attributes.ComputedAttribute.FeatureFlag = types.StringPointerValue(attributesItem.ComputedAttribute.FeatureFlag)
				attributes.ComputedAttribute.Group = types.StringPointerValue(attributesItem.ComputedAttribute.Group)
				attributes.ComputedAttribute.HasPrimary = types.BoolPointerValue(attributesItem.ComputedAttribute.HasPrimary)
				attributes.ComputedAttribute.Hidden = types.BoolPointerValue(attributesItem.ComputedAttribute.Hidden)
				attributes.ComputedAttribute.HideLabel = types.BoolPointerValue(attributesItem.ComputedAttribute.HideLabel)
				attributes.ComputedAttribute.Icon = types.StringPointerValue(attributesItem.ComputedAttribute.Icon)
				attributes.ComputedAttribute.ID = types.StringPointerValue(attributesItem.ComputedAttribute.ID)
				if attributesItem.ComputedAttribute.InfoHelpers == nil {
					attributes.ComputedAttribute.InfoHelpers = nil
				} else {
					attributes.ComputedAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.ComputedAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintCustomComponent)
					attributes.ComputedAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintText)
					attributes.ComputedAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintTextKey)
					attributes.ComputedAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.ComputedAttribute.Label = types.StringValue(attributesItem.ComputedAttribute.Label)
				attributes.ComputedAttribute.Layout = types.StringPointerValue(attributesItem.ComputedAttribute.Layout)
				attributes.ComputedAttribute.Name = types.StringValue(attributesItem.ComputedAttribute.Name)
				attributes.ComputedAttribute.Order = types.Int64PointerValue(attributesItem.ComputedAttribute.Order)
				attributes.ComputedAttribute.Placeholder = types.StringPointerValue(attributesItem.ComputedAttribute.Placeholder)
				attributes.ComputedAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.ComputedAttribute.PreviewValueFormatter)
				attributes.ComputedAttribute.Protected = types.BoolPointerValue(attributesItem.ComputedAttribute.Protected)
				attributes.ComputedAttribute.Readonly = types.BoolPointerValue(attributesItem.ComputedAttribute.Readonly)
				attributes.ComputedAttribute.RenderCondition = types.StringPointerValue(attributesItem.ComputedAttribute.RenderCondition)
				attributes.ComputedAttribute.Repeatable = types.BoolPointerValue(attributesItem.ComputedAttribute.Repeatable)
				attributes.ComputedAttribute.Required = types.BoolPointerValue(attributesItem.ComputedAttribute.Required)
				attributes.ComputedAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount4, settingsFlagItem4 := range attributesItem.ComputedAttribute.SettingsFlag {
					var settingsFlag4 tfTypes.SettingFlag
					settingsFlag4.Enabled = types.BoolPointerValue(settingsFlagItem4.Enabled)
					settingsFlag4.Name = types.StringPointerValue(settingsFlagItem4.Name)
					if settingsFlagCount4+1 > len(attributes.ComputedAttribute.SettingsFlag) {
						attributes.ComputedAttribute.SettingsFlag = append(attributes.ComputedAttribute.SettingsFlag, settingsFlag4)
					} else {
						attributes.ComputedAttribute.SettingsFlag[settingsFlagCount4].Enabled = settingsFlag4.Enabled
						attributes.ComputedAttribute.SettingsFlag[settingsFlagCount4].Name = settingsFlag4.Name
					}
				}
				attributes.ComputedAttribute.ShowInTable = types.BoolPointerValue(attributesItem.ComputedAttribute.ShowInTable)
				attributes.ComputedAttribute.Sortable = types.BoolPointerValue(attributesItem.ComputedAttribute.Sortable)
				attributes.ComputedAttribute.Type = types.StringValue(string(attributesItem.ComputedAttribute.Type))
				attributes.ComputedAttribute.ValueFormatter = types.StringValue(attributesItem.ComputedAttribute.ValueFormatter)
			}
			if attributesItem.ConsentAttribute != nil {
				attributes.ConsentAttribute = &tfTypes.ConsentAttribute{}
				if attributesItem.ConsentAttribute.Manifest != nil {
					attributes.ConsentAttribute.Manifest = make([]types.String, 0, len(attributesItem.ConsentAttribute.Manifest))
					for _, v := range attributesItem.ConsentAttribute.Manifest {
						attributes.ConsentAttribute.Manifest = append(attributes.ConsentAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.ConsentAttribute.Purpose = make([]types.String, 0, len(attributesItem.ConsentAttribute.Purpose))
				for _, v := range attributesItem.ConsentAttribute.Purpose {
					attributes.ConsentAttribute.Purpose = append(attributes.ConsentAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.ConsentAttribute.Constraints == nil {
					attributes.ConsentAttribute.Constraints = nil
				} else {
					attributes.ConsentAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.ConsentAttribute.DefaultValue == nil {
					attributes.ConsentAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult5, _ := json.Marshal(attributesItem.ConsentAttribute.DefaultValue)
					attributes.ConsentAttribute.DefaultValue = types.StringValue(string(defaultValueResult5))
				}
				attributes.ConsentAttribute.Deprecated = types.BoolPointerValue(attributesItem.ConsentAttribute.Deprecated)
				attributes.ConsentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.ConsentAttribute.EntityBuilderDisableEdit)
				attributes.ConsentAttribute.FeatureFlag = types.StringPointerValue(attributesItem.ConsentAttribute.FeatureFlag)
				attributes.ConsentAttribute.Group = types.StringPointerValue(attributesItem.ConsentAttribute.Group)
				attributes.ConsentAttribute.HasPrimary = types.BoolPointerValue(attributesItem.ConsentAttribute.HasPrimary)
				attributes.ConsentAttribute.Hidden = types.BoolPointerValue(attributesItem.ConsentAttribute.Hidden)
				attributes.ConsentAttribute.HideLabel = types.BoolPointerValue(attributesItem.ConsentAttribute.HideLabel)
				attributes.ConsentAttribute.Icon = types.StringPointerValue(attributesItem.ConsentAttribute.Icon)
				attributes.ConsentAttribute.ID = types.StringPointerValue(attributesItem.ConsentAttribute.ID)
				attributes.ConsentAttribute.Identifiers = make([]types.String, 0, len(attributesItem.ConsentAttribute.Identifiers))
				for _, v := range attributesItem.ConsentAttribute.Identifiers {
					attributes.ConsentAttribute.Identifiers = append(attributes.ConsentAttribute.Identifiers, types.StringValue(v))
				}
				if attributesItem.ConsentAttribute.InfoHelpers == nil {
					attributes.ConsentAttribute.InfoHelpers = nil
				} else {
					attributes.ConsentAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.ConsentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintCustomComponent)
					attributes.ConsentAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintText)
					attributes.ConsentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintTextKey)
					attributes.ConsentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.ConsentAttribute.Label = types.StringValue(attributesItem.ConsentAttribute.Label)
				attributes.ConsentAttribute.Layout = types.StringPointerValue(attributesItem.ConsentAttribute.Layout)
				attributes.ConsentAttribute.Name = types.StringValue(attributesItem.ConsentAttribute.Name)
				attributes.ConsentAttribute.Order = types.Int64PointerValue(attributesItem.ConsentAttribute.Order)
				attributes.ConsentAttribute.Placeholder = types.StringPointerValue(attributesItem.ConsentAttribute.Placeholder)
				attributes.ConsentAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.ConsentAttribute.PreviewValueFormatter)
				attributes.ConsentAttribute.Protected = types.BoolPointerValue(attributesItem.ConsentAttribute.Protected)
				attributes.ConsentAttribute.Readonly = types.BoolPointerValue(attributesItem.ConsentAttribute.Readonly)
				attributes.ConsentAttribute.RenderCondition = types.StringPointerValue(attributesItem.ConsentAttribute.RenderCondition)
				attributes.ConsentAttribute.Repeatable = types.BoolPointerValue(attributesItem.ConsentAttribute.Repeatable)
				attributes.ConsentAttribute.Required = types.BoolPointerValue(attributesItem.ConsentAttribute.Required)
				attributes.ConsentAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount5, settingsFlagItem5 := range attributesItem.ConsentAttribute.SettingsFlag {
					var settingsFlag5 tfTypes.SettingFlag
					settingsFlag5.Enabled = types.BoolPointerValue(settingsFlagItem5.Enabled)
					settingsFlag5.Name = types.StringPointerValue(settingsFlagItem5.Name)
					if settingsFlagCount5+1 > len(attributes.ConsentAttribute.SettingsFlag) {
						attributes.ConsentAttribute.SettingsFlag = append(attributes.ConsentAttribute.SettingsFlag, settingsFlag5)
					} else {
						attributes.ConsentAttribute.SettingsFlag[settingsFlagCount5].Enabled = settingsFlag5.Enabled
						attributes.ConsentAttribute.SettingsFlag[settingsFlagCount5].Name = settingsFlag5.Name
					}
				}
				attributes.ConsentAttribute.ShowInTable = types.BoolPointerValue(attributesItem.ConsentAttribute.ShowInTable)
				attributes.ConsentAttribute.Sortable = types.BoolPointerValue(attributesItem.ConsentAttribute.Sortable)
				attributes.ConsentAttribute.Topic = types.StringValue(attributesItem.ConsentAttribute.Topic)
				attributes.ConsentAttribute.Type = types.StringValue(string(attributesItem.ConsentAttribute.Type))
				attributes.ConsentAttribute.ValueFormatter = types.StringPointerValue(attributesItem.ConsentAttribute.ValueFormatter)
			}
			if attributesItem.CountryAttribute != nil {
				attributes.CountryAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.CountryAttribute.Manifest != nil {
					attributes.CountryAttribute.Manifest = make([]types.String, 0, len(attributesItem.CountryAttribute.Manifest))
					for _, v := range attributesItem.CountryAttribute.Manifest {
						attributes.CountryAttribute.Manifest = append(attributes.CountryAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.CountryAttribute.Purpose = make([]types.String, 0, len(attributesItem.CountryAttribute.Purpose))
				for _, v := range attributesItem.CountryAttribute.Purpose {
					attributes.CountryAttribute.Purpose = append(attributes.CountryAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.CountryAttribute.Constraints == nil {
					attributes.CountryAttribute.Constraints = nil
				} else {
					attributes.CountryAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.CountryAttribute.DefaultValue == nil {
					attributes.CountryAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult6, _ := json.Marshal(attributesItem.CountryAttribute.DefaultValue)
					attributes.CountryAttribute.DefaultValue = types.StringValue(string(defaultValueResult6))
				}
				attributes.CountryAttribute.Deprecated = types.BoolPointerValue(attributesItem.CountryAttribute.Deprecated)
				attributes.CountryAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.CountryAttribute.EntityBuilderDisableEdit)
				attributes.CountryAttribute.FeatureFlag = types.StringPointerValue(attributesItem.CountryAttribute.FeatureFlag)
				attributes.CountryAttribute.Group = types.StringPointerValue(attributesItem.CountryAttribute.Group)
				attributes.CountryAttribute.HasPrimary = types.BoolPointerValue(attributesItem.CountryAttribute.HasPrimary)
				attributes.CountryAttribute.Hidden = types.BoolPointerValue(attributesItem.CountryAttribute.Hidden)
				attributes.CountryAttribute.HideLabel = types.BoolPointerValue(attributesItem.CountryAttribute.HideLabel)
				attributes.CountryAttribute.Icon = types.StringPointerValue(attributesItem.CountryAttribute.Icon)
				attributes.CountryAttribute.ID = types.StringPointerValue(attributesItem.CountryAttribute.ID)
				if attributesItem.CountryAttribute.InfoHelpers == nil {
					attributes.CountryAttribute.InfoHelpers = nil
				} else {
					attributes.CountryAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.CountryAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintCustomComponent)
					attributes.CountryAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintText)
					attributes.CountryAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintTextKey)
					attributes.CountryAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.CountryAttribute.Label = types.StringValue(attributesItem.CountryAttribute.Label)
				attributes.CountryAttribute.Layout = types.StringPointerValue(attributesItem.CountryAttribute.Layout)
				attributes.CountryAttribute.Name = types.StringValue(attributesItem.CountryAttribute.Name)
				attributes.CountryAttribute.Order = types.Int64PointerValue(attributesItem.CountryAttribute.Order)
				attributes.CountryAttribute.Placeholder = types.StringPointerValue(attributesItem.CountryAttribute.Placeholder)
				attributes.CountryAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.CountryAttribute.PreviewValueFormatter)
				attributes.CountryAttribute.Protected = types.BoolPointerValue(attributesItem.CountryAttribute.Protected)
				attributes.CountryAttribute.Readonly = types.BoolPointerValue(attributesItem.CountryAttribute.Readonly)
				attributes.CountryAttribute.RenderCondition = types.StringPointerValue(attributesItem.CountryAttribute.RenderCondition)
				attributes.CountryAttribute.Repeatable = types.BoolPointerValue(attributesItem.CountryAttribute.Repeatable)
				attributes.CountryAttribute.Required = types.BoolPointerValue(attributesItem.CountryAttribute.Required)
				attributes.CountryAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount6, settingsFlagItem6 := range attributesItem.CountryAttribute.SettingsFlag {
					var settingsFlag6 tfTypes.SettingFlag
					settingsFlag6.Enabled = types.BoolPointerValue(settingsFlagItem6.Enabled)
					settingsFlag6.Name = types.StringPointerValue(settingsFlagItem6.Name)
					if settingsFlagCount6+1 > len(attributes.CountryAttribute.SettingsFlag) {
						attributes.CountryAttribute.SettingsFlag = append(attributes.CountryAttribute.SettingsFlag, settingsFlag6)
					} else {
						attributes.CountryAttribute.SettingsFlag[settingsFlagCount6].Enabled = settingsFlag6.Enabled
						attributes.CountryAttribute.SettingsFlag[settingsFlagCount6].Name = settingsFlag6.Name
					}
				}
				attributes.CountryAttribute.ShowInTable = types.BoolPointerValue(attributesItem.CountryAttribute.ShowInTable)
				attributes.CountryAttribute.Sortable = types.BoolPointerValue(attributesItem.CountryAttribute.Sortable)
				attributes.CountryAttribute.Type = types.StringValue(string(attributesItem.CountryAttribute.Type))
				attributes.CountryAttribute.ValueFormatter = types.StringPointerValue(attributesItem.CountryAttribute.ValueFormatter)
			}
			if attributesItem.CurrencyAttribute != nil {
				attributes.CurrencyAttribute = &tfTypes.CurrencyAttribute{}
				if attributesItem.CurrencyAttribute.Manifest != nil {
					attributes.CurrencyAttribute.Manifest = make([]types.String, 0, len(attributesItem.CurrencyAttribute.Manifest))
					for _, v := range attributesItem.CurrencyAttribute.Manifest {
						attributes.CurrencyAttribute.Manifest = append(attributes.CurrencyAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.CurrencyAttribute.Purpose = make([]types.String, 0, len(attributesItem.CurrencyAttribute.Purpose))
				for _, v := range attributesItem.CurrencyAttribute.Purpose {
					attributes.CurrencyAttribute.Purpose = append(attributes.CurrencyAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.CurrencyAttribute.Constraints == nil {
					attributes.CurrencyAttribute.Constraints = nil
				} else {
					attributes.CurrencyAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				attributes.CurrencyAttribute.Currency = []tfTypes.CurrencyAttributeCurrency{}
				for currencyCount, currencyItem := range attributesItem.CurrencyAttribute.Currency {
					var currency tfTypes.CurrencyAttributeCurrency
					if currencyItem.Currency1 != nil {
						currency.One = &tfTypes.CurrencyAttributeCurrency1{}
						currency.One.Code = types.StringValue(currencyItem.Currency1.Code)
						currency.One.Description = types.StringValue(currencyItem.Currency1.Description)
						currency.One.Flag = types.StringPointerValue(currencyItem.Currency1.Flag)
						currency.One.Symbol = types.StringValue(currencyItem.Currency1.Symbol)
					}
					if currencyCount+1 > len(attributes.CurrencyAttribute.Currency) {
						attributes.CurrencyAttribute.Currency = append(attributes.CurrencyAttribute.Currency, currency)
					} else {
						attributes.CurrencyAttribute.Currency[currencyCount].One = currency.One
					}
				}
				attributes.CurrencyAttribute.CurrencySelectorOnly = types.BoolPointerValue(attributesItem.CurrencyAttribute.CurrencySelectorOnly)
				if attributesItem.CurrencyAttribute.DefaultValue == nil {
					attributes.CurrencyAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult7, _ := json.Marshal(attributesItem.CurrencyAttribute.DefaultValue)
					attributes.CurrencyAttribute.DefaultValue = types.StringValue(string(defaultValueResult7))
				}
				attributes.CurrencyAttribute.Deprecated = types.BoolPointerValue(attributesItem.CurrencyAttribute.Deprecated)
				attributes.CurrencyAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.CurrencyAttribute.EntityBuilderDisableEdit)
				attributes.CurrencyAttribute.FeatureFlag = types.StringPointerValue(attributesItem.CurrencyAttribute.FeatureFlag)
				attributes.CurrencyAttribute.Group = types.StringPointerValue(attributesItem.CurrencyAttribute.Group)
				attributes.CurrencyAttribute.HasPrimary = types.BoolPointerValue(attributesItem.CurrencyAttribute.HasPrimary)
				attributes.CurrencyAttribute.Hidden = types.BoolPointerValue(attributesItem.CurrencyAttribute.Hidden)
				attributes.CurrencyAttribute.HideLabel = types.BoolPointerValue(attributesItem.CurrencyAttribute.HideLabel)
				attributes.CurrencyAttribute.Icon = types.StringPointerValue(attributesItem.CurrencyAttribute.Icon)
				attributes.CurrencyAttribute.ID = types.StringPointerValue(attributesItem.CurrencyAttribute.ID)
				if attributesItem.CurrencyAttribute.InfoHelpers == nil {
					attributes.CurrencyAttribute.InfoHelpers = nil
				} else {
					attributes.CurrencyAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.CurrencyAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintCustomComponent)
					attributes.CurrencyAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintText)
					attributes.CurrencyAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintTextKey)
					attributes.CurrencyAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.CurrencyAttribute.Label = types.StringValue(attributesItem.CurrencyAttribute.Label)
				attributes.CurrencyAttribute.Layout = types.StringPointerValue(attributesItem.CurrencyAttribute.Layout)
				attributes.CurrencyAttribute.Name = types.StringValue(attributesItem.CurrencyAttribute.Name)
				attributes.CurrencyAttribute.Order = types.Int64PointerValue(attributesItem.CurrencyAttribute.Order)
				attributes.CurrencyAttribute.Placeholder = types.StringPointerValue(attributesItem.CurrencyAttribute.Placeholder)
				attributes.CurrencyAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.CurrencyAttribute.PreviewValueFormatter)
				attributes.CurrencyAttribute.Protected = types.BoolPointerValue(attributesItem.CurrencyAttribute.Protected)
				attributes.CurrencyAttribute.Readonly = types.BoolPointerValue(attributesItem.CurrencyAttribute.Readonly)
				attributes.CurrencyAttribute.RenderCondition = types.StringPointerValue(attributesItem.CurrencyAttribute.RenderCondition)
				attributes.CurrencyAttribute.Repeatable = types.BoolPointerValue(attributesItem.CurrencyAttribute.Repeatable)
				attributes.CurrencyAttribute.Required = types.BoolPointerValue(attributesItem.CurrencyAttribute.Required)
				attributes.CurrencyAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount7, settingsFlagItem7 := range attributesItem.CurrencyAttribute.SettingsFlag {
					var settingsFlag7 tfTypes.SettingFlag
					settingsFlag7.Enabled = types.BoolPointerValue(settingsFlagItem7.Enabled)
					settingsFlag7.Name = types.StringPointerValue(settingsFlagItem7.Name)
					if settingsFlagCount7+1 > len(attributes.CurrencyAttribute.SettingsFlag) {
						attributes.CurrencyAttribute.SettingsFlag = append(attributes.CurrencyAttribute.SettingsFlag, settingsFlag7)
					} else {
						attributes.CurrencyAttribute.SettingsFlag[settingsFlagCount7].Enabled = settingsFlag7.Enabled
						attributes.CurrencyAttribute.SettingsFlag[settingsFlagCount7].Name = settingsFlag7.Name
					}
				}
				attributes.CurrencyAttribute.ShowInTable = types.BoolPointerValue(attributesItem.CurrencyAttribute.ShowInTable)
				attributes.CurrencyAttribute.Sortable = types.BoolPointerValue(attributesItem.CurrencyAttribute.Sortable)
				attributes.CurrencyAttribute.Type = types.StringValue(string(attributesItem.CurrencyAttribute.Type))
				attributes.CurrencyAttribute.ValueFormatter = types.StringPointerValue(attributesItem.CurrencyAttribute.ValueFormatter)
			}
			if attributesItem.DateAttribute != nil {
				attributes.DateAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.DateAttribute.Manifest != nil {
					attributes.DateAttribute.Manifest = make([]types.String, 0, len(attributesItem.DateAttribute.Manifest))
					for _, v := range attributesItem.DateAttribute.Manifest {
						attributes.DateAttribute.Manifest = append(attributes.DateAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.DateAttribute.Purpose = make([]types.String, 0, len(attributesItem.DateAttribute.Purpose))
				for _, v := range attributesItem.DateAttribute.Purpose {
					attributes.DateAttribute.Purpose = append(attributes.DateAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.DateAttribute.Constraints == nil {
					attributes.DateAttribute.Constraints = nil
				} else {
					attributes.DateAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.DateAttribute.DefaultValue == nil {
					attributes.DateAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult8, _ := json.Marshal(attributesItem.DateAttribute.DefaultValue)
					attributes.DateAttribute.DefaultValue = types.StringValue(string(defaultValueResult8))
				}
				attributes.DateAttribute.Deprecated = types.BoolPointerValue(attributesItem.DateAttribute.Deprecated)
				attributes.DateAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.DateAttribute.EntityBuilderDisableEdit)
				attributes.DateAttribute.FeatureFlag = types.StringPointerValue(attributesItem.DateAttribute.FeatureFlag)
				attributes.DateAttribute.Group = types.StringPointerValue(attributesItem.DateAttribute.Group)
				attributes.DateAttribute.HasPrimary = types.BoolPointerValue(attributesItem.DateAttribute.HasPrimary)
				attributes.DateAttribute.Hidden = types.BoolPointerValue(attributesItem.DateAttribute.Hidden)
				attributes.DateAttribute.HideLabel = types.BoolPointerValue(attributesItem.DateAttribute.HideLabel)
				attributes.DateAttribute.Icon = types.StringPointerValue(attributesItem.DateAttribute.Icon)
				attributes.DateAttribute.ID = types.StringPointerValue(attributesItem.DateAttribute.ID)
				if attributesItem.DateAttribute.InfoHelpers == nil {
					attributes.DateAttribute.InfoHelpers = nil
				} else {
					attributes.DateAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.DateAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintCustomComponent)
					attributes.DateAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintText)
					attributes.DateAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintTextKey)
					attributes.DateAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.DateAttribute.Label = types.StringValue(attributesItem.DateAttribute.Label)
				attributes.DateAttribute.Layout = types.StringPointerValue(attributesItem.DateAttribute.Layout)
				attributes.DateAttribute.Name = types.StringValue(attributesItem.DateAttribute.Name)
				attributes.DateAttribute.Order = types.Int64PointerValue(attributesItem.DateAttribute.Order)
				attributes.DateAttribute.Placeholder = types.StringPointerValue(attributesItem.DateAttribute.Placeholder)
				attributes.DateAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.DateAttribute.PreviewValueFormatter)
				attributes.DateAttribute.Protected = types.BoolPointerValue(attributesItem.DateAttribute.Protected)
				attributes.DateAttribute.Readonly = types.BoolPointerValue(attributesItem.DateAttribute.Readonly)
				attributes.DateAttribute.RenderCondition = types.StringPointerValue(attributesItem.DateAttribute.RenderCondition)
				attributes.DateAttribute.Repeatable = types.BoolPointerValue(attributesItem.DateAttribute.Repeatable)
				attributes.DateAttribute.Required = types.BoolPointerValue(attributesItem.DateAttribute.Required)
				attributes.DateAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount8, settingsFlagItem8 := range attributesItem.DateAttribute.SettingsFlag {
					var settingsFlag8 tfTypes.SettingFlag
					settingsFlag8.Enabled = types.BoolPointerValue(settingsFlagItem8.Enabled)
					settingsFlag8.Name = types.StringPointerValue(settingsFlagItem8.Name)
					if settingsFlagCount8+1 > len(attributes.DateAttribute.SettingsFlag) {
						attributes.DateAttribute.SettingsFlag = append(attributes.DateAttribute.SettingsFlag, settingsFlag8)
					} else {
						attributes.DateAttribute.SettingsFlag[settingsFlagCount8].Enabled = settingsFlag8.Enabled
						attributes.DateAttribute.SettingsFlag[settingsFlagCount8].Name = settingsFlag8.Name
					}
				}
				attributes.DateAttribute.ShowInTable = types.BoolPointerValue(attributesItem.DateAttribute.ShowInTable)
				attributes.DateAttribute.Sortable = types.BoolPointerValue(attributesItem.DateAttribute.Sortable)
				attributes.DateAttribute.Type = types.StringValue(string(attributesItem.DateAttribute.Type))
				attributes.DateAttribute.ValueFormatter = types.StringPointerValue(attributesItem.DateAttribute.ValueFormatter)
			}
			if attributesItem.EmailAttribute != nil {
				attributes.EmailAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.EmailAttribute.Manifest != nil {
					attributes.EmailAttribute.Manifest = make([]types.String, 0, len(attributesItem.EmailAttribute.Manifest))
					for _, v := range attributesItem.EmailAttribute.Manifest {
						attributes.EmailAttribute.Manifest = append(attributes.EmailAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.EmailAttribute.Purpose = make([]types.String, 0, len(attributesItem.EmailAttribute.Purpose))
				for _, v := range attributesItem.EmailAttribute.Purpose {
					attributes.EmailAttribute.Purpose = append(attributes.EmailAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.EmailAttribute.Constraints == nil {
					attributes.EmailAttribute.Constraints = nil
				} else {
					attributes.EmailAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.EmailAttribute.DefaultValue == nil {
					attributes.EmailAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult9, _ := json.Marshal(attributesItem.EmailAttribute.DefaultValue)
					attributes.EmailAttribute.DefaultValue = types.StringValue(string(defaultValueResult9))
				}
				attributes.EmailAttribute.Deprecated = types.BoolPointerValue(attributesItem.EmailAttribute.Deprecated)
				attributes.EmailAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.EmailAttribute.EntityBuilderDisableEdit)
				attributes.EmailAttribute.FeatureFlag = types.StringPointerValue(attributesItem.EmailAttribute.FeatureFlag)
				attributes.EmailAttribute.Group = types.StringPointerValue(attributesItem.EmailAttribute.Group)
				attributes.EmailAttribute.HasPrimary = types.BoolPointerValue(attributesItem.EmailAttribute.HasPrimary)
				attributes.EmailAttribute.Hidden = types.BoolPointerValue(attributesItem.EmailAttribute.Hidden)
				attributes.EmailAttribute.HideLabel = types.BoolPointerValue(attributesItem.EmailAttribute.HideLabel)
				attributes.EmailAttribute.Icon = types.StringPointerValue(attributesItem.EmailAttribute.Icon)
				attributes.EmailAttribute.ID = types.StringPointerValue(attributesItem.EmailAttribute.ID)
				if attributesItem.EmailAttribute.InfoHelpers == nil {
					attributes.EmailAttribute.InfoHelpers = nil
				} else {
					attributes.EmailAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.EmailAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintCustomComponent)
					attributes.EmailAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintText)
					attributes.EmailAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintTextKey)
					attributes.EmailAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.EmailAttribute.Label = types.StringValue(attributesItem.EmailAttribute.Label)
				attributes.EmailAttribute.Layout = types.StringPointerValue(attributesItem.EmailAttribute.Layout)
				attributes.EmailAttribute.Name = types.StringValue(attributesItem.EmailAttribute.Name)
				attributes.EmailAttribute.Order = types.Int64PointerValue(attributesItem.EmailAttribute.Order)
				attributes.EmailAttribute.Placeholder = types.StringPointerValue(attributesItem.EmailAttribute.Placeholder)
				attributes.EmailAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.EmailAttribute.PreviewValueFormatter)
				attributes.EmailAttribute.Protected = types.BoolPointerValue(attributesItem.EmailAttribute.Protected)
				attributes.EmailAttribute.Readonly = types.BoolPointerValue(attributesItem.EmailAttribute.Readonly)
				attributes.EmailAttribute.RenderCondition = types.StringPointerValue(attributesItem.EmailAttribute.RenderCondition)
				attributes.EmailAttribute.Repeatable = types.BoolPointerValue(attributesItem.EmailAttribute.Repeatable)
				attributes.EmailAttribute.Required = types.BoolPointerValue(attributesItem.EmailAttribute.Required)
				attributes.EmailAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount9, settingsFlagItem9 := range attributesItem.EmailAttribute.SettingsFlag {
					var settingsFlag9 tfTypes.SettingFlag
					settingsFlag9.Enabled = types.BoolPointerValue(settingsFlagItem9.Enabled)
					settingsFlag9.Name = types.StringPointerValue(settingsFlagItem9.Name)
					if settingsFlagCount9+1 > len(attributes.EmailAttribute.SettingsFlag) {
						attributes.EmailAttribute.SettingsFlag = append(attributes.EmailAttribute.SettingsFlag, settingsFlag9)
					} else {
						attributes.EmailAttribute.SettingsFlag[settingsFlagCount9].Enabled = settingsFlag9.Enabled
						attributes.EmailAttribute.SettingsFlag[settingsFlagCount9].Name = settingsFlag9.Name
					}
				}
				attributes.EmailAttribute.ShowInTable = types.BoolPointerValue(attributesItem.EmailAttribute.ShowInTable)
				attributes.EmailAttribute.Sortable = types.BoolPointerValue(attributesItem.EmailAttribute.Sortable)
				attributes.EmailAttribute.Type = types.StringValue(string(attributesItem.EmailAttribute.Type))
				attributes.EmailAttribute.ValueFormatter = types.StringPointerValue(attributesItem.EmailAttribute.ValueFormatter)
			}
			if attributesItem.FileAttribute != nil {
				attributes.FileAttribute = &tfTypes.FileAttribute{}
				if attributesItem.FileAttribute.Manifest != nil {
					attributes.FileAttribute.Manifest = make([]types.String, 0, len(attributesItem.FileAttribute.Manifest))
					for _, v := range attributesItem.FileAttribute.Manifest {
						attributes.FileAttribute.Manifest = append(attributes.FileAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.FileAttribute.Purpose = make([]types.String, 0, len(attributesItem.FileAttribute.Purpose))
				for _, v := range attributesItem.FileAttribute.Purpose {
					attributes.FileAttribute.Purpose = append(attributes.FileAttribute.Purpose, types.StringValue(v))
				}
				attributes.FileAttribute.AllowedExtensions = make([]types.String, 0, len(attributesItem.FileAttribute.AllowedExtensions))
				for _, v := range attributesItem.FileAttribute.AllowedExtensions {
					attributes.FileAttribute.AllowedExtensions = append(attributes.FileAttribute.AllowedExtensions, types.StringValue(v))
				}
				if attributesItem.FileAttribute.Constraints == nil {
					attributes.FileAttribute.Constraints = nil
				} else {
					attributes.FileAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.FileAttribute.DefaultAccessControl != nil {
					attributes.FileAttribute.DefaultAccessControl = types.StringValue(string(*attributesItem.FileAttribute.DefaultAccessControl))
				} else {
					attributes.FileAttribute.DefaultAccessControl = types.StringNull()
				}
				if attributesItem.FileAttribute.DefaultValue == nil {
					attributes.FileAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult10, _ := json.Marshal(attributesItem.FileAttribute.DefaultValue)
					attributes.FileAttribute.DefaultValue = types.StringValue(string(defaultValueResult10))
				}
				attributes.FileAttribute.Deprecated = types.BoolPointerValue(attributesItem.FileAttribute.Deprecated)
				attributes.FileAttribute.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem.FileAttribute.DisplayImagesLandscaped)
				attributes.FileAttribute.EnableDescription = types.BoolPointerValue(attributesItem.FileAttribute.EnableDescription)
				attributes.FileAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.FileAttribute.EntityBuilderDisableEdit)
				attributes.FileAttribute.FeatureFlag = types.StringPointerValue(attributesItem.FileAttribute.FeatureFlag)
				attributes.FileAttribute.Group = types.StringPointerValue(attributesItem.FileAttribute.Group)
				attributes.FileAttribute.HasPrimary = types.BoolPointerValue(attributesItem.FileAttribute.HasPrimary)
				attributes.FileAttribute.Hidden = types.BoolPointerValue(attributesItem.FileAttribute.Hidden)
				attributes.FileAttribute.HideLabel = types.BoolPointerValue(attributesItem.FileAttribute.HideLabel)
				attributes.FileAttribute.Icon = types.StringPointerValue(attributesItem.FileAttribute.Icon)
				attributes.FileAttribute.ID = types.StringPointerValue(attributesItem.FileAttribute.ID)
				if attributesItem.FileAttribute.InfoHelpers == nil {
					attributes.FileAttribute.InfoHelpers = nil
				} else {
					attributes.FileAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.FileAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintCustomComponent)
					attributes.FileAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintText)
					attributes.FileAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintTextKey)
					attributes.FileAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.FileAttribute.Label = types.StringValue(attributesItem.FileAttribute.Label)
				attributes.FileAttribute.Layout = types.StringPointerValue(attributesItem.FileAttribute.Layout)
				attributes.FileAttribute.Multiple = types.BoolPointerValue(attributesItem.FileAttribute.Multiple)
				attributes.FileAttribute.Name = types.StringValue(attributesItem.FileAttribute.Name)
				attributes.FileAttribute.Order = types.Int64PointerValue(attributesItem.FileAttribute.Order)
				attributes.FileAttribute.Placeholder = types.StringPointerValue(attributesItem.FileAttribute.Placeholder)
				attributes.FileAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.FileAttribute.PreviewValueFormatter)
				attributes.FileAttribute.Protected = types.BoolPointerValue(attributesItem.FileAttribute.Protected)
				attributes.FileAttribute.Readonly = types.BoolPointerValue(attributesItem.FileAttribute.Readonly)
				attributes.FileAttribute.RenderCondition = types.StringPointerValue(attributesItem.FileAttribute.RenderCondition)
				attributes.FileAttribute.Repeatable = types.BoolPointerValue(attributesItem.FileAttribute.Repeatable)
				attributes.FileAttribute.Required = types.BoolPointerValue(attributesItem.FileAttribute.Required)
				attributes.FileAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount10, settingsFlagItem10 := range attributesItem.FileAttribute.SettingsFlag {
					var settingsFlag10 tfTypes.SettingFlag
					settingsFlag10.Enabled = types.BoolPointerValue(settingsFlagItem10.Enabled)
					settingsFlag10.Name = types.StringPointerValue(settingsFlagItem10.Name)
					if settingsFlagCount10+1 > len(attributes.FileAttribute.SettingsFlag) {
						attributes.FileAttribute.SettingsFlag = append(attributes.FileAttribute.SettingsFlag, settingsFlag10)
					} else {
						attributes.FileAttribute.SettingsFlag[settingsFlagCount10].Enabled = settingsFlag10.Enabled
						attributes.FileAttribute.SettingsFlag[settingsFlagCount10].Name = settingsFlag10.Name
					}
				}
				attributes.FileAttribute.ShowInTable = types.BoolPointerValue(attributesItem.FileAttribute.ShowInTable)
				attributes.FileAttribute.Sortable = types.BoolPointerValue(attributesItem.FileAttribute.Sortable)
				attributes.FileAttribute.Type = types.StringValue(string(attributesItem.FileAttribute.Type))
				attributes.FileAttribute.ValueFormatter = types.StringPointerValue(attributesItem.FileAttribute.ValueFormatter)
			}
			if attributesItem.InternalAttribute != nil {
				attributes.InternalAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.InternalAttribute.Manifest != nil {
					attributes.InternalAttribute.Manifest = make([]types.String, 0, len(attributesItem.InternalAttribute.Manifest))
					for _, v := range attributesItem.InternalAttribute.Manifest {
						attributes.InternalAttribute.Manifest = append(attributes.InternalAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.InternalAttribute.Purpose = make([]types.String, 0, len(attributesItem.InternalAttribute.Purpose))
				for _, v := range attributesItem.InternalAttribute.Purpose {
					attributes.InternalAttribute.Purpose = append(attributes.InternalAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.InternalAttribute.Constraints == nil {
					attributes.InternalAttribute.Constraints = nil
				} else {
					attributes.InternalAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.InternalAttribute.DefaultValue == nil {
					attributes.InternalAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult11, _ := json.Marshal(attributesItem.InternalAttribute.DefaultValue)
					attributes.InternalAttribute.DefaultValue = types.StringValue(string(defaultValueResult11))
				}
				attributes.InternalAttribute.Deprecated = types.BoolPointerValue(attributesItem.InternalAttribute.Deprecated)
				attributes.InternalAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.InternalAttribute.EntityBuilderDisableEdit)
				attributes.InternalAttribute.FeatureFlag = types.StringPointerValue(attributesItem.InternalAttribute.FeatureFlag)
				attributes.InternalAttribute.Group = types.StringPointerValue(attributesItem.InternalAttribute.Group)
				attributes.InternalAttribute.HasPrimary = types.BoolPointerValue(attributesItem.InternalAttribute.HasPrimary)
				attributes.InternalAttribute.Hidden = types.BoolPointerValue(attributesItem.InternalAttribute.Hidden)
				attributes.InternalAttribute.HideLabel = types.BoolPointerValue(attributesItem.InternalAttribute.HideLabel)
				attributes.InternalAttribute.Icon = types.StringPointerValue(attributesItem.InternalAttribute.Icon)
				attributes.InternalAttribute.ID = types.StringPointerValue(attributesItem.InternalAttribute.ID)
				if attributesItem.InternalAttribute.InfoHelpers == nil {
					attributes.InternalAttribute.InfoHelpers = nil
				} else {
					attributes.InternalAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.InternalAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintCustomComponent)
					attributes.InternalAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintText)
					attributes.InternalAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintTextKey)
					attributes.InternalAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.InternalAttribute.Label = types.StringValue(attributesItem.InternalAttribute.Label)
				attributes.InternalAttribute.Layout = types.StringPointerValue(attributesItem.InternalAttribute.Layout)
				attributes.InternalAttribute.Name = types.StringValue(attributesItem.InternalAttribute.Name)
				attributes.InternalAttribute.Order = types.Int64PointerValue(attributesItem.InternalAttribute.Order)
				attributes.InternalAttribute.Placeholder = types.StringPointerValue(attributesItem.InternalAttribute.Placeholder)
				attributes.InternalAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.InternalAttribute.PreviewValueFormatter)
				attributes.InternalAttribute.Protected = types.BoolPointerValue(attributesItem.InternalAttribute.Protected)
				attributes.InternalAttribute.Readonly = types.BoolPointerValue(attributesItem.InternalAttribute.Readonly)
				attributes.InternalAttribute.RenderCondition = types.StringPointerValue(attributesItem.InternalAttribute.RenderCondition)
				attributes.InternalAttribute.Repeatable = types.BoolPointerValue(attributesItem.InternalAttribute.Repeatable)
				attributes.InternalAttribute.Required = types.BoolPointerValue(attributesItem.InternalAttribute.Required)
				attributes.InternalAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount11, settingsFlagItem11 := range attributesItem.InternalAttribute.SettingsFlag {
					var settingsFlag11 tfTypes.SettingFlag
					settingsFlag11.Enabled = types.BoolPointerValue(settingsFlagItem11.Enabled)
					settingsFlag11.Name = types.StringPointerValue(settingsFlagItem11.Name)
					if settingsFlagCount11+1 > len(attributes.InternalAttribute.SettingsFlag) {
						attributes.InternalAttribute.SettingsFlag = append(attributes.InternalAttribute.SettingsFlag, settingsFlag11)
					} else {
						attributes.InternalAttribute.SettingsFlag[settingsFlagCount11].Enabled = settingsFlag11.Enabled
						attributes.InternalAttribute.SettingsFlag[settingsFlagCount11].Name = settingsFlag11.Name
					}
				}
				attributes.InternalAttribute.ShowInTable = types.BoolPointerValue(attributesItem.InternalAttribute.ShowInTable)
				attributes.InternalAttribute.Sortable = types.BoolPointerValue(attributesItem.InternalAttribute.Sortable)
				attributes.InternalAttribute.Type = types.StringValue(string(attributesItem.InternalAttribute.Type))
				attributes.InternalAttribute.ValueFormatter = types.StringPointerValue(attributesItem.InternalAttribute.ValueFormatter)
			}
			if attributesItem.InternalUserAttribute != nil {
				attributes.InternalUserAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.InternalUserAttribute.Manifest != nil {
					attributes.InternalUserAttribute.Manifest = make([]types.String, 0, len(attributesItem.InternalUserAttribute.Manifest))
					for _, v := range attributesItem.InternalUserAttribute.Manifest {
						attributes.InternalUserAttribute.Manifest = append(attributes.InternalUserAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.InternalUserAttribute.Purpose = make([]types.String, 0, len(attributesItem.InternalUserAttribute.Purpose))
				for _, v := range attributesItem.InternalUserAttribute.Purpose {
					attributes.InternalUserAttribute.Purpose = append(attributes.InternalUserAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.InternalUserAttribute.Constraints == nil {
					attributes.InternalUserAttribute.Constraints = nil
				} else {
					attributes.InternalUserAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.InternalUserAttribute.DefaultValue == nil {
					attributes.InternalUserAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult12, _ := json.Marshal(attributesItem.InternalUserAttribute.DefaultValue)
					attributes.InternalUserAttribute.DefaultValue = types.StringValue(string(defaultValueResult12))
				}
				attributes.InternalUserAttribute.Deprecated = types.BoolPointerValue(attributesItem.InternalUserAttribute.Deprecated)
				attributes.InternalUserAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.InternalUserAttribute.EntityBuilderDisableEdit)
				attributes.InternalUserAttribute.FeatureFlag = types.StringPointerValue(attributesItem.InternalUserAttribute.FeatureFlag)
				attributes.InternalUserAttribute.Group = types.StringPointerValue(attributesItem.InternalUserAttribute.Group)
				attributes.InternalUserAttribute.HasPrimary = types.BoolPointerValue(attributesItem.InternalUserAttribute.HasPrimary)
				attributes.InternalUserAttribute.Hidden = types.BoolPointerValue(attributesItem.InternalUserAttribute.Hidden)
				attributes.InternalUserAttribute.HideLabel = types.BoolPointerValue(attributesItem.InternalUserAttribute.HideLabel)
				attributes.InternalUserAttribute.Icon = types.StringPointerValue(attributesItem.InternalUserAttribute.Icon)
				attributes.InternalUserAttribute.ID = types.StringPointerValue(attributesItem.InternalUserAttribute.ID)
				if attributesItem.InternalUserAttribute.InfoHelpers == nil {
					attributes.InternalUserAttribute.InfoHelpers = nil
				} else {
					attributes.InternalUserAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.InternalUserAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintCustomComponent)
					attributes.InternalUserAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintText)
					attributes.InternalUserAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintTextKey)
					attributes.InternalUserAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.InternalUserAttribute.Label = types.StringValue(attributesItem.InternalUserAttribute.Label)
				attributes.InternalUserAttribute.Layout = types.StringPointerValue(attributesItem.InternalUserAttribute.Layout)
				attributes.InternalUserAttribute.Name = types.StringValue(attributesItem.InternalUserAttribute.Name)
				attributes.InternalUserAttribute.Order = types.Int64PointerValue(attributesItem.InternalUserAttribute.Order)
				attributes.InternalUserAttribute.Placeholder = types.StringPointerValue(attributesItem.InternalUserAttribute.Placeholder)
				attributes.InternalUserAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.InternalUserAttribute.PreviewValueFormatter)
				attributes.InternalUserAttribute.Protected = types.BoolPointerValue(attributesItem.InternalUserAttribute.Protected)
				attributes.InternalUserAttribute.Readonly = types.BoolPointerValue(attributesItem.InternalUserAttribute.Readonly)
				attributes.InternalUserAttribute.RenderCondition = types.StringPointerValue(attributesItem.InternalUserAttribute.RenderCondition)
				attributes.InternalUserAttribute.Repeatable = types.BoolPointerValue(attributesItem.InternalUserAttribute.Repeatable)
				attributes.InternalUserAttribute.Required = types.BoolPointerValue(attributesItem.InternalUserAttribute.Required)
				attributes.InternalUserAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount12, settingsFlagItem12 := range attributesItem.InternalUserAttribute.SettingsFlag {
					var settingsFlag12 tfTypes.SettingFlag
					settingsFlag12.Enabled = types.BoolPointerValue(settingsFlagItem12.Enabled)
					settingsFlag12.Name = types.StringPointerValue(settingsFlagItem12.Name)
					if settingsFlagCount12+1 > len(attributes.InternalUserAttribute.SettingsFlag) {
						attributes.InternalUserAttribute.SettingsFlag = append(attributes.InternalUserAttribute.SettingsFlag, settingsFlag12)
					} else {
						attributes.InternalUserAttribute.SettingsFlag[settingsFlagCount12].Enabled = settingsFlag12.Enabled
						attributes.InternalUserAttribute.SettingsFlag[settingsFlagCount12].Name = settingsFlag12.Name
					}
				}
				attributes.InternalUserAttribute.ShowInTable = types.BoolPointerValue(attributesItem.InternalUserAttribute.ShowInTable)
				attributes.InternalUserAttribute.Sortable = types.BoolPointerValue(attributesItem.InternalUserAttribute.Sortable)
				attributes.InternalUserAttribute.Type = types.StringValue(string(attributesItem.InternalUserAttribute.Type))
				attributes.InternalUserAttribute.ValueFormatter = types.StringPointerValue(attributesItem.InternalUserAttribute.ValueFormatter)
			}
			if attributesItem.InvitationEmailAttribute != nil {
				attributes.InvitationEmailAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.InvitationEmailAttribute.Manifest != nil {
					attributes.InvitationEmailAttribute.Manifest = make([]types.String, 0, len(attributesItem.InvitationEmailAttribute.Manifest))
					for _, v := range attributesItem.InvitationEmailAttribute.Manifest {
						attributes.InvitationEmailAttribute.Manifest = append(attributes.InvitationEmailAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.InvitationEmailAttribute.Purpose = make([]types.String, 0, len(attributesItem.InvitationEmailAttribute.Purpose))
				for _, v := range attributesItem.InvitationEmailAttribute.Purpose {
					attributes.InvitationEmailAttribute.Purpose = append(attributes.InvitationEmailAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.InvitationEmailAttribute.Constraints == nil {
					attributes.InvitationEmailAttribute.Constraints = nil
				} else {
					attributes.InvitationEmailAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.InvitationEmailAttribute.DefaultValue == nil {
					attributes.InvitationEmailAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult13, _ := json.Marshal(attributesItem.InvitationEmailAttribute.DefaultValue)
					attributes.InvitationEmailAttribute.DefaultValue = types.StringValue(string(defaultValueResult13))
				}
				attributes.InvitationEmailAttribute.Deprecated = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Deprecated)
				attributes.InvitationEmailAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.EntityBuilderDisableEdit)
				attributes.InvitationEmailAttribute.FeatureFlag = types.StringPointerValue(attributesItem.InvitationEmailAttribute.FeatureFlag)
				attributes.InvitationEmailAttribute.Group = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Group)
				attributes.InvitationEmailAttribute.HasPrimary = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.HasPrimary)
				attributes.InvitationEmailAttribute.Hidden = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Hidden)
				attributes.InvitationEmailAttribute.HideLabel = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.HideLabel)
				attributes.InvitationEmailAttribute.Icon = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Icon)
				attributes.InvitationEmailAttribute.ID = types.StringPointerValue(attributesItem.InvitationEmailAttribute.ID)
				if attributesItem.InvitationEmailAttribute.InfoHelpers == nil {
					attributes.InvitationEmailAttribute.InfoHelpers = nil
				} else {
					attributes.InvitationEmailAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.InvitationEmailAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintCustomComponent)
					attributes.InvitationEmailAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintText)
					attributes.InvitationEmailAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintTextKey)
					attributes.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.InvitationEmailAttribute.Label = types.StringValue(attributesItem.InvitationEmailAttribute.Label)
				attributes.InvitationEmailAttribute.Layout = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Layout)
				attributes.InvitationEmailAttribute.Name = types.StringValue(attributesItem.InvitationEmailAttribute.Name)
				attributes.InvitationEmailAttribute.Order = types.Int64PointerValue(attributesItem.InvitationEmailAttribute.Order)
				attributes.InvitationEmailAttribute.Placeholder = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Placeholder)
				attributes.InvitationEmailAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.InvitationEmailAttribute.PreviewValueFormatter)
				attributes.InvitationEmailAttribute.Protected = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Protected)
				attributes.InvitationEmailAttribute.Readonly = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Readonly)
				attributes.InvitationEmailAttribute.RenderCondition = types.StringPointerValue(attributesItem.InvitationEmailAttribute.RenderCondition)
				attributes.InvitationEmailAttribute.Repeatable = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Repeatable)
				attributes.InvitationEmailAttribute.Required = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Required)
				attributes.InvitationEmailAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount13, settingsFlagItem13 := range attributesItem.InvitationEmailAttribute.SettingsFlag {
					var settingsFlag13 tfTypes.SettingFlag
					settingsFlag13.Enabled = types.BoolPointerValue(settingsFlagItem13.Enabled)
					settingsFlag13.Name = types.StringPointerValue(settingsFlagItem13.Name)
					if settingsFlagCount13+1 > len(attributes.InvitationEmailAttribute.SettingsFlag) {
						attributes.InvitationEmailAttribute.SettingsFlag = append(attributes.InvitationEmailAttribute.SettingsFlag, settingsFlag13)
					} else {
						attributes.InvitationEmailAttribute.SettingsFlag[settingsFlagCount13].Enabled = settingsFlag13.Enabled
						attributes.InvitationEmailAttribute.SettingsFlag[settingsFlagCount13].Name = settingsFlag13.Name
					}
				}
				attributes.InvitationEmailAttribute.ShowInTable = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.ShowInTable)
				attributes.InvitationEmailAttribute.Sortable = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Sortable)
				attributes.InvitationEmailAttribute.Type = types.StringValue(string(attributesItem.InvitationEmailAttribute.Type))
				attributes.InvitationEmailAttribute.ValueFormatter = types.StringPointerValue(attributesItem.InvitationEmailAttribute.ValueFormatter)
			}
			if attributesItem.LinkAttribute != nil {
				attributes.LinkAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.LinkAttribute.Manifest != nil {
					attributes.LinkAttribute.Manifest = make([]types.String, 0, len(attributesItem.LinkAttribute.Manifest))
					for _, v := range attributesItem.LinkAttribute.Manifest {
						attributes.LinkAttribute.Manifest = append(attributes.LinkAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.LinkAttribute.Purpose = make([]types.String, 0, len(attributesItem.LinkAttribute.Purpose))
				for _, v := range attributesItem.LinkAttribute.Purpose {
					attributes.LinkAttribute.Purpose = append(attributes.LinkAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.LinkAttribute.Constraints == nil {
					attributes.LinkAttribute.Constraints = nil
				} else {
					attributes.LinkAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.LinkAttribute.DefaultValue == nil {
					attributes.LinkAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult14, _ := json.Marshal(attributesItem.LinkAttribute.DefaultValue)
					attributes.LinkAttribute.DefaultValue = types.StringValue(string(defaultValueResult14))
				}
				attributes.LinkAttribute.Deprecated = types.BoolPointerValue(attributesItem.LinkAttribute.Deprecated)
				attributes.LinkAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.LinkAttribute.EntityBuilderDisableEdit)
				attributes.LinkAttribute.FeatureFlag = types.StringPointerValue(attributesItem.LinkAttribute.FeatureFlag)
				attributes.LinkAttribute.Group = types.StringPointerValue(attributesItem.LinkAttribute.Group)
				attributes.LinkAttribute.HasPrimary = types.BoolPointerValue(attributesItem.LinkAttribute.HasPrimary)
				attributes.LinkAttribute.Hidden = types.BoolPointerValue(attributesItem.LinkAttribute.Hidden)
				attributes.LinkAttribute.HideLabel = types.BoolPointerValue(attributesItem.LinkAttribute.HideLabel)
				attributes.LinkAttribute.Icon = types.StringPointerValue(attributesItem.LinkAttribute.Icon)
				attributes.LinkAttribute.ID = types.StringPointerValue(attributesItem.LinkAttribute.ID)
				if attributesItem.LinkAttribute.InfoHelpers == nil {
					attributes.LinkAttribute.InfoHelpers = nil
				} else {
					attributes.LinkAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.LinkAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintCustomComponent)
					attributes.LinkAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintText)
					attributes.LinkAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintTextKey)
					attributes.LinkAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.LinkAttribute.Label = types.StringValue(attributesItem.LinkAttribute.Label)
				attributes.LinkAttribute.Layout = types.StringPointerValue(attributesItem.LinkAttribute.Layout)
				attributes.LinkAttribute.Name = types.StringValue(attributesItem.LinkAttribute.Name)
				attributes.LinkAttribute.Order = types.Int64PointerValue(attributesItem.LinkAttribute.Order)
				attributes.LinkAttribute.Placeholder = types.StringPointerValue(attributesItem.LinkAttribute.Placeholder)
				attributes.LinkAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.LinkAttribute.PreviewValueFormatter)
				attributes.LinkAttribute.Protected = types.BoolPointerValue(attributesItem.LinkAttribute.Protected)
				attributes.LinkAttribute.Readonly = types.BoolPointerValue(attributesItem.LinkAttribute.Readonly)
				attributes.LinkAttribute.RenderCondition = types.StringPointerValue(attributesItem.LinkAttribute.RenderCondition)
				attributes.LinkAttribute.Repeatable = types.BoolPointerValue(attributesItem.LinkAttribute.Repeatable)
				attributes.LinkAttribute.Required = types.BoolPointerValue(attributesItem.LinkAttribute.Required)
				attributes.LinkAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount14, settingsFlagItem14 := range attributesItem.LinkAttribute.SettingsFlag {
					var settingsFlag14 tfTypes.SettingFlag
					settingsFlag14.Enabled = types.BoolPointerValue(settingsFlagItem14.Enabled)
					settingsFlag14.Name = types.StringPointerValue(settingsFlagItem14.Name)
					if settingsFlagCount14+1 > len(attributes.LinkAttribute.SettingsFlag) {
						attributes.LinkAttribute.SettingsFlag = append(attributes.LinkAttribute.SettingsFlag, settingsFlag14)
					} else {
						attributes.LinkAttribute.SettingsFlag[settingsFlagCount14].Enabled = settingsFlag14.Enabled
						attributes.LinkAttribute.SettingsFlag[settingsFlagCount14].Name = settingsFlag14.Name
					}
				}
				attributes.LinkAttribute.ShowInTable = types.BoolPointerValue(attributesItem.LinkAttribute.ShowInTable)
				attributes.LinkAttribute.Sortable = types.BoolPointerValue(attributesItem.LinkAttribute.Sortable)
				attributes.LinkAttribute.Type = types.StringValue(string(attributesItem.LinkAttribute.Type))
				attributes.LinkAttribute.ValueFormatter = types.StringPointerValue(attributesItem.LinkAttribute.ValueFormatter)
			}
			if attributesItem.MessageEmailAddressAttribute != nil {
				attributes.MessageEmailAddressAttribute = &tfTypes.MessageEmailAddressAttribute{}
				if attributesItem.MessageEmailAddressAttribute.Manifest != nil {
					attributes.MessageEmailAddressAttribute.Manifest = make([]types.String, 0, len(attributesItem.MessageEmailAddressAttribute.Manifest))
					for _, v := range attributesItem.MessageEmailAddressAttribute.Manifest {
						attributes.MessageEmailAddressAttribute.Manifest = append(attributes.MessageEmailAddressAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.MessageEmailAddressAttribute.Purpose = make([]types.String, 0, len(attributesItem.MessageEmailAddressAttribute.Purpose))
				for _, v := range attributesItem.MessageEmailAddressAttribute.Purpose {
					attributes.MessageEmailAddressAttribute.Purpose = append(attributes.MessageEmailAddressAttribute.Purpose, types.StringValue(v))
				}
				attributes.MessageEmailAddressAttribute.Address = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Address)
				if attributesItem.MessageEmailAddressAttribute.Constraints == nil {
					attributes.MessageEmailAddressAttribute.Constraints = nil
				} else {
					attributes.MessageEmailAddressAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.MessageEmailAddressAttribute.DefaultValue == nil {
					attributes.MessageEmailAddressAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult15, _ := json.Marshal(attributesItem.MessageEmailAddressAttribute.DefaultValue)
					attributes.MessageEmailAddressAttribute.DefaultValue = types.StringValue(string(defaultValueResult15))
				}
				attributes.MessageEmailAddressAttribute.Deprecated = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Deprecated)
				attributes.MessageEmailAddressAttribute.EmailType = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.EmailType)
				attributes.MessageEmailAddressAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.EntityBuilderDisableEdit)
				attributes.MessageEmailAddressAttribute.FeatureFlag = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.FeatureFlag)
				attributes.MessageEmailAddressAttribute.Group = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Group)
				attributes.MessageEmailAddressAttribute.HasPrimary = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.HasPrimary)
				attributes.MessageEmailAddressAttribute.Hidden = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Hidden)
				attributes.MessageEmailAddressAttribute.HideLabel = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.HideLabel)
				attributes.MessageEmailAddressAttribute.Icon = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Icon)
				attributes.MessageEmailAddressAttribute.ID = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.ID)
				if attributesItem.MessageEmailAddressAttribute.InfoHelpers == nil {
					attributes.MessageEmailAddressAttribute.InfoHelpers = nil
				} else {
					attributes.MessageEmailAddressAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent)
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintText)
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTextKey)
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.MessageEmailAddressAttribute.Label = types.StringValue(attributesItem.MessageEmailAddressAttribute.Label)
				attributes.MessageEmailAddressAttribute.Layout = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Layout)
				attributes.MessageEmailAddressAttribute.Name = types.StringValue(attributesItem.MessageEmailAddressAttribute.Name)
				attributes.MessageEmailAddressAttribute.Order = types.Int64PointerValue(attributesItem.MessageEmailAddressAttribute.Order)
				attributes.MessageEmailAddressAttribute.Placeholder = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Placeholder)
				attributes.MessageEmailAddressAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.PreviewValueFormatter)
				attributes.MessageEmailAddressAttribute.Protected = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Protected)
				attributes.MessageEmailAddressAttribute.Readonly = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Readonly)
				attributes.MessageEmailAddressAttribute.RenderCondition = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.RenderCondition)
				attributes.MessageEmailAddressAttribute.Repeatable = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Repeatable)
				attributes.MessageEmailAddressAttribute.Required = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Required)
				attributes.MessageEmailAddressAttribute.SendStatus = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.SendStatus)
				attributes.MessageEmailAddressAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount15, settingsFlagItem15 := range attributesItem.MessageEmailAddressAttribute.SettingsFlag {
					var settingsFlag15 tfTypes.SettingFlag
					settingsFlag15.Enabled = types.BoolPointerValue(settingsFlagItem15.Enabled)
					settingsFlag15.Name = types.StringPointerValue(settingsFlagItem15.Name)
					if settingsFlagCount15+1 > len(attributes.MessageEmailAddressAttribute.SettingsFlag) {
						attributes.MessageEmailAddressAttribute.SettingsFlag = append(attributes.MessageEmailAddressAttribute.SettingsFlag, settingsFlag15)
					} else {
						attributes.MessageEmailAddressAttribute.SettingsFlag[settingsFlagCount15].Enabled = settingsFlag15.Enabled
						attributes.MessageEmailAddressAttribute.SettingsFlag[settingsFlagCount15].Name = settingsFlag15.Name
					}
				}
				attributes.MessageEmailAddressAttribute.ShowInTable = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.ShowInTable)
				attributes.MessageEmailAddressAttribute.Sortable = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Sortable)
				attributes.MessageEmailAddressAttribute.Type = types.StringValue(string(attributesItem.MessageEmailAddressAttribute.Type))
				attributes.MessageEmailAddressAttribute.ValueFormatter = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.ValueFormatter)
			}
			if attributesItem.MultiSelectAttribute != nil {
				attributes.MultiSelectAttribute = &tfTypes.MultiSelectAttribute{}
				if attributesItem.MultiSelectAttribute.Manifest != nil {
					attributes.MultiSelectAttribute.Manifest = make([]types.String, 0, len(attributesItem.MultiSelectAttribute.Manifest))
					for _, v := range attributesItem.MultiSelectAttribute.Manifest {
						attributes.MultiSelectAttribute.Manifest = append(attributes.MultiSelectAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.MultiSelectAttribute.Purpose = make([]types.String, 0, len(attributesItem.MultiSelectAttribute.Purpose))
				for _, v := range attributesItem.MultiSelectAttribute.Purpose {
					attributes.MultiSelectAttribute.Purpose = append(attributes.MultiSelectAttribute.Purpose, types.StringValue(v))
				}
				attributes.MultiSelectAttribute.AllowAny = types.BoolPointerValue(attributesItem.MultiSelectAttribute.AllowAny)
				attributes.MultiSelectAttribute.AllowExtraOptions = types.BoolPointerValue(attributesItem.MultiSelectAttribute.AllowExtraOptions)
				if attributesItem.MultiSelectAttribute.Constraints == nil {
					attributes.MultiSelectAttribute.Constraints = nil
				} else {
					attributes.MultiSelectAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.MultiSelectAttribute.DefaultValue == nil {
					attributes.MultiSelectAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult16, _ := json.Marshal(attributesItem.MultiSelectAttribute.DefaultValue)
					attributes.MultiSelectAttribute.DefaultValue = types.StringValue(string(defaultValueResult16))
				}
				attributes.MultiSelectAttribute.Deprecated = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Deprecated)
				attributes.MultiSelectAttribute.DisableCaseSensitive = types.BoolPointerValue(attributesItem.MultiSelectAttribute.DisableCaseSensitive)
				attributes.MultiSelectAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.MultiSelectAttribute.EntityBuilderDisableEdit)
				attributes.MultiSelectAttribute.FeatureFlag = types.StringPointerValue(attributesItem.MultiSelectAttribute.FeatureFlag)
				attributes.MultiSelectAttribute.Group = types.StringPointerValue(attributesItem.MultiSelectAttribute.Group)
				attributes.MultiSelectAttribute.HasPrimary = types.BoolPointerValue(attributesItem.MultiSelectAttribute.HasPrimary)
				attributes.MultiSelectAttribute.Hidden = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Hidden)
				attributes.MultiSelectAttribute.HideLabel = types.BoolPointerValue(attributesItem.MultiSelectAttribute.HideLabel)
				attributes.MultiSelectAttribute.Icon = types.StringPointerValue(attributesItem.MultiSelectAttribute.Icon)
				attributes.MultiSelectAttribute.ID = types.StringPointerValue(attributesItem.MultiSelectAttribute.ID)
				if attributesItem.MultiSelectAttribute.InfoHelpers == nil {
					attributes.MultiSelectAttribute.InfoHelpers = nil
				} else {
					attributes.MultiSelectAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.MultiSelectAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintCustomComponent)
					attributes.MultiSelectAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintText)
					attributes.MultiSelectAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintTextKey)
					attributes.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.MultiSelectAttribute.Label = types.StringValue(attributesItem.MultiSelectAttribute.Label)
				attributes.MultiSelectAttribute.Layout = types.StringPointerValue(attributesItem.MultiSelectAttribute.Layout)
				attributes.MultiSelectAttribute.Name = types.StringValue(attributesItem.MultiSelectAttribute.Name)
				attributes.MultiSelectAttribute.Options = []tfTypes.MultiSelectAttributeOptions{}
				for optionsVarCount, optionsVarItem := range attributesItem.MultiSelectAttribute.Options {
					var optionsVar tfTypes.MultiSelectAttributeOptions
					if optionsVarItem.Str != nil {
						optionsVar.Str = types.StringPointerValue(optionsVarItem.Str)
					}
					if optionsVarItem.Options2 != nil {
						optionsVar.Two = &tfTypes.MultiSelectAttributeOptions2{}
						optionsVar.Two.Title = types.StringPointerValue(optionsVarItem.Options2.Title)
						optionsVar.Two.Value = types.StringValue(optionsVarItem.Options2.Value)
					}
					if optionsVarCount+1 > len(attributes.MultiSelectAttribute.Options) {
						attributes.MultiSelectAttribute.Options = append(attributes.MultiSelectAttribute.Options, optionsVar)
					} else {
						attributes.MultiSelectAttribute.Options[optionsVarCount].Str = optionsVar.Str
						attributes.MultiSelectAttribute.Options[optionsVarCount].Two = optionsVar.Two
					}
				}
				attributes.MultiSelectAttribute.Order = types.Int64PointerValue(attributesItem.MultiSelectAttribute.Order)
				attributes.MultiSelectAttribute.Placeholder = types.StringPointerValue(attributesItem.MultiSelectAttribute.Placeholder)
				attributes.MultiSelectAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.MultiSelectAttribute.PreviewValueFormatter)
				attributes.MultiSelectAttribute.Protected = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Protected)
				attributes.MultiSelectAttribute.Readonly = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Readonly)
				attributes.MultiSelectAttribute.RenderCondition = types.StringPointerValue(attributesItem.MultiSelectAttribute.RenderCondition)
				attributes.MultiSelectAttribute.Repeatable = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Repeatable)
				attributes.MultiSelectAttribute.Required = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Required)
				attributes.MultiSelectAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount16, settingsFlagItem16 := range attributesItem.MultiSelectAttribute.SettingsFlag {
					var settingsFlag16 tfTypes.SettingFlag
					settingsFlag16.Enabled = types.BoolPointerValue(settingsFlagItem16.Enabled)
					settingsFlag16.Name = types.StringPointerValue(settingsFlagItem16.Name)
					if settingsFlagCount16+1 > len(attributes.MultiSelectAttribute.SettingsFlag) {
						attributes.MultiSelectAttribute.SettingsFlag = append(attributes.MultiSelectAttribute.SettingsFlag, settingsFlag16)
					} else {
						attributes.MultiSelectAttribute.SettingsFlag[settingsFlagCount16].Enabled = settingsFlag16.Enabled
						attributes.MultiSelectAttribute.SettingsFlag[settingsFlagCount16].Name = settingsFlag16.Name
					}
				}
				attributes.MultiSelectAttribute.ShowInTable = types.BoolPointerValue(attributesItem.MultiSelectAttribute.ShowInTable)
				attributes.MultiSelectAttribute.Sortable = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Sortable)
				attributes.MultiSelectAttribute.Type = types.StringValue(string(attributesItem.MultiSelectAttribute.Type))
				attributes.MultiSelectAttribute.ValueFormatter = types.StringPointerValue(attributesItem.MultiSelectAttribute.ValueFormatter)
			}
			if attributesItem.NumberAttribute != nil {
				attributes.NumberAttribute = &tfTypes.NumberAttribute{}
				if attributesItem.NumberAttribute.Manifest != nil {
					attributes.NumberAttribute.Manifest = make([]types.String, 0, len(attributesItem.NumberAttribute.Manifest))
					for _, v := range attributesItem.NumberAttribute.Manifest {
						attributes.NumberAttribute.Manifest = append(attributes.NumberAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.NumberAttribute.Purpose = make([]types.String, 0, len(attributesItem.NumberAttribute.Purpose))
				for _, v := range attributesItem.NumberAttribute.Purpose {
					attributes.NumberAttribute.Purpose = append(attributes.NumberAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.NumberAttribute.Constraints == nil {
					attributes.NumberAttribute.Constraints = nil
				} else {
					attributes.NumberAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.NumberAttribute.DefaultValue == nil {
					attributes.NumberAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult17, _ := json.Marshal(attributesItem.NumberAttribute.DefaultValue)
					attributes.NumberAttribute.DefaultValue = types.StringValue(string(defaultValueResult17))
				}
				attributes.NumberAttribute.Deprecated = types.BoolPointerValue(attributesItem.NumberAttribute.Deprecated)
				attributes.NumberAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.NumberAttribute.EntityBuilderDisableEdit)
				attributes.NumberAttribute.FeatureFlag = types.StringPointerValue(attributesItem.NumberAttribute.FeatureFlag)
				attributes.NumberAttribute.Format = types.StringPointerValue(attributesItem.NumberAttribute.Format)
				attributes.NumberAttribute.Group = types.StringPointerValue(attributesItem.NumberAttribute.Group)
				attributes.NumberAttribute.HasPrimary = types.BoolPointerValue(attributesItem.NumberAttribute.HasPrimary)
				attributes.NumberAttribute.Hidden = types.BoolPointerValue(attributesItem.NumberAttribute.Hidden)
				attributes.NumberAttribute.HideLabel = types.BoolPointerValue(attributesItem.NumberAttribute.HideLabel)
				attributes.NumberAttribute.Icon = types.StringPointerValue(attributesItem.NumberAttribute.Icon)
				attributes.NumberAttribute.ID = types.StringPointerValue(attributesItem.NumberAttribute.ID)
				if attributesItem.NumberAttribute.InfoHelpers == nil {
					attributes.NumberAttribute.InfoHelpers = nil
				} else {
					attributes.NumberAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.NumberAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintCustomComponent)
					attributes.NumberAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintText)
					attributes.NumberAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintTextKey)
					attributes.NumberAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.NumberAttribute.Label = types.StringValue(attributesItem.NumberAttribute.Label)
				attributes.NumberAttribute.Layout = types.StringPointerValue(attributesItem.NumberAttribute.Layout)
				attributes.NumberAttribute.Name = types.StringValue(attributesItem.NumberAttribute.Name)
				attributes.NumberAttribute.Order = types.Int64PointerValue(attributesItem.NumberAttribute.Order)
				attributes.NumberAttribute.Placeholder = types.StringPointerValue(attributesItem.NumberAttribute.Placeholder)
				attributes.NumberAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.NumberAttribute.PreviewValueFormatter)
				attributes.NumberAttribute.Protected = types.BoolPointerValue(attributesItem.NumberAttribute.Protected)
				attributes.NumberAttribute.Readonly = types.BoolPointerValue(attributesItem.NumberAttribute.Readonly)
				attributes.NumberAttribute.RenderCondition = types.StringPointerValue(attributesItem.NumberAttribute.RenderCondition)
				attributes.NumberAttribute.Repeatable = types.BoolPointerValue(attributesItem.NumberAttribute.Repeatable)
				attributes.NumberAttribute.Required = types.BoolPointerValue(attributesItem.NumberAttribute.Required)
				attributes.NumberAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount17, settingsFlagItem17 := range attributesItem.NumberAttribute.SettingsFlag {
					var settingsFlag17 tfTypes.SettingFlag
					settingsFlag17.Enabled = types.BoolPointerValue(settingsFlagItem17.Enabled)
					settingsFlag17.Name = types.StringPointerValue(settingsFlagItem17.Name)
					if settingsFlagCount17+1 > len(attributes.NumberAttribute.SettingsFlag) {
						attributes.NumberAttribute.SettingsFlag = append(attributes.NumberAttribute.SettingsFlag, settingsFlag17)
					} else {
						attributes.NumberAttribute.SettingsFlag[settingsFlagCount17].Enabled = settingsFlag17.Enabled
						attributes.NumberAttribute.SettingsFlag[settingsFlagCount17].Name = settingsFlag17.Name
					}
				}
				attributes.NumberAttribute.ShowInTable = types.BoolPointerValue(attributesItem.NumberAttribute.ShowInTable)
				attributes.NumberAttribute.ShowSeparator = types.BoolPointerValue(attributesItem.NumberAttribute.ShowSeparator)
				attributes.NumberAttribute.Sortable = types.BoolPointerValue(attributesItem.NumberAttribute.Sortable)
				attributes.NumberAttribute.Type = types.StringValue(string(attributesItem.NumberAttribute.Type))
				attributes.NumberAttribute.ValueFormatter = types.StringPointerValue(attributesItem.NumberAttribute.ValueFormatter)
			}
			if attributesItem.OrderedListAttribute != nil {
				attributes.OrderedListAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.OrderedListAttribute.Manifest != nil {
					attributes.OrderedListAttribute.Manifest = make([]types.String, 0, len(attributesItem.OrderedListAttribute.Manifest))
					for _, v := range attributesItem.OrderedListAttribute.Manifest {
						attributes.OrderedListAttribute.Manifest = append(attributes.OrderedListAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.OrderedListAttribute.Purpose = make([]types.String, 0, len(attributesItem.OrderedListAttribute.Purpose))
				for _, v := range attributesItem.OrderedListAttribute.Purpose {
					attributes.OrderedListAttribute.Purpose = append(attributes.OrderedListAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.OrderedListAttribute.Constraints == nil {
					attributes.OrderedListAttribute.Constraints = nil
				} else {
					attributes.OrderedListAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.OrderedListAttribute.DefaultValue == nil {
					attributes.OrderedListAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult18, _ := json.Marshal(attributesItem.OrderedListAttribute.DefaultValue)
					attributes.OrderedListAttribute.DefaultValue = types.StringValue(string(defaultValueResult18))
				}
				attributes.OrderedListAttribute.Deprecated = types.BoolPointerValue(attributesItem.OrderedListAttribute.Deprecated)
				attributes.OrderedListAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.OrderedListAttribute.EntityBuilderDisableEdit)
				attributes.OrderedListAttribute.FeatureFlag = types.StringPointerValue(attributesItem.OrderedListAttribute.FeatureFlag)
				attributes.OrderedListAttribute.Group = types.StringPointerValue(attributesItem.OrderedListAttribute.Group)
				attributes.OrderedListAttribute.HasPrimary = types.BoolPointerValue(attributesItem.OrderedListAttribute.HasPrimary)
				attributes.OrderedListAttribute.Hidden = types.BoolPointerValue(attributesItem.OrderedListAttribute.Hidden)
				attributes.OrderedListAttribute.HideLabel = types.BoolPointerValue(attributesItem.OrderedListAttribute.HideLabel)
				attributes.OrderedListAttribute.Icon = types.StringPointerValue(attributesItem.OrderedListAttribute.Icon)
				attributes.OrderedListAttribute.ID = types.StringPointerValue(attributesItem.OrderedListAttribute.ID)
				if attributesItem.OrderedListAttribute.InfoHelpers == nil {
					attributes.OrderedListAttribute.InfoHelpers = nil
				} else {
					attributes.OrderedListAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.OrderedListAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintCustomComponent)
					attributes.OrderedListAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintText)
					attributes.OrderedListAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintTextKey)
					attributes.OrderedListAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.OrderedListAttribute.Label = types.StringValue(attributesItem.OrderedListAttribute.Label)
				attributes.OrderedListAttribute.Layout = types.StringPointerValue(attributesItem.OrderedListAttribute.Layout)
				attributes.OrderedListAttribute.Name = types.StringValue(attributesItem.OrderedListAttribute.Name)
				attributes.OrderedListAttribute.Order = types.Int64PointerValue(attributesItem.OrderedListAttribute.Order)
				attributes.OrderedListAttribute.Placeholder = types.StringPointerValue(attributesItem.OrderedListAttribute.Placeholder)
				attributes.OrderedListAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.OrderedListAttribute.PreviewValueFormatter)
				attributes.OrderedListAttribute.Protected = types.BoolPointerValue(attributesItem.OrderedListAttribute.Protected)
				attributes.OrderedListAttribute.Readonly = types.BoolPointerValue(attributesItem.OrderedListAttribute.Readonly)
				attributes.OrderedListAttribute.RenderCondition = types.StringPointerValue(attributesItem.OrderedListAttribute.RenderCondition)
				attributes.OrderedListAttribute.Repeatable = types.BoolPointerValue(attributesItem.OrderedListAttribute.Repeatable)
				attributes.OrderedListAttribute.Required = types.BoolPointerValue(attributesItem.OrderedListAttribute.Required)
				attributes.OrderedListAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount18, settingsFlagItem18 := range attributesItem.OrderedListAttribute.SettingsFlag {
					var settingsFlag18 tfTypes.SettingFlag
					settingsFlag18.Enabled = types.BoolPointerValue(settingsFlagItem18.Enabled)
					settingsFlag18.Name = types.StringPointerValue(settingsFlagItem18.Name)
					if settingsFlagCount18+1 > len(attributes.OrderedListAttribute.SettingsFlag) {
						attributes.OrderedListAttribute.SettingsFlag = append(attributes.OrderedListAttribute.SettingsFlag, settingsFlag18)
					} else {
						attributes.OrderedListAttribute.SettingsFlag[settingsFlagCount18].Enabled = settingsFlag18.Enabled
						attributes.OrderedListAttribute.SettingsFlag[settingsFlagCount18].Name = settingsFlag18.Name
					}
				}
				attributes.OrderedListAttribute.ShowInTable = types.BoolPointerValue(attributesItem.OrderedListAttribute.ShowInTable)
				attributes.OrderedListAttribute.Sortable = types.BoolPointerValue(attributesItem.OrderedListAttribute.Sortable)
				attributes.OrderedListAttribute.Type = types.StringValue(string(attributesItem.OrderedListAttribute.Type))
				attributes.OrderedListAttribute.ValueFormatter = types.StringPointerValue(attributesItem.OrderedListAttribute.ValueFormatter)
			}
			if attributesItem.PartnerOrganisationAttribute != nil {
				attributes.PartnerOrganisationAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PartnerOrganisationAttribute.Manifest != nil {
					attributes.PartnerOrganisationAttribute.Manifest = make([]types.String, 0, len(attributesItem.PartnerOrganisationAttribute.Manifest))
					for _, v := range attributesItem.PartnerOrganisationAttribute.Manifest {
						attributes.PartnerOrganisationAttribute.Manifest = append(attributes.PartnerOrganisationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PartnerOrganisationAttribute.Purpose = make([]types.String, 0, len(attributesItem.PartnerOrganisationAttribute.Purpose))
				for _, v := range attributesItem.PartnerOrganisationAttribute.Purpose {
					attributes.PartnerOrganisationAttribute.Purpose = append(attributes.PartnerOrganisationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PartnerOrganisationAttribute.Constraints == nil {
					attributes.PartnerOrganisationAttribute.Constraints = nil
				} else {
					attributes.PartnerOrganisationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PartnerOrganisationAttribute.DefaultValue == nil {
					attributes.PartnerOrganisationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult19, _ := json.Marshal(attributesItem.PartnerOrganisationAttribute.DefaultValue)
					attributes.PartnerOrganisationAttribute.DefaultValue = types.StringValue(string(defaultValueResult19))
				}
				attributes.PartnerOrganisationAttribute.Deprecated = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Deprecated)
				attributes.PartnerOrganisationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.EntityBuilderDisableEdit)
				attributes.PartnerOrganisationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.FeatureFlag)
				attributes.PartnerOrganisationAttribute.Group = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Group)
				attributes.PartnerOrganisationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.HasPrimary)
				attributes.PartnerOrganisationAttribute.Hidden = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Hidden)
				attributes.PartnerOrganisationAttribute.HideLabel = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.HideLabel)
				attributes.PartnerOrganisationAttribute.Icon = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Icon)
				attributes.PartnerOrganisationAttribute.ID = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.ID)
				if attributesItem.PartnerOrganisationAttribute.InfoHelpers == nil {
					attributes.PartnerOrganisationAttribute.InfoHelpers = nil
				} else {
					attributes.PartnerOrganisationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent)
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintText)
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTextKey)
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PartnerOrganisationAttribute.Label = types.StringValue(attributesItem.PartnerOrganisationAttribute.Label)
				attributes.PartnerOrganisationAttribute.Layout = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Layout)
				attributes.PartnerOrganisationAttribute.Name = types.StringValue(attributesItem.PartnerOrganisationAttribute.Name)
				attributes.PartnerOrganisationAttribute.Order = types.Int64PointerValue(attributesItem.PartnerOrganisationAttribute.Order)
				attributes.PartnerOrganisationAttribute.Placeholder = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Placeholder)
				attributes.PartnerOrganisationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.PreviewValueFormatter)
				attributes.PartnerOrganisationAttribute.Protected = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Protected)
				attributes.PartnerOrganisationAttribute.Readonly = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Readonly)
				attributes.PartnerOrganisationAttribute.RenderCondition = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.RenderCondition)
				attributes.PartnerOrganisationAttribute.Repeatable = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Repeatable)
				attributes.PartnerOrganisationAttribute.Required = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Required)
				attributes.PartnerOrganisationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount19, settingsFlagItem19 := range attributesItem.PartnerOrganisationAttribute.SettingsFlag {
					var settingsFlag19 tfTypes.SettingFlag
					settingsFlag19.Enabled = types.BoolPointerValue(settingsFlagItem19.Enabled)
					settingsFlag19.Name = types.StringPointerValue(settingsFlagItem19.Name)
					if settingsFlagCount19+1 > len(attributes.PartnerOrganisationAttribute.SettingsFlag) {
						attributes.PartnerOrganisationAttribute.SettingsFlag = append(attributes.PartnerOrganisationAttribute.SettingsFlag, settingsFlag19)
					} else {
						attributes.PartnerOrganisationAttribute.SettingsFlag[settingsFlagCount19].Enabled = settingsFlag19.Enabled
						attributes.PartnerOrganisationAttribute.SettingsFlag[settingsFlagCount19].Name = settingsFlag19.Name
					}
				}
				attributes.PartnerOrganisationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.ShowInTable)
				attributes.PartnerOrganisationAttribute.Sortable = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Sortable)
				attributes.PartnerOrganisationAttribute.Type = types.StringValue(string(attributesItem.PartnerOrganisationAttribute.Type))
				attributes.PartnerOrganisationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.ValueFormatter)
			}
			if attributesItem.PartnerStatusAttribute != nil {
				attributes.PartnerStatusAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PartnerStatusAttribute.Manifest != nil {
					attributes.PartnerStatusAttribute.Manifest = make([]types.String, 0, len(attributesItem.PartnerStatusAttribute.Manifest))
					for _, v := range attributesItem.PartnerStatusAttribute.Manifest {
						attributes.PartnerStatusAttribute.Manifest = append(attributes.PartnerStatusAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PartnerStatusAttribute.Purpose = make([]types.String, 0, len(attributesItem.PartnerStatusAttribute.Purpose))
				for _, v := range attributesItem.PartnerStatusAttribute.Purpose {
					attributes.PartnerStatusAttribute.Purpose = append(attributes.PartnerStatusAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PartnerStatusAttribute.Constraints == nil {
					attributes.PartnerStatusAttribute.Constraints = nil
				} else {
					attributes.PartnerStatusAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PartnerStatusAttribute.DefaultValue == nil {
					attributes.PartnerStatusAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult20, _ := json.Marshal(attributesItem.PartnerStatusAttribute.DefaultValue)
					attributes.PartnerStatusAttribute.DefaultValue = types.StringValue(string(defaultValueResult20))
				}
				attributes.PartnerStatusAttribute.Deprecated = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Deprecated)
				attributes.PartnerStatusAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.EntityBuilderDisableEdit)
				attributes.PartnerStatusAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PartnerStatusAttribute.FeatureFlag)
				attributes.PartnerStatusAttribute.Group = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Group)
				attributes.PartnerStatusAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.HasPrimary)
				attributes.PartnerStatusAttribute.Hidden = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Hidden)
				attributes.PartnerStatusAttribute.HideLabel = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.HideLabel)
				attributes.PartnerStatusAttribute.Icon = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Icon)
				attributes.PartnerStatusAttribute.ID = types.StringPointerValue(attributesItem.PartnerStatusAttribute.ID)
				if attributesItem.PartnerStatusAttribute.InfoHelpers == nil {
					attributes.PartnerStatusAttribute.InfoHelpers = nil
				} else {
					attributes.PartnerStatusAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PartnerStatusAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintCustomComponent)
					attributes.PartnerStatusAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintText)
					attributes.PartnerStatusAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintTextKey)
					attributes.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PartnerStatusAttribute.Label = types.StringValue(attributesItem.PartnerStatusAttribute.Label)
				attributes.PartnerStatusAttribute.Layout = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Layout)
				attributes.PartnerStatusAttribute.Name = types.StringValue(attributesItem.PartnerStatusAttribute.Name)
				attributes.PartnerStatusAttribute.Order = types.Int64PointerValue(attributesItem.PartnerStatusAttribute.Order)
				attributes.PartnerStatusAttribute.Placeholder = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Placeholder)
				attributes.PartnerStatusAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PartnerStatusAttribute.PreviewValueFormatter)
				attributes.PartnerStatusAttribute.Protected = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Protected)
				attributes.PartnerStatusAttribute.Readonly = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Readonly)
				attributes.PartnerStatusAttribute.RenderCondition = types.StringPointerValue(attributesItem.PartnerStatusAttribute.RenderCondition)
				attributes.PartnerStatusAttribute.Repeatable = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Repeatable)
				attributes.PartnerStatusAttribute.Required = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Required)
				attributes.PartnerStatusAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount20, settingsFlagItem20 := range attributesItem.PartnerStatusAttribute.SettingsFlag {
					var settingsFlag20 tfTypes.SettingFlag
					settingsFlag20.Enabled = types.BoolPointerValue(settingsFlagItem20.Enabled)
					settingsFlag20.Name = types.StringPointerValue(settingsFlagItem20.Name)
					if settingsFlagCount20+1 > len(attributes.PartnerStatusAttribute.SettingsFlag) {
						attributes.PartnerStatusAttribute.SettingsFlag = append(attributes.PartnerStatusAttribute.SettingsFlag, settingsFlag20)
					} else {
						attributes.PartnerStatusAttribute.SettingsFlag[settingsFlagCount20].Enabled = settingsFlag20.Enabled
						attributes.PartnerStatusAttribute.SettingsFlag[settingsFlagCount20].Name = settingsFlag20.Name
					}
				}
				attributes.PartnerStatusAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.ShowInTable)
				attributes.PartnerStatusAttribute.Sortable = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Sortable)
				attributes.PartnerStatusAttribute.Type = types.StringValue(string(attributesItem.PartnerStatusAttribute.Type))
				attributes.PartnerStatusAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PartnerStatusAttribute.ValueFormatter)
			}
			if attributesItem.PaymentAttribute != nil {
				attributes.PaymentAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PaymentAttribute.Manifest != nil {
					attributes.PaymentAttribute.Manifest = make([]types.String, 0, len(attributesItem.PaymentAttribute.Manifest))
					for _, v := range attributesItem.PaymentAttribute.Manifest {
						attributes.PaymentAttribute.Manifest = append(attributes.PaymentAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PaymentAttribute.Purpose = make([]types.String, 0, len(attributesItem.PaymentAttribute.Purpose))
				for _, v := range attributesItem.PaymentAttribute.Purpose {
					attributes.PaymentAttribute.Purpose = append(attributes.PaymentAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PaymentAttribute.Constraints == nil {
					attributes.PaymentAttribute.Constraints = nil
				} else {
					attributes.PaymentAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PaymentAttribute.DefaultValue == nil {
					attributes.PaymentAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult21, _ := json.Marshal(attributesItem.PaymentAttribute.DefaultValue)
					attributes.PaymentAttribute.DefaultValue = types.StringValue(string(defaultValueResult21))
				}
				attributes.PaymentAttribute.Deprecated = types.BoolPointerValue(attributesItem.PaymentAttribute.Deprecated)
				attributes.PaymentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PaymentAttribute.EntityBuilderDisableEdit)
				attributes.PaymentAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PaymentAttribute.FeatureFlag)
				attributes.PaymentAttribute.Group = types.StringPointerValue(attributesItem.PaymentAttribute.Group)
				attributes.PaymentAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PaymentAttribute.HasPrimary)
				attributes.PaymentAttribute.Hidden = types.BoolPointerValue(attributesItem.PaymentAttribute.Hidden)
				attributes.PaymentAttribute.HideLabel = types.BoolPointerValue(attributesItem.PaymentAttribute.HideLabel)
				attributes.PaymentAttribute.Icon = types.StringPointerValue(attributesItem.PaymentAttribute.Icon)
				attributes.PaymentAttribute.ID = types.StringPointerValue(attributesItem.PaymentAttribute.ID)
				if attributesItem.PaymentAttribute.InfoHelpers == nil {
					attributes.PaymentAttribute.InfoHelpers = nil
				} else {
					attributes.PaymentAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PaymentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintCustomComponent)
					attributes.PaymentAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintText)
					attributes.PaymentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintTextKey)
					attributes.PaymentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PaymentAttribute.Label = types.StringValue(attributesItem.PaymentAttribute.Label)
				attributes.PaymentAttribute.Layout = types.StringPointerValue(attributesItem.PaymentAttribute.Layout)
				attributes.PaymentAttribute.Name = types.StringValue(attributesItem.PaymentAttribute.Name)
				attributes.PaymentAttribute.Order = types.Int64PointerValue(attributesItem.PaymentAttribute.Order)
				attributes.PaymentAttribute.Placeholder = types.StringPointerValue(attributesItem.PaymentAttribute.Placeholder)
				attributes.PaymentAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PaymentAttribute.PreviewValueFormatter)
				attributes.PaymentAttribute.Protected = types.BoolPointerValue(attributesItem.PaymentAttribute.Protected)
				attributes.PaymentAttribute.Readonly = types.BoolPointerValue(attributesItem.PaymentAttribute.Readonly)
				attributes.PaymentAttribute.RenderCondition = types.StringPointerValue(attributesItem.PaymentAttribute.RenderCondition)
				attributes.PaymentAttribute.Repeatable = types.BoolPointerValue(attributesItem.PaymentAttribute.Repeatable)
				attributes.PaymentAttribute.Required = types.BoolPointerValue(attributesItem.PaymentAttribute.Required)
				attributes.PaymentAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount21, settingsFlagItem21 := range attributesItem.PaymentAttribute.SettingsFlag {
					var settingsFlag21 tfTypes.SettingFlag
					settingsFlag21.Enabled = types.BoolPointerValue(settingsFlagItem21.Enabled)
					settingsFlag21.Name = types.StringPointerValue(settingsFlagItem21.Name)
					if settingsFlagCount21+1 > len(attributes.PaymentAttribute.SettingsFlag) {
						attributes.PaymentAttribute.SettingsFlag = append(attributes.PaymentAttribute.SettingsFlag, settingsFlag21)
					} else {
						attributes.PaymentAttribute.SettingsFlag[settingsFlagCount21].Enabled = settingsFlag21.Enabled
						attributes.PaymentAttribute.SettingsFlag[settingsFlagCount21].Name = settingsFlag21.Name
					}
				}
				attributes.PaymentAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PaymentAttribute.ShowInTable)
				attributes.PaymentAttribute.Sortable = types.BoolPointerValue(attributesItem.PaymentAttribute.Sortable)
				attributes.PaymentAttribute.Type = types.StringValue(string(attributesItem.PaymentAttribute.Type))
				attributes.PaymentAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PaymentAttribute.ValueFormatter)
			}
			if attributesItem.PaymentMethodRelationAttribute != nil {
				attributes.PaymentMethodRelationAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PaymentMethodRelationAttribute.Manifest != nil {
					attributes.PaymentMethodRelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.PaymentMethodRelationAttribute.Manifest))
					for _, v := range attributesItem.PaymentMethodRelationAttribute.Manifest {
						attributes.PaymentMethodRelationAttribute.Manifest = append(attributes.PaymentMethodRelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PaymentMethodRelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.PaymentMethodRelationAttribute.Purpose))
				for _, v := range attributesItem.PaymentMethodRelationAttribute.Purpose {
					attributes.PaymentMethodRelationAttribute.Purpose = append(attributes.PaymentMethodRelationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PaymentMethodRelationAttribute.Constraints == nil {
					attributes.PaymentMethodRelationAttribute.Constraints = nil
				} else {
					attributes.PaymentMethodRelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PaymentMethodRelationAttribute.DefaultValue == nil {
					attributes.PaymentMethodRelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult22, _ := json.Marshal(attributesItem.PaymentMethodRelationAttribute.DefaultValue)
					attributes.PaymentMethodRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult22))
				}
				attributes.PaymentMethodRelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Deprecated)
				attributes.PaymentMethodRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.EntityBuilderDisableEdit)
				attributes.PaymentMethodRelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.FeatureFlag)
				attributes.PaymentMethodRelationAttribute.Group = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Group)
				attributes.PaymentMethodRelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.HasPrimary)
				attributes.PaymentMethodRelationAttribute.Hidden = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Hidden)
				attributes.PaymentMethodRelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.HideLabel)
				attributes.PaymentMethodRelationAttribute.Icon = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Icon)
				attributes.PaymentMethodRelationAttribute.ID = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.ID)
				if attributesItem.PaymentMethodRelationAttribute.InfoHelpers == nil {
					attributes.PaymentMethodRelationAttribute.InfoHelpers = nil
				} else {
					attributes.PaymentMethodRelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintText)
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey)
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PaymentMethodRelationAttribute.Label = types.StringValue(attributesItem.PaymentMethodRelationAttribute.Label)
				attributes.PaymentMethodRelationAttribute.Layout = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Layout)
				attributes.PaymentMethodRelationAttribute.Name = types.StringValue(attributesItem.PaymentMethodRelationAttribute.Name)
				attributes.PaymentMethodRelationAttribute.Order = types.Int64PointerValue(attributesItem.PaymentMethodRelationAttribute.Order)
				attributes.PaymentMethodRelationAttribute.Placeholder = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Placeholder)
				attributes.PaymentMethodRelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.PreviewValueFormatter)
				attributes.PaymentMethodRelationAttribute.Protected = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Protected)
				attributes.PaymentMethodRelationAttribute.Readonly = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Readonly)
				attributes.PaymentMethodRelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.RenderCondition)
				attributes.PaymentMethodRelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Repeatable)
				attributes.PaymentMethodRelationAttribute.Required = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Required)
				attributes.PaymentMethodRelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount22, settingsFlagItem22 := range attributesItem.PaymentMethodRelationAttribute.SettingsFlag {
					var settingsFlag22 tfTypes.SettingFlag
					settingsFlag22.Enabled = types.BoolPointerValue(settingsFlagItem22.Enabled)
					settingsFlag22.Name = types.StringPointerValue(settingsFlagItem22.Name)
					if settingsFlagCount22+1 > len(attributes.PaymentMethodRelationAttribute.SettingsFlag) {
						attributes.PaymentMethodRelationAttribute.SettingsFlag = append(attributes.PaymentMethodRelationAttribute.SettingsFlag, settingsFlag22)
					} else {
						attributes.PaymentMethodRelationAttribute.SettingsFlag[settingsFlagCount22].Enabled = settingsFlag22.Enabled
						attributes.PaymentMethodRelationAttribute.SettingsFlag[settingsFlagCount22].Name = settingsFlag22.Name
					}
				}
				attributes.PaymentMethodRelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.ShowInTable)
				attributes.PaymentMethodRelationAttribute.Sortable = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Sortable)
				attributes.PaymentMethodRelationAttribute.Type = types.StringValue(string(attributesItem.PaymentMethodRelationAttribute.Type))
				attributes.PaymentMethodRelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.ValueFormatter)
			}
			if attributesItem.PhoneAttribute != nil {
				attributes.PhoneAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PhoneAttribute.Manifest != nil {
					attributes.PhoneAttribute.Manifest = make([]types.String, 0, len(attributesItem.PhoneAttribute.Manifest))
					for _, v := range attributesItem.PhoneAttribute.Manifest {
						attributes.PhoneAttribute.Manifest = append(attributes.PhoneAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PhoneAttribute.Purpose = make([]types.String, 0, len(attributesItem.PhoneAttribute.Purpose))
				for _, v := range attributesItem.PhoneAttribute.Purpose {
					attributes.PhoneAttribute.Purpose = append(attributes.PhoneAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PhoneAttribute.Constraints == nil {
					attributes.PhoneAttribute.Constraints = nil
				} else {
					attributes.PhoneAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PhoneAttribute.DefaultValue == nil {
					attributes.PhoneAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult23, _ := json.Marshal(attributesItem.PhoneAttribute.DefaultValue)
					attributes.PhoneAttribute.DefaultValue = types.StringValue(string(defaultValueResult23))
				}
				attributes.PhoneAttribute.Deprecated = types.BoolPointerValue(attributesItem.PhoneAttribute.Deprecated)
				attributes.PhoneAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PhoneAttribute.EntityBuilderDisableEdit)
				attributes.PhoneAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PhoneAttribute.FeatureFlag)
				attributes.PhoneAttribute.Group = types.StringPointerValue(attributesItem.PhoneAttribute.Group)
				attributes.PhoneAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PhoneAttribute.HasPrimary)
				attributes.PhoneAttribute.Hidden = types.BoolPointerValue(attributesItem.PhoneAttribute.Hidden)
				attributes.PhoneAttribute.HideLabel = types.BoolPointerValue(attributesItem.PhoneAttribute.HideLabel)
				attributes.PhoneAttribute.Icon = types.StringPointerValue(attributesItem.PhoneAttribute.Icon)
				attributes.PhoneAttribute.ID = types.StringPointerValue(attributesItem.PhoneAttribute.ID)
				if attributesItem.PhoneAttribute.InfoHelpers == nil {
					attributes.PhoneAttribute.InfoHelpers = nil
				} else {
					attributes.PhoneAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PhoneAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintCustomComponent)
					attributes.PhoneAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintText)
					attributes.PhoneAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintTextKey)
					attributes.PhoneAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PhoneAttribute.Label = types.StringValue(attributesItem.PhoneAttribute.Label)
				attributes.PhoneAttribute.Layout = types.StringPointerValue(attributesItem.PhoneAttribute.Layout)
				attributes.PhoneAttribute.Name = types.StringValue(attributesItem.PhoneAttribute.Name)
				attributes.PhoneAttribute.Order = types.Int64PointerValue(attributesItem.PhoneAttribute.Order)
				attributes.PhoneAttribute.Placeholder = types.StringPointerValue(attributesItem.PhoneAttribute.Placeholder)
				attributes.PhoneAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PhoneAttribute.PreviewValueFormatter)
				attributes.PhoneAttribute.Protected = types.BoolPointerValue(attributesItem.PhoneAttribute.Protected)
				attributes.PhoneAttribute.Readonly = types.BoolPointerValue(attributesItem.PhoneAttribute.Readonly)
				attributes.PhoneAttribute.RenderCondition = types.StringPointerValue(attributesItem.PhoneAttribute.RenderCondition)
				attributes.PhoneAttribute.Repeatable = types.BoolPointerValue(attributesItem.PhoneAttribute.Repeatable)
				attributes.PhoneAttribute.Required = types.BoolPointerValue(attributesItem.PhoneAttribute.Required)
				attributes.PhoneAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount23, settingsFlagItem23 := range attributesItem.PhoneAttribute.SettingsFlag {
					var settingsFlag23 tfTypes.SettingFlag
					settingsFlag23.Enabled = types.BoolPointerValue(settingsFlagItem23.Enabled)
					settingsFlag23.Name = types.StringPointerValue(settingsFlagItem23.Name)
					if settingsFlagCount23+1 > len(attributes.PhoneAttribute.SettingsFlag) {
						attributes.PhoneAttribute.SettingsFlag = append(attributes.PhoneAttribute.SettingsFlag, settingsFlag23)
					} else {
						attributes.PhoneAttribute.SettingsFlag[settingsFlagCount23].Enabled = settingsFlag23.Enabled
						attributes.PhoneAttribute.SettingsFlag[settingsFlagCount23].Name = settingsFlag23.Name
					}
				}
				attributes.PhoneAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PhoneAttribute.ShowInTable)
				attributes.PhoneAttribute.Sortable = types.BoolPointerValue(attributesItem.PhoneAttribute.Sortable)
				attributes.PhoneAttribute.Type = types.StringValue(string(attributesItem.PhoneAttribute.Type))
				attributes.PhoneAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PhoneAttribute.ValueFormatter)
			}
			if attributesItem.PriceComponentAttribute != nil {
				attributes.PriceComponentAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PriceComponentAttribute.Manifest != nil {
					attributes.PriceComponentAttribute.Manifest = make([]types.String, 0, len(attributesItem.PriceComponentAttribute.Manifest))
					for _, v := range attributesItem.PriceComponentAttribute.Manifest {
						attributes.PriceComponentAttribute.Manifest = append(attributes.PriceComponentAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PriceComponentAttribute.Purpose = make([]types.String, 0, len(attributesItem.PriceComponentAttribute.Purpose))
				for _, v := range attributesItem.PriceComponentAttribute.Purpose {
					attributes.PriceComponentAttribute.Purpose = append(attributes.PriceComponentAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PriceComponentAttribute.Constraints == nil {
					attributes.PriceComponentAttribute.Constraints = nil
				} else {
					attributes.PriceComponentAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PriceComponentAttribute.DefaultValue == nil {
					attributes.PriceComponentAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult24, _ := json.Marshal(attributesItem.PriceComponentAttribute.DefaultValue)
					attributes.PriceComponentAttribute.DefaultValue = types.StringValue(string(defaultValueResult24))
				}
				attributes.PriceComponentAttribute.Deprecated = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Deprecated)
				attributes.PriceComponentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PriceComponentAttribute.EntityBuilderDisableEdit)
				attributes.PriceComponentAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PriceComponentAttribute.FeatureFlag)
				attributes.PriceComponentAttribute.Group = types.StringPointerValue(attributesItem.PriceComponentAttribute.Group)
				attributes.PriceComponentAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PriceComponentAttribute.HasPrimary)
				attributes.PriceComponentAttribute.Hidden = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Hidden)
				attributes.PriceComponentAttribute.HideLabel = types.BoolPointerValue(attributesItem.PriceComponentAttribute.HideLabel)
				attributes.PriceComponentAttribute.Icon = types.StringPointerValue(attributesItem.PriceComponentAttribute.Icon)
				attributes.PriceComponentAttribute.ID = types.StringPointerValue(attributesItem.PriceComponentAttribute.ID)
				if attributesItem.PriceComponentAttribute.InfoHelpers == nil {
					attributes.PriceComponentAttribute.InfoHelpers = nil
				} else {
					attributes.PriceComponentAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PriceComponentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintCustomComponent)
					attributes.PriceComponentAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintText)
					attributes.PriceComponentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintTextKey)
					attributes.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PriceComponentAttribute.Label = types.StringValue(attributesItem.PriceComponentAttribute.Label)
				attributes.PriceComponentAttribute.Layout = types.StringPointerValue(attributesItem.PriceComponentAttribute.Layout)
				attributes.PriceComponentAttribute.Name = types.StringValue(attributesItem.PriceComponentAttribute.Name)
				attributes.PriceComponentAttribute.Order = types.Int64PointerValue(attributesItem.PriceComponentAttribute.Order)
				attributes.PriceComponentAttribute.Placeholder = types.StringPointerValue(attributesItem.PriceComponentAttribute.Placeholder)
				attributes.PriceComponentAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PriceComponentAttribute.PreviewValueFormatter)
				attributes.PriceComponentAttribute.Protected = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Protected)
				attributes.PriceComponentAttribute.Readonly = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Readonly)
				attributes.PriceComponentAttribute.RenderCondition = types.StringPointerValue(attributesItem.PriceComponentAttribute.RenderCondition)
				attributes.PriceComponentAttribute.Repeatable = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Repeatable)
				attributes.PriceComponentAttribute.Required = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Required)
				attributes.PriceComponentAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount24, settingsFlagItem24 := range attributesItem.PriceComponentAttribute.SettingsFlag {
					var settingsFlag24 tfTypes.SettingFlag
					settingsFlag24.Enabled = types.BoolPointerValue(settingsFlagItem24.Enabled)
					settingsFlag24.Name = types.StringPointerValue(settingsFlagItem24.Name)
					if settingsFlagCount24+1 > len(attributes.PriceComponentAttribute.SettingsFlag) {
						attributes.PriceComponentAttribute.SettingsFlag = append(attributes.PriceComponentAttribute.SettingsFlag, settingsFlag24)
					} else {
						attributes.PriceComponentAttribute.SettingsFlag[settingsFlagCount24].Enabled = settingsFlag24.Enabled
						attributes.PriceComponentAttribute.SettingsFlag[settingsFlagCount24].Name = settingsFlag24.Name
					}
				}
				attributes.PriceComponentAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PriceComponentAttribute.ShowInTable)
				attributes.PriceComponentAttribute.Sortable = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Sortable)
				attributes.PriceComponentAttribute.Type = types.StringValue(string(attributesItem.PriceComponentAttribute.Type))
				attributes.PriceComponentAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PriceComponentAttribute.ValueFormatter)
			}
			if attributesItem.PurposeAttribute != nil {
				attributes.PurposeAttribute = &tfTypes.PurposeAttribute{}
				if attributesItem.PurposeAttribute.Manifest != nil {
					attributes.PurposeAttribute.Manifest = make([]types.String, 0, len(attributesItem.PurposeAttribute.Manifest))
					for _, v := range attributesItem.PurposeAttribute.Manifest {
						attributes.PurposeAttribute.Manifest = append(attributes.PurposeAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PurposeAttribute.Purpose = make([]types.String, 0, len(attributesItem.PurposeAttribute.Purpose))
				for _, v := range attributesItem.PurposeAttribute.Purpose {
					attributes.PurposeAttribute.Purpose = append(attributes.PurposeAttribute.Purpose, types.StringValue(v))
				}
				attributes.PurposeAttribute.Archived = types.BoolPointerValue(attributesItem.PurposeAttribute.Archived)
				attributes.PurposeAttribute.Color = types.StringPointerValue(attributesItem.PurposeAttribute.Color)
				if attributesItem.PurposeAttribute.Constraints == nil {
					attributes.PurposeAttribute.Constraints = nil
				} else {
					attributes.PurposeAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				attributes.PurposeAttribute.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(attributesItem.PurposeAttribute.CreatedAt))
				if attributesItem.PurposeAttribute.DefaultValue == nil {
					attributes.PurposeAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult25, _ := json.Marshal(attributesItem.PurposeAttribute.DefaultValue)
					attributes.PurposeAttribute.DefaultValue = types.StringValue(string(defaultValueResult25))
				}
				attributes.PurposeAttribute.Deprecated = types.BoolPointerValue(attributesItem.PurposeAttribute.Deprecated)
				attributes.PurposeAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PurposeAttribute.EntityBuilderDisableEdit)
				attributes.PurposeAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PurposeAttribute.FeatureFlag)
				attributes.PurposeAttribute.Group = types.StringPointerValue(attributesItem.PurposeAttribute.Group)
				attributes.PurposeAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PurposeAttribute.HasPrimary)
				attributes.PurposeAttribute.Hidden = types.BoolPointerValue(attributesItem.PurposeAttribute.Hidden)
				attributes.PurposeAttribute.HideLabel = types.BoolPointerValue(attributesItem.PurposeAttribute.HideLabel)
				attributes.PurposeAttribute.Icon = types.StringPointerValue(attributesItem.PurposeAttribute.Icon)
				attributes.PurposeAttribute.ID = types.StringPointerValue(attributesItem.PurposeAttribute.ID)
				if attributesItem.PurposeAttribute.InfoHelpers == nil {
					attributes.PurposeAttribute.InfoHelpers = nil
				} else {
					attributes.PurposeAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PurposeAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintCustomComponent)
					attributes.PurposeAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintText)
					attributes.PurposeAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintTextKey)
					attributes.PurposeAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PurposeAttribute.Label = types.StringValue(attributesItem.PurposeAttribute.Label)
				attributes.PurposeAttribute.Layout = types.StringPointerValue(attributesItem.PurposeAttribute.Layout)
				attributes.PurposeAttribute.Name = types.StringValue(attributesItem.PurposeAttribute.Name)
				attributes.PurposeAttribute.Order = types.Int64PointerValue(attributesItem.PurposeAttribute.Order)
				attributes.PurposeAttribute.Parents = make([]types.String, 0, len(attributesItem.PurposeAttribute.Parents))
				for _, v := range attributesItem.PurposeAttribute.Parents {
					attributes.PurposeAttribute.Parents = append(attributes.PurposeAttribute.Parents, types.StringValue(v))
				}
				attributes.PurposeAttribute.Placeholder = types.StringPointerValue(attributesItem.PurposeAttribute.Placeholder)
				attributes.PurposeAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PurposeAttribute.PreviewValueFormatter)
				attributes.PurposeAttribute.Protected = types.BoolPointerValue(attributesItem.PurposeAttribute.Protected)
				attributes.PurposeAttribute.Readonly = types.BoolPointerValue(attributesItem.PurposeAttribute.Readonly)
				attributes.PurposeAttribute.RenderCondition = types.StringPointerValue(attributesItem.PurposeAttribute.RenderCondition)
				attributes.PurposeAttribute.Repeatable = types.BoolPointerValue(attributesItem.PurposeAttribute.Repeatable)
				attributes.PurposeAttribute.Required = types.BoolPointerValue(attributesItem.PurposeAttribute.Required)
				attributes.PurposeAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount25, settingsFlagItem25 := range attributesItem.PurposeAttribute.SettingsFlag {
					var settingsFlag25 tfTypes.SettingFlag
					settingsFlag25.Enabled = types.BoolPointerValue(settingsFlagItem25.Enabled)
					settingsFlag25.Name = types.StringPointerValue(settingsFlagItem25.Name)
					if settingsFlagCount25+1 > len(attributes.PurposeAttribute.SettingsFlag) {
						attributes.PurposeAttribute.SettingsFlag = append(attributes.PurposeAttribute.SettingsFlag, settingsFlag25)
					} else {
						attributes.PurposeAttribute.SettingsFlag[settingsFlagCount25].Enabled = settingsFlag25.Enabled
						attributes.PurposeAttribute.SettingsFlag[settingsFlagCount25].Name = settingsFlag25.Name
					}
				}
				attributes.PurposeAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PurposeAttribute.ShowInTable)
				attributes.PurposeAttribute.Slug = types.StringPointerValue(attributesItem.PurposeAttribute.Slug)
				attributes.PurposeAttribute.Sortable = types.BoolPointerValue(attributesItem.PurposeAttribute.Sortable)
				attributes.PurposeAttribute.Type = types.StringValue(string(attributesItem.PurposeAttribute.Type))
				attributes.PurposeAttribute.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(attributesItem.PurposeAttribute.UpdatedAt))
				attributes.PurposeAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PurposeAttribute.ValueFormatter)
			}
			if attributesItem.RelationAttribute != nil {
				attributes.RelationAttribute = &tfTypes.RelationAttribute{}
				if attributesItem.RelationAttribute.Manifest != nil {
					attributes.RelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.RelationAttribute.Manifest))
					for _, v := range attributesItem.RelationAttribute.Manifest {
						attributes.RelationAttribute.Manifest = append(attributes.RelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.RelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.RelationAttribute.Purpose))
				for _, v := range attributesItem.RelationAttribute.Purpose {
					attributes.RelationAttribute.Purpose = append(attributes.RelationAttribute.Purpose, types.StringValue(v))
				}
				attributes.RelationAttribute.Actions = []tfTypes.RelationAttributeActions{}
				for actionsCount, actionsItem := range attributesItem.RelationAttribute.Actions {
					var actions tfTypes.RelationAttributeActions
					if actionsItem.ActionType != nil {
						actions.ActionType = types.StringValue(string(*actionsItem.ActionType))
					} else {
						actions.ActionType = types.StringNull()
					}
					actions.Default = types.BoolPointerValue(actionsItem.Default)
					actions.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
					actions.Label = types.StringPointerValue(actionsItem.Label)
					if actionsItem.NewEntityItem == nil {
						actions.NewEntityItem = types.StringNull()
					} else {
						newEntityItemResult, _ := json.Marshal(actionsItem.NewEntityItem)
						actions.NewEntityItem = types.StringValue(string(newEntityItemResult))
					}
					actions.SettingsFlag = []tfTypes.SettingFlag{}
					for settingsFlagCount26, settingsFlagItem26 := range actionsItem.SettingsFlag {
						var settingsFlag26 tfTypes.SettingFlag
						settingsFlag26.Enabled = types.BoolPointerValue(settingsFlagItem26.Enabled)
						settingsFlag26.Name = types.StringPointerValue(settingsFlagItem26.Name)
						if settingsFlagCount26+1 > len(actions.SettingsFlag) {
							actions.SettingsFlag = append(actions.SettingsFlag, settingsFlag26)
						} else {
							actions.SettingsFlag[settingsFlagCount26].Enabled = settingsFlag26.Enabled
							actions.SettingsFlag[settingsFlagCount26].Name = settingsFlag26.Name
						}
					}
					if actionsCount+1 > len(attributes.RelationAttribute.Actions) {
						attributes.RelationAttribute.Actions = append(attributes.RelationAttribute.Actions, actions)
					} else {
						attributes.RelationAttribute.Actions[actionsCount].ActionType = actions.ActionType
						attributes.RelationAttribute.Actions[actionsCount].Default = actions.Default
						attributes.RelationAttribute.Actions[actionsCount].FeatureFlag = actions.FeatureFlag
						attributes.RelationAttribute.Actions[actionsCount].Label = actions.Label
						attributes.RelationAttribute.Actions[actionsCount].NewEntityItem = actions.NewEntityItem
						attributes.RelationAttribute.Actions[actionsCount].SettingsFlag = actions.SettingsFlag
					}
				}
				attributes.RelationAttribute.AddButtonLabel = types.StringPointerValue(attributesItem.RelationAttribute.AddButtonLabel)
				attributes.RelationAttribute.AllowedSchemas = make([]types.String, 0, len(attributesItem.RelationAttribute.AllowedSchemas))
				for _, v := range attributesItem.RelationAttribute.AllowedSchemas {
					attributes.RelationAttribute.AllowedSchemas = append(attributes.RelationAttribute.AllowedSchemas, types.StringValue(v))
				}
				if attributesItem.RelationAttribute.Constraints == nil {
					attributes.RelationAttribute.Constraints = nil
				} else {
					attributes.RelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.RelationAttribute.DefaultValue == nil {
					attributes.RelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult26, _ := json.Marshal(attributesItem.RelationAttribute.DefaultValue)
					attributes.RelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult26))
				}
				attributes.RelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.RelationAttribute.Deprecated)
				attributes.RelationAttribute.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem.RelationAttribute.DetailsViewModeEnabled)
				if attributesItem.RelationAttribute.DrawerSize != nil {
					attributes.RelationAttribute.DrawerSize = types.StringValue(string(*attributesItem.RelationAttribute.DrawerSize))
				} else {
					attributes.RelationAttribute.DrawerSize = types.StringNull()
				}
				if attributesItem.RelationAttribute.EditMode != nil {
					attributes.RelationAttribute.EditMode = types.StringValue(string(*attributesItem.RelationAttribute.EditMode))
				} else {
					attributes.RelationAttribute.EditMode = types.StringNull()
				}
				attributes.RelationAttribute.EnableRelationPicker = types.BoolPointerValue(attributesItem.RelationAttribute.EnableRelationPicker)
				attributes.RelationAttribute.EnableRelationTags = types.BoolPointerValue(attributesItem.RelationAttribute.EnableRelationTags)
				attributes.RelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.RelationAttribute.EntityBuilderDisableEdit)
				attributes.RelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.RelationAttribute.FeatureFlag)
				attributes.RelationAttribute.Group = types.StringPointerValue(attributesItem.RelationAttribute.Group)
				attributes.RelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.RelationAttribute.HasPrimary)
				attributes.RelationAttribute.Hidden = types.BoolPointerValue(attributesItem.RelationAttribute.Hidden)
				attributes.RelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.RelationAttribute.HideLabel)
				attributes.RelationAttribute.Icon = types.StringPointerValue(attributesItem.RelationAttribute.Icon)
				attributes.RelationAttribute.ID = types.StringPointerValue(attributesItem.RelationAttribute.ID)
				if attributesItem.RelationAttribute.InfoHelpers == nil {
					attributes.RelationAttribute.InfoHelpers = nil
				} else {
					attributes.RelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.RelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.RelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintText)
					attributes.RelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintTextKey)
					attributes.RelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.RelationAttribute.Label = types.StringValue(attributesItem.RelationAttribute.Label)
				attributes.RelationAttribute.Layout = types.StringPointerValue(attributesItem.RelationAttribute.Layout)
				attributes.RelationAttribute.Name = types.StringValue(attributesItem.RelationAttribute.Name)
				attributes.RelationAttribute.Order = types.Int64PointerValue(attributesItem.RelationAttribute.Order)
				attributes.RelationAttribute.Placeholder = types.StringPointerValue(attributesItem.RelationAttribute.Placeholder)
				attributes.RelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.RelationAttribute.PreviewValueFormatter)
				attributes.RelationAttribute.Protected = types.BoolPointerValue(attributesItem.RelationAttribute.Protected)
				attributes.RelationAttribute.Readonly = types.BoolPointerValue(attributesItem.RelationAttribute.Readonly)
				if attributesItem.RelationAttribute.RelationAffinityMode != nil {
					attributes.RelationAttribute.RelationAffinityMode = types.StringValue(string(*attributesItem.RelationAttribute.RelationAffinityMode))
				} else {
					attributes.RelationAttribute.RelationAffinityMode = types.StringNull()
				}
				if attributesItem.RelationAttribute.RelationPickerFilter == nil {
					attributes.RelationAttribute.RelationPickerFilter = nil
				} else {
					attributes.RelationAttribute.RelationPickerFilter = &tfTypes.RelationAttributeRelationPickerFilter{}
					attributes.RelationAttribute.RelationPickerFilter.Q = types.StringValue(attributesItem.RelationAttribute.RelationPickerFilter.Q)
				}
				if attributesItem.RelationAttribute.RelationType != nil {
					attributes.RelationAttribute.RelationType = types.StringValue(string(*attributesItem.RelationAttribute.RelationType))
				} else {
					attributes.RelationAttribute.RelationType = types.StringNull()
				}
				attributes.RelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.RelationAttribute.RenderCondition)
				attributes.RelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.RelationAttribute.Repeatable)
				attributes.RelationAttribute.Required = types.BoolPointerValue(attributesItem.RelationAttribute.Required)
				if len(attributesItem.RelationAttribute.ReverseAttributes) > 0 {
					attributes.RelationAttribute.ReverseAttributes = make(map[string]types.String, len(attributesItem.RelationAttribute.ReverseAttributes))
					for key, value := range attributesItem.RelationAttribute.ReverseAttributes {
						attributes.RelationAttribute.ReverseAttributes[key] = types.StringValue(value)
					}
				}
				attributes.RelationAttribute.SearchPlaceholder = types.StringPointerValue(attributesItem.RelationAttribute.SearchPlaceholder)
				attributes.RelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount27, settingsFlagItem27 := range attributesItem.RelationAttribute.SettingsFlag {
					var settingsFlag27 tfTypes.SettingFlag
					settingsFlag27.Enabled = types.BoolPointerValue(settingsFlagItem27.Enabled)
					settingsFlag27.Name = types.StringPointerValue(settingsFlagItem27.Name)
					if settingsFlagCount27+1 > len(attributes.RelationAttribute.SettingsFlag) {
						attributes.RelationAttribute.SettingsFlag = append(attributes.RelationAttribute.SettingsFlag, settingsFlag27)
					} else {
						attributes.RelationAttribute.SettingsFlag[settingsFlagCount27].Enabled = settingsFlag27.Enabled
						attributes.RelationAttribute.SettingsFlag[settingsFlagCount27].Name = settingsFlag27.Name
					}
				}
				attributes.RelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.RelationAttribute.ShowInTable)
				attributes.RelationAttribute.Sortable = types.BoolPointerValue(attributesItem.RelationAttribute.Sortable)
				attributes.RelationAttribute.SummaryFields = []tfTypes.RelationAttributeSummaryFields{}
				for summaryFieldsCount, summaryFieldsItem := range attributesItem.RelationAttribute.SummaryFields {
					var summaryFields tfTypes.RelationAttributeSummaryFields
					if summaryFieldsItem.Str != nil {
						summaryFields.Str = types.StringPointerValue(summaryFieldsItem.Str)
					}
					if summaryFieldsItem.SummaryField != nil {
						summaryFields.SummaryField = &tfTypes.SummaryField{}
						summaryFields.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
						summaryFields.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
					}
					if summaryFieldsCount+1 > len(attributes.RelationAttribute.SummaryFields) {
						attributes.RelationAttribute.SummaryFields = append(attributes.RelationAttribute.SummaryFields, summaryFields)
					} else {
						attributes.RelationAttribute.SummaryFields[summaryFieldsCount].Str = summaryFields.Str
						attributes.RelationAttribute.SummaryFields[summaryFieldsCount].SummaryField = summaryFields.SummaryField
					}
				}
				attributes.RelationAttribute.Type = types.StringValue(string(attributesItem.RelationAttribute.Type))
				attributes.RelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.RelationAttribute.ValueFormatter)
			}
			if attributesItem.SelectAttribute != nil {
				attributes.SelectAttribute = &tfTypes.SelectAttribute{}
				if attributesItem.SelectAttribute.Manifest != nil {
					attributes.SelectAttribute.Manifest = make([]types.String, 0, len(attributesItem.SelectAttribute.Manifest))
					for _, v := range attributesItem.SelectAttribute.Manifest {
						attributes.SelectAttribute.Manifest = append(attributes.SelectAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.SelectAttribute.Purpose = make([]types.String, 0, len(attributesItem.SelectAttribute.Purpose))
				for _, v := range attributesItem.SelectAttribute.Purpose {
					attributes.SelectAttribute.Purpose = append(attributes.SelectAttribute.Purpose, types.StringValue(v))
				}
				attributes.SelectAttribute.AllowAny = types.BoolPointerValue(attributesItem.SelectAttribute.AllowAny)
				if attributesItem.SelectAttribute.Constraints == nil {
					attributes.SelectAttribute.Constraints = nil
				} else {
					attributes.SelectAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.SelectAttribute.DefaultValue == nil {
					attributes.SelectAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult27, _ := json.Marshal(attributesItem.SelectAttribute.DefaultValue)
					attributes.SelectAttribute.DefaultValue = types.StringValue(string(defaultValueResult27))
				}
				attributes.SelectAttribute.Deprecated = types.BoolPointerValue(attributesItem.SelectAttribute.Deprecated)
				attributes.SelectAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.SelectAttribute.EntityBuilderDisableEdit)
				attributes.SelectAttribute.FeatureFlag = types.StringPointerValue(attributesItem.SelectAttribute.FeatureFlag)
				attributes.SelectAttribute.Group = types.StringPointerValue(attributesItem.SelectAttribute.Group)
				attributes.SelectAttribute.HasPrimary = types.BoolPointerValue(attributesItem.SelectAttribute.HasPrimary)
				attributes.SelectAttribute.Hidden = types.BoolPointerValue(attributesItem.SelectAttribute.Hidden)
				attributes.SelectAttribute.HideLabel = types.BoolPointerValue(attributesItem.SelectAttribute.HideLabel)
				attributes.SelectAttribute.Icon = types.StringPointerValue(attributesItem.SelectAttribute.Icon)
				attributes.SelectAttribute.ID = types.StringPointerValue(attributesItem.SelectAttribute.ID)
				if attributesItem.SelectAttribute.InfoHelpers == nil {
					attributes.SelectAttribute.InfoHelpers = nil
				} else {
					attributes.SelectAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.SelectAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintCustomComponent)
					attributes.SelectAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintText)
					attributes.SelectAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintTextKey)
					attributes.SelectAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.SelectAttribute.Label = types.StringValue(attributesItem.SelectAttribute.Label)
				attributes.SelectAttribute.Layout = types.StringPointerValue(attributesItem.SelectAttribute.Layout)
				attributes.SelectAttribute.Name = types.StringValue(attributesItem.SelectAttribute.Name)
				if attributesItem.SelectAttribute.Options == nil {
					attributes.SelectAttribute.Options = types.StringNull()
				} else {
					optionsVarResult, _ := json.Marshal(attributesItem.SelectAttribute.Options)
					attributes.SelectAttribute.Options = types.StringValue(string(optionsVarResult))
				}
				attributes.SelectAttribute.Order = types.Int64PointerValue(attributesItem.SelectAttribute.Order)
				attributes.SelectAttribute.Placeholder = types.StringPointerValue(attributesItem.SelectAttribute.Placeholder)
				attributes.SelectAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.SelectAttribute.PreviewValueFormatter)
				attributes.SelectAttribute.Protected = types.BoolPointerValue(attributesItem.SelectAttribute.Protected)
				attributes.SelectAttribute.Readonly = types.BoolPointerValue(attributesItem.SelectAttribute.Readonly)
				attributes.SelectAttribute.RenderCondition = types.StringPointerValue(attributesItem.SelectAttribute.RenderCondition)
				attributes.SelectAttribute.Repeatable = types.BoolPointerValue(attributesItem.SelectAttribute.Repeatable)
				attributes.SelectAttribute.Required = types.BoolPointerValue(attributesItem.SelectAttribute.Required)
				attributes.SelectAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount28, settingsFlagItem28 := range attributesItem.SelectAttribute.SettingsFlag {
					var settingsFlag28 tfTypes.SettingFlag
					settingsFlag28.Enabled = types.BoolPointerValue(settingsFlagItem28.Enabled)
					settingsFlag28.Name = types.StringPointerValue(settingsFlagItem28.Name)
					if settingsFlagCount28+1 > len(attributes.SelectAttribute.SettingsFlag) {
						attributes.SelectAttribute.SettingsFlag = append(attributes.SelectAttribute.SettingsFlag, settingsFlag28)
					} else {
						attributes.SelectAttribute.SettingsFlag[settingsFlagCount28].Enabled = settingsFlag28.Enabled
						attributes.SelectAttribute.SettingsFlag[settingsFlagCount28].Name = settingsFlag28.Name
					}
				}
				attributes.SelectAttribute.ShowInTable = types.BoolPointerValue(attributesItem.SelectAttribute.ShowInTable)
				attributes.SelectAttribute.Sortable = types.BoolPointerValue(attributesItem.SelectAttribute.Sortable)
				attributes.SelectAttribute.Type = types.StringValue(string(attributesItem.SelectAttribute.Type))
				attributes.SelectAttribute.ValueFormatter = types.StringPointerValue(attributesItem.SelectAttribute.ValueFormatter)
			}
			if attributesItem.SequenceAttribute != nil {
				attributes.SequenceAttribute = &tfTypes.SequenceAttribute{}
				if attributesItem.SequenceAttribute.Manifest != nil {
					attributes.SequenceAttribute.Manifest = make([]types.String, 0, len(attributesItem.SequenceAttribute.Manifest))
					for _, v := range attributesItem.SequenceAttribute.Manifest {
						attributes.SequenceAttribute.Manifest = append(attributes.SequenceAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.SequenceAttribute.Purpose = make([]types.String, 0, len(attributesItem.SequenceAttribute.Purpose))
				for _, v := range attributesItem.SequenceAttribute.Purpose {
					attributes.SequenceAttribute.Purpose = append(attributes.SequenceAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.SequenceAttribute.Constraints == nil {
					attributes.SequenceAttribute.Constraints = nil
				} else {
					attributes.SequenceAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.SequenceAttribute.DefaultValue == nil {
					attributes.SequenceAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult28, _ := json.Marshal(attributesItem.SequenceAttribute.DefaultValue)
					attributes.SequenceAttribute.DefaultValue = types.StringValue(string(defaultValueResult28))
				}
				attributes.SequenceAttribute.Deprecated = types.BoolPointerValue(attributesItem.SequenceAttribute.Deprecated)
				attributes.SequenceAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.SequenceAttribute.EntityBuilderDisableEdit)
				attributes.SequenceAttribute.FeatureFlag = types.StringPointerValue(attributesItem.SequenceAttribute.FeatureFlag)
				attributes.SequenceAttribute.Group = types.StringPointerValue(attributesItem.SequenceAttribute.Group)
				attributes.SequenceAttribute.HasPrimary = types.BoolPointerValue(attributesItem.SequenceAttribute.HasPrimary)
				attributes.SequenceAttribute.Hidden = types.BoolPointerValue(attributesItem.SequenceAttribute.Hidden)
				attributes.SequenceAttribute.HideLabel = types.BoolPointerValue(attributesItem.SequenceAttribute.HideLabel)
				attributes.SequenceAttribute.Icon = types.StringPointerValue(attributesItem.SequenceAttribute.Icon)
				attributes.SequenceAttribute.ID = types.StringPointerValue(attributesItem.SequenceAttribute.ID)
				if attributesItem.SequenceAttribute.InfoHelpers == nil {
					attributes.SequenceAttribute.InfoHelpers = nil
				} else {
					attributes.SequenceAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.SequenceAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintCustomComponent)
					attributes.SequenceAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintText)
					attributes.SequenceAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintTextKey)
					attributes.SequenceAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.SequenceAttribute.Label = types.StringValue(attributesItem.SequenceAttribute.Label)
				attributes.SequenceAttribute.Layout = types.StringPointerValue(attributesItem.SequenceAttribute.Layout)
				attributes.SequenceAttribute.Name = types.StringValue(attributesItem.SequenceAttribute.Name)
				attributes.SequenceAttribute.Order = types.Int64PointerValue(attributesItem.SequenceAttribute.Order)
				attributes.SequenceAttribute.Placeholder = types.StringPointerValue(attributesItem.SequenceAttribute.Placeholder)
				attributes.SequenceAttribute.Prefix = types.StringPointerValue(attributesItem.SequenceAttribute.Prefix)
				attributes.SequenceAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.SequenceAttribute.PreviewValueFormatter)
				attributes.SequenceAttribute.Protected = types.BoolPointerValue(attributesItem.SequenceAttribute.Protected)
				attributes.SequenceAttribute.Readonly = types.BoolPointerValue(attributesItem.SequenceAttribute.Readonly)
				attributes.SequenceAttribute.RenderCondition = types.StringPointerValue(attributesItem.SequenceAttribute.RenderCondition)
				attributes.SequenceAttribute.Repeatable = types.BoolPointerValue(attributesItem.SequenceAttribute.Repeatable)
				attributes.SequenceAttribute.Required = types.BoolPointerValue(attributesItem.SequenceAttribute.Required)
				attributes.SequenceAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount29, settingsFlagItem29 := range attributesItem.SequenceAttribute.SettingsFlag {
					var settingsFlag29 tfTypes.SettingFlag
					settingsFlag29.Enabled = types.BoolPointerValue(settingsFlagItem29.Enabled)
					settingsFlag29.Name = types.StringPointerValue(settingsFlagItem29.Name)
					if settingsFlagCount29+1 > len(attributes.SequenceAttribute.SettingsFlag) {
						attributes.SequenceAttribute.SettingsFlag = append(attributes.SequenceAttribute.SettingsFlag, settingsFlag29)
					} else {
						attributes.SequenceAttribute.SettingsFlag[settingsFlagCount29].Enabled = settingsFlag29.Enabled
						attributes.SequenceAttribute.SettingsFlag[settingsFlagCount29].Name = settingsFlag29.Name
					}
				}
				attributes.SequenceAttribute.ShowInTable = types.BoolPointerValue(attributesItem.SequenceAttribute.ShowInTable)
				attributes.SequenceAttribute.Sortable = types.BoolPointerValue(attributesItem.SequenceAttribute.Sortable)
				attributes.SequenceAttribute.StartNumber = types.Int64PointerValue(attributesItem.SequenceAttribute.StartNumber)
				attributes.SequenceAttribute.Type = types.StringValue(string(attributesItem.SequenceAttribute.Type))
				attributes.SequenceAttribute.ValueFormatter = types.StringPointerValue(attributesItem.SequenceAttribute.ValueFormatter)
			}
			if attributesItem.StatusAttribute != nil {
				attributes.StatusAttribute = &tfTypes.StatusAttribute{}
				if attributesItem.StatusAttribute.Manifest != nil {
					attributes.StatusAttribute.Manifest = make([]types.String, 0, len(attributesItem.StatusAttribute.Manifest))
					for _, v := range attributesItem.StatusAttribute.Manifest {
						attributes.StatusAttribute.Manifest = append(attributes.StatusAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.StatusAttribute.Purpose = make([]types.String, 0, len(attributesItem.StatusAttribute.Purpose))
				for _, v := range attributesItem.StatusAttribute.Purpose {
					attributes.StatusAttribute.Purpose = append(attributes.StatusAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.StatusAttribute.Constraints == nil {
					attributes.StatusAttribute.Constraints = nil
				} else {
					attributes.StatusAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.StatusAttribute.DefaultValue == nil {
					attributes.StatusAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult29, _ := json.Marshal(attributesItem.StatusAttribute.DefaultValue)
					attributes.StatusAttribute.DefaultValue = types.StringValue(string(defaultValueResult29))
				}
				attributes.StatusAttribute.Deprecated = types.BoolPointerValue(attributesItem.StatusAttribute.Deprecated)
				attributes.StatusAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.StatusAttribute.EntityBuilderDisableEdit)
				attributes.StatusAttribute.FeatureFlag = types.StringPointerValue(attributesItem.StatusAttribute.FeatureFlag)
				attributes.StatusAttribute.Group = types.StringPointerValue(attributesItem.StatusAttribute.Group)
				attributes.StatusAttribute.HasPrimary = types.BoolPointerValue(attributesItem.StatusAttribute.HasPrimary)
				attributes.StatusAttribute.Hidden = types.BoolPointerValue(attributesItem.StatusAttribute.Hidden)
				attributes.StatusAttribute.HideLabel = types.BoolPointerValue(attributesItem.StatusAttribute.HideLabel)
				attributes.StatusAttribute.Icon = types.StringPointerValue(attributesItem.StatusAttribute.Icon)
				attributes.StatusAttribute.ID = types.StringPointerValue(attributesItem.StatusAttribute.ID)
				if attributesItem.StatusAttribute.InfoHelpers == nil {
					attributes.StatusAttribute.InfoHelpers = nil
				} else {
					attributes.StatusAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.StatusAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintCustomComponent)
					attributes.StatusAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintText)
					attributes.StatusAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintTextKey)
					attributes.StatusAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.StatusAttribute.Label = types.StringValue(attributesItem.StatusAttribute.Label)
				attributes.StatusAttribute.Layout = types.StringPointerValue(attributesItem.StatusAttribute.Layout)
				attributes.StatusAttribute.Name = types.StringValue(attributesItem.StatusAttribute.Name)
				attributes.StatusAttribute.Options = []tfTypes.MultiSelectAttributeOptions{}
				for optionsVarCount1, optionsVarItem1 := range attributesItem.StatusAttribute.Options {
					var optionsVar1 tfTypes.MultiSelectAttributeOptions
					if optionsVarItem1.Str != nil {
						optionsVar1.Str = types.StringPointerValue(optionsVarItem1.Str)
					}
					if optionsVarItem1.StatusAttributeOptions2 != nil {
						optionsVar1.Two = &tfTypes.MultiSelectAttributeOptions2{}
						optionsVar1.Two.Title = types.StringPointerValue(optionsVarItem1.StatusAttributeOptions2.Title)
						optionsVar1.Two.Value = types.StringValue(optionsVarItem1.StatusAttributeOptions2.Value)
					}
					if optionsVarCount1+1 > len(attributes.StatusAttribute.Options) {
						attributes.StatusAttribute.Options = append(attributes.StatusAttribute.Options, optionsVar1)
					} else {
						attributes.StatusAttribute.Options[optionsVarCount1].Str = optionsVar1.Str
						attributes.StatusAttribute.Options[optionsVarCount1].Two = optionsVar1.Two
					}
				}
				attributes.StatusAttribute.Order = types.Int64PointerValue(attributesItem.StatusAttribute.Order)
				attributes.StatusAttribute.Placeholder = types.StringPointerValue(attributesItem.StatusAttribute.Placeholder)
				attributes.StatusAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.StatusAttribute.PreviewValueFormatter)
				attributes.StatusAttribute.Protected = types.BoolPointerValue(attributesItem.StatusAttribute.Protected)
				attributes.StatusAttribute.Readonly = types.BoolPointerValue(attributesItem.StatusAttribute.Readonly)
				attributes.StatusAttribute.RenderCondition = types.StringPointerValue(attributesItem.StatusAttribute.RenderCondition)
				attributes.StatusAttribute.Repeatable = types.BoolPointerValue(attributesItem.StatusAttribute.Repeatable)
				attributes.StatusAttribute.Required = types.BoolPointerValue(attributesItem.StatusAttribute.Required)
				attributes.StatusAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount30, settingsFlagItem30 := range attributesItem.StatusAttribute.SettingsFlag {
					var settingsFlag30 tfTypes.SettingFlag
					settingsFlag30.Enabled = types.BoolPointerValue(settingsFlagItem30.Enabled)
					settingsFlag30.Name = types.StringPointerValue(settingsFlagItem30.Name)
					if settingsFlagCount30+1 > len(attributes.StatusAttribute.SettingsFlag) {
						attributes.StatusAttribute.SettingsFlag = append(attributes.StatusAttribute.SettingsFlag, settingsFlag30)
					} else {
						attributes.StatusAttribute.SettingsFlag[settingsFlagCount30].Enabled = settingsFlag30.Enabled
						attributes.StatusAttribute.SettingsFlag[settingsFlagCount30].Name = settingsFlag30.Name
					}
				}
				attributes.StatusAttribute.ShowInTable = types.BoolPointerValue(attributesItem.StatusAttribute.ShowInTable)
				attributes.StatusAttribute.Sortable = types.BoolPointerValue(attributesItem.StatusAttribute.Sortable)
				attributes.StatusAttribute.Type = types.StringValue(string(attributesItem.StatusAttribute.Type))
				attributes.StatusAttribute.ValueFormatter = types.StringPointerValue(attributesItem.StatusAttribute.ValueFormatter)
			}
			if attributesItem.TagsAttribute != nil {
				attributes.TagsAttribute = &tfTypes.TagsAttribute{}
				if attributesItem.TagsAttribute.Manifest != nil {
					attributes.TagsAttribute.Manifest = make([]types.String, 0, len(attributesItem.TagsAttribute.Manifest))
					for _, v := range attributesItem.TagsAttribute.Manifest {
						attributes.TagsAttribute.Manifest = append(attributes.TagsAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.TagsAttribute.Purpose = make([]types.String, 0, len(attributesItem.TagsAttribute.Purpose))
				for _, v := range attributesItem.TagsAttribute.Purpose {
					attributes.TagsAttribute.Purpose = append(attributes.TagsAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.TagsAttribute.Constraints == nil {
					attributes.TagsAttribute.Constraints = nil
				} else {
					attributes.TagsAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.TagsAttribute.DefaultValue == nil {
					attributes.TagsAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult30, _ := json.Marshal(attributesItem.TagsAttribute.DefaultValue)
					attributes.TagsAttribute.DefaultValue = types.StringValue(string(defaultValueResult30))
				}
				attributes.TagsAttribute.Deprecated = types.BoolPointerValue(attributesItem.TagsAttribute.Deprecated)
				attributes.TagsAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.TagsAttribute.EntityBuilderDisableEdit)
				attributes.TagsAttribute.FeatureFlag = types.StringPointerValue(attributesItem.TagsAttribute.FeatureFlag)
				attributes.TagsAttribute.Group = types.StringPointerValue(attributesItem.TagsAttribute.Group)
				attributes.TagsAttribute.HasPrimary = types.BoolPointerValue(attributesItem.TagsAttribute.HasPrimary)
				attributes.TagsAttribute.Hidden = types.BoolPointerValue(attributesItem.TagsAttribute.Hidden)
				attributes.TagsAttribute.HideLabel = types.BoolPointerValue(attributesItem.TagsAttribute.HideLabel)
				attributes.TagsAttribute.Icon = types.StringPointerValue(attributesItem.TagsAttribute.Icon)
				attributes.TagsAttribute.ID = types.StringPointerValue(attributesItem.TagsAttribute.ID)
				if attributesItem.TagsAttribute.InfoHelpers == nil {
					attributes.TagsAttribute.InfoHelpers = nil
				} else {
					attributes.TagsAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.TagsAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintCustomComponent)
					attributes.TagsAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintText)
					attributes.TagsAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintTextKey)
					attributes.TagsAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.TagsAttribute.Label = types.StringValue(attributesItem.TagsAttribute.Label)
				attributes.TagsAttribute.Layout = types.StringPointerValue(attributesItem.TagsAttribute.Layout)
				attributes.TagsAttribute.Name = types.StringValue(attributesItem.TagsAttribute.Name)
				attributes.TagsAttribute.Options = make([]types.String, 0, len(attributesItem.TagsAttribute.Options))
				for _, v := range attributesItem.TagsAttribute.Options {
					attributes.TagsAttribute.Options = append(attributes.TagsAttribute.Options, types.StringValue(v))
				}
				attributes.TagsAttribute.Order = types.Int64PointerValue(attributesItem.TagsAttribute.Order)
				attributes.TagsAttribute.Placeholder = types.StringPointerValue(attributesItem.TagsAttribute.Placeholder)
				attributes.TagsAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.TagsAttribute.PreviewValueFormatter)
				attributes.TagsAttribute.Protected = types.BoolPointerValue(attributesItem.TagsAttribute.Protected)
				attributes.TagsAttribute.Readonly = types.BoolPointerValue(attributesItem.TagsAttribute.Readonly)
				attributes.TagsAttribute.RenderCondition = types.StringPointerValue(attributesItem.TagsAttribute.RenderCondition)
				attributes.TagsAttribute.Repeatable = types.BoolPointerValue(attributesItem.TagsAttribute.Repeatable)
				attributes.TagsAttribute.Required = types.BoolPointerValue(attributesItem.TagsAttribute.Required)
				attributes.TagsAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount31, settingsFlagItem31 := range attributesItem.TagsAttribute.SettingsFlag {
					var settingsFlag31 tfTypes.SettingFlag
					settingsFlag31.Enabled = types.BoolPointerValue(settingsFlagItem31.Enabled)
					settingsFlag31.Name = types.StringPointerValue(settingsFlagItem31.Name)
					if settingsFlagCount31+1 > len(attributes.TagsAttribute.SettingsFlag) {
						attributes.TagsAttribute.SettingsFlag = append(attributes.TagsAttribute.SettingsFlag, settingsFlag31)
					} else {
						attributes.TagsAttribute.SettingsFlag[settingsFlagCount31].Enabled = settingsFlag31.Enabled
						attributes.TagsAttribute.SettingsFlag[settingsFlagCount31].Name = settingsFlag31.Name
					}
				}
				attributes.TagsAttribute.ShowInTable = types.BoolPointerValue(attributesItem.TagsAttribute.ShowInTable)
				attributes.TagsAttribute.Sortable = types.BoolPointerValue(attributesItem.TagsAttribute.Sortable)
				attributes.TagsAttribute.Suggestions = make([]types.String, 0, len(attributesItem.TagsAttribute.Suggestions))
				for _, v := range attributesItem.TagsAttribute.Suggestions {
					attributes.TagsAttribute.Suggestions = append(attributes.TagsAttribute.Suggestions, types.StringValue(v))
				}
				attributes.TagsAttribute.Type = types.StringValue(string(attributesItem.TagsAttribute.Type))
				attributes.TagsAttribute.ValueFormatter = types.StringPointerValue(attributesItem.TagsAttribute.ValueFormatter)
			}
			if attributesItem.TextAttribute != nil {
				attributes.TextAttribute = &tfTypes.TextAttribute{}
				if attributesItem.TextAttribute.Manifest != nil {
					attributes.TextAttribute.Manifest = make([]types.String, 0, len(attributesItem.TextAttribute.Manifest))
					for _, v := range attributesItem.TextAttribute.Manifest {
						attributes.TextAttribute.Manifest = append(attributes.TextAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.TextAttribute.Purpose = make([]types.String, 0, len(attributesItem.TextAttribute.Purpose))
				for _, v := range attributesItem.TextAttribute.Purpose {
					attributes.TextAttribute.Purpose = append(attributes.TextAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.TextAttribute.Constraints == nil {
					attributes.TextAttribute.Constraints = nil
				} else {
					attributes.TextAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.TextAttribute.DefaultValue == nil {
					attributes.TextAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult31, _ := json.Marshal(attributesItem.TextAttribute.DefaultValue)
					attributes.TextAttribute.DefaultValue = types.StringValue(string(defaultValueResult31))
				}
				attributes.TextAttribute.Deprecated = types.BoolPointerValue(attributesItem.TextAttribute.Deprecated)
				attributes.TextAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.TextAttribute.EntityBuilderDisableEdit)
				attributes.TextAttribute.FeatureFlag = types.StringPointerValue(attributesItem.TextAttribute.FeatureFlag)
				attributes.TextAttribute.Group = types.StringPointerValue(attributesItem.TextAttribute.Group)
				attributes.TextAttribute.HasPrimary = types.BoolPointerValue(attributesItem.TextAttribute.HasPrimary)
				attributes.TextAttribute.Hidden = types.BoolPointerValue(attributesItem.TextAttribute.Hidden)
				attributes.TextAttribute.HideLabel = types.BoolPointerValue(attributesItem.TextAttribute.HideLabel)
				attributes.TextAttribute.Icon = types.StringPointerValue(attributesItem.TextAttribute.Icon)
				attributes.TextAttribute.ID = types.StringPointerValue(attributesItem.TextAttribute.ID)
				if attributesItem.TextAttribute.InfoHelpers == nil {
					attributes.TextAttribute.InfoHelpers = nil
				} else {
					attributes.TextAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.TextAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintCustomComponent)
					attributes.TextAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintText)
					attributes.TextAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintTextKey)
					attributes.TextAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.TextAttribute.Label = types.StringValue(attributesItem.TextAttribute.Label)
				attributes.TextAttribute.Layout = types.StringPointerValue(attributesItem.TextAttribute.Layout)
				attributes.TextAttribute.Multiline = types.BoolPointerValue(attributesItem.TextAttribute.Multiline)
				attributes.TextAttribute.Name = types.StringValue(attributesItem.TextAttribute.Name)
				attributes.TextAttribute.Order = types.Int64PointerValue(attributesItem.TextAttribute.Order)
				attributes.TextAttribute.Placeholder = types.StringPointerValue(attributesItem.TextAttribute.Placeholder)
				attributes.TextAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.TextAttribute.PreviewValueFormatter)
				attributes.TextAttribute.Protected = types.BoolPointerValue(attributesItem.TextAttribute.Protected)
				attributes.TextAttribute.Readonly = types.BoolPointerValue(attributesItem.TextAttribute.Readonly)
				attributes.TextAttribute.RenderCondition = types.StringPointerValue(attributesItem.TextAttribute.RenderCondition)
				attributes.TextAttribute.Repeatable = types.BoolPointerValue(attributesItem.TextAttribute.Repeatable)
				attributes.TextAttribute.Required = types.BoolPointerValue(attributesItem.TextAttribute.Required)
				attributes.TextAttribute.RichText = types.BoolPointerValue(attributesItem.TextAttribute.RichText)
				if attributesItem.TextAttribute.Rows == nil {
					attributes.TextAttribute.Rows = types.StringNull()
				} else {
					rowsResult, _ := json.Marshal(attributesItem.TextAttribute.Rows)
					attributes.TextAttribute.Rows = types.StringValue(string(rowsResult))
				}
				attributes.TextAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount32, settingsFlagItem32 := range attributesItem.TextAttribute.SettingsFlag {
					var settingsFlag32 tfTypes.SettingFlag
					settingsFlag32.Enabled = types.BoolPointerValue(settingsFlagItem32.Enabled)
					settingsFlag32.Name = types.StringPointerValue(settingsFlagItem32.Name)
					if settingsFlagCount32+1 > len(attributes.TextAttribute.SettingsFlag) {
						attributes.TextAttribute.SettingsFlag = append(attributes.TextAttribute.SettingsFlag, settingsFlag32)
					} else {
						attributes.TextAttribute.SettingsFlag[settingsFlagCount32].Enabled = settingsFlag32.Enabled
						attributes.TextAttribute.SettingsFlag[settingsFlagCount32].Name = settingsFlag32.Name
					}
				}
				attributes.TextAttribute.ShowInTable = types.BoolPointerValue(attributesItem.TextAttribute.ShowInTable)
				attributes.TextAttribute.Sortable = types.BoolPointerValue(attributesItem.TextAttribute.Sortable)
				attributes.TextAttribute.Type = types.StringValue(string(attributesItem.TextAttribute.Type))
				attributes.TextAttribute.ValueFormatter = types.StringPointerValue(attributesItem.TextAttribute.ValueFormatter)
			}
			if attributesItem.UserRelationAttribute != nil {
				attributes.UserRelationAttribute = &tfTypes.UserRelationAttribute{}
				if attributesItem.UserRelationAttribute.Manifest != nil {
					attributes.UserRelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.UserRelationAttribute.Manifest))
					for _, v := range attributesItem.UserRelationAttribute.Manifest {
						attributes.UserRelationAttribute.Manifest = append(attributes.UserRelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.UserRelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.UserRelationAttribute.Purpose))
				for _, v := range attributesItem.UserRelationAttribute.Purpose {
					attributes.UserRelationAttribute.Purpose = append(attributes.UserRelationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.UserRelationAttribute.Constraints == nil {
					attributes.UserRelationAttribute.Constraints = nil
				} else {
					attributes.UserRelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.UserRelationAttribute.DefaultValue == nil {
					attributes.UserRelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult32, _ := json.Marshal(attributesItem.UserRelationAttribute.DefaultValue)
					attributes.UserRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult32))
				}
				attributes.UserRelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.UserRelationAttribute.Deprecated)
				attributes.UserRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.UserRelationAttribute.EntityBuilderDisableEdit)
				attributes.UserRelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.UserRelationAttribute.FeatureFlag)
				attributes.UserRelationAttribute.Group = types.StringPointerValue(attributesItem.UserRelationAttribute.Group)
				attributes.UserRelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.UserRelationAttribute.HasPrimary)
				attributes.UserRelationAttribute.Hidden = types.BoolPointerValue(attributesItem.UserRelationAttribute.Hidden)
				attributes.UserRelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.UserRelationAttribute.HideLabel)
				attributes.UserRelationAttribute.Icon = types.StringPointerValue(attributesItem.UserRelationAttribute.Icon)
				attributes.UserRelationAttribute.ID = types.StringPointerValue(attributesItem.UserRelationAttribute.ID)
				if attributesItem.UserRelationAttribute.InfoHelpers == nil {
					attributes.UserRelationAttribute.InfoHelpers = nil
				} else {
					attributes.UserRelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.UserRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.UserRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintText)
					attributes.UserRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintTextKey)
					attributes.UserRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.UserRelationAttribute.Label = types.StringValue(attributesItem.UserRelationAttribute.Label)
				attributes.UserRelationAttribute.Layout = types.StringPointerValue(attributesItem.UserRelationAttribute.Layout)
				attributes.UserRelationAttribute.Multiple = types.BoolPointerValue(attributesItem.UserRelationAttribute.Multiple)
				attributes.UserRelationAttribute.Name = types.StringValue(attributesItem.UserRelationAttribute.Name)
				attributes.UserRelationAttribute.Order = types.Int64PointerValue(attributesItem.UserRelationAttribute.Order)
				attributes.UserRelationAttribute.Placeholder = types.StringPointerValue(attributesItem.UserRelationAttribute.Placeholder)
				attributes.UserRelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.UserRelationAttribute.PreviewValueFormatter)
				attributes.UserRelationAttribute.Protected = types.BoolPointerValue(attributesItem.UserRelationAttribute.Protected)
				attributes.UserRelationAttribute.Readonly = types.BoolPointerValue(attributesItem.UserRelationAttribute.Readonly)
				attributes.UserRelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.UserRelationAttribute.RenderCondition)
				attributes.UserRelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.UserRelationAttribute.Repeatable)
				attributes.UserRelationAttribute.Required = types.BoolPointerValue(attributesItem.UserRelationAttribute.Required)
				attributes.UserRelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount33, settingsFlagItem33 := range attributesItem.UserRelationAttribute.SettingsFlag {
					var settingsFlag33 tfTypes.SettingFlag
					settingsFlag33.Enabled = types.BoolPointerValue(settingsFlagItem33.Enabled)
					settingsFlag33.Name = types.StringPointerValue(settingsFlagItem33.Name)
					if settingsFlagCount33+1 > len(attributes.UserRelationAttribute.SettingsFlag) {
						attributes.UserRelationAttribute.SettingsFlag = append(attributes.UserRelationAttribute.SettingsFlag, settingsFlag33)
					} else {
						attributes.UserRelationAttribute.SettingsFlag[settingsFlagCount33].Enabled = settingsFlag33.Enabled
						attributes.UserRelationAttribute.SettingsFlag[settingsFlagCount33].Name = settingsFlag33.Name
					}
				}
				attributes.UserRelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.UserRelationAttribute.ShowInTable)
				attributes.UserRelationAttribute.Sortable = types.BoolPointerValue(attributesItem.UserRelationAttribute.Sortable)
				attributes.UserRelationAttribute.Type = types.StringValue(string(attributesItem.UserRelationAttribute.Type))
				attributes.UserRelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.UserRelationAttribute.ValueFormatter)
			}
			if attributesCount+1 > len(r.Attributes) {
				r.Attributes = append(r.Attributes, attributes)
			} else {
				r.Attributes[attributesCount].AddressAttribute = attributes.AddressAttribute
				r.Attributes[attributesCount].AddressRelationAttribute = attributes.AddressRelationAttribute
				r.Attributes[attributesCount].AutomationAttribute = attributes.AutomationAttribute
				r.Attributes[attributesCount].BooleanAttribute = attributes.BooleanAttribute
				r.Attributes[attributesCount].ComputedAttribute = attributes.ComputedAttribute
				r.Attributes[attributesCount].ConsentAttribute = attributes.ConsentAttribute
				r.Attributes[attributesCount].CountryAttribute = attributes.CountryAttribute
				r.Attributes[attributesCount].CurrencyAttribute = attributes.CurrencyAttribute
				r.Attributes[attributesCount].DateAttribute = attributes.DateAttribute
				r.Attributes[attributesCount].EmailAttribute = attributes.EmailAttribute
				r.Attributes[attributesCount].FileAttribute = attributes.FileAttribute
				r.Attributes[attributesCount].InternalAttribute = attributes.InternalAttribute
				r.Attributes[attributesCount].InternalUserAttribute = attributes.InternalUserAttribute
				r.Attributes[attributesCount].InvitationEmailAttribute = attributes.InvitationEmailAttribute
				r.Attributes[attributesCount].LinkAttribute = attributes.LinkAttribute
				r.Attributes[attributesCount].MessageEmailAddressAttribute = attributes.MessageEmailAddressAttribute
				r.Attributes[attributesCount].MultiSelectAttribute = attributes.MultiSelectAttribute
				r.Attributes[attributesCount].NumberAttribute = attributes.NumberAttribute
				r.Attributes[attributesCount].OrderedListAttribute = attributes.OrderedListAttribute
				r.Attributes[attributesCount].PartnerOrganisationAttribute = attributes.PartnerOrganisationAttribute
				r.Attributes[attributesCount].PartnerStatusAttribute = attributes.PartnerStatusAttribute
				r.Attributes[attributesCount].PaymentAttribute = attributes.PaymentAttribute
				r.Attributes[attributesCount].PaymentMethodRelationAttribute = attributes.PaymentMethodRelationAttribute
				r.Attributes[attributesCount].PhoneAttribute = attributes.PhoneAttribute
				r.Attributes[attributesCount].PriceComponentAttribute = attributes.PriceComponentAttribute
				r.Attributes[attributesCount].PurposeAttribute = attributes.PurposeAttribute
				r.Attributes[attributesCount].RelationAttribute = attributes.RelationAttribute
				r.Attributes[attributesCount].SelectAttribute = attributes.SelectAttribute
				r.Attributes[attributesCount].SequenceAttribute = attributes.SequenceAttribute
				r.Attributes[attributesCount].StatusAttribute = attributes.StatusAttribute
				r.Attributes[attributesCount].TagsAttribute = attributes.TagsAttribute
				r.Attributes[attributesCount].TextAttribute = attributes.TextAttribute
				r.Attributes[attributesCount].UserRelationAttribute = attributes.UserRelationAttribute
			}
		}
		r.CompositeID = types.StringPointerValue(resp.CompositeID)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.Schema = types.StringPointerValue(resp.Schema)
		r.SettingsFlag = []tfTypes.SettingFlag{}
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount34, settingsFlagItem34 := range resp.SettingsFlag {
			var settingsFlag34 tfTypes.SettingFlag
			settingsFlag34.Enabled = types.BoolPointerValue(settingsFlagItem34.Enabled)
			settingsFlag34.Name = types.StringPointerValue(settingsFlagItem34.Name)
			if settingsFlagCount34+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag34)
			} else {
				r.SettingsFlag[settingsFlagCount34].Enabled = settingsFlag34.Enabled
				r.SettingsFlag[settingsFlagCount34].Name = settingsFlag34.Name
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UIHooks = []tfTypes.UIHooks{}
		if len(r.UIHooks) > len(resp.UIHooks) {
			r.UIHooks = r.UIHooks[:len(resp.UIHooks)]
		}
		for uiHooksCount, uiHooksItem := range resp.UIHooks {
			var uiHooks tfTypes.UIHooks
			if uiHooksItem.AdditionalProperties == nil {
				uiHooks.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult, _ := json.Marshal(uiHooksItem.AdditionalProperties)
				uiHooks.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
			}
			uiHooks.Component = types.StringPointerValue(uiHooksItem.Component)
			uiHooks.Disabled = types.BoolPointerValue(uiHooksItem.Disabled)
			uiHooks.GroupExpanded = types.BoolPointerValue(uiHooksItem.GroupExpanded)
			uiHooks.Header = types.BoolPointerValue(uiHooksItem.Header)
			uiHooks.Hook = types.StringValue(uiHooksItem.Hook)
			uiHooks.Icon = types.StringPointerValue(uiHooksItem.Icon)
			uiHooks.Import = types.StringPointerValue(uiHooksItem.Import)
			uiHooks.Order = types.Int64PointerValue(uiHooksItem.Order)
			uiHooks.RenderCondition = types.StringPointerValue(uiHooksItem.RenderCondition)
			if uiHooksItem.RequiredPermission == nil {
				uiHooks.RequiredPermission = nil
			} else {
				uiHooks.RequiredPermission = &tfTypes.RequiredPermission{}
				uiHooks.RequiredPermission.Action = types.StringValue(uiHooksItem.RequiredPermission.Action)
				uiHooks.RequiredPermission.Resource = types.StringPointerValue(uiHooksItem.RequiredPermission.Resource)
			}
			uiHooks.Route = types.StringPointerValue(uiHooksItem.Route)
			uiHooks.Title = types.StringPointerValue(uiHooksItem.Title)
			if uiHooksCount+1 > len(r.UIHooks) {
				r.UIHooks = append(r.UIHooks, uiHooks)
			} else {
				r.UIHooks[uiHooksCount].AdditionalProperties = uiHooks.AdditionalProperties
				r.UIHooks[uiHooksCount].Component = uiHooks.Component
				r.UIHooks[uiHooksCount].Disabled = uiHooks.Disabled
				r.UIHooks[uiHooksCount].GroupExpanded = uiHooks.GroupExpanded
				r.UIHooks[uiHooksCount].Header = uiHooks.Header
				r.UIHooks[uiHooksCount].Hook = uiHooks.Hook
				r.UIHooks[uiHooksCount].Icon = uiHooks.Icon
				r.UIHooks[uiHooksCount].Import = uiHooks.Import
				r.UIHooks[uiHooksCount].Order = uiHooks.Order
				r.UIHooks[uiHooksCount].RenderCondition = uiHooks.RenderCondition
				r.UIHooks[uiHooksCount].RequiredPermission = uiHooks.RequiredPermission
				r.UIHooks[uiHooksCount].Route = uiHooks.Route
				r.UIHooks[uiHooksCount].Title = uiHooks.Title
			}
		}
	}

	return diags
}
