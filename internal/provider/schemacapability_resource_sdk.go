// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaCapabilityResourceModel) ToSharedEntityCapabilityWithCompositeIDInput() *shared.EntityCapabilityWithCompositeIDInput {
	name := r.Name.ValueString()
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	var attributes []shared.Attribute = []shared.Attribute{}
	for _, attributesItem := range r.Attributes {
		id := new(string)
		if !attributesItem.ID.IsUnknown() && !attributesItem.ID.IsNull() {
			*id = attributesItem.ID.ValueString()
		} else {
			id = nil
		}
		name1 := attributesItem.Name.ValueString()
		label := attributesItem.Label.ValueString()
		placeholder := new(string)
		if !attributesItem.Placeholder.IsUnknown() && !attributesItem.Placeholder.IsNull() {
			*placeholder = attributesItem.Placeholder.ValueString()
		} else {
			placeholder = nil
		}
		hidden := new(bool)
		if !attributesItem.Hidden.IsUnknown() && !attributesItem.Hidden.IsNull() {
			*hidden = attributesItem.Hidden.ValueBool()
		} else {
			hidden = nil
		}
		showInTable := new(bool)
		if !attributesItem.ShowInTable.IsUnknown() && !attributesItem.ShowInTable.IsNull() {
			*showInTable = attributesItem.ShowInTable.ValueBool()
		} else {
			showInTable = nil
		}
		sortable := new(bool)
		if !attributesItem.Sortable.IsUnknown() && !attributesItem.Sortable.IsNull() {
			*sortable = attributesItem.Sortable.ValueBool()
		} else {
			sortable = nil
		}
		required := new(bool)
		if !attributesItem.Required.IsUnknown() && !attributesItem.Required.IsNull() {
			*required = attributesItem.Required.ValueBool()
		} else {
			required = nil
		}
		readonly := new(bool)
		if !attributesItem.Readonly.IsUnknown() && !attributesItem.Readonly.IsNull() {
			*readonly = attributesItem.Readonly.ValueBool()
		} else {
			readonly = nil
		}
		deprecated := new(bool)
		if !attributesItem.Deprecated.IsUnknown() && !attributesItem.Deprecated.IsNull() {
			*deprecated = attributesItem.Deprecated.ValueBool()
		} else {
			deprecated = nil
		}
		var defaultValue interface{}
		if !attributesItem.DefaultValue.IsUnknown() && !attributesItem.DefaultValue.IsNull() {
			_ = json.Unmarshal([]byte(attributesItem.DefaultValue.ValueString()), &defaultValue)
		}
		group := new(string)
		if !attributesItem.Group.IsUnknown() && !attributesItem.Group.IsNull() {
			*group = attributesItem.Group.ValueString()
		} else {
			group = nil
		}
		order := new(int64)
		if !attributesItem.Order.IsUnknown() && !attributesItem.Order.IsNull() {
			*order = attributesItem.Order.ValueInt64()
		} else {
			order = nil
		}
		layout := new(string)
		if !attributesItem.Layout.IsUnknown() && !attributesItem.Layout.IsNull() {
			*layout = attributesItem.Layout.ValueString()
		} else {
			layout = nil
		}
		hideLabel := new(bool)
		if !attributesItem.HideLabel.IsUnknown() && !attributesItem.HideLabel.IsNull() {
			*hideLabel = attributesItem.HideLabel.ValueBool()
		} else {
			hideLabel = nil
		}
		icon := new(string)
		if !attributesItem.Icon.IsUnknown() && !attributesItem.Icon.IsNull() {
			*icon = attributesItem.Icon.ValueString()
		} else {
			icon = nil
		}
		renderCondition := new(string)
		if !attributesItem.RenderCondition.IsUnknown() && !attributesItem.RenderCondition.IsNull() {
			*renderCondition = attributesItem.RenderCondition.ValueString()
		} else {
			renderCondition = nil
		}
		var purpose []string = []string{}
		for _, purposeItem := range attributesItem.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
		var constraints *shared.Constraints
		if attributesItem.Constraints != nil {
			constraints = &shared.Constraints{}
		}
		featureFlag := new(string)
		if !attributesItem.FeatureFlag.IsUnknown() && !attributesItem.FeatureFlag.IsNull() {
			*featureFlag = attributesItem.FeatureFlag.ValueString()
		} else {
			featureFlag = nil
		}
		var settingsFlag []shared.SettingFlag = []shared.SettingFlag{}
		for _, settingsFlagItem := range attributesItem.SettingsFlag {
			name2 := new(string)
			if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
				*name2 = settingsFlagItem.Name.ValueString()
			} else {
				name2 = nil
			}
			enabled := new(bool)
			if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
				*enabled = settingsFlagItem.Enabled.ValueBool()
			} else {
				enabled = nil
			}
			settingsFlag = append(settingsFlag, shared.SettingFlag{
				Name:    name2,
				Enabled: enabled,
			})
		}
		valueFormatter := new(string)
		if !attributesItem.ValueFormatter.IsUnknown() && !attributesItem.ValueFormatter.IsNull() {
			*valueFormatter = attributesItem.ValueFormatter.ValueString()
		} else {
			valueFormatter = nil
		}
		previewValueFormatter := new(string)
		if !attributesItem.PreviewValueFormatter.IsUnknown() && !attributesItem.PreviewValueFormatter.IsNull() {
			*previewValueFormatter = attributesItem.PreviewValueFormatter.ValueString()
		} else {
			previewValueFormatter = nil
		}
		entityBuilderDisableEdit := new(bool)
		if !attributesItem.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.EntityBuilderDisableEdit.IsNull() {
			*entityBuilderDisableEdit = attributesItem.EntityBuilderDisableEdit.ValueBool()
		} else {
			entityBuilderDisableEdit = nil
		}
		protected := new(bool)
		if !attributesItem.Protected.IsUnknown() && !attributesItem.Protected.IsNull() {
			*protected = attributesItem.Protected.ValueBool()
		} else {
			protected = nil
		}
		var infoHelpers *shared.InfoHelpers
		if attributesItem.InfoHelpers != nil {
			hintText := new(string)
			if !attributesItem.InfoHelpers.HintText.IsUnknown() && !attributesItem.InfoHelpers.HintText.IsNull() {
				*hintText = attributesItem.InfoHelpers.HintText.ValueString()
			} else {
				hintText = nil
			}
			hintTextKey := new(string)
			if !attributesItem.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.InfoHelpers.HintTextKey.IsNull() {
				*hintTextKey = attributesItem.InfoHelpers.HintTextKey.ValueString()
			} else {
				hintTextKey = nil
			}
			hintCustomComponent := new(string)
			if !attributesItem.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.InfoHelpers.HintCustomComponent.IsNull() {
				*hintCustomComponent = attributesItem.InfoHelpers.HintCustomComponent.ValueString()
			} else {
				hintCustomComponent = nil
			}
			hintTooltipPlacement := new(string)
			if !attributesItem.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.InfoHelpers.HintTooltipPlacement.IsNull() {
				*hintTooltipPlacement = attributesItem.InfoHelpers.HintTooltipPlacement.ValueString()
			} else {
				hintTooltipPlacement = nil
			}
			infoHelpers = &shared.InfoHelpers{
				HintText:             hintText,
				HintTextKey:          hintTextKey,
				HintCustomComponent:  hintCustomComponent,
				HintTooltipPlacement: hintTooltipPlacement,
			}
		}
		typeVar := shared.Type(attributesItem.Type.ValueString())
		multiline := new(bool)
		if !attributesItem.Multiline.IsUnknown() && !attributesItem.Multiline.IsNull() {
			*multiline = attributesItem.Multiline.ValueBool()
		} else {
			multiline = nil
		}
		var options []string = []string{}
		for _, optionsItem := range attributesItem.Options {
			options = append(options, optionsItem.ValueString())
		}
		allowAny := new(bool)
		if !attributesItem.AllowAny.IsUnknown() && !attributesItem.AllowAny.IsNull() {
			*allowAny = attributesItem.AllowAny.ValueBool()
		} else {
			allowAny = nil
		}
		disableCaseSensitive := new(bool)
		if !attributesItem.DisableCaseSensitive.IsUnknown() && !attributesItem.DisableCaseSensitive.IsNull() {
			*disableCaseSensitive = attributesItem.DisableCaseSensitive.ValueBool()
		} else {
			disableCaseSensitive = nil
		}
		allowExtraOptions := new(bool)
		if !attributesItem.AllowExtraOptions.IsUnknown() && !attributesItem.AllowExtraOptions.IsNull() {
			*allowExtraOptions = attributesItem.AllowExtraOptions.ValueBool()
		} else {
			allowExtraOptions = nil
		}
		prefix := new(string)
		if !attributesItem.Prefix.IsUnknown() && !attributesItem.Prefix.IsNull() {
			*prefix = attributesItem.Prefix.ValueString()
		} else {
			prefix = nil
		}
		startNumber := new(int64)
		if !attributesItem.StartNumber.IsUnknown() && !attributesItem.StartNumber.IsNull() {
			*startNumber = attributesItem.StartNumber.ValueInt64()
		} else {
			startNumber = nil
		}
		relationType := new(shared.RelationType)
		if !attributesItem.RelationType.IsUnknown() && !attributesItem.RelationType.IsNull() {
			*relationType = shared.RelationType(attributesItem.RelationType.ValueString())
		} else {
			relationType = nil
		}
		reverseAttributes := make(map[string]string)
		for reverseAttributesKey, reverseAttributesValue := range attributesItem.ReverseAttributes {
			reverseAttributesInst := reverseAttributesValue.ValueString()
			reverseAttributes[reverseAttributesKey] = reverseAttributesInst
		}
		relationAffinityMode := new(shared.RelationAffinityMode)
		if !attributesItem.RelationAffinityMode.IsUnknown() && !attributesItem.RelationAffinityMode.IsNull() {
			*relationAffinityMode = shared.RelationAffinityMode(attributesItem.RelationAffinityMode.ValueString())
		} else {
			relationAffinityMode = nil
		}
		enableRelationPicker := new(bool)
		if !attributesItem.EnableRelationPicker.IsUnknown() && !attributesItem.EnableRelationPicker.IsNull() {
			*enableRelationPicker = attributesItem.EnableRelationPicker.ValueBool()
		} else {
			enableRelationPicker = nil
		}
		editMode := new(shared.EditMode)
		if !attributesItem.EditMode.IsUnknown() && !attributesItem.EditMode.IsNull() {
			*editMode = shared.EditMode(attributesItem.EditMode.ValueString())
		} else {
			editMode = nil
		}
		detailsViewModeEnabled := new(bool)
		if !attributesItem.DetailsViewModeEnabled.IsUnknown() && !attributesItem.DetailsViewModeEnabled.IsNull() {
			*detailsViewModeEnabled = attributesItem.DetailsViewModeEnabled.ValueBool()
		} else {
			detailsViewModeEnabled = nil
		}
		var actions []shared.Actions = []shared.Actions{}
		for _, actionsItem := range attributesItem.Actions {
			actionType := new(shared.ActionType)
			if !actionsItem.ActionType.IsUnknown() && !actionsItem.ActionType.IsNull() {
				*actionType = shared.ActionType(actionsItem.ActionType.ValueString())
			} else {
				actionType = nil
			}
			label1 := new(string)
			if !actionsItem.Label.IsUnknown() && !actionsItem.Label.IsNull() {
				*label1 = actionsItem.Label.ValueString()
			} else {
				label1 = nil
			}
			defaultVar := new(bool)
			if !actionsItem.Default.IsUnknown() && !actionsItem.Default.IsNull() {
				*defaultVar = actionsItem.Default.ValueBool()
			} else {
				defaultVar = nil
			}
			featureFlag1 := new(string)
			if !actionsItem.FeatureFlag.IsUnknown() && !actionsItem.FeatureFlag.IsNull() {
				*featureFlag1 = actionsItem.FeatureFlag.ValueString()
			} else {
				featureFlag1 = nil
			}
			var settingsFlag1 []shared.SettingFlag = []shared.SettingFlag{}
			for _, settingsFlagItem1 := range actionsItem.SettingsFlag {
				name3 := new(string)
				if !settingsFlagItem1.Name.IsUnknown() && !settingsFlagItem1.Name.IsNull() {
					*name3 = settingsFlagItem1.Name.ValueString()
				} else {
					name3 = nil
				}
				enabled1 := new(bool)
				if !settingsFlagItem1.Enabled.IsUnknown() && !settingsFlagItem1.Enabled.IsNull() {
					*enabled1 = settingsFlagItem1.Enabled.ValueBool()
				} else {
					enabled1 = nil
				}
				settingsFlag1 = append(settingsFlag1, shared.SettingFlag{
					Name:    name3,
					Enabled: enabled1,
				})
			}
			var newEntityItem *shared.NewEntityItem
			if actionsItem.NewEntityItem != nil {
				id1 := actionsItem.NewEntityItem.ID.ValueString()
				org := actionsItem.NewEntityItem.Org.ValueString()
				var owners []shared.EntityOwner = []shared.EntityOwner{}
				for _, ownersItem := range actionsItem.NewEntityItem.Owners {
					orgID := ownersItem.OrgID.ValueString()
					userID := new(string)
					if !ownersItem.UserID.IsUnknown() && !ownersItem.UserID.IsNull() {
						*userID = ownersItem.UserID.ValueString()
					} else {
						userID = nil
					}
					owners = append(owners, shared.EntityOwner{
						OrgID:  orgID,
						UserID: userID,
					})
				}
				schema := actionsItem.NewEntityItem.Schema.ValueString()
				title1 := new(string)
				if !actionsItem.NewEntityItem.Title.IsUnknown() && !actionsItem.NewEntityItem.Title.IsNull() {
					*title1 = actionsItem.NewEntityItem.Title.ValueString()
				} else {
					title1 = nil
				}
				var tags []string = []string{}
				for _, tagsItem := range actionsItem.NewEntityItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
				createdAt := new(time.Time)
				if !actionsItem.NewEntityItem.CreatedAt.IsUnknown() && !actionsItem.NewEntityItem.CreatedAt.IsNull() {
					*createdAt, _ = time.Parse(time.RFC3339Nano, actionsItem.NewEntityItem.CreatedAt.ValueString())
				} else {
					createdAt = nil
				}
				updatedAt := new(time.Time)
				if !actionsItem.NewEntityItem.UpdatedAt.IsUnknown() && !actionsItem.NewEntityItem.UpdatedAt.IsNull() {
					*updatedAt, _ = time.Parse(time.RFC3339Nano, actionsItem.NewEntityItem.UpdatedAt.ValueString())
				} else {
					updatedAt = nil
				}
				var acl *shared.EntityACL
				if actionsItem.NewEntityItem.ACL != nil {
					var view []string = []string{}
					for _, viewItem := range actionsItem.NewEntityItem.ACL.View {
						view = append(view, viewItem.ValueString())
					}
					var edit []string = []string{}
					for _, editItem := range actionsItem.NewEntityItem.ACL.Edit {
						edit = append(edit, editItem.ValueString())
					}
					var delete []string = []string{}
					for _, deleteItem := range actionsItem.NewEntityItem.ACL.Delete {
						delete = append(delete, deleteItem.ValueString())
					}
					var additionalProperties interface{}
					if !actionsItem.NewEntityItem.ACL.AdditionalProperties.IsUnknown() && !actionsItem.NewEntityItem.ACL.AdditionalProperties.IsNull() {
						_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.ACL.AdditionalProperties.ValueString()), &additionalProperties)
					}
					acl = &shared.EntityACL{
						View:                 view,
						Edit:                 edit,
						Delete:               delete,
						AdditionalProperties: additionalProperties,
					}
				}
				var additionalProperties1 interface{}
				if !actionsItem.NewEntityItem.AdditionalProperties.IsUnknown() && !actionsItem.NewEntityItem.AdditionalProperties.IsNull() {
					_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.AdditionalProperties.ValueString()), &additionalProperties1)
				}
				newEntityItem = &shared.NewEntityItem{
					ID:                   id1,
					Org:                  org,
					Owners:               owners,
					Schema:               schema,
					Title:                title1,
					Tags:                 tags,
					CreatedAt:            createdAt,
					UpdatedAt:            updatedAt,
					ACL:                  acl,
					AdditionalProperties: additionalProperties1,
				}
			}
			actions = append(actions, shared.Actions{
				ActionType:    actionType,
				Label:         label1,
				Default:       defaultVar,
				FeatureFlag:   featureFlag1,
				SettingsFlag:  settingsFlag1,
				NewEntityItem: newEntityItem,
			})
		}
		drawerSize := new(shared.DrawerSize)
		if !attributesItem.DrawerSize.IsUnknown() && !attributesItem.DrawerSize.IsNull() {
			*drawerSize = shared.DrawerSize(attributesItem.DrawerSize.ValueString())
		} else {
			drawerSize = nil
		}
		var summaryFields []shared.SummaryFields = []shared.SummaryFields{}
		for _, summaryFieldsItem := range attributesItem.SummaryFields {
			if !summaryFieldsItem.Str.IsUnknown() && !summaryFieldsItem.Str.IsNull() {
				str := summaryFieldsItem.Str.ValueString()
				summaryFields = append(summaryFields, shared.SummaryFields{
					Str: &str,
				})
			}
			if summaryFieldsItem.SummaryField != nil {
				field := new(string)
				if !summaryFieldsItem.SummaryField.Field.IsUnknown() && !summaryFieldsItem.SummaryField.Field.IsNull() {
					*field = summaryFieldsItem.SummaryField.Field.ValueString()
				} else {
					field = nil
				}
				displayAs := new(string)
				if !summaryFieldsItem.SummaryField.DisplayAs.IsUnknown() && !summaryFieldsItem.SummaryField.DisplayAs.IsNull() {
					*displayAs = summaryFieldsItem.SummaryField.DisplayAs.ValueString()
				} else {
					displayAs = nil
				}
				summaryField := shared.SummaryField{
					Field:     field,
					DisplayAs: displayAs,
				}
				summaryFields = append(summaryFields, shared.SummaryFields{
					SummaryField: &summaryField,
				})
			}
		}
		hasPrimary := new(bool)
		if !attributesItem.HasPrimary.IsUnknown() && !attributesItem.HasPrimary.IsNull() {
			*hasPrimary = attributesItem.HasPrimary.ValueBool()
		} else {
			hasPrimary = nil
		}
		var allowedSchemas []string = []string{}
		for _, allowedSchemasItem := range attributesItem.AllowedSchemas {
			allowedSchemas = append(allowedSchemas, allowedSchemasItem.ValueString())
		}
		enableRelationTags := new(bool)
		if !attributesItem.EnableRelationTags.IsUnknown() && !attributesItem.EnableRelationTags.IsNull() {
			*enableRelationTags = attributesItem.EnableRelationTags.ValueBool()
		} else {
			enableRelationTags = nil
		}
		addButtonLabel := new(string)
		if !attributesItem.AddButtonLabel.IsUnknown() && !attributesItem.AddButtonLabel.IsNull() {
			*addButtonLabel = attributesItem.AddButtonLabel.ValueString()
		} else {
			addButtonLabel = nil
		}
		searchPlaceholder := new(string)
		if !attributesItem.SearchPlaceholder.IsUnknown() && !attributesItem.SearchPlaceholder.IsNull() {
			*searchPlaceholder = attributesItem.SearchPlaceholder.ValueString()
		} else {
			searchPlaceholder = nil
		}
		multiple := new(bool)
		if !attributesItem.Multiple.IsUnknown() && !attributesItem.Multiple.IsNull() {
			*multiple = attributesItem.Multiple.ValueBool()
		} else {
			multiple = nil
		}
		currencySelectorOnly := new(bool)
		if !attributesItem.CurrencySelectorOnly.IsUnknown() && !attributesItem.CurrencySelectorOnly.IsNull() {
			*currencySelectorOnly = attributesItem.CurrencySelectorOnly.ValueBool()
		} else {
			currencySelectorOnly = nil
		}
		var currency []shared.Currency = []shared.Currency{}
		for _, currencyItem := range attributesItem.Currency {
			if currencyItem.One != nil {
				code := currencyItem.One.Code.ValueString()
				description := currencyItem.One.Description.ValueString()
				symbol := currencyItem.One.Symbol.ValueString()
				flag := new(string)
				if !currencyItem.One.Flag.IsUnknown() && !currencyItem.One.Flag.IsNull() {
					*flag = currencyItem.One.Flag.ValueString()
				} else {
					flag = nil
				}
				one := shared.One{
					Code:        code,
					Description: description,
					Symbol:      symbol,
					Flag:        flag,
				}
				currency = append(currency, shared.Currency{
					One: &one,
				})
			}
		}
		repeatable := new(bool)
		if !attributesItem.Repeatable.IsUnknown() && !attributesItem.Repeatable.IsNull() {
			*repeatable = attributesItem.Repeatable.ValueBool()
		} else {
			repeatable = nil
		}
		var suggestions []string = []string{}
		for _, suggestionsItem := range attributesItem.Suggestions {
			suggestions = append(suggestions, suggestionsItem.ValueString())
		}
		format := new(string)
		if !attributesItem.Format.IsUnknown() && !attributesItem.Format.IsNull() {
			*format = attributesItem.Format.ValueString()
		} else {
			format = nil
		}
		topic := new(string)
		if !attributesItem.Topic.IsUnknown() && !attributesItem.Topic.IsNull() {
			*topic = attributesItem.Topic.ValueString()
		} else {
			topic = nil
		}
		var identifiers []string = []string{}
		for _, identifiersItem := range attributesItem.Identifiers {
			identifiers = append(identifiers, identifiersItem.ValueString())
		}
		var allowedExtensions []string = []string{}
		for _, allowedExtensionsItem := range attributesItem.AllowedExtensions {
			allowedExtensions = append(allowedExtensions, allowedExtensionsItem.ValueString())
		}
		displayImagesLandscaped := new(bool)
		if !attributesItem.DisplayImagesLandscaped.IsUnknown() && !attributesItem.DisplayImagesLandscaped.IsNull() {
			*displayImagesLandscaped = attributesItem.DisplayImagesLandscaped.ValueBool()
		} else {
			displayImagesLandscaped = nil
		}
		enableDescription := new(bool)
		if !attributesItem.EnableDescription.IsUnknown() && !attributesItem.EnableDescription.IsNull() {
			*enableDescription = attributesItem.EnableDescription.ValueBool()
		} else {
			enableDescription = nil
		}
		defaultAccessControl := new(shared.DefaultAccessControl)
		if !attributesItem.DefaultAccessControl.IsUnknown() && !attributesItem.DefaultAccessControl.IsNull() {
			*defaultAccessControl = shared.DefaultAccessControl(attributesItem.DefaultAccessControl.ValueString())
		} else {
			defaultAccessControl = nil
		}
		slug := new(string)
		if !attributesItem.Slug.IsUnknown() && !attributesItem.Slug.IsNull() {
			*slug = attributesItem.Slug.ValueString()
		} else {
			slug = nil
		}
		var parents []string = []string{}
		for _, parentsItem := range attributesItem.Parents {
			parents = append(parents, parentsItem.ValueString())
		}
		createdAt1 := new(time.Time)
		if !attributesItem.CreatedAt.IsUnknown() && !attributesItem.CreatedAt.IsNull() {
			*createdAt1, _ = time.Parse(time.RFC3339Nano, attributesItem.CreatedAt.ValueString())
		} else {
			createdAt1 = nil
		}
		updatedAt1 := new(time.Time)
		if !attributesItem.UpdatedAt.IsUnknown() && !attributesItem.UpdatedAt.IsNull() {
			*updatedAt1, _ = time.Parse(time.RFC3339Nano, attributesItem.UpdatedAt.ValueString())
		} else {
			updatedAt1 = nil
		}
		attributes = append(attributes, shared.Attribute{
			ID:                       id,
			Name:                     name1,
			Label:                    label,
			Placeholder:              placeholder,
			Hidden:                   hidden,
			ShowInTable:              showInTable,
			Sortable:                 sortable,
			Required:                 required,
			Readonly:                 readonly,
			Deprecated:               deprecated,
			DefaultValue:             defaultValue,
			Group:                    group,
			Order:                    order,
			Layout:                   layout,
			HideLabel:                hideLabel,
			Icon:                     icon,
			RenderCondition:          renderCondition,
			Purpose:                  purpose,
			Constraints:              constraints,
			FeatureFlag:              featureFlag,
			SettingsFlag:             settingsFlag,
			ValueFormatter:           valueFormatter,
			PreviewValueFormatter:    previewValueFormatter,
			EntityBuilderDisableEdit: entityBuilderDisableEdit,
			Protected:                protected,
			InfoHelpers:              infoHelpers,
			Type:                     typeVar,
			Multiline:                multiline,
			Options:                  options,
			AllowAny:                 allowAny,
			DisableCaseSensitive:     disableCaseSensitive,
			AllowExtraOptions:        allowExtraOptions,
			Prefix:                   prefix,
			StartNumber:              startNumber,
			RelationType:             relationType,
			ReverseAttributes:        reverseAttributes,
			RelationAffinityMode:     relationAffinityMode,
			EnableRelationPicker:     enableRelationPicker,
			EditMode:                 editMode,
			DetailsViewModeEnabled:   detailsViewModeEnabled,
			Actions:                  actions,
			DrawerSize:               drawerSize,
			SummaryFields:            summaryFields,
			HasPrimary:               hasPrimary,
			AllowedSchemas:           allowedSchemas,
			EnableRelationTags:       enableRelationTags,
			AddButtonLabel:           addButtonLabel,
			SearchPlaceholder:        searchPlaceholder,
			Multiple:                 multiple,
			CurrencySelectorOnly:     currencySelectorOnly,
			Currency:                 currency,
			Repeatable:               repeatable,
			Suggestions:              suggestions,
			Format:                   format,
			Topic:                    topic,
			Identifiers:              identifiers,
			AllowedExtensions:        allowedExtensions,
			DisplayImagesLandscaped:  displayImagesLandscaped,
			EnableDescription:        enableDescription,
			DefaultAccessControl:     defaultAccessControl,
			Slug:                     slug,
			Parents:                  parents,
			CreatedAt:                createdAt1,
			UpdatedAt:                updatedAt1,
		})
	}
	var purpose1 []string = []string{}
	for _, purposeItem1 := range r.Purpose {
		purpose1 = append(purpose1, purposeItem1.ValueString())
	}
	var uiHooks []shared.EntityCapabilityWithCompositeIDUIHooks = []shared.EntityCapabilityWithCompositeIDUIHooks{}
	for _, uiHooksItem := range r.UIHooks {
		hook := uiHooksItem.Hook.ValueString()
		renderCondition1 := new(string)
		if !uiHooksItem.RenderCondition.IsUnknown() && !uiHooksItem.RenderCondition.IsNull() {
			*renderCondition1 = uiHooksItem.RenderCondition.ValueString()
		} else {
			renderCondition1 = nil
		}
		order1 := new(int64)
		if !uiHooksItem.Order.IsUnknown() && !uiHooksItem.Order.IsNull() {
			*order1 = uiHooksItem.Order.ValueInt64()
		} else {
			order1 = nil
		}
		title2 := new(string)
		if !uiHooksItem.Title.IsUnknown() && !uiHooksItem.Title.IsNull() {
			*title2 = uiHooksItem.Title.ValueString()
		} else {
			title2 = nil
		}
		groupExpanded := new(bool)
		if !uiHooksItem.GroupExpanded.IsUnknown() && !uiHooksItem.GroupExpanded.IsNull() {
			*groupExpanded = uiHooksItem.GroupExpanded.ValueBool()
		} else {
			groupExpanded = nil
		}
		importVar := new(string)
		if !uiHooksItem.Import.IsUnknown() && !uiHooksItem.Import.IsNull() {
			*importVar = uiHooksItem.Import.ValueString()
		} else {
			importVar = nil
		}
		component := new(string)
		if !uiHooksItem.Component.IsUnknown() && !uiHooksItem.Component.IsNull() {
			*component = uiHooksItem.Component.ValueString()
		} else {
			component = nil
		}
		route := new(string)
		if !uiHooksItem.Route.IsUnknown() && !uiHooksItem.Route.IsNull() {
			*route = uiHooksItem.Route.ValueString()
		} else {
			route = nil
		}
		icon1 := new(string)
		if !uiHooksItem.Icon.IsUnknown() && !uiHooksItem.Icon.IsNull() {
			*icon1 = uiHooksItem.Icon.ValueString()
		} else {
			icon1 = nil
		}
		disabled := new(bool)
		if !uiHooksItem.Disabled.IsUnknown() && !uiHooksItem.Disabled.IsNull() {
			*disabled = uiHooksItem.Disabled.ValueBool()
		} else {
			disabled = nil
		}
		header := new(bool)
		if !uiHooksItem.Header.IsUnknown() && !uiHooksItem.Header.IsNull() {
			*header = uiHooksItem.Header.ValueBool()
		} else {
			header = nil
		}
		var requiredPermission *shared.EntityCapabilityWithCompositeIDRequiredPermission
		if uiHooksItem.RequiredPermission != nil {
			action := uiHooksItem.RequiredPermission.Action.ValueString()
			resource := new(string)
			if !uiHooksItem.RequiredPermission.Resource.IsUnknown() && !uiHooksItem.RequiredPermission.Resource.IsNull() {
				*resource = uiHooksItem.RequiredPermission.Resource.ValueString()
			} else {
				resource = nil
			}
			requiredPermission = &shared.EntityCapabilityWithCompositeIDRequiredPermission{
				Action:   action,
				Resource: resource,
			}
		}
		var additionalProperties2 interface{}
		if !uiHooksItem.AdditionalProperties.IsUnknown() && !uiHooksItem.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(uiHooksItem.AdditionalProperties.ValueString()), &additionalProperties2)
		}
		uiHooks = append(uiHooks, shared.EntityCapabilityWithCompositeIDUIHooks{
			Hook:                 hook,
			RenderCondition:      renderCondition1,
			Order:                order1,
			Title:                title2,
			GroupExpanded:        groupExpanded,
			Import:               importVar,
			Component:            component,
			Route:                route,
			Icon:                 icon1,
			Disabled:             disabled,
			Header:               header,
			RequiredPermission:   requiredPermission,
			AdditionalProperties: additionalProperties2,
		})
	}
	featureFlag2 := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag2 = r.FeatureFlag.ValueString()
	} else {
		featureFlag2 = nil
	}
	var settingsFlag2 []shared.SettingFlag = []shared.SettingFlag{}
	for _, settingsFlagItem2 := range r.SettingsFlag {
		name4 := new(string)
		if !settingsFlagItem2.Name.IsUnknown() && !settingsFlagItem2.Name.IsNull() {
			*name4 = settingsFlagItem2.Name.ValueString()
		} else {
			name4 = nil
		}
		enabled2 := new(bool)
		if !settingsFlagItem2.Enabled.IsUnknown() && !settingsFlagItem2.Enabled.IsNull() {
			*enabled2 = settingsFlagItem2.Enabled.ValueBool()
		} else {
			enabled2 = nil
		}
		settingsFlag2 = append(settingsFlag2, shared.SettingFlag{
			Name:    name4,
			Enabled: enabled2,
		})
	}
	out := shared.EntityCapabilityWithCompositeIDInput{
		Name:         name,
		Title:        title,
		Attributes:   attributes,
		Purpose:      purpose1,
		UIHooks:      uiHooks,
		FeatureFlag:  featureFlag2,
		SettingsFlag: settingsFlag2,
	}
	return &out
}

func (r *SchemaCapabilityResourceModel) RefreshFromSharedEntityCapabilityWithCompositeID(resp *shared.EntityCapabilityWithCompositeID) {
	if resp != nil {
		if len(r.Attributes) > len(resp.Attributes) {
			r.Attributes = r.Attributes[:len(resp.Attributes)]
		}
		for attributesCount, attributesItem := range resp.Attributes {
			var attributes1 tfTypes.Attribute
			attributes1.Purpose = []types.String{}
			for _, v := range attributesItem.Purpose {
				attributes1.Purpose = append(attributes1.Purpose, types.StringValue(v))
			}
			for actionsCount, actionsItem := range attributesItem.Actions {
				var actions1 tfTypes.Actions
				if actionsItem.ActionType != nil {
					actions1.ActionType = types.StringValue(string(*actionsItem.ActionType))
				} else {
					actions1.ActionType = types.StringNull()
				}
				actions1.Default = types.BoolPointerValue(actionsItem.Default)
				actions1.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
				actions1.Label = types.StringPointerValue(actionsItem.Label)
				if actionsItem.NewEntityItem == nil {
					actions1.NewEntityItem = nil
				} else {
					actions1.NewEntityItem = &tfTypes.NewEntityItem{}
					if actionsItem.NewEntityItem.ACL == nil {
						actions1.NewEntityItem.ACL = nil
					} else {
						actions1.NewEntityItem.ACL = &tfTypes.EntityACL{}
						if actionsItem.NewEntityItem.ACL.AdditionalProperties == nil {
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringNull()
						} else {
							additionalPropertiesResult, _ := json.Marshal(actionsItem.NewEntityItem.ACL.AdditionalProperties)
							actions1.NewEntityItem.ACL.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
						}
						actions1.NewEntityItem.ACL.Delete = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Delete {
							actions1.NewEntityItem.ACL.Delete = append(actions1.NewEntityItem.ACL.Delete, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.Edit = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.Edit {
							actions1.NewEntityItem.ACL.Edit = append(actions1.NewEntityItem.ACL.Edit, types.StringValue(v))
						}
						actions1.NewEntityItem.ACL.View = []types.String{}
						for _, v := range actionsItem.NewEntityItem.ACL.View {
							actions1.NewEntityItem.ACL.View = append(actions1.NewEntityItem.ACL.View, types.StringValue(v))
						}
					}
					if actionsItem.NewEntityItem.CreatedAt != nil {
						actions1.NewEntityItem.CreatedAt = types.StringValue(actionsItem.NewEntityItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.CreatedAt = types.StringNull()
					}
					actions1.NewEntityItem.ID = types.StringValue(actionsItem.NewEntityItem.ID)
					actions1.NewEntityItem.Org = types.StringValue(actionsItem.NewEntityItem.Org)
					for ownersCount, ownersItem := range actionsItem.NewEntityItem.Owners {
						var owners1 tfTypes.EntityOwner
						owners1.OrgID = types.StringValue(ownersItem.OrgID)
						owners1.UserID = types.StringPointerValue(ownersItem.UserID)
						if ownersCount+1 > len(actions1.NewEntityItem.Owners) {
							actions1.NewEntityItem.Owners = append(actions1.NewEntityItem.Owners, owners1)
						} else {
							actions1.NewEntityItem.Owners[ownersCount].OrgID = owners1.OrgID
							actions1.NewEntityItem.Owners[ownersCount].UserID = owners1.UserID
						}
					}
					actions1.NewEntityItem.Schema = types.StringValue(actionsItem.NewEntityItem.Schema)
					actions1.NewEntityItem.Tags = []types.String{}
					for _, v := range actionsItem.NewEntityItem.Tags {
						actions1.NewEntityItem.Tags = append(actions1.NewEntityItem.Tags, types.StringValue(v))
					}
					actions1.NewEntityItem.Title = types.StringPointerValue(actionsItem.NewEntityItem.Title)
					if actionsItem.NewEntityItem.UpdatedAt != nil {
						actions1.NewEntityItem.UpdatedAt = types.StringValue(actionsItem.NewEntityItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						actions1.NewEntityItem.UpdatedAt = types.StringNull()
					}
					if actionsItem.NewEntityItem.AdditionalProperties == nil {
						actions1.NewEntityItem.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult1, _ := json.Marshal(actionsItem.NewEntityItem.AdditionalProperties)
						actions1.NewEntityItem.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
					}
				}
				for settingsFlagCount, settingsFlagItem := range actionsItem.SettingsFlag {
					var settingsFlag1 tfTypes.SettingFlag
					settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
					settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
					if settingsFlagCount+1 > len(actions1.SettingsFlag) {
						actions1.SettingsFlag = append(actions1.SettingsFlag, settingsFlag1)
					} else {
						actions1.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
						actions1.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
					}
				}
				if actionsCount+1 > len(attributes1.Actions) {
					attributes1.Actions = append(attributes1.Actions, actions1)
				} else {
					attributes1.Actions[actionsCount].ActionType = actions1.ActionType
					attributes1.Actions[actionsCount].Default = actions1.Default
					attributes1.Actions[actionsCount].FeatureFlag = actions1.FeatureFlag
					attributes1.Actions[actionsCount].Label = actions1.Label
					attributes1.Actions[actionsCount].NewEntityItem = actions1.NewEntityItem
					attributes1.Actions[actionsCount].SettingsFlag = actions1.SettingsFlag
				}
			}
			attributes1.AddButtonLabel = types.StringPointerValue(attributesItem.AddButtonLabel)
			attributes1.AllowAny = types.BoolPointerValue(attributesItem.AllowAny)
			attributes1.AllowExtraOptions = types.BoolPointerValue(attributesItem.AllowExtraOptions)
			attributes1.AllowedExtensions = []types.String{}
			for _, v := range attributesItem.AllowedExtensions {
				attributes1.AllowedExtensions = append(attributes1.AllowedExtensions, types.StringValue(v))
			}
			attributes1.AllowedSchemas = []types.String{}
			for _, v := range attributesItem.AllowedSchemas {
				attributes1.AllowedSchemas = append(attributes1.AllowedSchemas, types.StringValue(v))
			}
			if attributesItem.Constraints == nil {
				attributes1.Constraints = nil
			} else {
				attributes1.Constraints = &tfTypes.Constraints{}
			}
			if attributesItem.CreatedAt != nil {
				attributes1.CreatedAt = types.StringValue(attributesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				attributes1.CreatedAt = types.StringNull()
			}
			for currencyCount, currencyItem := range attributesItem.Currency {
				var currency1 tfTypes.Currency
				if currencyItem.One != nil {
					currency1.One = &tfTypes.One{}
					currency1.One.Code = types.StringValue(currencyItem.One.Code)
					currency1.One.Description = types.StringValue(currencyItem.One.Description)
					currency1.One.Flag = types.StringPointerValue(currencyItem.One.Flag)
					currency1.One.Symbol = types.StringValue(currencyItem.One.Symbol)
				}
				if currencyCount+1 > len(attributes1.Currency) {
					attributes1.Currency = append(attributes1.Currency, currency1)
				} else {
					attributes1.Currency[currencyCount].One = currency1.One
				}
			}
			attributes1.CurrencySelectorOnly = types.BoolPointerValue(attributesItem.CurrencySelectorOnly)
			if attributesItem.DefaultAccessControl != nil {
				attributes1.DefaultAccessControl = types.StringValue(string(*attributesItem.DefaultAccessControl))
			} else {
				attributes1.DefaultAccessControl = types.StringNull()
			}
			if attributesItem.DefaultValue == nil {
				attributes1.DefaultValue = types.StringNull()
			} else {
				defaultValueResult, _ := json.Marshal(attributesItem.DefaultValue)
				attributes1.DefaultValue = types.StringValue(string(defaultValueResult))
			}
			attributes1.Deprecated = types.BoolPointerValue(attributesItem.Deprecated)
			attributes1.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem.DetailsViewModeEnabled)
			attributes1.DisableCaseSensitive = types.BoolPointerValue(attributesItem.DisableCaseSensitive)
			attributes1.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem.DisplayImagesLandscaped)
			if attributesItem.DrawerSize != nil {
				attributes1.DrawerSize = types.StringValue(string(*attributesItem.DrawerSize))
			} else {
				attributes1.DrawerSize = types.StringNull()
			}
			if attributesItem.EditMode != nil {
				attributes1.EditMode = types.StringValue(string(*attributesItem.EditMode))
			} else {
				attributes1.EditMode = types.StringNull()
			}
			attributes1.EnableDescription = types.BoolPointerValue(attributesItem.EnableDescription)
			attributes1.EnableRelationPicker = types.BoolPointerValue(attributesItem.EnableRelationPicker)
			attributes1.EnableRelationTags = types.BoolPointerValue(attributesItem.EnableRelationTags)
			attributes1.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.EntityBuilderDisableEdit)
			attributes1.FeatureFlag = types.StringPointerValue(attributesItem.FeatureFlag)
			attributes1.Format = types.StringPointerValue(attributesItem.Format)
			attributes1.Group = types.StringPointerValue(attributesItem.Group)
			attributes1.HasPrimary = types.BoolPointerValue(attributesItem.HasPrimary)
			attributes1.Hidden = types.BoolPointerValue(attributesItem.Hidden)
			attributes1.HideLabel = types.BoolPointerValue(attributesItem.HideLabel)
			attributes1.Icon = types.StringPointerValue(attributesItem.Icon)
			attributes1.ID = types.StringPointerValue(attributesItem.ID)
			attributes1.Identifiers = []types.String{}
			for _, v := range attributesItem.Identifiers {
				attributes1.Identifiers = append(attributes1.Identifiers, types.StringValue(v))
			}
			if attributesItem.InfoHelpers == nil {
				attributes1.InfoHelpers = nil
			} else {
				attributes1.InfoHelpers = &tfTypes.InfoHelpers{}
				attributes1.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InfoHelpers.HintCustomComponent)
				attributes1.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InfoHelpers.HintText)
				attributes1.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InfoHelpers.HintTextKey)
				attributes1.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InfoHelpers.HintTooltipPlacement)
			}
			attributes1.Label = types.StringValue(attributesItem.Label)
			attributes1.Layout = types.StringPointerValue(attributesItem.Layout)
			attributes1.Multiline = types.BoolPointerValue(attributesItem.Multiline)
			attributes1.Multiple = types.BoolPointerValue(attributesItem.Multiple)
			attributes1.Name = types.StringValue(attributesItem.Name)
			attributes1.Options = []types.String{}
			for _, v := range attributesItem.Options {
				attributes1.Options = append(attributes1.Options, types.StringValue(v))
			}
			attributes1.Order = types.Int64PointerValue(attributesItem.Order)
			attributes1.Parents = []types.String{}
			for _, v := range attributesItem.Parents {
				attributes1.Parents = append(attributes1.Parents, types.StringValue(v))
			}
			attributes1.Placeholder = types.StringPointerValue(attributesItem.Placeholder)
			attributes1.Prefix = types.StringPointerValue(attributesItem.Prefix)
			attributes1.PreviewValueFormatter = types.StringPointerValue(attributesItem.PreviewValueFormatter)
			attributes1.Protected = types.BoolPointerValue(attributesItem.Protected)
			attributes1.Readonly = types.BoolPointerValue(attributesItem.Readonly)
			if attributesItem.RelationAffinityMode != nil {
				attributes1.RelationAffinityMode = types.StringValue(string(*attributesItem.RelationAffinityMode))
			} else {
				attributes1.RelationAffinityMode = types.StringNull()
			}
			if attributesItem.RelationType != nil {
				attributes1.RelationType = types.StringValue(string(*attributesItem.RelationType))
			} else {
				attributes1.RelationType = types.StringNull()
			}
			attributes1.RenderCondition = types.StringPointerValue(attributesItem.RenderCondition)
			attributes1.Repeatable = types.BoolPointerValue(attributesItem.Repeatable)
			attributes1.Required = types.BoolPointerValue(attributesItem.Required)
			if len(attributesItem.ReverseAttributes) > 0 {
				attributes1.ReverseAttributes = make(map[string]types.String)
				for key, value := range attributesItem.ReverseAttributes {
					attributes1.ReverseAttributes[key] = types.StringValue(value)
				}
			}
			attributes1.SearchPlaceholder = types.StringPointerValue(attributesItem.SearchPlaceholder)
			for settingsFlagCount1, settingsFlagItem1 := range attributesItem.SettingsFlag {
				var settingsFlag3 tfTypes.SettingFlag
				settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
				settingsFlag3.Name = types.StringPointerValue(settingsFlagItem1.Name)
				if settingsFlagCount1+1 > len(attributes1.SettingsFlag) {
					attributes1.SettingsFlag = append(attributes1.SettingsFlag, settingsFlag3)
				} else {
					attributes1.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag3.Enabled
					attributes1.SettingsFlag[settingsFlagCount1].Name = settingsFlag3.Name
				}
			}
			attributes1.ShowInTable = types.BoolPointerValue(attributesItem.ShowInTable)
			attributes1.Slug = types.StringPointerValue(attributesItem.Slug)
			attributes1.Sortable = types.BoolPointerValue(attributesItem.Sortable)
			attributes1.StartNumber = types.Int64PointerValue(attributesItem.StartNumber)
			attributes1.Suggestions = []types.String{}
			for _, v := range attributesItem.Suggestions {
				attributes1.Suggestions = append(attributes1.Suggestions, types.StringValue(v))
			}
			for summaryFieldsCount, summaryFieldsItem := range attributesItem.SummaryFields {
				var summaryFields1 tfTypes.SummaryFields
				if summaryFieldsItem.Str != nil {
					summaryFields1.Str = types.StringPointerValue(summaryFieldsItem.Str)
				}
				if summaryFieldsItem.SummaryField != nil {
					summaryFields1.SummaryField = &tfTypes.SummaryField{}
					summaryFields1.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
					summaryFields1.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
				}
				if summaryFieldsCount+1 > len(attributes1.SummaryFields) {
					attributes1.SummaryFields = append(attributes1.SummaryFields, summaryFields1)
				} else {
					attributes1.SummaryFields[summaryFieldsCount].Str = summaryFields1.Str
					attributes1.SummaryFields[summaryFieldsCount].SummaryField = summaryFields1.SummaryField
				}
			}
			attributes1.Topic = types.StringPointerValue(attributesItem.Topic)
			attributes1.Type = types.StringValue(string(attributesItem.Type))
			if attributesItem.UpdatedAt != nil {
				attributes1.UpdatedAt = types.StringValue(attributesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				attributes1.UpdatedAt = types.StringNull()
			}
			attributes1.ValueFormatter = types.StringPointerValue(attributesItem.ValueFormatter)
			if attributesCount+1 > len(r.Attributes) {
				r.Attributes = append(r.Attributes, attributes1)
			} else {
				r.Attributes[attributesCount].Purpose = attributes1.Purpose
				r.Attributes[attributesCount].Actions = attributes1.Actions
				r.Attributes[attributesCount].AddButtonLabel = attributes1.AddButtonLabel
				r.Attributes[attributesCount].AllowAny = attributes1.AllowAny
				r.Attributes[attributesCount].AllowExtraOptions = attributes1.AllowExtraOptions
				r.Attributes[attributesCount].AllowedExtensions = attributes1.AllowedExtensions
				r.Attributes[attributesCount].AllowedSchemas = attributes1.AllowedSchemas
				r.Attributes[attributesCount].Constraints = attributes1.Constraints
				r.Attributes[attributesCount].CreatedAt = attributes1.CreatedAt
				r.Attributes[attributesCount].Currency = attributes1.Currency
				r.Attributes[attributesCount].CurrencySelectorOnly = attributes1.CurrencySelectorOnly
				r.Attributes[attributesCount].DefaultAccessControl = attributes1.DefaultAccessControl
				r.Attributes[attributesCount].DefaultValue = attributes1.DefaultValue
				r.Attributes[attributesCount].Deprecated = attributes1.Deprecated
				r.Attributes[attributesCount].DetailsViewModeEnabled = attributes1.DetailsViewModeEnabled
				r.Attributes[attributesCount].DisableCaseSensitive = attributes1.DisableCaseSensitive
				r.Attributes[attributesCount].DisplayImagesLandscaped = attributes1.DisplayImagesLandscaped
				r.Attributes[attributesCount].DrawerSize = attributes1.DrawerSize
				r.Attributes[attributesCount].EditMode = attributes1.EditMode
				r.Attributes[attributesCount].EnableDescription = attributes1.EnableDescription
				r.Attributes[attributesCount].EnableRelationPicker = attributes1.EnableRelationPicker
				r.Attributes[attributesCount].EnableRelationTags = attributes1.EnableRelationTags
				r.Attributes[attributesCount].EntityBuilderDisableEdit = attributes1.EntityBuilderDisableEdit
				r.Attributes[attributesCount].FeatureFlag = attributes1.FeatureFlag
				r.Attributes[attributesCount].Format = attributes1.Format
				r.Attributes[attributesCount].Group = attributes1.Group
				r.Attributes[attributesCount].HasPrimary = attributes1.HasPrimary
				r.Attributes[attributesCount].Hidden = attributes1.Hidden
				r.Attributes[attributesCount].HideLabel = attributes1.HideLabel
				r.Attributes[attributesCount].Icon = attributes1.Icon
				r.Attributes[attributesCount].ID = attributes1.ID
				r.Attributes[attributesCount].Identifiers = attributes1.Identifiers
				r.Attributes[attributesCount].InfoHelpers = attributes1.InfoHelpers
				r.Attributes[attributesCount].Label = attributes1.Label
				r.Attributes[attributesCount].Layout = attributes1.Layout
				r.Attributes[attributesCount].Multiline = attributes1.Multiline
				r.Attributes[attributesCount].Multiple = attributes1.Multiple
				r.Attributes[attributesCount].Name = attributes1.Name
				r.Attributes[attributesCount].Options = attributes1.Options
				r.Attributes[attributesCount].Order = attributes1.Order
				r.Attributes[attributesCount].Parents = attributes1.Parents
				r.Attributes[attributesCount].Placeholder = attributes1.Placeholder
				r.Attributes[attributesCount].Prefix = attributes1.Prefix
				r.Attributes[attributesCount].PreviewValueFormatter = attributes1.PreviewValueFormatter
				r.Attributes[attributesCount].Protected = attributes1.Protected
				r.Attributes[attributesCount].Readonly = attributes1.Readonly
				r.Attributes[attributesCount].RelationAffinityMode = attributes1.RelationAffinityMode
				r.Attributes[attributesCount].RelationType = attributes1.RelationType
				r.Attributes[attributesCount].RenderCondition = attributes1.RenderCondition
				r.Attributes[attributesCount].Repeatable = attributes1.Repeatable
				r.Attributes[attributesCount].Required = attributes1.Required
				r.Attributes[attributesCount].ReverseAttributes = attributes1.ReverseAttributes
				r.Attributes[attributesCount].SearchPlaceholder = attributes1.SearchPlaceholder
				r.Attributes[attributesCount].SettingsFlag = attributes1.SettingsFlag
				r.Attributes[attributesCount].ShowInTable = attributes1.ShowInTable
				r.Attributes[attributesCount].Slug = attributes1.Slug
				r.Attributes[attributesCount].Sortable = attributes1.Sortable
				r.Attributes[attributesCount].StartNumber = attributes1.StartNumber
				r.Attributes[attributesCount].Suggestions = attributes1.Suggestions
				r.Attributes[attributesCount].SummaryFields = attributes1.SummaryFields
				r.Attributes[attributesCount].Topic = attributes1.Topic
				r.Attributes[attributesCount].Type = attributes1.Type
				r.Attributes[attributesCount].UpdatedAt = attributes1.UpdatedAt
				r.Attributes[attributesCount].ValueFormatter = attributes1.ValueFormatter
			}
		}
		r.CompositeID = types.StringPointerValue(resp.CompositeID)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.Name = types.StringValue(resp.Name)
		r.Purpose = []types.String{}
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount2, settingsFlagItem2 := range resp.SettingsFlag {
			var settingsFlag5 tfTypes.SettingFlag
			settingsFlag5.Enabled = types.BoolPointerValue(settingsFlagItem2.Enabled)
			settingsFlag5.Name = types.StringPointerValue(settingsFlagItem2.Name)
			if settingsFlagCount2+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag5)
			} else {
				r.SettingsFlag[settingsFlagCount2].Enabled = settingsFlag5.Enabled
				r.SettingsFlag[settingsFlagCount2].Name = settingsFlag5.Name
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		if len(r.UIHooks) > len(resp.UIHooks) {
			r.UIHooks = r.UIHooks[:len(resp.UIHooks)]
		}
		for uiHooksCount, uiHooksItem := range resp.UIHooks {
			var uiHooks1 tfTypes.UIHooks
			if uiHooksItem.AdditionalProperties == nil {
				uiHooks1.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult2, _ := json.Marshal(uiHooksItem.AdditionalProperties)
				uiHooks1.AdditionalProperties = types.StringValue(string(additionalPropertiesResult2))
			}
			uiHooks1.Component = types.StringPointerValue(uiHooksItem.Component)
			uiHooks1.Disabled = types.BoolPointerValue(uiHooksItem.Disabled)
			uiHooks1.GroupExpanded = types.BoolPointerValue(uiHooksItem.GroupExpanded)
			uiHooks1.Header = types.BoolPointerValue(uiHooksItem.Header)
			uiHooks1.Hook = types.StringValue(uiHooksItem.Hook)
			uiHooks1.Icon = types.StringPointerValue(uiHooksItem.Icon)
			uiHooks1.Import = types.StringPointerValue(uiHooksItem.Import)
			uiHooks1.Order = types.Int64PointerValue(uiHooksItem.Order)
			uiHooks1.RenderCondition = types.StringPointerValue(uiHooksItem.RenderCondition)
			if uiHooksItem.RequiredPermission == nil {
				uiHooks1.RequiredPermission = nil
			} else {
				uiHooks1.RequiredPermission = &tfTypes.RequiredPermission{}
				uiHooks1.RequiredPermission.Action = types.StringValue(uiHooksItem.RequiredPermission.Action)
				uiHooks1.RequiredPermission.Resource = types.StringPointerValue(uiHooksItem.RequiredPermission.Resource)
			}
			uiHooks1.Route = types.StringPointerValue(uiHooksItem.Route)
			uiHooks1.Title = types.StringPointerValue(uiHooksItem.Title)
			if uiHooksCount+1 > len(r.UIHooks) {
				r.UIHooks = append(r.UIHooks, uiHooks1)
			} else {
				r.UIHooks[uiHooksCount].AdditionalProperties = uiHooks1.AdditionalProperties
				r.UIHooks[uiHooksCount].Component = uiHooks1.Component
				r.UIHooks[uiHooksCount].Disabled = uiHooks1.Disabled
				r.UIHooks[uiHooksCount].GroupExpanded = uiHooks1.GroupExpanded
				r.UIHooks[uiHooksCount].Header = uiHooks1.Header
				r.UIHooks[uiHooksCount].Hook = uiHooks1.Hook
				r.UIHooks[uiHooksCount].Icon = uiHooks1.Icon
				r.UIHooks[uiHooksCount].Import = uiHooks1.Import
				r.UIHooks[uiHooksCount].Order = uiHooks1.Order
				r.UIHooks[uiHooksCount].RenderCondition = uiHooks1.RenderCondition
				r.UIHooks[uiHooksCount].RequiredPermission = uiHooks1.RequiredPermission
				r.UIHooks[uiHooksCount].Route = uiHooks1.Route
				r.UIHooks[uiHooksCount].Title = uiHooks1.Title
			}
		}
	}
}
