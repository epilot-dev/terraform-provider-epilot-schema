// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot/terraform-provider-epilot-schema/internal/provider/typeconvert"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SchemaCapabilityResourceModel) ToSharedEntityCapabilityWithCompositeIDInput(ctx context.Context) (*shared.EntityCapabilityWithCompositeIDInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	attributes := make([]shared.AttributeInput, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		if attributesItem.TextAttribute != nil {
			id1 := new(string)
			if !attributesItem.TextAttribute.ID.IsUnknown() && !attributesItem.TextAttribute.ID.IsNull() {
				*id1 = attributesItem.TextAttribute.ID.ValueString()
			} else {
				id1 = nil
			}
			var name1 string
			name1 = attributesItem.TextAttribute.Name.ValueString()

			var label string
			label = attributesItem.TextAttribute.Label.ValueString()

			placeholder := new(string)
			if !attributesItem.TextAttribute.Placeholder.IsUnknown() && !attributesItem.TextAttribute.Placeholder.IsNull() {
				*placeholder = attributesItem.TextAttribute.Placeholder.ValueString()
			} else {
				placeholder = nil
			}
			hidden := new(bool)
			if !attributesItem.TextAttribute.Hidden.IsUnknown() && !attributesItem.TextAttribute.Hidden.IsNull() {
				*hidden = attributesItem.TextAttribute.Hidden.ValueBool()
			} else {
				hidden = nil
			}
			showInTable := new(bool)
			if !attributesItem.TextAttribute.ShowInTable.IsUnknown() && !attributesItem.TextAttribute.ShowInTable.IsNull() {
				*showInTable = attributesItem.TextAttribute.ShowInTable.ValueBool()
			} else {
				showInTable = nil
			}
			sortable := new(bool)
			if !attributesItem.TextAttribute.Sortable.IsUnknown() && !attributesItem.TextAttribute.Sortable.IsNull() {
				*sortable = attributesItem.TextAttribute.Sortable.ValueBool()
			} else {
				sortable = nil
			}
			required := new(bool)
			if !attributesItem.TextAttribute.Required.IsUnknown() && !attributesItem.TextAttribute.Required.IsNull() {
				*required = attributesItem.TextAttribute.Required.ValueBool()
			} else {
				required = nil
			}
			readonly := new(bool)
			if !attributesItem.TextAttribute.Readonly.IsUnknown() && !attributesItem.TextAttribute.Readonly.IsNull() {
				*readonly = attributesItem.TextAttribute.Readonly.ValueBool()
			} else {
				readonly = nil
			}
			deprecated := new(bool)
			if !attributesItem.TextAttribute.Deprecated.IsUnknown() && !attributesItem.TextAttribute.Deprecated.IsNull() {
				*deprecated = attributesItem.TextAttribute.Deprecated.ValueBool()
			} else {
				deprecated = nil
			}
			var defaultValue interface{}
			if !attributesItem.TextAttribute.DefaultValue.IsUnknown() && !attributesItem.TextAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.TextAttribute.DefaultValue.ValueString()), &defaultValue)
			}
			group := new(string)
			if !attributesItem.TextAttribute.Group.IsUnknown() && !attributesItem.TextAttribute.Group.IsNull() {
				*group = attributesItem.TextAttribute.Group.ValueString()
			} else {
				group = nil
			}
			order := new(int64)
			if !attributesItem.TextAttribute.Order.IsUnknown() && !attributesItem.TextAttribute.Order.IsNull() {
				*order = attributesItem.TextAttribute.Order.ValueInt64()
			} else {
				order = nil
			}
			layout := new(string)
			if !attributesItem.TextAttribute.Layout.IsUnknown() && !attributesItem.TextAttribute.Layout.IsNull() {
				*layout = attributesItem.TextAttribute.Layout.ValueString()
			} else {
				layout = nil
			}
			hideLabel := new(bool)
			if !attributesItem.TextAttribute.HideLabel.IsUnknown() && !attributesItem.TextAttribute.HideLabel.IsNull() {
				*hideLabel = attributesItem.TextAttribute.HideLabel.ValueBool()
			} else {
				hideLabel = nil
			}
			icon := new(string)
			if !attributesItem.TextAttribute.Icon.IsUnknown() && !attributesItem.TextAttribute.Icon.IsNull() {
				*icon = attributesItem.TextAttribute.Icon.ValueString()
			} else {
				icon = nil
			}
			renderCondition := new(string)
			if !attributesItem.TextAttribute.RenderCondition.IsUnknown() && !attributesItem.TextAttribute.RenderCondition.IsNull() {
				*renderCondition = attributesItem.TextAttribute.RenderCondition.ValueString()
			} else {
				renderCondition = nil
			}
			purpose := make([]string, 0, len(attributesItem.TextAttribute.Purpose))
			for _, purposeItem := range attributesItem.TextAttribute.Purpose {
				purpose = append(purpose, purposeItem.ValueString())
			}
			var manifest []string
			if attributesItem.TextAttribute.Manifest != nil {
				manifest = make([]string, 0, len(attributesItem.TextAttribute.Manifest))
				for _, manifestItem := range attributesItem.TextAttribute.Manifest {
					manifest = append(manifest, manifestItem.ValueString())
				}
			}
			var constraints *shared.Constraints
			if attributesItem.TextAttribute.Constraints != nil {
				constraints = &shared.Constraints{}
			}
			featureFlag := new(string)
			if !attributesItem.TextAttribute.FeatureFlag.IsUnknown() && !attributesItem.TextAttribute.FeatureFlag.IsNull() {
				*featureFlag = attributesItem.TextAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag = nil
			}
			settingsFlag := make([]shared.SettingFlag, 0, len(attributesItem.TextAttribute.SettingsFlag))
			for _, settingsFlagItem := range attributesItem.TextAttribute.SettingsFlag {
				name2 := new(string)
				if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
					*name2 = settingsFlagItem.Name.ValueString()
				} else {
					name2 = nil
				}
				enabled := new(bool)
				if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
					*enabled = settingsFlagItem.Enabled.ValueBool()
				} else {
					enabled = nil
				}
				settingsFlag = append(settingsFlag, shared.SettingFlag{
					Name:    name2,
					Enabled: enabled,
				})
			}
			valueFormatter := new(string)
			if !attributesItem.TextAttribute.ValueFormatter.IsUnknown() && !attributesItem.TextAttribute.ValueFormatter.IsNull() {
				*valueFormatter = attributesItem.TextAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter = nil
			}
			previewValueFormatter := new(string)
			if !attributesItem.TextAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.TextAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter = attributesItem.TextAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter = nil
			}
			entityBuilderDisableEdit := new(bool)
			if !attributesItem.TextAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.TextAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit = attributesItem.TextAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit = nil
			}
			protected := new(bool)
			if !attributesItem.TextAttribute.Protected.IsUnknown() && !attributesItem.TextAttribute.Protected.IsNull() {
				*protected = attributesItem.TextAttribute.Protected.ValueBool()
			} else {
				protected = nil
			}
			var infoHelpers *shared.InfoHelpers
			if attributesItem.TextAttribute.InfoHelpers != nil {
				hintText := new(string)
				if !attributesItem.TextAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.TextAttribute.InfoHelpers.HintText.IsNull() {
					*hintText = attributesItem.TextAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText = nil
				}
				hintTextKey := new(string)
				if !attributesItem.TextAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.TextAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey = attributesItem.TextAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey = nil
				}
				hintCustomComponent := new(string)
				if !attributesItem.TextAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.TextAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent = attributesItem.TextAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent = nil
				}
				hintTooltipPlacement := new(string)
				if !attributesItem.TextAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.TextAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement = attributesItem.TextAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement = nil
				}
				infoHelpers = &shared.InfoHelpers{
					HintText:             hintText,
					HintTextKey:          hintTextKey,
					HintCustomComponent:  hintCustomComponent,
					HintTooltipPlacement: hintTooltipPlacement,
				}
			}
			repeatable := new(bool)
			if !attributesItem.TextAttribute.Repeatable.IsUnknown() && !attributesItem.TextAttribute.Repeatable.IsNull() {
				*repeatable = attributesItem.TextAttribute.Repeatable.ValueBool()
			} else {
				repeatable = nil
			}
			hasPrimary := new(bool)
			if !attributesItem.TextAttribute.HasPrimary.IsUnknown() && !attributesItem.TextAttribute.HasPrimary.IsNull() {
				*hasPrimary = attributesItem.TextAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary = nil
			}
			typeVar := shared.TextAttributeType(attributesItem.TextAttribute.Type.ValueString())
			multiline := new(bool)
			if !attributesItem.TextAttribute.Multiline.IsUnknown() && !attributesItem.TextAttribute.Multiline.IsNull() {
				*multiline = attributesItem.TextAttribute.Multiline.ValueBool()
			} else {
				multiline = nil
			}
			richText := new(bool)
			if !attributesItem.TextAttribute.RichText.IsUnknown() && !attributesItem.TextAttribute.RichText.IsNull() {
				*richText = attributesItem.TextAttribute.RichText.ValueBool()
			} else {
				richText = nil
			}
			var rows interface{}
			if !attributesItem.TextAttribute.Rows.IsUnknown() && !attributesItem.TextAttribute.Rows.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.TextAttribute.Rows.ValueString()), &rows)
			}
			textAttribute := shared.TextAttribute{
				ID:                       id1,
				Name:                     name1,
				Label:                    label,
				Placeholder:              placeholder,
				Hidden:                   hidden,
				ShowInTable:              showInTable,
				Sortable:                 sortable,
				Required:                 required,
				Readonly:                 readonly,
				Deprecated:               deprecated,
				DefaultValue:             defaultValue,
				Group:                    group,
				Order:                    order,
				Layout:                   layout,
				HideLabel:                hideLabel,
				Icon:                     icon,
				RenderCondition:          renderCondition,
				Purpose:                  purpose,
				Manifest:                 manifest,
				Constraints:              constraints,
				FeatureFlag:              featureFlag,
				SettingsFlag:             settingsFlag,
				ValueFormatter:           valueFormatter,
				PreviewValueFormatter:    previewValueFormatter,
				EntityBuilderDisableEdit: entityBuilderDisableEdit,
				Protected:                protected,
				InfoHelpers:              infoHelpers,
				Repeatable:               repeatable,
				HasPrimary:               hasPrimary,
				Type:                     typeVar,
				Multiline:                multiline,
				RichText:                 richText,
				Rows:                     rows,
			}
			attributes = append(attributes, shared.AttributeInput{
				TextAttribute: &textAttribute,
			})
		}
		if attributesItem.LinkAttribute != nil {
			id2 := new(string)
			if !attributesItem.LinkAttribute.ID.IsUnknown() && !attributesItem.LinkAttribute.ID.IsNull() {
				*id2 = attributesItem.LinkAttribute.ID.ValueString()
			} else {
				id2 = nil
			}
			var name3 string
			name3 = attributesItem.LinkAttribute.Name.ValueString()

			var label1 string
			label1 = attributesItem.LinkAttribute.Label.ValueString()

			placeholder1 := new(string)
			if !attributesItem.LinkAttribute.Placeholder.IsUnknown() && !attributesItem.LinkAttribute.Placeholder.IsNull() {
				*placeholder1 = attributesItem.LinkAttribute.Placeholder.ValueString()
			} else {
				placeholder1 = nil
			}
			hidden1 := new(bool)
			if !attributesItem.LinkAttribute.Hidden.IsUnknown() && !attributesItem.LinkAttribute.Hidden.IsNull() {
				*hidden1 = attributesItem.LinkAttribute.Hidden.ValueBool()
			} else {
				hidden1 = nil
			}
			showInTable1 := new(bool)
			if !attributesItem.LinkAttribute.ShowInTable.IsUnknown() && !attributesItem.LinkAttribute.ShowInTable.IsNull() {
				*showInTable1 = attributesItem.LinkAttribute.ShowInTable.ValueBool()
			} else {
				showInTable1 = nil
			}
			sortable1 := new(bool)
			if !attributesItem.LinkAttribute.Sortable.IsUnknown() && !attributesItem.LinkAttribute.Sortable.IsNull() {
				*sortable1 = attributesItem.LinkAttribute.Sortable.ValueBool()
			} else {
				sortable1 = nil
			}
			required1 := new(bool)
			if !attributesItem.LinkAttribute.Required.IsUnknown() && !attributesItem.LinkAttribute.Required.IsNull() {
				*required1 = attributesItem.LinkAttribute.Required.ValueBool()
			} else {
				required1 = nil
			}
			readonly1 := new(bool)
			if !attributesItem.LinkAttribute.Readonly.IsUnknown() && !attributesItem.LinkAttribute.Readonly.IsNull() {
				*readonly1 = attributesItem.LinkAttribute.Readonly.ValueBool()
			} else {
				readonly1 = nil
			}
			deprecated1 := new(bool)
			if !attributesItem.LinkAttribute.Deprecated.IsUnknown() && !attributesItem.LinkAttribute.Deprecated.IsNull() {
				*deprecated1 = attributesItem.LinkAttribute.Deprecated.ValueBool()
			} else {
				deprecated1 = nil
			}
			var defaultValue1 interface{}
			if !attributesItem.LinkAttribute.DefaultValue.IsUnknown() && !attributesItem.LinkAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.LinkAttribute.DefaultValue.ValueString()), &defaultValue1)
			}
			group1 := new(string)
			if !attributesItem.LinkAttribute.Group.IsUnknown() && !attributesItem.LinkAttribute.Group.IsNull() {
				*group1 = attributesItem.LinkAttribute.Group.ValueString()
			} else {
				group1 = nil
			}
			order1 := new(int64)
			if !attributesItem.LinkAttribute.Order.IsUnknown() && !attributesItem.LinkAttribute.Order.IsNull() {
				*order1 = attributesItem.LinkAttribute.Order.ValueInt64()
			} else {
				order1 = nil
			}
			layout1 := new(string)
			if !attributesItem.LinkAttribute.Layout.IsUnknown() && !attributesItem.LinkAttribute.Layout.IsNull() {
				*layout1 = attributesItem.LinkAttribute.Layout.ValueString()
			} else {
				layout1 = nil
			}
			hideLabel1 := new(bool)
			if !attributesItem.LinkAttribute.HideLabel.IsUnknown() && !attributesItem.LinkAttribute.HideLabel.IsNull() {
				*hideLabel1 = attributesItem.LinkAttribute.HideLabel.ValueBool()
			} else {
				hideLabel1 = nil
			}
			icon1 := new(string)
			if !attributesItem.LinkAttribute.Icon.IsUnknown() && !attributesItem.LinkAttribute.Icon.IsNull() {
				*icon1 = attributesItem.LinkAttribute.Icon.ValueString()
			} else {
				icon1 = nil
			}
			renderCondition1 := new(string)
			if !attributesItem.LinkAttribute.RenderCondition.IsUnknown() && !attributesItem.LinkAttribute.RenderCondition.IsNull() {
				*renderCondition1 = attributesItem.LinkAttribute.RenderCondition.ValueString()
			} else {
				renderCondition1 = nil
			}
			purpose1 := make([]string, 0, len(attributesItem.LinkAttribute.Purpose))
			for _, purposeItem1 := range attributesItem.LinkAttribute.Purpose {
				purpose1 = append(purpose1, purposeItem1.ValueString())
			}
			var manifest1 []string
			if attributesItem.LinkAttribute.Manifest != nil {
				manifest1 = make([]string, 0, len(attributesItem.LinkAttribute.Manifest))
				for _, manifestItem1 := range attributesItem.LinkAttribute.Manifest {
					manifest1 = append(manifest1, manifestItem1.ValueString())
				}
			}
			var constraints1 *shared.LinkAttributeConstraints
			if attributesItem.LinkAttribute.Constraints != nil {
				constraints1 = &shared.LinkAttributeConstraints{}
			}
			featureFlag1 := new(string)
			if !attributesItem.LinkAttribute.FeatureFlag.IsUnknown() && !attributesItem.LinkAttribute.FeatureFlag.IsNull() {
				*featureFlag1 = attributesItem.LinkAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag1 = nil
			}
			settingsFlag1 := make([]shared.SettingFlag, 0, len(attributesItem.LinkAttribute.SettingsFlag))
			for _, settingsFlagItem1 := range attributesItem.LinkAttribute.SettingsFlag {
				name4 := new(string)
				if !settingsFlagItem1.Name.IsUnknown() && !settingsFlagItem1.Name.IsNull() {
					*name4 = settingsFlagItem1.Name.ValueString()
				} else {
					name4 = nil
				}
				enabled1 := new(bool)
				if !settingsFlagItem1.Enabled.IsUnknown() && !settingsFlagItem1.Enabled.IsNull() {
					*enabled1 = settingsFlagItem1.Enabled.ValueBool()
				} else {
					enabled1 = nil
				}
				settingsFlag1 = append(settingsFlag1, shared.SettingFlag{
					Name:    name4,
					Enabled: enabled1,
				})
			}
			valueFormatter1 := new(string)
			if !attributesItem.LinkAttribute.ValueFormatter.IsUnknown() && !attributesItem.LinkAttribute.ValueFormatter.IsNull() {
				*valueFormatter1 = attributesItem.LinkAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter1 = nil
			}
			previewValueFormatter1 := new(string)
			if !attributesItem.LinkAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.LinkAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter1 = attributesItem.LinkAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter1 = nil
			}
			entityBuilderDisableEdit1 := new(bool)
			if !attributesItem.LinkAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.LinkAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit1 = attributesItem.LinkAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit1 = nil
			}
			protected1 := new(bool)
			if !attributesItem.LinkAttribute.Protected.IsUnknown() && !attributesItem.LinkAttribute.Protected.IsNull() {
				*protected1 = attributesItem.LinkAttribute.Protected.ValueBool()
			} else {
				protected1 = nil
			}
			var infoHelpers1 *shared.LinkAttributeInfoHelpers
			if attributesItem.LinkAttribute.InfoHelpers != nil {
				hintText1 := new(string)
				if !attributesItem.LinkAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.LinkAttribute.InfoHelpers.HintText.IsNull() {
					*hintText1 = attributesItem.LinkAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText1 = nil
				}
				hintTextKey1 := new(string)
				if !attributesItem.LinkAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.LinkAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey1 = attributesItem.LinkAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey1 = nil
				}
				hintCustomComponent1 := new(string)
				if !attributesItem.LinkAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.LinkAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent1 = attributesItem.LinkAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent1 = nil
				}
				hintTooltipPlacement1 := new(string)
				if !attributesItem.LinkAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.LinkAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement1 = attributesItem.LinkAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement1 = nil
				}
				infoHelpers1 = &shared.LinkAttributeInfoHelpers{
					HintText:             hintText1,
					HintTextKey:          hintTextKey1,
					HintCustomComponent:  hintCustomComponent1,
					HintTooltipPlacement: hintTooltipPlacement1,
				}
			}
			repeatable1 := new(bool)
			if !attributesItem.LinkAttribute.Repeatable.IsUnknown() && !attributesItem.LinkAttribute.Repeatable.IsNull() {
				*repeatable1 = attributesItem.LinkAttribute.Repeatable.ValueBool()
			} else {
				repeatable1 = nil
			}
			hasPrimary1 := new(bool)
			if !attributesItem.LinkAttribute.HasPrimary.IsUnknown() && !attributesItem.LinkAttribute.HasPrimary.IsNull() {
				*hasPrimary1 = attributesItem.LinkAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary1 = nil
			}
			typeVar1 := shared.LinkAttributeType(attributesItem.LinkAttribute.Type.ValueString())
			linkAttribute := shared.LinkAttribute{
				ID:                       id2,
				Name:                     name3,
				Label:                    label1,
				Placeholder:              placeholder1,
				Hidden:                   hidden1,
				ShowInTable:              showInTable1,
				Sortable:                 sortable1,
				Required:                 required1,
				Readonly:                 readonly1,
				Deprecated:               deprecated1,
				DefaultValue:             defaultValue1,
				Group:                    group1,
				Order:                    order1,
				Layout:                   layout1,
				HideLabel:                hideLabel1,
				Icon:                     icon1,
				RenderCondition:          renderCondition1,
				Purpose:                  purpose1,
				Manifest:                 manifest1,
				Constraints:              constraints1,
				FeatureFlag:              featureFlag1,
				SettingsFlag:             settingsFlag1,
				ValueFormatter:           valueFormatter1,
				PreviewValueFormatter:    previewValueFormatter1,
				EntityBuilderDisableEdit: entityBuilderDisableEdit1,
				Protected:                protected1,
				InfoHelpers:              infoHelpers1,
				Repeatable:               repeatable1,
				HasPrimary:               hasPrimary1,
				Type:                     typeVar1,
			}
			attributes = append(attributes, shared.AttributeInput{
				LinkAttribute: &linkAttribute,
			})
		}
		if attributesItem.DateAttribute != nil {
			id3 := new(string)
			if !attributesItem.DateAttribute.ID.IsUnknown() && !attributesItem.DateAttribute.ID.IsNull() {
				*id3 = attributesItem.DateAttribute.ID.ValueString()
			} else {
				id3 = nil
			}
			var name5 string
			name5 = attributesItem.DateAttribute.Name.ValueString()

			var label2 string
			label2 = attributesItem.DateAttribute.Label.ValueString()

			placeholder2 := new(string)
			if !attributesItem.DateAttribute.Placeholder.IsUnknown() && !attributesItem.DateAttribute.Placeholder.IsNull() {
				*placeholder2 = attributesItem.DateAttribute.Placeholder.ValueString()
			} else {
				placeholder2 = nil
			}
			hidden2 := new(bool)
			if !attributesItem.DateAttribute.Hidden.IsUnknown() && !attributesItem.DateAttribute.Hidden.IsNull() {
				*hidden2 = attributesItem.DateAttribute.Hidden.ValueBool()
			} else {
				hidden2 = nil
			}
			showInTable2 := new(bool)
			if !attributesItem.DateAttribute.ShowInTable.IsUnknown() && !attributesItem.DateAttribute.ShowInTable.IsNull() {
				*showInTable2 = attributesItem.DateAttribute.ShowInTable.ValueBool()
			} else {
				showInTable2 = nil
			}
			sortable2 := new(bool)
			if !attributesItem.DateAttribute.Sortable.IsUnknown() && !attributesItem.DateAttribute.Sortable.IsNull() {
				*sortable2 = attributesItem.DateAttribute.Sortable.ValueBool()
			} else {
				sortable2 = nil
			}
			required2 := new(bool)
			if !attributesItem.DateAttribute.Required.IsUnknown() && !attributesItem.DateAttribute.Required.IsNull() {
				*required2 = attributesItem.DateAttribute.Required.ValueBool()
			} else {
				required2 = nil
			}
			readonly2 := new(bool)
			if !attributesItem.DateAttribute.Readonly.IsUnknown() && !attributesItem.DateAttribute.Readonly.IsNull() {
				*readonly2 = attributesItem.DateAttribute.Readonly.ValueBool()
			} else {
				readonly2 = nil
			}
			deprecated2 := new(bool)
			if !attributesItem.DateAttribute.Deprecated.IsUnknown() && !attributesItem.DateAttribute.Deprecated.IsNull() {
				*deprecated2 = attributesItem.DateAttribute.Deprecated.ValueBool()
			} else {
				deprecated2 = nil
			}
			var defaultValue2 interface{}
			if !attributesItem.DateAttribute.DefaultValue.IsUnknown() && !attributesItem.DateAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.DateAttribute.DefaultValue.ValueString()), &defaultValue2)
			}
			group2 := new(string)
			if !attributesItem.DateAttribute.Group.IsUnknown() && !attributesItem.DateAttribute.Group.IsNull() {
				*group2 = attributesItem.DateAttribute.Group.ValueString()
			} else {
				group2 = nil
			}
			order2 := new(int64)
			if !attributesItem.DateAttribute.Order.IsUnknown() && !attributesItem.DateAttribute.Order.IsNull() {
				*order2 = attributesItem.DateAttribute.Order.ValueInt64()
			} else {
				order2 = nil
			}
			layout2 := new(string)
			if !attributesItem.DateAttribute.Layout.IsUnknown() && !attributesItem.DateAttribute.Layout.IsNull() {
				*layout2 = attributesItem.DateAttribute.Layout.ValueString()
			} else {
				layout2 = nil
			}
			hideLabel2 := new(bool)
			if !attributesItem.DateAttribute.HideLabel.IsUnknown() && !attributesItem.DateAttribute.HideLabel.IsNull() {
				*hideLabel2 = attributesItem.DateAttribute.HideLabel.ValueBool()
			} else {
				hideLabel2 = nil
			}
			icon2 := new(string)
			if !attributesItem.DateAttribute.Icon.IsUnknown() && !attributesItem.DateAttribute.Icon.IsNull() {
				*icon2 = attributesItem.DateAttribute.Icon.ValueString()
			} else {
				icon2 = nil
			}
			renderCondition2 := new(string)
			if !attributesItem.DateAttribute.RenderCondition.IsUnknown() && !attributesItem.DateAttribute.RenderCondition.IsNull() {
				*renderCondition2 = attributesItem.DateAttribute.RenderCondition.ValueString()
			} else {
				renderCondition2 = nil
			}
			purpose2 := make([]string, 0, len(attributesItem.DateAttribute.Purpose))
			for _, purposeItem2 := range attributesItem.DateAttribute.Purpose {
				purpose2 = append(purpose2, purposeItem2.ValueString())
			}
			var manifest2 []string
			if attributesItem.DateAttribute.Manifest != nil {
				manifest2 = make([]string, 0, len(attributesItem.DateAttribute.Manifest))
				for _, manifestItem2 := range attributesItem.DateAttribute.Manifest {
					manifest2 = append(manifest2, manifestItem2.ValueString())
				}
			}
			var constraints2 *shared.DateAttributeConstraints
			if attributesItem.DateAttribute.Constraints != nil {
				constraints2 = &shared.DateAttributeConstraints{}
			}
			featureFlag2 := new(string)
			if !attributesItem.DateAttribute.FeatureFlag.IsUnknown() && !attributesItem.DateAttribute.FeatureFlag.IsNull() {
				*featureFlag2 = attributesItem.DateAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag2 = nil
			}
			settingsFlag2 := make([]shared.SettingFlag, 0, len(attributesItem.DateAttribute.SettingsFlag))
			for _, settingsFlagItem2 := range attributesItem.DateAttribute.SettingsFlag {
				name6 := new(string)
				if !settingsFlagItem2.Name.IsUnknown() && !settingsFlagItem2.Name.IsNull() {
					*name6 = settingsFlagItem2.Name.ValueString()
				} else {
					name6 = nil
				}
				enabled2 := new(bool)
				if !settingsFlagItem2.Enabled.IsUnknown() && !settingsFlagItem2.Enabled.IsNull() {
					*enabled2 = settingsFlagItem2.Enabled.ValueBool()
				} else {
					enabled2 = nil
				}
				settingsFlag2 = append(settingsFlag2, shared.SettingFlag{
					Name:    name6,
					Enabled: enabled2,
				})
			}
			valueFormatter2 := new(string)
			if !attributesItem.DateAttribute.ValueFormatter.IsUnknown() && !attributesItem.DateAttribute.ValueFormatter.IsNull() {
				*valueFormatter2 = attributesItem.DateAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter2 = nil
			}
			previewValueFormatter2 := new(string)
			if !attributesItem.DateAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.DateAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter2 = attributesItem.DateAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter2 = nil
			}
			entityBuilderDisableEdit2 := new(bool)
			if !attributesItem.DateAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.DateAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit2 = attributesItem.DateAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit2 = nil
			}
			protected2 := new(bool)
			if !attributesItem.DateAttribute.Protected.IsUnknown() && !attributesItem.DateAttribute.Protected.IsNull() {
				*protected2 = attributesItem.DateAttribute.Protected.ValueBool()
			} else {
				protected2 = nil
			}
			var infoHelpers2 *shared.DateAttributeInfoHelpers
			if attributesItem.DateAttribute.InfoHelpers != nil {
				hintText2 := new(string)
				if !attributesItem.DateAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.DateAttribute.InfoHelpers.HintText.IsNull() {
					*hintText2 = attributesItem.DateAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText2 = nil
				}
				hintTextKey2 := new(string)
				if !attributesItem.DateAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.DateAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey2 = attributesItem.DateAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey2 = nil
				}
				hintCustomComponent2 := new(string)
				if !attributesItem.DateAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.DateAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent2 = attributesItem.DateAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent2 = nil
				}
				hintTooltipPlacement2 := new(string)
				if !attributesItem.DateAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.DateAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement2 = attributesItem.DateAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement2 = nil
				}
				infoHelpers2 = &shared.DateAttributeInfoHelpers{
					HintText:             hintText2,
					HintTextKey:          hintTextKey2,
					HintCustomComponent:  hintCustomComponent2,
					HintTooltipPlacement: hintTooltipPlacement2,
				}
			}
			repeatable2 := new(bool)
			if !attributesItem.DateAttribute.Repeatable.IsUnknown() && !attributesItem.DateAttribute.Repeatable.IsNull() {
				*repeatable2 = attributesItem.DateAttribute.Repeatable.ValueBool()
			} else {
				repeatable2 = nil
			}
			hasPrimary2 := new(bool)
			if !attributesItem.DateAttribute.HasPrimary.IsUnknown() && !attributesItem.DateAttribute.HasPrimary.IsNull() {
				*hasPrimary2 = attributesItem.DateAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary2 = nil
			}
			typeVar2 := shared.DateAttributeType(attributesItem.DateAttribute.Type.ValueString())
			dateAttribute := shared.DateAttribute{
				ID:                       id3,
				Name:                     name5,
				Label:                    label2,
				Placeholder:              placeholder2,
				Hidden:                   hidden2,
				ShowInTable:              showInTable2,
				Sortable:                 sortable2,
				Required:                 required2,
				Readonly:                 readonly2,
				Deprecated:               deprecated2,
				DefaultValue:             defaultValue2,
				Group:                    group2,
				Order:                    order2,
				Layout:                   layout2,
				HideLabel:                hideLabel2,
				Icon:                     icon2,
				RenderCondition:          renderCondition2,
				Purpose:                  purpose2,
				Manifest:                 manifest2,
				Constraints:              constraints2,
				FeatureFlag:              featureFlag2,
				SettingsFlag:             settingsFlag2,
				ValueFormatter:           valueFormatter2,
				PreviewValueFormatter:    previewValueFormatter2,
				EntityBuilderDisableEdit: entityBuilderDisableEdit2,
				Protected:                protected2,
				InfoHelpers:              infoHelpers2,
				Repeatable:               repeatable2,
				HasPrimary:               hasPrimary2,
				Type:                     typeVar2,
			}
			attributes = append(attributes, shared.AttributeInput{
				DateAttribute: &dateAttribute,
			})
		}
		if attributesItem.CountryAttribute != nil {
			id4 := new(string)
			if !attributesItem.CountryAttribute.ID.IsUnknown() && !attributesItem.CountryAttribute.ID.IsNull() {
				*id4 = attributesItem.CountryAttribute.ID.ValueString()
			} else {
				id4 = nil
			}
			var name7 string
			name7 = attributesItem.CountryAttribute.Name.ValueString()

			var label3 string
			label3 = attributesItem.CountryAttribute.Label.ValueString()

			placeholder3 := new(string)
			if !attributesItem.CountryAttribute.Placeholder.IsUnknown() && !attributesItem.CountryAttribute.Placeholder.IsNull() {
				*placeholder3 = attributesItem.CountryAttribute.Placeholder.ValueString()
			} else {
				placeholder3 = nil
			}
			hidden3 := new(bool)
			if !attributesItem.CountryAttribute.Hidden.IsUnknown() && !attributesItem.CountryAttribute.Hidden.IsNull() {
				*hidden3 = attributesItem.CountryAttribute.Hidden.ValueBool()
			} else {
				hidden3 = nil
			}
			showInTable3 := new(bool)
			if !attributesItem.CountryAttribute.ShowInTable.IsUnknown() && !attributesItem.CountryAttribute.ShowInTable.IsNull() {
				*showInTable3 = attributesItem.CountryAttribute.ShowInTable.ValueBool()
			} else {
				showInTable3 = nil
			}
			sortable3 := new(bool)
			if !attributesItem.CountryAttribute.Sortable.IsUnknown() && !attributesItem.CountryAttribute.Sortable.IsNull() {
				*sortable3 = attributesItem.CountryAttribute.Sortable.ValueBool()
			} else {
				sortable3 = nil
			}
			required3 := new(bool)
			if !attributesItem.CountryAttribute.Required.IsUnknown() && !attributesItem.CountryAttribute.Required.IsNull() {
				*required3 = attributesItem.CountryAttribute.Required.ValueBool()
			} else {
				required3 = nil
			}
			readonly3 := new(bool)
			if !attributesItem.CountryAttribute.Readonly.IsUnknown() && !attributesItem.CountryAttribute.Readonly.IsNull() {
				*readonly3 = attributesItem.CountryAttribute.Readonly.ValueBool()
			} else {
				readonly3 = nil
			}
			deprecated3 := new(bool)
			if !attributesItem.CountryAttribute.Deprecated.IsUnknown() && !attributesItem.CountryAttribute.Deprecated.IsNull() {
				*deprecated3 = attributesItem.CountryAttribute.Deprecated.ValueBool()
			} else {
				deprecated3 = nil
			}
			var defaultValue3 interface{}
			if !attributesItem.CountryAttribute.DefaultValue.IsUnknown() && !attributesItem.CountryAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.CountryAttribute.DefaultValue.ValueString()), &defaultValue3)
			}
			group3 := new(string)
			if !attributesItem.CountryAttribute.Group.IsUnknown() && !attributesItem.CountryAttribute.Group.IsNull() {
				*group3 = attributesItem.CountryAttribute.Group.ValueString()
			} else {
				group3 = nil
			}
			order3 := new(int64)
			if !attributesItem.CountryAttribute.Order.IsUnknown() && !attributesItem.CountryAttribute.Order.IsNull() {
				*order3 = attributesItem.CountryAttribute.Order.ValueInt64()
			} else {
				order3 = nil
			}
			layout3 := new(string)
			if !attributesItem.CountryAttribute.Layout.IsUnknown() && !attributesItem.CountryAttribute.Layout.IsNull() {
				*layout3 = attributesItem.CountryAttribute.Layout.ValueString()
			} else {
				layout3 = nil
			}
			hideLabel3 := new(bool)
			if !attributesItem.CountryAttribute.HideLabel.IsUnknown() && !attributesItem.CountryAttribute.HideLabel.IsNull() {
				*hideLabel3 = attributesItem.CountryAttribute.HideLabel.ValueBool()
			} else {
				hideLabel3 = nil
			}
			icon3 := new(string)
			if !attributesItem.CountryAttribute.Icon.IsUnknown() && !attributesItem.CountryAttribute.Icon.IsNull() {
				*icon3 = attributesItem.CountryAttribute.Icon.ValueString()
			} else {
				icon3 = nil
			}
			renderCondition3 := new(string)
			if !attributesItem.CountryAttribute.RenderCondition.IsUnknown() && !attributesItem.CountryAttribute.RenderCondition.IsNull() {
				*renderCondition3 = attributesItem.CountryAttribute.RenderCondition.ValueString()
			} else {
				renderCondition3 = nil
			}
			purpose3 := make([]string, 0, len(attributesItem.CountryAttribute.Purpose))
			for _, purposeItem3 := range attributesItem.CountryAttribute.Purpose {
				purpose3 = append(purpose3, purposeItem3.ValueString())
			}
			var manifest3 []string
			if attributesItem.CountryAttribute.Manifest != nil {
				manifest3 = make([]string, 0, len(attributesItem.CountryAttribute.Manifest))
				for _, manifestItem3 := range attributesItem.CountryAttribute.Manifest {
					manifest3 = append(manifest3, manifestItem3.ValueString())
				}
			}
			var constraints3 *shared.CountryAttributeConstraints
			if attributesItem.CountryAttribute.Constraints != nil {
				constraints3 = &shared.CountryAttributeConstraints{}
			}
			featureFlag3 := new(string)
			if !attributesItem.CountryAttribute.FeatureFlag.IsUnknown() && !attributesItem.CountryAttribute.FeatureFlag.IsNull() {
				*featureFlag3 = attributesItem.CountryAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag3 = nil
			}
			settingsFlag3 := make([]shared.SettingFlag, 0, len(attributesItem.CountryAttribute.SettingsFlag))
			for _, settingsFlagItem3 := range attributesItem.CountryAttribute.SettingsFlag {
				name8 := new(string)
				if !settingsFlagItem3.Name.IsUnknown() && !settingsFlagItem3.Name.IsNull() {
					*name8 = settingsFlagItem3.Name.ValueString()
				} else {
					name8 = nil
				}
				enabled3 := new(bool)
				if !settingsFlagItem3.Enabled.IsUnknown() && !settingsFlagItem3.Enabled.IsNull() {
					*enabled3 = settingsFlagItem3.Enabled.ValueBool()
				} else {
					enabled3 = nil
				}
				settingsFlag3 = append(settingsFlag3, shared.SettingFlag{
					Name:    name8,
					Enabled: enabled3,
				})
			}
			valueFormatter3 := new(string)
			if !attributesItem.CountryAttribute.ValueFormatter.IsUnknown() && !attributesItem.CountryAttribute.ValueFormatter.IsNull() {
				*valueFormatter3 = attributesItem.CountryAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter3 = nil
			}
			previewValueFormatter3 := new(string)
			if !attributesItem.CountryAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.CountryAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter3 = attributesItem.CountryAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter3 = nil
			}
			entityBuilderDisableEdit3 := new(bool)
			if !attributesItem.CountryAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.CountryAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit3 = attributesItem.CountryAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit3 = nil
			}
			protected3 := new(bool)
			if !attributesItem.CountryAttribute.Protected.IsUnknown() && !attributesItem.CountryAttribute.Protected.IsNull() {
				*protected3 = attributesItem.CountryAttribute.Protected.ValueBool()
			} else {
				protected3 = nil
			}
			var infoHelpers3 *shared.CountryAttributeInfoHelpers
			if attributesItem.CountryAttribute.InfoHelpers != nil {
				hintText3 := new(string)
				if !attributesItem.CountryAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.CountryAttribute.InfoHelpers.HintText.IsNull() {
					*hintText3 = attributesItem.CountryAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText3 = nil
				}
				hintTextKey3 := new(string)
				if !attributesItem.CountryAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.CountryAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey3 = attributesItem.CountryAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey3 = nil
				}
				hintCustomComponent3 := new(string)
				if !attributesItem.CountryAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.CountryAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent3 = attributesItem.CountryAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent3 = nil
				}
				hintTooltipPlacement3 := new(string)
				if !attributesItem.CountryAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.CountryAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement3 = attributesItem.CountryAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement3 = nil
				}
				infoHelpers3 = &shared.CountryAttributeInfoHelpers{
					HintText:             hintText3,
					HintTextKey:          hintTextKey3,
					HintCustomComponent:  hintCustomComponent3,
					HintTooltipPlacement: hintTooltipPlacement3,
				}
			}
			repeatable3 := new(bool)
			if !attributesItem.CountryAttribute.Repeatable.IsUnknown() && !attributesItem.CountryAttribute.Repeatable.IsNull() {
				*repeatable3 = attributesItem.CountryAttribute.Repeatable.ValueBool()
			} else {
				repeatable3 = nil
			}
			hasPrimary3 := new(bool)
			if !attributesItem.CountryAttribute.HasPrimary.IsUnknown() && !attributesItem.CountryAttribute.HasPrimary.IsNull() {
				*hasPrimary3 = attributesItem.CountryAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary3 = nil
			}
			typeVar3 := shared.CountryAttributeType(attributesItem.CountryAttribute.Type.ValueString())
			countryAttribute := shared.CountryAttribute{
				ID:                       id4,
				Name:                     name7,
				Label:                    label3,
				Placeholder:              placeholder3,
				Hidden:                   hidden3,
				ShowInTable:              showInTable3,
				Sortable:                 sortable3,
				Required:                 required3,
				Readonly:                 readonly3,
				Deprecated:               deprecated3,
				DefaultValue:             defaultValue3,
				Group:                    group3,
				Order:                    order3,
				Layout:                   layout3,
				HideLabel:                hideLabel3,
				Icon:                     icon3,
				RenderCondition:          renderCondition3,
				Purpose:                  purpose3,
				Manifest:                 manifest3,
				Constraints:              constraints3,
				FeatureFlag:              featureFlag3,
				SettingsFlag:             settingsFlag3,
				ValueFormatter:           valueFormatter3,
				PreviewValueFormatter:    previewValueFormatter3,
				EntityBuilderDisableEdit: entityBuilderDisableEdit3,
				Protected:                protected3,
				InfoHelpers:              infoHelpers3,
				Repeatable:               repeatable3,
				HasPrimary:               hasPrimary3,
				Type:                     typeVar3,
			}
			attributes = append(attributes, shared.AttributeInput{
				CountryAttribute: &countryAttribute,
			})
		}
		if attributesItem.BooleanAttribute != nil {
			id5 := new(string)
			if !attributesItem.BooleanAttribute.ID.IsUnknown() && !attributesItem.BooleanAttribute.ID.IsNull() {
				*id5 = attributesItem.BooleanAttribute.ID.ValueString()
			} else {
				id5 = nil
			}
			var name9 string
			name9 = attributesItem.BooleanAttribute.Name.ValueString()

			var label4 string
			label4 = attributesItem.BooleanAttribute.Label.ValueString()

			placeholder4 := new(string)
			if !attributesItem.BooleanAttribute.Placeholder.IsUnknown() && !attributesItem.BooleanAttribute.Placeholder.IsNull() {
				*placeholder4 = attributesItem.BooleanAttribute.Placeholder.ValueString()
			} else {
				placeholder4 = nil
			}
			hidden4 := new(bool)
			if !attributesItem.BooleanAttribute.Hidden.IsUnknown() && !attributesItem.BooleanAttribute.Hidden.IsNull() {
				*hidden4 = attributesItem.BooleanAttribute.Hidden.ValueBool()
			} else {
				hidden4 = nil
			}
			showInTable4 := new(bool)
			if !attributesItem.BooleanAttribute.ShowInTable.IsUnknown() && !attributesItem.BooleanAttribute.ShowInTable.IsNull() {
				*showInTable4 = attributesItem.BooleanAttribute.ShowInTable.ValueBool()
			} else {
				showInTable4 = nil
			}
			sortable4 := new(bool)
			if !attributesItem.BooleanAttribute.Sortable.IsUnknown() && !attributesItem.BooleanAttribute.Sortable.IsNull() {
				*sortable4 = attributesItem.BooleanAttribute.Sortable.ValueBool()
			} else {
				sortable4 = nil
			}
			required4 := new(bool)
			if !attributesItem.BooleanAttribute.Required.IsUnknown() && !attributesItem.BooleanAttribute.Required.IsNull() {
				*required4 = attributesItem.BooleanAttribute.Required.ValueBool()
			} else {
				required4 = nil
			}
			readonly4 := new(bool)
			if !attributesItem.BooleanAttribute.Readonly.IsUnknown() && !attributesItem.BooleanAttribute.Readonly.IsNull() {
				*readonly4 = attributesItem.BooleanAttribute.Readonly.ValueBool()
			} else {
				readonly4 = nil
			}
			deprecated4 := new(bool)
			if !attributesItem.BooleanAttribute.Deprecated.IsUnknown() && !attributesItem.BooleanAttribute.Deprecated.IsNull() {
				*deprecated4 = attributesItem.BooleanAttribute.Deprecated.ValueBool()
			} else {
				deprecated4 = nil
			}
			var defaultValue4 interface{}
			if !attributesItem.BooleanAttribute.DefaultValue.IsUnknown() && !attributesItem.BooleanAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.BooleanAttribute.DefaultValue.ValueString()), &defaultValue4)
			}
			group4 := new(string)
			if !attributesItem.BooleanAttribute.Group.IsUnknown() && !attributesItem.BooleanAttribute.Group.IsNull() {
				*group4 = attributesItem.BooleanAttribute.Group.ValueString()
			} else {
				group4 = nil
			}
			order4 := new(int64)
			if !attributesItem.BooleanAttribute.Order.IsUnknown() && !attributesItem.BooleanAttribute.Order.IsNull() {
				*order4 = attributesItem.BooleanAttribute.Order.ValueInt64()
			} else {
				order4 = nil
			}
			layout4 := new(string)
			if !attributesItem.BooleanAttribute.Layout.IsUnknown() && !attributesItem.BooleanAttribute.Layout.IsNull() {
				*layout4 = attributesItem.BooleanAttribute.Layout.ValueString()
			} else {
				layout4 = nil
			}
			hideLabel4 := new(bool)
			if !attributesItem.BooleanAttribute.HideLabel.IsUnknown() && !attributesItem.BooleanAttribute.HideLabel.IsNull() {
				*hideLabel4 = attributesItem.BooleanAttribute.HideLabel.ValueBool()
			} else {
				hideLabel4 = nil
			}
			icon4 := new(string)
			if !attributesItem.BooleanAttribute.Icon.IsUnknown() && !attributesItem.BooleanAttribute.Icon.IsNull() {
				*icon4 = attributesItem.BooleanAttribute.Icon.ValueString()
			} else {
				icon4 = nil
			}
			renderCondition4 := new(string)
			if !attributesItem.BooleanAttribute.RenderCondition.IsUnknown() && !attributesItem.BooleanAttribute.RenderCondition.IsNull() {
				*renderCondition4 = attributesItem.BooleanAttribute.RenderCondition.ValueString()
			} else {
				renderCondition4 = nil
			}
			purpose4 := make([]string, 0, len(attributesItem.BooleanAttribute.Purpose))
			for _, purposeItem4 := range attributesItem.BooleanAttribute.Purpose {
				purpose4 = append(purpose4, purposeItem4.ValueString())
			}
			var manifest4 []string
			if attributesItem.BooleanAttribute.Manifest != nil {
				manifest4 = make([]string, 0, len(attributesItem.BooleanAttribute.Manifest))
				for _, manifestItem4 := range attributesItem.BooleanAttribute.Manifest {
					manifest4 = append(manifest4, manifestItem4.ValueString())
				}
			}
			var constraints4 *shared.BooleanAttributeConstraints
			if attributesItem.BooleanAttribute.Constraints != nil {
				constraints4 = &shared.BooleanAttributeConstraints{}
			}
			featureFlag4 := new(string)
			if !attributesItem.BooleanAttribute.FeatureFlag.IsUnknown() && !attributesItem.BooleanAttribute.FeatureFlag.IsNull() {
				*featureFlag4 = attributesItem.BooleanAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag4 = nil
			}
			settingsFlag4 := make([]shared.SettingFlag, 0, len(attributesItem.BooleanAttribute.SettingsFlag))
			for _, settingsFlagItem4 := range attributesItem.BooleanAttribute.SettingsFlag {
				name10 := new(string)
				if !settingsFlagItem4.Name.IsUnknown() && !settingsFlagItem4.Name.IsNull() {
					*name10 = settingsFlagItem4.Name.ValueString()
				} else {
					name10 = nil
				}
				enabled4 := new(bool)
				if !settingsFlagItem4.Enabled.IsUnknown() && !settingsFlagItem4.Enabled.IsNull() {
					*enabled4 = settingsFlagItem4.Enabled.ValueBool()
				} else {
					enabled4 = nil
				}
				settingsFlag4 = append(settingsFlag4, shared.SettingFlag{
					Name:    name10,
					Enabled: enabled4,
				})
			}
			valueFormatter4 := new(string)
			if !attributesItem.BooleanAttribute.ValueFormatter.IsUnknown() && !attributesItem.BooleanAttribute.ValueFormatter.IsNull() {
				*valueFormatter4 = attributesItem.BooleanAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter4 = nil
			}
			previewValueFormatter4 := new(string)
			if !attributesItem.BooleanAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.BooleanAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter4 = attributesItem.BooleanAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter4 = nil
			}
			entityBuilderDisableEdit4 := new(bool)
			if !attributesItem.BooleanAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.BooleanAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit4 = attributesItem.BooleanAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit4 = nil
			}
			protected4 := new(bool)
			if !attributesItem.BooleanAttribute.Protected.IsUnknown() && !attributesItem.BooleanAttribute.Protected.IsNull() {
				*protected4 = attributesItem.BooleanAttribute.Protected.ValueBool()
			} else {
				protected4 = nil
			}
			var infoHelpers4 *shared.BooleanAttributeInfoHelpers
			if attributesItem.BooleanAttribute.InfoHelpers != nil {
				hintText4 := new(string)
				if !attributesItem.BooleanAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.BooleanAttribute.InfoHelpers.HintText.IsNull() {
					*hintText4 = attributesItem.BooleanAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText4 = nil
				}
				hintTextKey4 := new(string)
				if !attributesItem.BooleanAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.BooleanAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey4 = attributesItem.BooleanAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey4 = nil
				}
				hintCustomComponent4 := new(string)
				if !attributesItem.BooleanAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.BooleanAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent4 = attributesItem.BooleanAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent4 = nil
				}
				hintTooltipPlacement4 := new(string)
				if !attributesItem.BooleanAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.BooleanAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement4 = attributesItem.BooleanAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement4 = nil
				}
				infoHelpers4 = &shared.BooleanAttributeInfoHelpers{
					HintText:             hintText4,
					HintTextKey:          hintTextKey4,
					HintCustomComponent:  hintCustomComponent4,
					HintTooltipPlacement: hintTooltipPlacement4,
				}
			}
			repeatable4 := new(bool)
			if !attributesItem.BooleanAttribute.Repeatable.IsUnknown() && !attributesItem.BooleanAttribute.Repeatable.IsNull() {
				*repeatable4 = attributesItem.BooleanAttribute.Repeatable.ValueBool()
			} else {
				repeatable4 = nil
			}
			hasPrimary4 := new(bool)
			if !attributesItem.BooleanAttribute.HasPrimary.IsUnknown() && !attributesItem.BooleanAttribute.HasPrimary.IsNull() {
				*hasPrimary4 = attributesItem.BooleanAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary4 = nil
			}
			typeVar4 := shared.BooleanAttributeType(attributesItem.BooleanAttribute.Type.ValueString())
			displayType := new(shared.DisplayType)
			if !attributesItem.BooleanAttribute.DisplayType.IsUnknown() && !attributesItem.BooleanAttribute.DisplayType.IsNull() {
				*displayType = shared.DisplayType(attributesItem.BooleanAttribute.DisplayType.ValueString())
			} else {
				displayType = nil
			}
			booleanAttribute := shared.BooleanAttribute{
				ID:                       id5,
				Name:                     name9,
				Label:                    label4,
				Placeholder:              placeholder4,
				Hidden:                   hidden4,
				ShowInTable:              showInTable4,
				Sortable:                 sortable4,
				Required:                 required4,
				Readonly:                 readonly4,
				Deprecated:               deprecated4,
				DefaultValue:             defaultValue4,
				Group:                    group4,
				Order:                    order4,
				Layout:                   layout4,
				HideLabel:                hideLabel4,
				Icon:                     icon4,
				RenderCondition:          renderCondition4,
				Purpose:                  purpose4,
				Manifest:                 manifest4,
				Constraints:              constraints4,
				FeatureFlag:              featureFlag4,
				SettingsFlag:             settingsFlag4,
				ValueFormatter:           valueFormatter4,
				PreviewValueFormatter:    previewValueFormatter4,
				EntityBuilderDisableEdit: entityBuilderDisableEdit4,
				Protected:                protected4,
				InfoHelpers:              infoHelpers4,
				Repeatable:               repeatable4,
				HasPrimary:               hasPrimary4,
				Type:                     typeVar4,
				DisplayType:              displayType,
			}
			attributes = append(attributes, shared.AttributeInput{
				BooleanAttribute: &booleanAttribute,
			})
		}
		if attributesItem.SelectAttribute != nil {
			id6 := new(string)
			if !attributesItem.SelectAttribute.ID.IsUnknown() && !attributesItem.SelectAttribute.ID.IsNull() {
				*id6 = attributesItem.SelectAttribute.ID.ValueString()
			} else {
				id6 = nil
			}
			var name11 string
			name11 = attributesItem.SelectAttribute.Name.ValueString()

			var label5 string
			label5 = attributesItem.SelectAttribute.Label.ValueString()

			placeholder5 := new(string)
			if !attributesItem.SelectAttribute.Placeholder.IsUnknown() && !attributesItem.SelectAttribute.Placeholder.IsNull() {
				*placeholder5 = attributesItem.SelectAttribute.Placeholder.ValueString()
			} else {
				placeholder5 = nil
			}
			hidden5 := new(bool)
			if !attributesItem.SelectAttribute.Hidden.IsUnknown() && !attributesItem.SelectAttribute.Hidden.IsNull() {
				*hidden5 = attributesItem.SelectAttribute.Hidden.ValueBool()
			} else {
				hidden5 = nil
			}
			showInTable5 := new(bool)
			if !attributesItem.SelectAttribute.ShowInTable.IsUnknown() && !attributesItem.SelectAttribute.ShowInTable.IsNull() {
				*showInTable5 = attributesItem.SelectAttribute.ShowInTable.ValueBool()
			} else {
				showInTable5 = nil
			}
			sortable5 := new(bool)
			if !attributesItem.SelectAttribute.Sortable.IsUnknown() && !attributesItem.SelectAttribute.Sortable.IsNull() {
				*sortable5 = attributesItem.SelectAttribute.Sortable.ValueBool()
			} else {
				sortable5 = nil
			}
			required5 := new(bool)
			if !attributesItem.SelectAttribute.Required.IsUnknown() && !attributesItem.SelectAttribute.Required.IsNull() {
				*required5 = attributesItem.SelectAttribute.Required.ValueBool()
			} else {
				required5 = nil
			}
			readonly5 := new(bool)
			if !attributesItem.SelectAttribute.Readonly.IsUnknown() && !attributesItem.SelectAttribute.Readonly.IsNull() {
				*readonly5 = attributesItem.SelectAttribute.Readonly.ValueBool()
			} else {
				readonly5 = nil
			}
			deprecated5 := new(bool)
			if !attributesItem.SelectAttribute.Deprecated.IsUnknown() && !attributesItem.SelectAttribute.Deprecated.IsNull() {
				*deprecated5 = attributesItem.SelectAttribute.Deprecated.ValueBool()
			} else {
				deprecated5 = nil
			}
			var defaultValue5 interface{}
			if !attributesItem.SelectAttribute.DefaultValue.IsUnknown() && !attributesItem.SelectAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.SelectAttribute.DefaultValue.ValueString()), &defaultValue5)
			}
			group5 := new(string)
			if !attributesItem.SelectAttribute.Group.IsUnknown() && !attributesItem.SelectAttribute.Group.IsNull() {
				*group5 = attributesItem.SelectAttribute.Group.ValueString()
			} else {
				group5 = nil
			}
			order5 := new(int64)
			if !attributesItem.SelectAttribute.Order.IsUnknown() && !attributesItem.SelectAttribute.Order.IsNull() {
				*order5 = attributesItem.SelectAttribute.Order.ValueInt64()
			} else {
				order5 = nil
			}
			layout5 := new(string)
			if !attributesItem.SelectAttribute.Layout.IsUnknown() && !attributesItem.SelectAttribute.Layout.IsNull() {
				*layout5 = attributesItem.SelectAttribute.Layout.ValueString()
			} else {
				layout5 = nil
			}
			hideLabel5 := new(bool)
			if !attributesItem.SelectAttribute.HideLabel.IsUnknown() && !attributesItem.SelectAttribute.HideLabel.IsNull() {
				*hideLabel5 = attributesItem.SelectAttribute.HideLabel.ValueBool()
			} else {
				hideLabel5 = nil
			}
			icon5 := new(string)
			if !attributesItem.SelectAttribute.Icon.IsUnknown() && !attributesItem.SelectAttribute.Icon.IsNull() {
				*icon5 = attributesItem.SelectAttribute.Icon.ValueString()
			} else {
				icon5 = nil
			}
			renderCondition5 := new(string)
			if !attributesItem.SelectAttribute.RenderCondition.IsUnknown() && !attributesItem.SelectAttribute.RenderCondition.IsNull() {
				*renderCondition5 = attributesItem.SelectAttribute.RenderCondition.ValueString()
			} else {
				renderCondition5 = nil
			}
			purpose5 := make([]string, 0, len(attributesItem.SelectAttribute.Purpose))
			for _, purposeItem5 := range attributesItem.SelectAttribute.Purpose {
				purpose5 = append(purpose5, purposeItem5.ValueString())
			}
			var manifest5 []string
			if attributesItem.SelectAttribute.Manifest != nil {
				manifest5 = make([]string, 0, len(attributesItem.SelectAttribute.Manifest))
				for _, manifestItem5 := range attributesItem.SelectAttribute.Manifest {
					manifest5 = append(manifest5, manifestItem5.ValueString())
				}
			}
			var constraints5 *shared.SelectAttributeConstraints
			if attributesItem.SelectAttribute.Constraints != nil {
				constraints5 = &shared.SelectAttributeConstraints{}
			}
			featureFlag5 := new(string)
			if !attributesItem.SelectAttribute.FeatureFlag.IsUnknown() && !attributesItem.SelectAttribute.FeatureFlag.IsNull() {
				*featureFlag5 = attributesItem.SelectAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag5 = nil
			}
			settingsFlag5 := make([]shared.SettingFlag, 0, len(attributesItem.SelectAttribute.SettingsFlag))
			for _, settingsFlagItem5 := range attributesItem.SelectAttribute.SettingsFlag {
				name12 := new(string)
				if !settingsFlagItem5.Name.IsUnknown() && !settingsFlagItem5.Name.IsNull() {
					*name12 = settingsFlagItem5.Name.ValueString()
				} else {
					name12 = nil
				}
				enabled5 := new(bool)
				if !settingsFlagItem5.Enabled.IsUnknown() && !settingsFlagItem5.Enabled.IsNull() {
					*enabled5 = settingsFlagItem5.Enabled.ValueBool()
				} else {
					enabled5 = nil
				}
				settingsFlag5 = append(settingsFlag5, shared.SettingFlag{
					Name:    name12,
					Enabled: enabled5,
				})
			}
			valueFormatter5 := new(string)
			if !attributesItem.SelectAttribute.ValueFormatter.IsUnknown() && !attributesItem.SelectAttribute.ValueFormatter.IsNull() {
				*valueFormatter5 = attributesItem.SelectAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter5 = nil
			}
			previewValueFormatter5 := new(string)
			if !attributesItem.SelectAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.SelectAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter5 = attributesItem.SelectAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter5 = nil
			}
			entityBuilderDisableEdit5 := new(bool)
			if !attributesItem.SelectAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.SelectAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit5 = attributesItem.SelectAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit5 = nil
			}
			protected5 := new(bool)
			if !attributesItem.SelectAttribute.Protected.IsUnknown() && !attributesItem.SelectAttribute.Protected.IsNull() {
				*protected5 = attributesItem.SelectAttribute.Protected.ValueBool()
			} else {
				protected5 = nil
			}
			var infoHelpers5 *shared.SelectAttributeInfoHelpers
			if attributesItem.SelectAttribute.InfoHelpers != nil {
				hintText5 := new(string)
				if !attributesItem.SelectAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.SelectAttribute.InfoHelpers.HintText.IsNull() {
					*hintText5 = attributesItem.SelectAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText5 = nil
				}
				hintTextKey5 := new(string)
				if !attributesItem.SelectAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.SelectAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey5 = attributesItem.SelectAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey5 = nil
				}
				hintCustomComponent5 := new(string)
				if !attributesItem.SelectAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.SelectAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent5 = attributesItem.SelectAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent5 = nil
				}
				hintTooltipPlacement5 := new(string)
				if !attributesItem.SelectAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.SelectAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement5 = attributesItem.SelectAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement5 = nil
				}
				infoHelpers5 = &shared.SelectAttributeInfoHelpers{
					HintText:             hintText5,
					HintTextKey:          hintTextKey5,
					HintCustomComponent:  hintCustomComponent5,
					HintTooltipPlacement: hintTooltipPlacement5,
				}
			}
			repeatable5 := new(bool)
			if !attributesItem.SelectAttribute.Repeatable.IsUnknown() && !attributesItem.SelectAttribute.Repeatable.IsNull() {
				*repeatable5 = attributesItem.SelectAttribute.Repeatable.ValueBool()
			} else {
				repeatable5 = nil
			}
			hasPrimary5 := new(bool)
			if !attributesItem.SelectAttribute.HasPrimary.IsUnknown() && !attributesItem.SelectAttribute.HasPrimary.IsNull() {
				*hasPrimary5 = attributesItem.SelectAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary5 = nil
			}
			typeVar5 := shared.SelectAttributeType(attributesItem.SelectAttribute.Type.ValueString())
			var optionsVar interface{}
			if !attributesItem.SelectAttribute.Options.IsUnknown() && !attributesItem.SelectAttribute.Options.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.SelectAttribute.Options.ValueString()), &optionsVar)
			}
			allowAny := new(bool)
			if !attributesItem.SelectAttribute.AllowAny.IsUnknown() && !attributesItem.SelectAttribute.AllowAny.IsNull() {
				*allowAny = attributesItem.SelectAttribute.AllowAny.ValueBool()
			} else {
				allowAny = nil
			}
			selectAttribute := shared.SelectAttribute{
				ID:                       id6,
				Name:                     name11,
				Label:                    label5,
				Placeholder:              placeholder5,
				Hidden:                   hidden5,
				ShowInTable:              showInTable5,
				Sortable:                 sortable5,
				Required:                 required5,
				Readonly:                 readonly5,
				Deprecated:               deprecated5,
				DefaultValue:             defaultValue5,
				Group:                    group5,
				Order:                    order5,
				Layout:                   layout5,
				HideLabel:                hideLabel5,
				Icon:                     icon5,
				RenderCondition:          renderCondition5,
				Purpose:                  purpose5,
				Manifest:                 manifest5,
				Constraints:              constraints5,
				FeatureFlag:              featureFlag5,
				SettingsFlag:             settingsFlag5,
				ValueFormatter:           valueFormatter5,
				PreviewValueFormatter:    previewValueFormatter5,
				EntityBuilderDisableEdit: entityBuilderDisableEdit5,
				Protected:                protected5,
				InfoHelpers:              infoHelpers5,
				Repeatable:               repeatable5,
				HasPrimary:               hasPrimary5,
				Type:                     typeVar5,
				Options:                  optionsVar,
				AllowAny:                 allowAny,
			}
			attributes = append(attributes, shared.AttributeInput{
				SelectAttribute: &selectAttribute,
			})
		}
		if attributesItem.MultiSelectAttribute != nil {
			id7 := new(string)
			if !attributesItem.MultiSelectAttribute.ID.IsUnknown() && !attributesItem.MultiSelectAttribute.ID.IsNull() {
				*id7 = attributesItem.MultiSelectAttribute.ID.ValueString()
			} else {
				id7 = nil
			}
			var name13 string
			name13 = attributesItem.MultiSelectAttribute.Name.ValueString()

			var label6 string
			label6 = attributesItem.MultiSelectAttribute.Label.ValueString()

			placeholder6 := new(string)
			if !attributesItem.MultiSelectAttribute.Placeholder.IsUnknown() && !attributesItem.MultiSelectAttribute.Placeholder.IsNull() {
				*placeholder6 = attributesItem.MultiSelectAttribute.Placeholder.ValueString()
			} else {
				placeholder6 = nil
			}
			hidden6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Hidden.IsUnknown() && !attributesItem.MultiSelectAttribute.Hidden.IsNull() {
				*hidden6 = attributesItem.MultiSelectAttribute.Hidden.ValueBool()
			} else {
				hidden6 = nil
			}
			showInTable6 := new(bool)
			if !attributesItem.MultiSelectAttribute.ShowInTable.IsUnknown() && !attributesItem.MultiSelectAttribute.ShowInTable.IsNull() {
				*showInTable6 = attributesItem.MultiSelectAttribute.ShowInTable.ValueBool()
			} else {
				showInTable6 = nil
			}
			sortable6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Sortable.IsUnknown() && !attributesItem.MultiSelectAttribute.Sortable.IsNull() {
				*sortable6 = attributesItem.MultiSelectAttribute.Sortable.ValueBool()
			} else {
				sortable6 = nil
			}
			required6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Required.IsUnknown() && !attributesItem.MultiSelectAttribute.Required.IsNull() {
				*required6 = attributesItem.MultiSelectAttribute.Required.ValueBool()
			} else {
				required6 = nil
			}
			readonly6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Readonly.IsUnknown() && !attributesItem.MultiSelectAttribute.Readonly.IsNull() {
				*readonly6 = attributesItem.MultiSelectAttribute.Readonly.ValueBool()
			} else {
				readonly6 = nil
			}
			deprecated6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Deprecated.IsUnknown() && !attributesItem.MultiSelectAttribute.Deprecated.IsNull() {
				*deprecated6 = attributesItem.MultiSelectAttribute.Deprecated.ValueBool()
			} else {
				deprecated6 = nil
			}
			var defaultValue6 interface{}
			if !attributesItem.MultiSelectAttribute.DefaultValue.IsUnknown() && !attributesItem.MultiSelectAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.MultiSelectAttribute.DefaultValue.ValueString()), &defaultValue6)
			}
			group6 := new(string)
			if !attributesItem.MultiSelectAttribute.Group.IsUnknown() && !attributesItem.MultiSelectAttribute.Group.IsNull() {
				*group6 = attributesItem.MultiSelectAttribute.Group.ValueString()
			} else {
				group6 = nil
			}
			order6 := new(int64)
			if !attributesItem.MultiSelectAttribute.Order.IsUnknown() && !attributesItem.MultiSelectAttribute.Order.IsNull() {
				*order6 = attributesItem.MultiSelectAttribute.Order.ValueInt64()
			} else {
				order6 = nil
			}
			layout6 := new(string)
			if !attributesItem.MultiSelectAttribute.Layout.IsUnknown() && !attributesItem.MultiSelectAttribute.Layout.IsNull() {
				*layout6 = attributesItem.MultiSelectAttribute.Layout.ValueString()
			} else {
				layout6 = nil
			}
			hideLabel6 := new(bool)
			if !attributesItem.MultiSelectAttribute.HideLabel.IsUnknown() && !attributesItem.MultiSelectAttribute.HideLabel.IsNull() {
				*hideLabel6 = attributesItem.MultiSelectAttribute.HideLabel.ValueBool()
			} else {
				hideLabel6 = nil
			}
			icon6 := new(string)
			if !attributesItem.MultiSelectAttribute.Icon.IsUnknown() && !attributesItem.MultiSelectAttribute.Icon.IsNull() {
				*icon6 = attributesItem.MultiSelectAttribute.Icon.ValueString()
			} else {
				icon6 = nil
			}
			renderCondition6 := new(string)
			if !attributesItem.MultiSelectAttribute.RenderCondition.IsUnknown() && !attributesItem.MultiSelectAttribute.RenderCondition.IsNull() {
				*renderCondition6 = attributesItem.MultiSelectAttribute.RenderCondition.ValueString()
			} else {
				renderCondition6 = nil
			}
			purpose6 := make([]string, 0, len(attributesItem.MultiSelectAttribute.Purpose))
			for _, purposeItem6 := range attributesItem.MultiSelectAttribute.Purpose {
				purpose6 = append(purpose6, purposeItem6.ValueString())
			}
			var manifest6 []string
			if attributesItem.MultiSelectAttribute.Manifest != nil {
				manifest6 = make([]string, 0, len(attributesItem.MultiSelectAttribute.Manifest))
				for _, manifestItem6 := range attributesItem.MultiSelectAttribute.Manifest {
					manifest6 = append(manifest6, manifestItem6.ValueString())
				}
			}
			var constraints6 *shared.MultiSelectAttributeConstraints
			if attributesItem.MultiSelectAttribute.Constraints != nil {
				constraints6 = &shared.MultiSelectAttributeConstraints{}
			}
			featureFlag6 := new(string)
			if !attributesItem.MultiSelectAttribute.FeatureFlag.IsUnknown() && !attributesItem.MultiSelectAttribute.FeatureFlag.IsNull() {
				*featureFlag6 = attributesItem.MultiSelectAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag6 = nil
			}
			settingsFlag6 := make([]shared.SettingFlag, 0, len(attributesItem.MultiSelectAttribute.SettingsFlag))
			for _, settingsFlagItem6 := range attributesItem.MultiSelectAttribute.SettingsFlag {
				name14 := new(string)
				if !settingsFlagItem6.Name.IsUnknown() && !settingsFlagItem6.Name.IsNull() {
					*name14 = settingsFlagItem6.Name.ValueString()
				} else {
					name14 = nil
				}
				enabled6 := new(bool)
				if !settingsFlagItem6.Enabled.IsUnknown() && !settingsFlagItem6.Enabled.IsNull() {
					*enabled6 = settingsFlagItem6.Enabled.ValueBool()
				} else {
					enabled6 = nil
				}
				settingsFlag6 = append(settingsFlag6, shared.SettingFlag{
					Name:    name14,
					Enabled: enabled6,
				})
			}
			valueFormatter6 := new(string)
			if !attributesItem.MultiSelectAttribute.ValueFormatter.IsUnknown() && !attributesItem.MultiSelectAttribute.ValueFormatter.IsNull() {
				*valueFormatter6 = attributesItem.MultiSelectAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter6 = nil
			}
			previewValueFormatter6 := new(string)
			if !attributesItem.MultiSelectAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.MultiSelectAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter6 = attributesItem.MultiSelectAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter6 = nil
			}
			entityBuilderDisableEdit6 := new(bool)
			if !attributesItem.MultiSelectAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.MultiSelectAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit6 = attributesItem.MultiSelectAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit6 = nil
			}
			protected6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Protected.IsUnknown() && !attributesItem.MultiSelectAttribute.Protected.IsNull() {
				*protected6 = attributesItem.MultiSelectAttribute.Protected.ValueBool()
			} else {
				protected6 = nil
			}
			var infoHelpers6 *shared.MultiSelectAttributeInfoHelpers
			if attributesItem.MultiSelectAttribute.InfoHelpers != nil {
				hintText6 := new(string)
				if !attributesItem.MultiSelectAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.MultiSelectAttribute.InfoHelpers.HintText.IsNull() {
					*hintText6 = attributesItem.MultiSelectAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText6 = nil
				}
				hintTextKey6 := new(string)
				if !attributesItem.MultiSelectAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.MultiSelectAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey6 = attributesItem.MultiSelectAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey6 = nil
				}
				hintCustomComponent6 := new(string)
				if !attributesItem.MultiSelectAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.MultiSelectAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent6 = attributesItem.MultiSelectAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent6 = nil
				}
				hintTooltipPlacement6 := new(string)
				if !attributesItem.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement6 = attributesItem.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement6 = nil
				}
				infoHelpers6 = &shared.MultiSelectAttributeInfoHelpers{
					HintText:             hintText6,
					HintTextKey:          hintTextKey6,
					HintCustomComponent:  hintCustomComponent6,
					HintTooltipPlacement: hintTooltipPlacement6,
				}
			}
			repeatable6 := new(bool)
			if !attributesItem.MultiSelectAttribute.Repeatable.IsUnknown() && !attributesItem.MultiSelectAttribute.Repeatable.IsNull() {
				*repeatable6 = attributesItem.MultiSelectAttribute.Repeatable.ValueBool()
			} else {
				repeatable6 = nil
			}
			hasPrimary6 := new(bool)
			if !attributesItem.MultiSelectAttribute.HasPrimary.IsUnknown() && !attributesItem.MultiSelectAttribute.HasPrimary.IsNull() {
				*hasPrimary6 = attributesItem.MultiSelectAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary6 = nil
			}
			typeVar6 := shared.MultiSelectAttributeType(attributesItem.MultiSelectAttribute.Type.ValueString())
			disableCaseSensitive := new(bool)
			if !attributesItem.MultiSelectAttribute.DisableCaseSensitive.IsUnknown() && !attributesItem.MultiSelectAttribute.DisableCaseSensitive.IsNull() {
				*disableCaseSensitive = attributesItem.MultiSelectAttribute.DisableCaseSensitive.ValueBool()
			} else {
				disableCaseSensitive = nil
			}
			allowExtraOptions := new(bool)
			if !attributesItem.MultiSelectAttribute.AllowExtraOptions.IsUnknown() && !attributesItem.MultiSelectAttribute.AllowExtraOptions.IsNull() {
				*allowExtraOptions = attributesItem.MultiSelectAttribute.AllowExtraOptions.ValueBool()
			} else {
				allowExtraOptions = nil
			}
			optionsVar1 := make([]*shared.OptionsObj, 0, len(attributesItem.MultiSelectAttribute.Options))
			for _, optionsItem := range attributesItem.MultiSelectAttribute.Options {
				if !optionsItem.Str.IsUnknown() && !optionsItem.Str.IsNull() {
					var str string
					str = optionsItem.Str.ValueString()

					optionsVar1 = append(optionsVar1, &shared.OptionsObj{
						Str: &str,
					})
				}
				if optionsItem.Two != nil {
					var value string
					value = optionsItem.Two.Value.ValueString()

					title1 := new(string)
					if !optionsItem.Two.Title.IsUnknown() && !optionsItem.Two.Title.IsNull() {
						*title1 = optionsItem.Two.Title.ValueString()
					} else {
						title1 = nil
					}
					options2 := shared.Options2{
						Value: value,
						Title: title1,
					}
					optionsVar1 = append(optionsVar1, &shared.OptionsObj{
						Options2: &options2,
					})
				}
			}
			allowAny1 := new(bool)
			if !attributesItem.MultiSelectAttribute.AllowAny.IsUnknown() && !attributesItem.MultiSelectAttribute.AllowAny.IsNull() {
				*allowAny1 = attributesItem.MultiSelectAttribute.AllowAny.ValueBool()
			} else {
				allowAny1 = nil
			}
			multiSelectAttribute := shared.MultiSelectAttribute{
				ID:                       id7,
				Name:                     name13,
				Label:                    label6,
				Placeholder:              placeholder6,
				Hidden:                   hidden6,
				ShowInTable:              showInTable6,
				Sortable:                 sortable6,
				Required:                 required6,
				Readonly:                 readonly6,
				Deprecated:               deprecated6,
				DefaultValue:             defaultValue6,
				Group:                    group6,
				Order:                    order6,
				Layout:                   layout6,
				HideLabel:                hideLabel6,
				Icon:                     icon6,
				RenderCondition:          renderCondition6,
				Purpose:                  purpose6,
				Manifest:                 manifest6,
				Constraints:              constraints6,
				FeatureFlag:              featureFlag6,
				SettingsFlag:             settingsFlag6,
				ValueFormatter:           valueFormatter6,
				PreviewValueFormatter:    previewValueFormatter6,
				EntityBuilderDisableEdit: entityBuilderDisableEdit6,
				Protected:                protected6,
				InfoHelpers:              infoHelpers6,
				Repeatable:               repeatable6,
				HasPrimary:               hasPrimary6,
				Type:                     typeVar6,
				DisableCaseSensitive:     disableCaseSensitive,
				AllowExtraOptions:        allowExtraOptions,
				Options:                  optionsVar1,
				AllowAny:                 allowAny1,
			}
			attributes = append(attributes, shared.AttributeInput{
				MultiSelectAttribute: &multiSelectAttribute,
			})
		}
		if attributesItem.StatusAttribute != nil {
			id8 := new(string)
			if !attributesItem.StatusAttribute.ID.IsUnknown() && !attributesItem.StatusAttribute.ID.IsNull() {
				*id8 = attributesItem.StatusAttribute.ID.ValueString()
			} else {
				id8 = nil
			}
			var name15 string
			name15 = attributesItem.StatusAttribute.Name.ValueString()

			var label7 string
			label7 = attributesItem.StatusAttribute.Label.ValueString()

			placeholder7 := new(string)
			if !attributesItem.StatusAttribute.Placeholder.IsUnknown() && !attributesItem.StatusAttribute.Placeholder.IsNull() {
				*placeholder7 = attributesItem.StatusAttribute.Placeholder.ValueString()
			} else {
				placeholder7 = nil
			}
			hidden7 := new(bool)
			if !attributesItem.StatusAttribute.Hidden.IsUnknown() && !attributesItem.StatusAttribute.Hidden.IsNull() {
				*hidden7 = attributesItem.StatusAttribute.Hidden.ValueBool()
			} else {
				hidden7 = nil
			}
			showInTable7 := new(bool)
			if !attributesItem.StatusAttribute.ShowInTable.IsUnknown() && !attributesItem.StatusAttribute.ShowInTable.IsNull() {
				*showInTable7 = attributesItem.StatusAttribute.ShowInTable.ValueBool()
			} else {
				showInTable7 = nil
			}
			sortable7 := new(bool)
			if !attributesItem.StatusAttribute.Sortable.IsUnknown() && !attributesItem.StatusAttribute.Sortable.IsNull() {
				*sortable7 = attributesItem.StatusAttribute.Sortable.ValueBool()
			} else {
				sortable7 = nil
			}
			required7 := new(bool)
			if !attributesItem.StatusAttribute.Required.IsUnknown() && !attributesItem.StatusAttribute.Required.IsNull() {
				*required7 = attributesItem.StatusAttribute.Required.ValueBool()
			} else {
				required7 = nil
			}
			readonly7 := new(bool)
			if !attributesItem.StatusAttribute.Readonly.IsUnknown() && !attributesItem.StatusAttribute.Readonly.IsNull() {
				*readonly7 = attributesItem.StatusAttribute.Readonly.ValueBool()
			} else {
				readonly7 = nil
			}
			deprecated7 := new(bool)
			if !attributesItem.StatusAttribute.Deprecated.IsUnknown() && !attributesItem.StatusAttribute.Deprecated.IsNull() {
				*deprecated7 = attributesItem.StatusAttribute.Deprecated.ValueBool()
			} else {
				deprecated7 = nil
			}
			var defaultValue7 interface{}
			if !attributesItem.StatusAttribute.DefaultValue.IsUnknown() && !attributesItem.StatusAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.StatusAttribute.DefaultValue.ValueString()), &defaultValue7)
			}
			group7 := new(string)
			if !attributesItem.StatusAttribute.Group.IsUnknown() && !attributesItem.StatusAttribute.Group.IsNull() {
				*group7 = attributesItem.StatusAttribute.Group.ValueString()
			} else {
				group7 = nil
			}
			order7 := new(int64)
			if !attributesItem.StatusAttribute.Order.IsUnknown() && !attributesItem.StatusAttribute.Order.IsNull() {
				*order7 = attributesItem.StatusAttribute.Order.ValueInt64()
			} else {
				order7 = nil
			}
			layout7 := new(string)
			if !attributesItem.StatusAttribute.Layout.IsUnknown() && !attributesItem.StatusAttribute.Layout.IsNull() {
				*layout7 = attributesItem.StatusAttribute.Layout.ValueString()
			} else {
				layout7 = nil
			}
			hideLabel7 := new(bool)
			if !attributesItem.StatusAttribute.HideLabel.IsUnknown() && !attributesItem.StatusAttribute.HideLabel.IsNull() {
				*hideLabel7 = attributesItem.StatusAttribute.HideLabel.ValueBool()
			} else {
				hideLabel7 = nil
			}
			icon7 := new(string)
			if !attributesItem.StatusAttribute.Icon.IsUnknown() && !attributesItem.StatusAttribute.Icon.IsNull() {
				*icon7 = attributesItem.StatusAttribute.Icon.ValueString()
			} else {
				icon7 = nil
			}
			renderCondition7 := new(string)
			if !attributesItem.StatusAttribute.RenderCondition.IsUnknown() && !attributesItem.StatusAttribute.RenderCondition.IsNull() {
				*renderCondition7 = attributesItem.StatusAttribute.RenderCondition.ValueString()
			} else {
				renderCondition7 = nil
			}
			purpose7 := make([]string, 0, len(attributesItem.StatusAttribute.Purpose))
			for _, purposeItem7 := range attributesItem.StatusAttribute.Purpose {
				purpose7 = append(purpose7, purposeItem7.ValueString())
			}
			var manifest7 []string
			if attributesItem.StatusAttribute.Manifest != nil {
				manifest7 = make([]string, 0, len(attributesItem.StatusAttribute.Manifest))
				for _, manifestItem7 := range attributesItem.StatusAttribute.Manifest {
					manifest7 = append(manifest7, manifestItem7.ValueString())
				}
			}
			var constraints7 *shared.StatusAttributeConstraints
			if attributesItem.StatusAttribute.Constraints != nil {
				constraints7 = &shared.StatusAttributeConstraints{}
			}
			featureFlag7 := new(string)
			if !attributesItem.StatusAttribute.FeatureFlag.IsUnknown() && !attributesItem.StatusAttribute.FeatureFlag.IsNull() {
				*featureFlag7 = attributesItem.StatusAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag7 = nil
			}
			settingsFlag7 := make([]shared.SettingFlag, 0, len(attributesItem.StatusAttribute.SettingsFlag))
			for _, settingsFlagItem7 := range attributesItem.StatusAttribute.SettingsFlag {
				name16 := new(string)
				if !settingsFlagItem7.Name.IsUnknown() && !settingsFlagItem7.Name.IsNull() {
					*name16 = settingsFlagItem7.Name.ValueString()
				} else {
					name16 = nil
				}
				enabled7 := new(bool)
				if !settingsFlagItem7.Enabled.IsUnknown() && !settingsFlagItem7.Enabled.IsNull() {
					*enabled7 = settingsFlagItem7.Enabled.ValueBool()
				} else {
					enabled7 = nil
				}
				settingsFlag7 = append(settingsFlag7, shared.SettingFlag{
					Name:    name16,
					Enabled: enabled7,
				})
			}
			valueFormatter7 := new(string)
			if !attributesItem.StatusAttribute.ValueFormatter.IsUnknown() && !attributesItem.StatusAttribute.ValueFormatter.IsNull() {
				*valueFormatter7 = attributesItem.StatusAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter7 = nil
			}
			previewValueFormatter7 := new(string)
			if !attributesItem.StatusAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.StatusAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter7 = attributesItem.StatusAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter7 = nil
			}
			entityBuilderDisableEdit7 := new(bool)
			if !attributesItem.StatusAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.StatusAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit7 = attributesItem.StatusAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit7 = nil
			}
			protected7 := new(bool)
			if !attributesItem.StatusAttribute.Protected.IsUnknown() && !attributesItem.StatusAttribute.Protected.IsNull() {
				*protected7 = attributesItem.StatusAttribute.Protected.ValueBool()
			} else {
				protected7 = nil
			}
			var infoHelpers7 *shared.StatusAttributeInfoHelpers
			if attributesItem.StatusAttribute.InfoHelpers != nil {
				hintText7 := new(string)
				if !attributesItem.StatusAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.StatusAttribute.InfoHelpers.HintText.IsNull() {
					*hintText7 = attributesItem.StatusAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText7 = nil
				}
				hintTextKey7 := new(string)
				if !attributesItem.StatusAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.StatusAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey7 = attributesItem.StatusAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey7 = nil
				}
				hintCustomComponent7 := new(string)
				if !attributesItem.StatusAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.StatusAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent7 = attributesItem.StatusAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent7 = nil
				}
				hintTooltipPlacement7 := new(string)
				if !attributesItem.StatusAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.StatusAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement7 = attributesItem.StatusAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement7 = nil
				}
				infoHelpers7 = &shared.StatusAttributeInfoHelpers{
					HintText:             hintText7,
					HintTextKey:          hintTextKey7,
					HintCustomComponent:  hintCustomComponent7,
					HintTooltipPlacement: hintTooltipPlacement7,
				}
			}
			repeatable7 := new(bool)
			if !attributesItem.StatusAttribute.Repeatable.IsUnknown() && !attributesItem.StatusAttribute.Repeatable.IsNull() {
				*repeatable7 = attributesItem.StatusAttribute.Repeatable.ValueBool()
			} else {
				repeatable7 = nil
			}
			hasPrimary7 := new(bool)
			if !attributesItem.StatusAttribute.HasPrimary.IsUnknown() && !attributesItem.StatusAttribute.HasPrimary.IsNull() {
				*hasPrimary7 = attributesItem.StatusAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary7 = nil
			}
			typeVar7 := shared.StatusAttributeType(attributesItem.StatusAttribute.Type.ValueString())
			optionsVar2 := make([]*shared.StatusAttributeOptions, 0, len(attributesItem.StatusAttribute.Options))
			for _, optionsItem1 := range attributesItem.StatusAttribute.Options {
				if !optionsItem1.Str.IsUnknown() && !optionsItem1.Str.IsNull() {
					var str1 string
					str1 = optionsItem1.Str.ValueString()

					optionsVar2 = append(optionsVar2, &shared.StatusAttributeOptions{
						Str: &str1,
					})
				}
				if optionsItem1.Two != nil {
					var value1 string
					value1 = optionsItem1.Two.Value.ValueString()

					title2 := new(string)
					if !optionsItem1.Two.Title.IsUnknown() && !optionsItem1.Two.Title.IsNull() {
						*title2 = optionsItem1.Two.Title.ValueString()
					} else {
						title2 = nil
					}
					statusAttributeOptions2 := shared.StatusAttributeOptions2{
						Value: value1,
						Title: title2,
					}
					optionsVar2 = append(optionsVar2, &shared.StatusAttributeOptions{
						StatusAttributeOptions2: &statusAttributeOptions2,
					})
				}
			}
			statusAttribute := shared.StatusAttribute{
				ID:                       id8,
				Name:                     name15,
				Label:                    label7,
				Placeholder:              placeholder7,
				Hidden:                   hidden7,
				ShowInTable:              showInTable7,
				Sortable:                 sortable7,
				Required:                 required7,
				Readonly:                 readonly7,
				Deprecated:               deprecated7,
				DefaultValue:             defaultValue7,
				Group:                    group7,
				Order:                    order7,
				Layout:                   layout7,
				HideLabel:                hideLabel7,
				Icon:                     icon7,
				RenderCondition:          renderCondition7,
				Purpose:                  purpose7,
				Manifest:                 manifest7,
				Constraints:              constraints7,
				FeatureFlag:              featureFlag7,
				SettingsFlag:             settingsFlag7,
				ValueFormatter:           valueFormatter7,
				PreviewValueFormatter:    previewValueFormatter7,
				EntityBuilderDisableEdit: entityBuilderDisableEdit7,
				Protected:                protected7,
				InfoHelpers:              infoHelpers7,
				Repeatable:               repeatable7,
				HasPrimary:               hasPrimary7,
				Type:                     typeVar7,
				Options:                  optionsVar2,
			}
			attributes = append(attributes, shared.AttributeInput{
				StatusAttribute: &statusAttribute,
			})
		}
		if attributesItem.SequenceAttribute != nil {
			id9 := new(string)
			if !attributesItem.SequenceAttribute.ID.IsUnknown() && !attributesItem.SequenceAttribute.ID.IsNull() {
				*id9 = attributesItem.SequenceAttribute.ID.ValueString()
			} else {
				id9 = nil
			}
			var name17 string
			name17 = attributesItem.SequenceAttribute.Name.ValueString()

			var label8 string
			label8 = attributesItem.SequenceAttribute.Label.ValueString()

			placeholder8 := new(string)
			if !attributesItem.SequenceAttribute.Placeholder.IsUnknown() && !attributesItem.SequenceAttribute.Placeholder.IsNull() {
				*placeholder8 = attributesItem.SequenceAttribute.Placeholder.ValueString()
			} else {
				placeholder8 = nil
			}
			hidden8 := new(bool)
			if !attributesItem.SequenceAttribute.Hidden.IsUnknown() && !attributesItem.SequenceAttribute.Hidden.IsNull() {
				*hidden8 = attributesItem.SequenceAttribute.Hidden.ValueBool()
			} else {
				hidden8 = nil
			}
			showInTable8 := new(bool)
			if !attributesItem.SequenceAttribute.ShowInTable.IsUnknown() && !attributesItem.SequenceAttribute.ShowInTable.IsNull() {
				*showInTable8 = attributesItem.SequenceAttribute.ShowInTable.ValueBool()
			} else {
				showInTable8 = nil
			}
			sortable8 := new(bool)
			if !attributesItem.SequenceAttribute.Sortable.IsUnknown() && !attributesItem.SequenceAttribute.Sortable.IsNull() {
				*sortable8 = attributesItem.SequenceAttribute.Sortable.ValueBool()
			} else {
				sortable8 = nil
			}
			required8 := new(bool)
			if !attributesItem.SequenceAttribute.Required.IsUnknown() && !attributesItem.SequenceAttribute.Required.IsNull() {
				*required8 = attributesItem.SequenceAttribute.Required.ValueBool()
			} else {
				required8 = nil
			}
			readonly8 := new(bool)
			if !attributesItem.SequenceAttribute.Readonly.IsUnknown() && !attributesItem.SequenceAttribute.Readonly.IsNull() {
				*readonly8 = attributesItem.SequenceAttribute.Readonly.ValueBool()
			} else {
				readonly8 = nil
			}
			deprecated8 := new(bool)
			if !attributesItem.SequenceAttribute.Deprecated.IsUnknown() && !attributesItem.SequenceAttribute.Deprecated.IsNull() {
				*deprecated8 = attributesItem.SequenceAttribute.Deprecated.ValueBool()
			} else {
				deprecated8 = nil
			}
			var defaultValue8 interface{}
			if !attributesItem.SequenceAttribute.DefaultValue.IsUnknown() && !attributesItem.SequenceAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.SequenceAttribute.DefaultValue.ValueString()), &defaultValue8)
			}
			group8 := new(string)
			if !attributesItem.SequenceAttribute.Group.IsUnknown() && !attributesItem.SequenceAttribute.Group.IsNull() {
				*group8 = attributesItem.SequenceAttribute.Group.ValueString()
			} else {
				group8 = nil
			}
			order8 := new(int64)
			if !attributesItem.SequenceAttribute.Order.IsUnknown() && !attributesItem.SequenceAttribute.Order.IsNull() {
				*order8 = attributesItem.SequenceAttribute.Order.ValueInt64()
			} else {
				order8 = nil
			}
			layout8 := new(string)
			if !attributesItem.SequenceAttribute.Layout.IsUnknown() && !attributesItem.SequenceAttribute.Layout.IsNull() {
				*layout8 = attributesItem.SequenceAttribute.Layout.ValueString()
			} else {
				layout8 = nil
			}
			hideLabel8 := new(bool)
			if !attributesItem.SequenceAttribute.HideLabel.IsUnknown() && !attributesItem.SequenceAttribute.HideLabel.IsNull() {
				*hideLabel8 = attributesItem.SequenceAttribute.HideLabel.ValueBool()
			} else {
				hideLabel8 = nil
			}
			icon8 := new(string)
			if !attributesItem.SequenceAttribute.Icon.IsUnknown() && !attributesItem.SequenceAttribute.Icon.IsNull() {
				*icon8 = attributesItem.SequenceAttribute.Icon.ValueString()
			} else {
				icon8 = nil
			}
			renderCondition8 := new(string)
			if !attributesItem.SequenceAttribute.RenderCondition.IsUnknown() && !attributesItem.SequenceAttribute.RenderCondition.IsNull() {
				*renderCondition8 = attributesItem.SequenceAttribute.RenderCondition.ValueString()
			} else {
				renderCondition8 = nil
			}
			purpose8 := make([]string, 0, len(attributesItem.SequenceAttribute.Purpose))
			for _, purposeItem8 := range attributesItem.SequenceAttribute.Purpose {
				purpose8 = append(purpose8, purposeItem8.ValueString())
			}
			var manifest8 []string
			if attributesItem.SequenceAttribute.Manifest != nil {
				manifest8 = make([]string, 0, len(attributesItem.SequenceAttribute.Manifest))
				for _, manifestItem8 := range attributesItem.SequenceAttribute.Manifest {
					manifest8 = append(manifest8, manifestItem8.ValueString())
				}
			}
			var constraints8 *shared.SequenceAttributeConstraints
			if attributesItem.SequenceAttribute.Constraints != nil {
				constraints8 = &shared.SequenceAttributeConstraints{}
			}
			featureFlag8 := new(string)
			if !attributesItem.SequenceAttribute.FeatureFlag.IsUnknown() && !attributesItem.SequenceAttribute.FeatureFlag.IsNull() {
				*featureFlag8 = attributesItem.SequenceAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag8 = nil
			}
			settingsFlag8 := make([]shared.SettingFlag, 0, len(attributesItem.SequenceAttribute.SettingsFlag))
			for _, settingsFlagItem8 := range attributesItem.SequenceAttribute.SettingsFlag {
				name18 := new(string)
				if !settingsFlagItem8.Name.IsUnknown() && !settingsFlagItem8.Name.IsNull() {
					*name18 = settingsFlagItem8.Name.ValueString()
				} else {
					name18 = nil
				}
				enabled8 := new(bool)
				if !settingsFlagItem8.Enabled.IsUnknown() && !settingsFlagItem8.Enabled.IsNull() {
					*enabled8 = settingsFlagItem8.Enabled.ValueBool()
				} else {
					enabled8 = nil
				}
				settingsFlag8 = append(settingsFlag8, shared.SettingFlag{
					Name:    name18,
					Enabled: enabled8,
				})
			}
			valueFormatter8 := new(string)
			if !attributesItem.SequenceAttribute.ValueFormatter.IsUnknown() && !attributesItem.SequenceAttribute.ValueFormatter.IsNull() {
				*valueFormatter8 = attributesItem.SequenceAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter8 = nil
			}
			previewValueFormatter8 := new(string)
			if !attributesItem.SequenceAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.SequenceAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter8 = attributesItem.SequenceAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter8 = nil
			}
			entityBuilderDisableEdit8 := new(bool)
			if !attributesItem.SequenceAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.SequenceAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit8 = attributesItem.SequenceAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit8 = nil
			}
			protected8 := new(bool)
			if !attributesItem.SequenceAttribute.Protected.IsUnknown() && !attributesItem.SequenceAttribute.Protected.IsNull() {
				*protected8 = attributesItem.SequenceAttribute.Protected.ValueBool()
			} else {
				protected8 = nil
			}
			var infoHelpers8 *shared.SequenceAttributeInfoHelpers
			if attributesItem.SequenceAttribute.InfoHelpers != nil {
				hintText8 := new(string)
				if !attributesItem.SequenceAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.SequenceAttribute.InfoHelpers.HintText.IsNull() {
					*hintText8 = attributesItem.SequenceAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText8 = nil
				}
				hintTextKey8 := new(string)
				if !attributesItem.SequenceAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.SequenceAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey8 = attributesItem.SequenceAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey8 = nil
				}
				hintCustomComponent8 := new(string)
				if !attributesItem.SequenceAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.SequenceAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent8 = attributesItem.SequenceAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent8 = nil
				}
				hintTooltipPlacement8 := new(string)
				if !attributesItem.SequenceAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.SequenceAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement8 = attributesItem.SequenceAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement8 = nil
				}
				infoHelpers8 = &shared.SequenceAttributeInfoHelpers{
					HintText:             hintText8,
					HintTextKey:          hintTextKey8,
					HintCustomComponent:  hintCustomComponent8,
					HintTooltipPlacement: hintTooltipPlacement8,
				}
			}
			repeatable8 := new(bool)
			if !attributesItem.SequenceAttribute.Repeatable.IsUnknown() && !attributesItem.SequenceAttribute.Repeatable.IsNull() {
				*repeatable8 = attributesItem.SequenceAttribute.Repeatable.ValueBool()
			} else {
				repeatable8 = nil
			}
			hasPrimary8 := new(bool)
			if !attributesItem.SequenceAttribute.HasPrimary.IsUnknown() && !attributesItem.SequenceAttribute.HasPrimary.IsNull() {
				*hasPrimary8 = attributesItem.SequenceAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary8 = nil
			}
			typeVar8 := shared.SequenceAttributeType(attributesItem.SequenceAttribute.Type.ValueString())
			prefix := new(string)
			if !attributesItem.SequenceAttribute.Prefix.IsUnknown() && !attributesItem.SequenceAttribute.Prefix.IsNull() {
				*prefix = attributesItem.SequenceAttribute.Prefix.ValueString()
			} else {
				prefix = nil
			}
			startNumber := new(int64)
			if !attributesItem.SequenceAttribute.StartNumber.IsUnknown() && !attributesItem.SequenceAttribute.StartNumber.IsNull() {
				*startNumber = attributesItem.SequenceAttribute.StartNumber.ValueInt64()
			} else {
				startNumber = nil
			}
			sequenceAttribute := shared.SequenceAttribute{
				ID:                       id9,
				Name:                     name17,
				Label:                    label8,
				Placeholder:              placeholder8,
				Hidden:                   hidden8,
				ShowInTable:              showInTable8,
				Sortable:                 sortable8,
				Required:                 required8,
				Readonly:                 readonly8,
				Deprecated:               deprecated8,
				DefaultValue:             defaultValue8,
				Group:                    group8,
				Order:                    order8,
				Layout:                   layout8,
				HideLabel:                hideLabel8,
				Icon:                     icon8,
				RenderCondition:          renderCondition8,
				Purpose:                  purpose8,
				Manifest:                 manifest8,
				Constraints:              constraints8,
				FeatureFlag:              featureFlag8,
				SettingsFlag:             settingsFlag8,
				ValueFormatter:           valueFormatter8,
				PreviewValueFormatter:    previewValueFormatter8,
				EntityBuilderDisableEdit: entityBuilderDisableEdit8,
				Protected:                protected8,
				InfoHelpers:              infoHelpers8,
				Repeatable:               repeatable8,
				HasPrimary:               hasPrimary8,
				Type:                     typeVar8,
				Prefix:                   prefix,
				StartNumber:              startNumber,
			}
			attributes = append(attributes, shared.AttributeInput{
				SequenceAttribute: &sequenceAttribute,
			})
		}
		if attributesItem.RelationAttribute != nil {
			id10 := new(string)
			if !attributesItem.RelationAttribute.ID.IsUnknown() && !attributesItem.RelationAttribute.ID.IsNull() {
				*id10 = attributesItem.RelationAttribute.ID.ValueString()
			} else {
				id10 = nil
			}
			var name19 string
			name19 = attributesItem.RelationAttribute.Name.ValueString()

			var label9 string
			label9 = attributesItem.RelationAttribute.Label.ValueString()

			placeholder9 := new(string)
			if !attributesItem.RelationAttribute.Placeholder.IsUnknown() && !attributesItem.RelationAttribute.Placeholder.IsNull() {
				*placeholder9 = attributesItem.RelationAttribute.Placeholder.ValueString()
			} else {
				placeholder9 = nil
			}
			hidden9 := new(bool)
			if !attributesItem.RelationAttribute.Hidden.IsUnknown() && !attributesItem.RelationAttribute.Hidden.IsNull() {
				*hidden9 = attributesItem.RelationAttribute.Hidden.ValueBool()
			} else {
				hidden9 = nil
			}
			showInTable9 := new(bool)
			if !attributesItem.RelationAttribute.ShowInTable.IsUnknown() && !attributesItem.RelationAttribute.ShowInTable.IsNull() {
				*showInTable9 = attributesItem.RelationAttribute.ShowInTable.ValueBool()
			} else {
				showInTable9 = nil
			}
			sortable9 := new(bool)
			if !attributesItem.RelationAttribute.Sortable.IsUnknown() && !attributesItem.RelationAttribute.Sortable.IsNull() {
				*sortable9 = attributesItem.RelationAttribute.Sortable.ValueBool()
			} else {
				sortable9 = nil
			}
			required9 := new(bool)
			if !attributesItem.RelationAttribute.Required.IsUnknown() && !attributesItem.RelationAttribute.Required.IsNull() {
				*required9 = attributesItem.RelationAttribute.Required.ValueBool()
			} else {
				required9 = nil
			}
			readonly9 := new(bool)
			if !attributesItem.RelationAttribute.Readonly.IsUnknown() && !attributesItem.RelationAttribute.Readonly.IsNull() {
				*readonly9 = attributesItem.RelationAttribute.Readonly.ValueBool()
			} else {
				readonly9 = nil
			}
			deprecated9 := new(bool)
			if !attributesItem.RelationAttribute.Deprecated.IsUnknown() && !attributesItem.RelationAttribute.Deprecated.IsNull() {
				*deprecated9 = attributesItem.RelationAttribute.Deprecated.ValueBool()
			} else {
				deprecated9 = nil
			}
			var defaultValue9 interface{}
			if !attributesItem.RelationAttribute.DefaultValue.IsUnknown() && !attributesItem.RelationAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.RelationAttribute.DefaultValue.ValueString()), &defaultValue9)
			}
			group9 := new(string)
			if !attributesItem.RelationAttribute.Group.IsUnknown() && !attributesItem.RelationAttribute.Group.IsNull() {
				*group9 = attributesItem.RelationAttribute.Group.ValueString()
			} else {
				group9 = nil
			}
			order9 := new(int64)
			if !attributesItem.RelationAttribute.Order.IsUnknown() && !attributesItem.RelationAttribute.Order.IsNull() {
				*order9 = attributesItem.RelationAttribute.Order.ValueInt64()
			} else {
				order9 = nil
			}
			layout9 := new(string)
			if !attributesItem.RelationAttribute.Layout.IsUnknown() && !attributesItem.RelationAttribute.Layout.IsNull() {
				*layout9 = attributesItem.RelationAttribute.Layout.ValueString()
			} else {
				layout9 = nil
			}
			hideLabel9 := new(bool)
			if !attributesItem.RelationAttribute.HideLabel.IsUnknown() && !attributesItem.RelationAttribute.HideLabel.IsNull() {
				*hideLabel9 = attributesItem.RelationAttribute.HideLabel.ValueBool()
			} else {
				hideLabel9 = nil
			}
			icon9 := new(string)
			if !attributesItem.RelationAttribute.Icon.IsUnknown() && !attributesItem.RelationAttribute.Icon.IsNull() {
				*icon9 = attributesItem.RelationAttribute.Icon.ValueString()
			} else {
				icon9 = nil
			}
			renderCondition9 := new(string)
			if !attributesItem.RelationAttribute.RenderCondition.IsUnknown() && !attributesItem.RelationAttribute.RenderCondition.IsNull() {
				*renderCondition9 = attributesItem.RelationAttribute.RenderCondition.ValueString()
			} else {
				renderCondition9 = nil
			}
			purpose9 := make([]string, 0, len(attributesItem.RelationAttribute.Purpose))
			for _, purposeItem9 := range attributesItem.RelationAttribute.Purpose {
				purpose9 = append(purpose9, purposeItem9.ValueString())
			}
			var manifest9 []string
			if attributesItem.RelationAttribute.Manifest != nil {
				manifest9 = make([]string, 0, len(attributesItem.RelationAttribute.Manifest))
				for _, manifestItem9 := range attributesItem.RelationAttribute.Manifest {
					manifest9 = append(manifest9, manifestItem9.ValueString())
				}
			}
			var constraints9 *shared.RelationAttributeConstraints
			if attributesItem.RelationAttribute.Constraints != nil {
				constraints9 = &shared.RelationAttributeConstraints{}
			}
			featureFlag9 := new(string)
			if !attributesItem.RelationAttribute.FeatureFlag.IsUnknown() && !attributesItem.RelationAttribute.FeatureFlag.IsNull() {
				*featureFlag9 = attributesItem.RelationAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag9 = nil
			}
			settingsFlag9 := make([]shared.SettingFlag, 0, len(attributesItem.RelationAttribute.SettingsFlag))
			for _, settingsFlagItem9 := range attributesItem.RelationAttribute.SettingsFlag {
				name20 := new(string)
				if !settingsFlagItem9.Name.IsUnknown() && !settingsFlagItem9.Name.IsNull() {
					*name20 = settingsFlagItem9.Name.ValueString()
				} else {
					name20 = nil
				}
				enabled9 := new(bool)
				if !settingsFlagItem9.Enabled.IsUnknown() && !settingsFlagItem9.Enabled.IsNull() {
					*enabled9 = settingsFlagItem9.Enabled.ValueBool()
				} else {
					enabled9 = nil
				}
				settingsFlag9 = append(settingsFlag9, shared.SettingFlag{
					Name:    name20,
					Enabled: enabled9,
				})
			}
			valueFormatter9 := new(string)
			if !attributesItem.RelationAttribute.ValueFormatter.IsUnknown() && !attributesItem.RelationAttribute.ValueFormatter.IsNull() {
				*valueFormatter9 = attributesItem.RelationAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter9 = nil
			}
			previewValueFormatter9 := new(string)
			if !attributesItem.RelationAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.RelationAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter9 = attributesItem.RelationAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter9 = nil
			}
			entityBuilderDisableEdit9 := new(bool)
			if !attributesItem.RelationAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.RelationAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit9 = attributesItem.RelationAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit9 = nil
			}
			protected9 := new(bool)
			if !attributesItem.RelationAttribute.Protected.IsUnknown() && !attributesItem.RelationAttribute.Protected.IsNull() {
				*protected9 = attributesItem.RelationAttribute.Protected.ValueBool()
			} else {
				protected9 = nil
			}
			var infoHelpers9 *shared.RelationAttributeInfoHelpers
			if attributesItem.RelationAttribute.InfoHelpers != nil {
				hintText9 := new(string)
				if !attributesItem.RelationAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.RelationAttribute.InfoHelpers.HintText.IsNull() {
					*hintText9 = attributesItem.RelationAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText9 = nil
				}
				hintTextKey9 := new(string)
				if !attributesItem.RelationAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.RelationAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey9 = attributesItem.RelationAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey9 = nil
				}
				hintCustomComponent9 := new(string)
				if !attributesItem.RelationAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.RelationAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent9 = attributesItem.RelationAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent9 = nil
				}
				hintTooltipPlacement9 := new(string)
				if !attributesItem.RelationAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.RelationAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement9 = attributesItem.RelationAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement9 = nil
				}
				infoHelpers9 = &shared.RelationAttributeInfoHelpers{
					HintText:             hintText9,
					HintTextKey:          hintTextKey9,
					HintCustomComponent:  hintCustomComponent9,
					HintTooltipPlacement: hintTooltipPlacement9,
				}
			}
			repeatable9 := new(bool)
			if !attributesItem.RelationAttribute.Repeatable.IsUnknown() && !attributesItem.RelationAttribute.Repeatable.IsNull() {
				*repeatable9 = attributesItem.RelationAttribute.Repeatable.ValueBool()
			} else {
				repeatable9 = nil
			}
			hasPrimary9 := new(bool)
			if !attributesItem.RelationAttribute.HasPrimary.IsUnknown() && !attributesItem.RelationAttribute.HasPrimary.IsNull() {
				*hasPrimary9 = attributesItem.RelationAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary9 = nil
			}
			typeVar9 := shared.RelationAttributeType(attributesItem.RelationAttribute.Type.ValueString())
			relationType := new(shared.RelationType)
			if !attributesItem.RelationAttribute.RelationType.IsUnknown() && !attributesItem.RelationAttribute.RelationType.IsNull() {
				*relationType = shared.RelationType(attributesItem.RelationAttribute.RelationType.ValueString())
			} else {
				relationType = nil
			}
			reverseAttributes := make(map[string]string)
			for reverseAttributesKey, reverseAttributesValue := range attributesItem.RelationAttribute.ReverseAttributes {
				var reverseAttributesInst string
				reverseAttributesInst = reverseAttributesValue.ValueString()

				reverseAttributes[reverseAttributesKey] = reverseAttributesInst
			}
			relationAffinityMode := new(shared.RelationAffinityMode)
			if !attributesItem.RelationAttribute.RelationAffinityMode.IsUnknown() && !attributesItem.RelationAttribute.RelationAffinityMode.IsNull() {
				*relationAffinityMode = shared.RelationAffinityMode(attributesItem.RelationAttribute.RelationAffinityMode.ValueString())
			} else {
				relationAffinityMode = nil
			}
			enableRelationPicker := new(bool)
			if !attributesItem.RelationAttribute.EnableRelationPicker.IsUnknown() && !attributesItem.RelationAttribute.EnableRelationPicker.IsNull() {
				*enableRelationPicker = attributesItem.RelationAttribute.EnableRelationPicker.ValueBool()
			} else {
				enableRelationPicker = nil
			}
			editMode := new(shared.EditMode)
			if !attributesItem.RelationAttribute.EditMode.IsUnknown() && !attributesItem.RelationAttribute.EditMode.IsNull() {
				*editMode = shared.EditMode(attributesItem.RelationAttribute.EditMode.ValueString())
			} else {
				editMode = nil
			}
			detailsViewModeEnabled := new(bool)
			if !attributesItem.RelationAttribute.DetailsViewModeEnabled.IsUnknown() && !attributesItem.RelationAttribute.DetailsViewModeEnabled.IsNull() {
				*detailsViewModeEnabled = attributesItem.RelationAttribute.DetailsViewModeEnabled.ValueBool()
			} else {
				detailsViewModeEnabled = nil
			}
			var relationPickerFilter *shared.RelationPickerFilter
			if attributesItem.RelationAttribute.RelationPickerFilter != nil {
				var q string
				q = attributesItem.RelationAttribute.RelationPickerFilter.Q.ValueString()

				relationPickerFilter = &shared.RelationPickerFilter{
					Q: q,
				}
			}
			actions := make([]shared.Actions, 0, len(attributesItem.RelationAttribute.Actions))
			for _, actionsItem := range attributesItem.RelationAttribute.Actions {
				actionType := new(shared.ActionType)
				if !actionsItem.ActionType.IsUnknown() && !actionsItem.ActionType.IsNull() {
					*actionType = shared.ActionType(actionsItem.ActionType.ValueString())
				} else {
					actionType = nil
				}
				label10 := new(string)
				if !actionsItem.Label.IsUnknown() && !actionsItem.Label.IsNull() {
					*label10 = actionsItem.Label.ValueString()
				} else {
					label10 = nil
				}
				defaultVar := new(bool)
				if !actionsItem.Default.IsUnknown() && !actionsItem.Default.IsNull() {
					*defaultVar = actionsItem.Default.ValueBool()
				} else {
					defaultVar = nil
				}
				featureFlag10 := new(string)
				if !actionsItem.FeatureFlag.IsUnknown() && !actionsItem.FeatureFlag.IsNull() {
					*featureFlag10 = actionsItem.FeatureFlag.ValueString()
				} else {
					featureFlag10 = nil
				}
				settingsFlag10 := make([]shared.SettingFlag, 0, len(actionsItem.SettingsFlag))
				for _, settingsFlagItem10 := range actionsItem.SettingsFlag {
					name21 := new(string)
					if !settingsFlagItem10.Name.IsUnknown() && !settingsFlagItem10.Name.IsNull() {
						*name21 = settingsFlagItem10.Name.ValueString()
					} else {
						name21 = nil
					}
					enabled10 := new(bool)
					if !settingsFlagItem10.Enabled.IsUnknown() && !settingsFlagItem10.Enabled.IsNull() {
						*enabled10 = settingsFlagItem10.Enabled.ValueBool()
					} else {
						enabled10 = nil
					}
					settingsFlag10 = append(settingsFlag10, shared.SettingFlag{
						Name:    name21,
						Enabled: enabled10,
					})
				}
				var newEntityItem interface{}
				if !actionsItem.NewEntityItem.IsUnknown() && !actionsItem.NewEntityItem.IsNull() {
					_ = json.Unmarshal([]byte(actionsItem.NewEntityItem.ValueString()), &newEntityItem)
				}
				actions = append(actions, shared.Actions{
					ActionType:    actionType,
					Label:         label10,
					Default:       defaultVar,
					FeatureFlag:   featureFlag10,
					SettingsFlag:  settingsFlag10,
					NewEntityItem: newEntityItem,
				})
			}
			drawerSize := new(shared.DrawerSize)
			if !attributesItem.RelationAttribute.DrawerSize.IsUnknown() && !attributesItem.RelationAttribute.DrawerSize.IsNull() {
				*drawerSize = shared.DrawerSize(attributesItem.RelationAttribute.DrawerSize.ValueString())
			} else {
				drawerSize = nil
			}
			summaryFields := make([]shared.SummaryFields, 0, len(attributesItem.RelationAttribute.SummaryFields))
			for _, summaryFieldsItem := range attributesItem.RelationAttribute.SummaryFields {
				if !summaryFieldsItem.Str.IsUnknown() && !summaryFieldsItem.Str.IsNull() {
					var str2 string
					str2 = summaryFieldsItem.Str.ValueString()

					summaryFields = append(summaryFields, shared.SummaryFields{
						Str: &str2,
					})
				}
				if summaryFieldsItem.SummaryField != nil {
					field := new(string)
					if !summaryFieldsItem.SummaryField.Field.IsUnknown() && !summaryFieldsItem.SummaryField.Field.IsNull() {
						*field = summaryFieldsItem.SummaryField.Field.ValueString()
					} else {
						field = nil
					}
					displayAs := new(string)
					if !summaryFieldsItem.SummaryField.DisplayAs.IsUnknown() && !summaryFieldsItem.SummaryField.DisplayAs.IsNull() {
						*displayAs = summaryFieldsItem.SummaryField.DisplayAs.ValueString()
					} else {
						displayAs = nil
					}
					summaryField := shared.SummaryField{
						Field:     field,
						DisplayAs: displayAs,
					}
					summaryFields = append(summaryFields, shared.SummaryFields{
						SummaryField: &summaryField,
					})
				}
			}
			allowedSchemas := make([]string, 0, len(attributesItem.RelationAttribute.AllowedSchemas))
			for _, allowedSchemasItem := range attributesItem.RelationAttribute.AllowedSchemas {
				allowedSchemas = append(allowedSchemas, allowedSchemasItem.ValueString())
			}
			enableRelationTags := new(bool)
			if !attributesItem.RelationAttribute.EnableRelationTags.IsUnknown() && !attributesItem.RelationAttribute.EnableRelationTags.IsNull() {
				*enableRelationTags = attributesItem.RelationAttribute.EnableRelationTags.ValueBool()
			} else {
				enableRelationTags = nil
			}
			addButtonLabel := new(string)
			if !attributesItem.RelationAttribute.AddButtonLabel.IsUnknown() && !attributesItem.RelationAttribute.AddButtonLabel.IsNull() {
				*addButtonLabel = attributesItem.RelationAttribute.AddButtonLabel.ValueString()
			} else {
				addButtonLabel = nil
			}
			searchPlaceholder := new(string)
			if !attributesItem.RelationAttribute.SearchPlaceholder.IsUnknown() && !attributesItem.RelationAttribute.SearchPlaceholder.IsNull() {
				*searchPlaceholder = attributesItem.RelationAttribute.SearchPlaceholder.ValueString()
			} else {
				searchPlaceholder = nil
			}
			relationAttribute := shared.RelationAttribute{
				ID:                       id10,
				Name:                     name19,
				Label:                    label9,
				Placeholder:              placeholder9,
				Hidden:                   hidden9,
				ShowInTable:              showInTable9,
				Sortable:                 sortable9,
				Required:                 required9,
				Readonly:                 readonly9,
				Deprecated:               deprecated9,
				DefaultValue:             defaultValue9,
				Group:                    group9,
				Order:                    order9,
				Layout:                   layout9,
				HideLabel:                hideLabel9,
				Icon:                     icon9,
				RenderCondition:          renderCondition9,
				Purpose:                  purpose9,
				Manifest:                 manifest9,
				Constraints:              constraints9,
				FeatureFlag:              featureFlag9,
				SettingsFlag:             settingsFlag9,
				ValueFormatter:           valueFormatter9,
				PreviewValueFormatter:    previewValueFormatter9,
				EntityBuilderDisableEdit: entityBuilderDisableEdit9,
				Protected:                protected9,
				InfoHelpers:              infoHelpers9,
				Repeatable:               repeatable9,
				HasPrimary:               hasPrimary9,
				Type:                     typeVar9,
				RelationType:             relationType,
				ReverseAttributes:        reverseAttributes,
				RelationAffinityMode:     relationAffinityMode,
				EnableRelationPicker:     enableRelationPicker,
				EditMode:                 editMode,
				DetailsViewModeEnabled:   detailsViewModeEnabled,
				RelationPickerFilter:     relationPickerFilter,
				Actions:                  actions,
				DrawerSize:               drawerSize,
				SummaryFields:            summaryFields,
				AllowedSchemas:           allowedSchemas,
				EnableRelationTags:       enableRelationTags,
				AddButtonLabel:           addButtonLabel,
				SearchPlaceholder:        searchPlaceholder,
			}
			attributes = append(attributes, shared.AttributeInput{
				RelationAttribute: &relationAttribute,
			})
		}
		if attributesItem.UserRelationAttribute != nil {
			id11 := new(string)
			if !attributesItem.UserRelationAttribute.ID.IsUnknown() && !attributesItem.UserRelationAttribute.ID.IsNull() {
				*id11 = attributesItem.UserRelationAttribute.ID.ValueString()
			} else {
				id11 = nil
			}
			var name22 string
			name22 = attributesItem.UserRelationAttribute.Name.ValueString()

			var label11 string
			label11 = attributesItem.UserRelationAttribute.Label.ValueString()

			placeholder10 := new(string)
			if !attributesItem.UserRelationAttribute.Placeholder.IsUnknown() && !attributesItem.UserRelationAttribute.Placeholder.IsNull() {
				*placeholder10 = attributesItem.UserRelationAttribute.Placeholder.ValueString()
			} else {
				placeholder10 = nil
			}
			hidden10 := new(bool)
			if !attributesItem.UserRelationAttribute.Hidden.IsUnknown() && !attributesItem.UserRelationAttribute.Hidden.IsNull() {
				*hidden10 = attributesItem.UserRelationAttribute.Hidden.ValueBool()
			} else {
				hidden10 = nil
			}
			showInTable10 := new(bool)
			if !attributesItem.UserRelationAttribute.ShowInTable.IsUnknown() && !attributesItem.UserRelationAttribute.ShowInTable.IsNull() {
				*showInTable10 = attributesItem.UserRelationAttribute.ShowInTable.ValueBool()
			} else {
				showInTable10 = nil
			}
			sortable10 := new(bool)
			if !attributesItem.UserRelationAttribute.Sortable.IsUnknown() && !attributesItem.UserRelationAttribute.Sortable.IsNull() {
				*sortable10 = attributesItem.UserRelationAttribute.Sortable.ValueBool()
			} else {
				sortable10 = nil
			}
			required10 := new(bool)
			if !attributesItem.UserRelationAttribute.Required.IsUnknown() && !attributesItem.UserRelationAttribute.Required.IsNull() {
				*required10 = attributesItem.UserRelationAttribute.Required.ValueBool()
			} else {
				required10 = nil
			}
			readonly10 := new(bool)
			if !attributesItem.UserRelationAttribute.Readonly.IsUnknown() && !attributesItem.UserRelationAttribute.Readonly.IsNull() {
				*readonly10 = attributesItem.UserRelationAttribute.Readonly.ValueBool()
			} else {
				readonly10 = nil
			}
			deprecated10 := new(bool)
			if !attributesItem.UserRelationAttribute.Deprecated.IsUnknown() && !attributesItem.UserRelationAttribute.Deprecated.IsNull() {
				*deprecated10 = attributesItem.UserRelationAttribute.Deprecated.ValueBool()
			} else {
				deprecated10 = nil
			}
			var defaultValue10 interface{}
			if !attributesItem.UserRelationAttribute.DefaultValue.IsUnknown() && !attributesItem.UserRelationAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.UserRelationAttribute.DefaultValue.ValueString()), &defaultValue10)
			}
			group10 := new(string)
			if !attributesItem.UserRelationAttribute.Group.IsUnknown() && !attributesItem.UserRelationAttribute.Group.IsNull() {
				*group10 = attributesItem.UserRelationAttribute.Group.ValueString()
			} else {
				group10 = nil
			}
			order10 := new(int64)
			if !attributesItem.UserRelationAttribute.Order.IsUnknown() && !attributesItem.UserRelationAttribute.Order.IsNull() {
				*order10 = attributesItem.UserRelationAttribute.Order.ValueInt64()
			} else {
				order10 = nil
			}
			layout10 := new(string)
			if !attributesItem.UserRelationAttribute.Layout.IsUnknown() && !attributesItem.UserRelationAttribute.Layout.IsNull() {
				*layout10 = attributesItem.UserRelationAttribute.Layout.ValueString()
			} else {
				layout10 = nil
			}
			hideLabel10 := new(bool)
			if !attributesItem.UserRelationAttribute.HideLabel.IsUnknown() && !attributesItem.UserRelationAttribute.HideLabel.IsNull() {
				*hideLabel10 = attributesItem.UserRelationAttribute.HideLabel.ValueBool()
			} else {
				hideLabel10 = nil
			}
			icon10 := new(string)
			if !attributesItem.UserRelationAttribute.Icon.IsUnknown() && !attributesItem.UserRelationAttribute.Icon.IsNull() {
				*icon10 = attributesItem.UserRelationAttribute.Icon.ValueString()
			} else {
				icon10 = nil
			}
			renderCondition10 := new(string)
			if !attributesItem.UserRelationAttribute.RenderCondition.IsUnknown() && !attributesItem.UserRelationAttribute.RenderCondition.IsNull() {
				*renderCondition10 = attributesItem.UserRelationAttribute.RenderCondition.ValueString()
			} else {
				renderCondition10 = nil
			}
			purpose10 := make([]string, 0, len(attributesItem.UserRelationAttribute.Purpose))
			for _, purposeItem10 := range attributesItem.UserRelationAttribute.Purpose {
				purpose10 = append(purpose10, purposeItem10.ValueString())
			}
			var manifest10 []string
			if attributesItem.UserRelationAttribute.Manifest != nil {
				manifest10 = make([]string, 0, len(attributesItem.UserRelationAttribute.Manifest))
				for _, manifestItem10 := range attributesItem.UserRelationAttribute.Manifest {
					manifest10 = append(manifest10, manifestItem10.ValueString())
				}
			}
			var constraints10 *shared.UserRelationAttributeConstraints
			if attributesItem.UserRelationAttribute.Constraints != nil {
				constraints10 = &shared.UserRelationAttributeConstraints{}
			}
			featureFlag11 := new(string)
			if !attributesItem.UserRelationAttribute.FeatureFlag.IsUnknown() && !attributesItem.UserRelationAttribute.FeatureFlag.IsNull() {
				*featureFlag11 = attributesItem.UserRelationAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag11 = nil
			}
			settingsFlag11 := make([]shared.SettingFlag, 0, len(attributesItem.UserRelationAttribute.SettingsFlag))
			for _, settingsFlagItem11 := range attributesItem.UserRelationAttribute.SettingsFlag {
				name23 := new(string)
				if !settingsFlagItem11.Name.IsUnknown() && !settingsFlagItem11.Name.IsNull() {
					*name23 = settingsFlagItem11.Name.ValueString()
				} else {
					name23 = nil
				}
				enabled11 := new(bool)
				if !settingsFlagItem11.Enabled.IsUnknown() && !settingsFlagItem11.Enabled.IsNull() {
					*enabled11 = settingsFlagItem11.Enabled.ValueBool()
				} else {
					enabled11 = nil
				}
				settingsFlag11 = append(settingsFlag11, shared.SettingFlag{
					Name:    name23,
					Enabled: enabled11,
				})
			}
			valueFormatter10 := new(string)
			if !attributesItem.UserRelationAttribute.ValueFormatter.IsUnknown() && !attributesItem.UserRelationAttribute.ValueFormatter.IsNull() {
				*valueFormatter10 = attributesItem.UserRelationAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter10 = nil
			}
			previewValueFormatter10 := new(string)
			if !attributesItem.UserRelationAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.UserRelationAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter10 = attributesItem.UserRelationAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter10 = nil
			}
			entityBuilderDisableEdit10 := new(bool)
			if !attributesItem.UserRelationAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.UserRelationAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit10 = attributesItem.UserRelationAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit10 = nil
			}
			protected10 := new(bool)
			if !attributesItem.UserRelationAttribute.Protected.IsUnknown() && !attributesItem.UserRelationAttribute.Protected.IsNull() {
				*protected10 = attributesItem.UserRelationAttribute.Protected.ValueBool()
			} else {
				protected10 = nil
			}
			var infoHelpers10 *shared.UserRelationAttributeInfoHelpers
			if attributesItem.UserRelationAttribute.InfoHelpers != nil {
				hintText10 := new(string)
				if !attributesItem.UserRelationAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.UserRelationAttribute.InfoHelpers.HintText.IsNull() {
					*hintText10 = attributesItem.UserRelationAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText10 = nil
				}
				hintTextKey10 := new(string)
				if !attributesItem.UserRelationAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.UserRelationAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey10 = attributesItem.UserRelationAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey10 = nil
				}
				hintCustomComponent10 := new(string)
				if !attributesItem.UserRelationAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.UserRelationAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent10 = attributesItem.UserRelationAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent10 = nil
				}
				hintTooltipPlacement10 := new(string)
				if !attributesItem.UserRelationAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.UserRelationAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement10 = attributesItem.UserRelationAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement10 = nil
				}
				infoHelpers10 = &shared.UserRelationAttributeInfoHelpers{
					HintText:             hintText10,
					HintTextKey:          hintTextKey10,
					HintCustomComponent:  hintCustomComponent10,
					HintTooltipPlacement: hintTooltipPlacement10,
				}
			}
			repeatable10 := new(bool)
			if !attributesItem.UserRelationAttribute.Repeatable.IsUnknown() && !attributesItem.UserRelationAttribute.Repeatable.IsNull() {
				*repeatable10 = attributesItem.UserRelationAttribute.Repeatable.ValueBool()
			} else {
				repeatable10 = nil
			}
			hasPrimary10 := new(bool)
			if !attributesItem.UserRelationAttribute.HasPrimary.IsUnknown() && !attributesItem.UserRelationAttribute.HasPrimary.IsNull() {
				*hasPrimary10 = attributesItem.UserRelationAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary10 = nil
			}
			typeVar10 := shared.UserRelationAttributeType(attributesItem.UserRelationAttribute.Type.ValueString())
			multiple := new(bool)
			if !attributesItem.UserRelationAttribute.Multiple.IsUnknown() && !attributesItem.UserRelationAttribute.Multiple.IsNull() {
				*multiple = attributesItem.UserRelationAttribute.Multiple.ValueBool()
			} else {
				multiple = nil
			}
			userRelationAttribute := shared.UserRelationAttribute{
				ID:                       id11,
				Name:                     name22,
				Label:                    label11,
				Placeholder:              placeholder10,
				Hidden:                   hidden10,
				ShowInTable:              showInTable10,
				Sortable:                 sortable10,
				Required:                 required10,
				Readonly:                 readonly10,
				Deprecated:               deprecated10,
				DefaultValue:             defaultValue10,
				Group:                    group10,
				Order:                    order10,
				Layout:                   layout10,
				HideLabel:                hideLabel10,
				Icon:                     icon10,
				RenderCondition:          renderCondition10,
				Purpose:                  purpose10,
				Manifest:                 manifest10,
				Constraints:              constraints10,
				FeatureFlag:              featureFlag11,
				SettingsFlag:             settingsFlag11,
				ValueFormatter:           valueFormatter10,
				PreviewValueFormatter:    previewValueFormatter10,
				EntityBuilderDisableEdit: entityBuilderDisableEdit10,
				Protected:                protected10,
				InfoHelpers:              infoHelpers10,
				Repeatable:               repeatable10,
				HasPrimary:               hasPrimary10,
				Type:                     typeVar10,
				Multiple:                 multiple,
			}
			attributes = append(attributes, shared.AttributeInput{
				UserRelationAttribute: &userRelationAttribute,
			})
		}
		if attributesItem.AddressAttribute != nil {
			id12 := new(string)
			if !attributesItem.AddressAttribute.ID.IsUnknown() && !attributesItem.AddressAttribute.ID.IsNull() {
				*id12 = attributesItem.AddressAttribute.ID.ValueString()
			} else {
				id12 = nil
			}
			var name24 string
			name24 = attributesItem.AddressAttribute.Name.ValueString()

			var label12 string
			label12 = attributesItem.AddressAttribute.Label.ValueString()

			placeholder11 := new(string)
			if !attributesItem.AddressAttribute.Placeholder.IsUnknown() && !attributesItem.AddressAttribute.Placeholder.IsNull() {
				*placeholder11 = attributesItem.AddressAttribute.Placeholder.ValueString()
			} else {
				placeholder11 = nil
			}
			hidden11 := new(bool)
			if !attributesItem.AddressAttribute.Hidden.IsUnknown() && !attributesItem.AddressAttribute.Hidden.IsNull() {
				*hidden11 = attributesItem.AddressAttribute.Hidden.ValueBool()
			} else {
				hidden11 = nil
			}
			showInTable11 := new(bool)
			if !attributesItem.AddressAttribute.ShowInTable.IsUnknown() && !attributesItem.AddressAttribute.ShowInTable.IsNull() {
				*showInTable11 = attributesItem.AddressAttribute.ShowInTable.ValueBool()
			} else {
				showInTable11 = nil
			}
			sortable11 := new(bool)
			if !attributesItem.AddressAttribute.Sortable.IsUnknown() && !attributesItem.AddressAttribute.Sortable.IsNull() {
				*sortable11 = attributesItem.AddressAttribute.Sortable.ValueBool()
			} else {
				sortable11 = nil
			}
			required11 := new(bool)
			if !attributesItem.AddressAttribute.Required.IsUnknown() && !attributesItem.AddressAttribute.Required.IsNull() {
				*required11 = attributesItem.AddressAttribute.Required.ValueBool()
			} else {
				required11 = nil
			}
			readonly11 := new(bool)
			if !attributesItem.AddressAttribute.Readonly.IsUnknown() && !attributesItem.AddressAttribute.Readonly.IsNull() {
				*readonly11 = attributesItem.AddressAttribute.Readonly.ValueBool()
			} else {
				readonly11 = nil
			}
			deprecated11 := new(bool)
			if !attributesItem.AddressAttribute.Deprecated.IsUnknown() && !attributesItem.AddressAttribute.Deprecated.IsNull() {
				*deprecated11 = attributesItem.AddressAttribute.Deprecated.ValueBool()
			} else {
				deprecated11 = nil
			}
			var defaultValue11 interface{}
			if !attributesItem.AddressAttribute.DefaultValue.IsUnknown() && !attributesItem.AddressAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.AddressAttribute.DefaultValue.ValueString()), &defaultValue11)
			}
			group11 := new(string)
			if !attributesItem.AddressAttribute.Group.IsUnknown() && !attributesItem.AddressAttribute.Group.IsNull() {
				*group11 = attributesItem.AddressAttribute.Group.ValueString()
			} else {
				group11 = nil
			}
			order11 := new(int64)
			if !attributesItem.AddressAttribute.Order.IsUnknown() && !attributesItem.AddressAttribute.Order.IsNull() {
				*order11 = attributesItem.AddressAttribute.Order.ValueInt64()
			} else {
				order11 = nil
			}
			layout11 := new(string)
			if !attributesItem.AddressAttribute.Layout.IsUnknown() && !attributesItem.AddressAttribute.Layout.IsNull() {
				*layout11 = attributesItem.AddressAttribute.Layout.ValueString()
			} else {
				layout11 = nil
			}
			hideLabel11 := new(bool)
			if !attributesItem.AddressAttribute.HideLabel.IsUnknown() && !attributesItem.AddressAttribute.HideLabel.IsNull() {
				*hideLabel11 = attributesItem.AddressAttribute.HideLabel.ValueBool()
			} else {
				hideLabel11 = nil
			}
			icon11 := new(string)
			if !attributesItem.AddressAttribute.Icon.IsUnknown() && !attributesItem.AddressAttribute.Icon.IsNull() {
				*icon11 = attributesItem.AddressAttribute.Icon.ValueString()
			} else {
				icon11 = nil
			}
			renderCondition11 := new(string)
			if !attributesItem.AddressAttribute.RenderCondition.IsUnknown() && !attributesItem.AddressAttribute.RenderCondition.IsNull() {
				*renderCondition11 = attributesItem.AddressAttribute.RenderCondition.ValueString()
			} else {
				renderCondition11 = nil
			}
			purpose11 := make([]string, 0, len(attributesItem.AddressAttribute.Purpose))
			for _, purposeItem11 := range attributesItem.AddressAttribute.Purpose {
				purpose11 = append(purpose11, purposeItem11.ValueString())
			}
			var manifest11 []string
			if attributesItem.AddressAttribute.Manifest != nil {
				manifest11 = make([]string, 0, len(attributesItem.AddressAttribute.Manifest))
				for _, manifestItem11 := range attributesItem.AddressAttribute.Manifest {
					manifest11 = append(manifest11, manifestItem11.ValueString())
				}
			}
			var constraints11 *shared.AddressAttributeConstraints
			if attributesItem.AddressAttribute.Constraints != nil {
				constraints11 = &shared.AddressAttributeConstraints{}
			}
			featureFlag12 := new(string)
			if !attributesItem.AddressAttribute.FeatureFlag.IsUnknown() && !attributesItem.AddressAttribute.FeatureFlag.IsNull() {
				*featureFlag12 = attributesItem.AddressAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag12 = nil
			}
			settingsFlag12 := make([]shared.SettingFlag, 0, len(attributesItem.AddressAttribute.SettingsFlag))
			for _, settingsFlagItem12 := range attributesItem.AddressAttribute.SettingsFlag {
				name25 := new(string)
				if !settingsFlagItem12.Name.IsUnknown() && !settingsFlagItem12.Name.IsNull() {
					*name25 = settingsFlagItem12.Name.ValueString()
				} else {
					name25 = nil
				}
				enabled12 := new(bool)
				if !settingsFlagItem12.Enabled.IsUnknown() && !settingsFlagItem12.Enabled.IsNull() {
					*enabled12 = settingsFlagItem12.Enabled.ValueBool()
				} else {
					enabled12 = nil
				}
				settingsFlag12 = append(settingsFlag12, shared.SettingFlag{
					Name:    name25,
					Enabled: enabled12,
				})
			}
			valueFormatter11 := new(string)
			if !attributesItem.AddressAttribute.ValueFormatter.IsUnknown() && !attributesItem.AddressAttribute.ValueFormatter.IsNull() {
				*valueFormatter11 = attributesItem.AddressAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter11 = nil
			}
			previewValueFormatter11 := new(string)
			if !attributesItem.AddressAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.AddressAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter11 = attributesItem.AddressAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter11 = nil
			}
			entityBuilderDisableEdit11 := new(bool)
			if !attributesItem.AddressAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.AddressAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit11 = attributesItem.AddressAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit11 = nil
			}
			protected11 := new(bool)
			if !attributesItem.AddressAttribute.Protected.IsUnknown() && !attributesItem.AddressAttribute.Protected.IsNull() {
				*protected11 = attributesItem.AddressAttribute.Protected.ValueBool()
			} else {
				protected11 = nil
			}
			var infoHelpers11 *shared.AddressAttributeInfoHelpers
			if attributesItem.AddressAttribute.InfoHelpers != nil {
				hintText11 := new(string)
				if !attributesItem.AddressAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.AddressAttribute.InfoHelpers.HintText.IsNull() {
					*hintText11 = attributesItem.AddressAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText11 = nil
				}
				hintTextKey11 := new(string)
				if !attributesItem.AddressAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.AddressAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey11 = attributesItem.AddressAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey11 = nil
				}
				hintCustomComponent11 := new(string)
				if !attributesItem.AddressAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.AddressAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent11 = attributesItem.AddressAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent11 = nil
				}
				hintTooltipPlacement11 := new(string)
				if !attributesItem.AddressAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.AddressAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement11 = attributesItem.AddressAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement11 = nil
				}
				infoHelpers11 = &shared.AddressAttributeInfoHelpers{
					HintText:             hintText11,
					HintTextKey:          hintTextKey11,
					HintCustomComponent:  hintCustomComponent11,
					HintTooltipPlacement: hintTooltipPlacement11,
				}
			}
			repeatable11 := new(bool)
			if !attributesItem.AddressAttribute.Repeatable.IsUnknown() && !attributesItem.AddressAttribute.Repeatable.IsNull() {
				*repeatable11 = attributesItem.AddressAttribute.Repeatable.ValueBool()
			} else {
				repeatable11 = nil
			}
			hasPrimary11 := new(bool)
			if !attributesItem.AddressAttribute.HasPrimary.IsUnknown() && !attributesItem.AddressAttribute.HasPrimary.IsNull() {
				*hasPrimary11 = attributesItem.AddressAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary11 = nil
			}
			typeVar11 := shared.AddressAttributeType(attributesItem.AddressAttribute.Type.ValueString())
			var defaultAddressFields []string
			if attributesItem.AddressAttribute.DefaultAddressFields != nil {
				defaultAddressFields = make([]string, 0, len(attributesItem.AddressAttribute.DefaultAddressFields))
				for _, defaultAddressFieldsItem := range attributesItem.AddressAttribute.DefaultAddressFields {
					defaultAddressFields = append(defaultAddressFields, defaultAddressFieldsItem.ValueString())
				}
			}
			addressAttribute := shared.AddressAttribute{
				ID:                       id12,
				Name:                     name24,
				Label:                    label12,
				Placeholder:              placeholder11,
				Hidden:                   hidden11,
				ShowInTable:              showInTable11,
				Sortable:                 sortable11,
				Required:                 required11,
				Readonly:                 readonly11,
				Deprecated:               deprecated11,
				DefaultValue:             defaultValue11,
				Group:                    group11,
				Order:                    order11,
				Layout:                   layout11,
				HideLabel:                hideLabel11,
				Icon:                     icon11,
				RenderCondition:          renderCondition11,
				Purpose:                  purpose11,
				Manifest:                 manifest11,
				Constraints:              constraints11,
				FeatureFlag:              featureFlag12,
				SettingsFlag:             settingsFlag12,
				ValueFormatter:           valueFormatter11,
				PreviewValueFormatter:    previewValueFormatter11,
				EntityBuilderDisableEdit: entityBuilderDisableEdit11,
				Protected:                protected11,
				InfoHelpers:              infoHelpers11,
				Repeatable:               repeatable11,
				HasPrimary:               hasPrimary11,
				Type:                     typeVar11,
				DefaultAddressFields:     defaultAddressFields,
			}
			attributes = append(attributes, shared.AttributeInput{
				AddressAttribute: &addressAttribute,
			})
		}
		if attributesItem.AddressRelationAttribute != nil {
			id13 := new(string)
			if !attributesItem.AddressRelationAttribute.ID.IsUnknown() && !attributesItem.AddressRelationAttribute.ID.IsNull() {
				*id13 = attributesItem.AddressRelationAttribute.ID.ValueString()
			} else {
				id13 = nil
			}
			var name26 string
			name26 = attributesItem.AddressRelationAttribute.Name.ValueString()

			var label13 string
			label13 = attributesItem.AddressRelationAttribute.Label.ValueString()

			placeholder12 := new(string)
			if !attributesItem.AddressRelationAttribute.Placeholder.IsUnknown() && !attributesItem.AddressRelationAttribute.Placeholder.IsNull() {
				*placeholder12 = attributesItem.AddressRelationAttribute.Placeholder.ValueString()
			} else {
				placeholder12 = nil
			}
			hidden12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Hidden.IsUnknown() && !attributesItem.AddressRelationAttribute.Hidden.IsNull() {
				*hidden12 = attributesItem.AddressRelationAttribute.Hidden.ValueBool()
			} else {
				hidden12 = nil
			}
			showInTable12 := new(bool)
			if !attributesItem.AddressRelationAttribute.ShowInTable.IsUnknown() && !attributesItem.AddressRelationAttribute.ShowInTable.IsNull() {
				*showInTable12 = attributesItem.AddressRelationAttribute.ShowInTable.ValueBool()
			} else {
				showInTable12 = nil
			}
			sortable12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Sortable.IsUnknown() && !attributesItem.AddressRelationAttribute.Sortable.IsNull() {
				*sortable12 = attributesItem.AddressRelationAttribute.Sortable.ValueBool()
			} else {
				sortable12 = nil
			}
			required12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Required.IsUnknown() && !attributesItem.AddressRelationAttribute.Required.IsNull() {
				*required12 = attributesItem.AddressRelationAttribute.Required.ValueBool()
			} else {
				required12 = nil
			}
			readonly12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Readonly.IsUnknown() && !attributesItem.AddressRelationAttribute.Readonly.IsNull() {
				*readonly12 = attributesItem.AddressRelationAttribute.Readonly.ValueBool()
			} else {
				readonly12 = nil
			}
			deprecated12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Deprecated.IsUnknown() && !attributesItem.AddressRelationAttribute.Deprecated.IsNull() {
				*deprecated12 = attributesItem.AddressRelationAttribute.Deprecated.ValueBool()
			} else {
				deprecated12 = nil
			}
			var defaultValue12 interface{}
			if !attributesItem.AddressRelationAttribute.DefaultValue.IsUnknown() && !attributesItem.AddressRelationAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.AddressRelationAttribute.DefaultValue.ValueString()), &defaultValue12)
			}
			group12 := new(string)
			if !attributesItem.AddressRelationAttribute.Group.IsUnknown() && !attributesItem.AddressRelationAttribute.Group.IsNull() {
				*group12 = attributesItem.AddressRelationAttribute.Group.ValueString()
			} else {
				group12 = nil
			}
			order12 := new(int64)
			if !attributesItem.AddressRelationAttribute.Order.IsUnknown() && !attributesItem.AddressRelationAttribute.Order.IsNull() {
				*order12 = attributesItem.AddressRelationAttribute.Order.ValueInt64()
			} else {
				order12 = nil
			}
			layout12 := new(string)
			if !attributesItem.AddressRelationAttribute.Layout.IsUnknown() && !attributesItem.AddressRelationAttribute.Layout.IsNull() {
				*layout12 = attributesItem.AddressRelationAttribute.Layout.ValueString()
			} else {
				layout12 = nil
			}
			hideLabel12 := new(bool)
			if !attributesItem.AddressRelationAttribute.HideLabel.IsUnknown() && !attributesItem.AddressRelationAttribute.HideLabel.IsNull() {
				*hideLabel12 = attributesItem.AddressRelationAttribute.HideLabel.ValueBool()
			} else {
				hideLabel12 = nil
			}
			icon12 := new(string)
			if !attributesItem.AddressRelationAttribute.Icon.IsUnknown() && !attributesItem.AddressRelationAttribute.Icon.IsNull() {
				*icon12 = attributesItem.AddressRelationAttribute.Icon.ValueString()
			} else {
				icon12 = nil
			}
			renderCondition12 := new(string)
			if !attributesItem.AddressRelationAttribute.RenderCondition.IsUnknown() && !attributesItem.AddressRelationAttribute.RenderCondition.IsNull() {
				*renderCondition12 = attributesItem.AddressRelationAttribute.RenderCondition.ValueString()
			} else {
				renderCondition12 = nil
			}
			purpose12 := make([]string, 0, len(attributesItem.AddressRelationAttribute.Purpose))
			for _, purposeItem12 := range attributesItem.AddressRelationAttribute.Purpose {
				purpose12 = append(purpose12, purposeItem12.ValueString())
			}
			var manifest12 []string
			if attributesItem.AddressRelationAttribute.Manifest != nil {
				manifest12 = make([]string, 0, len(attributesItem.AddressRelationAttribute.Manifest))
				for _, manifestItem12 := range attributesItem.AddressRelationAttribute.Manifest {
					manifest12 = append(manifest12, manifestItem12.ValueString())
				}
			}
			var constraints12 *shared.AddressRelationAttributeConstraints
			if attributesItem.AddressRelationAttribute.Constraints != nil {
				constraints12 = &shared.AddressRelationAttributeConstraints{}
			}
			featureFlag13 := new(string)
			if !attributesItem.AddressRelationAttribute.FeatureFlag.IsUnknown() && !attributesItem.AddressRelationAttribute.FeatureFlag.IsNull() {
				*featureFlag13 = attributesItem.AddressRelationAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag13 = nil
			}
			settingsFlag13 := make([]shared.SettingFlag, 0, len(attributesItem.AddressRelationAttribute.SettingsFlag))
			for _, settingsFlagItem13 := range attributesItem.AddressRelationAttribute.SettingsFlag {
				name27 := new(string)
				if !settingsFlagItem13.Name.IsUnknown() && !settingsFlagItem13.Name.IsNull() {
					*name27 = settingsFlagItem13.Name.ValueString()
				} else {
					name27 = nil
				}
				enabled13 := new(bool)
				if !settingsFlagItem13.Enabled.IsUnknown() && !settingsFlagItem13.Enabled.IsNull() {
					*enabled13 = settingsFlagItem13.Enabled.ValueBool()
				} else {
					enabled13 = nil
				}
				settingsFlag13 = append(settingsFlag13, shared.SettingFlag{
					Name:    name27,
					Enabled: enabled13,
				})
			}
			valueFormatter12 := new(string)
			if !attributesItem.AddressRelationAttribute.ValueFormatter.IsUnknown() && !attributesItem.AddressRelationAttribute.ValueFormatter.IsNull() {
				*valueFormatter12 = attributesItem.AddressRelationAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter12 = nil
			}
			previewValueFormatter12 := new(string)
			if !attributesItem.AddressRelationAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.AddressRelationAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter12 = attributesItem.AddressRelationAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter12 = nil
			}
			entityBuilderDisableEdit12 := new(bool)
			if !attributesItem.AddressRelationAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.AddressRelationAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit12 = attributesItem.AddressRelationAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit12 = nil
			}
			protected12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Protected.IsUnknown() && !attributesItem.AddressRelationAttribute.Protected.IsNull() {
				*protected12 = attributesItem.AddressRelationAttribute.Protected.ValueBool()
			} else {
				protected12 = nil
			}
			var infoHelpers12 *shared.AddressRelationAttributeInfoHelpers
			if attributesItem.AddressRelationAttribute.InfoHelpers != nil {
				hintText12 := new(string)
				if !attributesItem.AddressRelationAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.AddressRelationAttribute.InfoHelpers.HintText.IsNull() {
					*hintText12 = attributesItem.AddressRelationAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText12 = nil
				}
				hintTextKey12 := new(string)
				if !attributesItem.AddressRelationAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.AddressRelationAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey12 = attributesItem.AddressRelationAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey12 = nil
				}
				hintCustomComponent12 := new(string)
				if !attributesItem.AddressRelationAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.AddressRelationAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent12 = attributesItem.AddressRelationAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent12 = nil
				}
				hintTooltipPlacement12 := new(string)
				if !attributesItem.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement12 = attributesItem.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement12 = nil
				}
				infoHelpers12 = &shared.AddressRelationAttributeInfoHelpers{
					HintText:             hintText12,
					HintTextKey:          hintTextKey12,
					HintCustomComponent:  hintCustomComponent12,
					HintTooltipPlacement: hintTooltipPlacement12,
				}
			}
			repeatable12 := new(bool)
			if !attributesItem.AddressRelationAttribute.Repeatable.IsUnknown() && !attributesItem.AddressRelationAttribute.Repeatable.IsNull() {
				*repeatable12 = attributesItem.AddressRelationAttribute.Repeatable.ValueBool()
			} else {
				repeatable12 = nil
			}
			hasPrimary12 := new(bool)
			if !attributesItem.AddressRelationAttribute.HasPrimary.IsUnknown() && !attributesItem.AddressRelationAttribute.HasPrimary.IsNull() {
				*hasPrimary12 = attributesItem.AddressRelationAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary12 = nil
			}
			typeVar12 := shared.AddressRelationAttributeType(attributesItem.AddressRelationAttribute.Type.ValueString())
			var defaultAddressFields1 []string
			if attributesItem.AddressRelationAttribute.DefaultAddressFields != nil {
				defaultAddressFields1 = make([]string, 0, len(attributesItem.AddressRelationAttribute.DefaultAddressFields))
				for _, defaultAddressFieldsItem1 := range attributesItem.AddressRelationAttribute.DefaultAddressFields {
					defaultAddressFields1 = append(defaultAddressFields1, defaultAddressFieldsItem1.ValueString())
				}
			}
			addressRelationAttribute := shared.AddressRelationAttribute{
				ID:                       id13,
				Name:                     name26,
				Label:                    label13,
				Placeholder:              placeholder12,
				Hidden:                   hidden12,
				ShowInTable:              showInTable12,
				Sortable:                 sortable12,
				Required:                 required12,
				Readonly:                 readonly12,
				Deprecated:               deprecated12,
				DefaultValue:             defaultValue12,
				Group:                    group12,
				Order:                    order12,
				Layout:                   layout12,
				HideLabel:                hideLabel12,
				Icon:                     icon12,
				RenderCondition:          renderCondition12,
				Purpose:                  purpose12,
				Manifest:                 manifest12,
				Constraints:              constraints12,
				FeatureFlag:              featureFlag13,
				SettingsFlag:             settingsFlag13,
				ValueFormatter:           valueFormatter12,
				PreviewValueFormatter:    previewValueFormatter12,
				EntityBuilderDisableEdit: entityBuilderDisableEdit12,
				Protected:                protected12,
				InfoHelpers:              infoHelpers12,
				Repeatable:               repeatable12,
				HasPrimary:               hasPrimary12,
				Type:                     typeVar12,
				DefaultAddressFields:     defaultAddressFields1,
			}
			attributes = append(attributes, shared.AttributeInput{
				AddressRelationAttribute: &addressRelationAttribute,
			})
		}
		if attributesItem.PaymentMethodRelationAttribute != nil {
			id14 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.ID.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.ID.IsNull() {
				*id14 = attributesItem.PaymentMethodRelationAttribute.ID.ValueString()
			} else {
				id14 = nil
			}
			var name28 string
			name28 = attributesItem.PaymentMethodRelationAttribute.Name.ValueString()

			var label14 string
			label14 = attributesItem.PaymentMethodRelationAttribute.Label.ValueString()

			placeholder13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.Placeholder.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Placeholder.IsNull() {
				*placeholder13 = attributesItem.PaymentMethodRelationAttribute.Placeholder.ValueString()
			} else {
				placeholder13 = nil
			}
			hidden13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Hidden.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Hidden.IsNull() {
				*hidden13 = attributesItem.PaymentMethodRelationAttribute.Hidden.ValueBool()
			} else {
				hidden13 = nil
			}
			showInTable13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.ShowInTable.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.ShowInTable.IsNull() {
				*showInTable13 = attributesItem.PaymentMethodRelationAttribute.ShowInTable.ValueBool()
			} else {
				showInTable13 = nil
			}
			sortable13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Sortable.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Sortable.IsNull() {
				*sortable13 = attributesItem.PaymentMethodRelationAttribute.Sortable.ValueBool()
			} else {
				sortable13 = nil
			}
			required13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Required.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Required.IsNull() {
				*required13 = attributesItem.PaymentMethodRelationAttribute.Required.ValueBool()
			} else {
				required13 = nil
			}
			readonly13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Readonly.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Readonly.IsNull() {
				*readonly13 = attributesItem.PaymentMethodRelationAttribute.Readonly.ValueBool()
			} else {
				readonly13 = nil
			}
			deprecated13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Deprecated.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Deprecated.IsNull() {
				*deprecated13 = attributesItem.PaymentMethodRelationAttribute.Deprecated.ValueBool()
			} else {
				deprecated13 = nil
			}
			var defaultValue13 interface{}
			if !attributesItem.PaymentMethodRelationAttribute.DefaultValue.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PaymentMethodRelationAttribute.DefaultValue.ValueString()), &defaultValue13)
			}
			group13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.Group.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Group.IsNull() {
				*group13 = attributesItem.PaymentMethodRelationAttribute.Group.ValueString()
			} else {
				group13 = nil
			}
			order13 := new(int64)
			if !attributesItem.PaymentMethodRelationAttribute.Order.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Order.IsNull() {
				*order13 = attributesItem.PaymentMethodRelationAttribute.Order.ValueInt64()
			} else {
				order13 = nil
			}
			layout13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.Layout.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Layout.IsNull() {
				*layout13 = attributesItem.PaymentMethodRelationAttribute.Layout.ValueString()
			} else {
				layout13 = nil
			}
			hideLabel13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.HideLabel.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.HideLabel.IsNull() {
				*hideLabel13 = attributesItem.PaymentMethodRelationAttribute.HideLabel.ValueBool()
			} else {
				hideLabel13 = nil
			}
			icon13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.Icon.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Icon.IsNull() {
				*icon13 = attributesItem.PaymentMethodRelationAttribute.Icon.ValueString()
			} else {
				icon13 = nil
			}
			renderCondition13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.RenderCondition.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.RenderCondition.IsNull() {
				*renderCondition13 = attributesItem.PaymentMethodRelationAttribute.RenderCondition.ValueString()
			} else {
				renderCondition13 = nil
			}
			purpose13 := make([]string, 0, len(attributesItem.PaymentMethodRelationAttribute.Purpose))
			for _, purposeItem13 := range attributesItem.PaymentMethodRelationAttribute.Purpose {
				purpose13 = append(purpose13, purposeItem13.ValueString())
			}
			var manifest13 []string
			if attributesItem.PaymentMethodRelationAttribute.Manifest != nil {
				manifest13 = make([]string, 0, len(attributesItem.PaymentMethodRelationAttribute.Manifest))
				for _, manifestItem13 := range attributesItem.PaymentMethodRelationAttribute.Manifest {
					manifest13 = append(manifest13, manifestItem13.ValueString())
				}
			}
			var constraints13 *shared.PaymentMethodRelationAttributeConstraints
			if attributesItem.PaymentMethodRelationAttribute.Constraints != nil {
				constraints13 = &shared.PaymentMethodRelationAttributeConstraints{}
			}
			featureFlag14 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.FeatureFlag.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.FeatureFlag.IsNull() {
				*featureFlag14 = attributesItem.PaymentMethodRelationAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag14 = nil
			}
			settingsFlag14 := make([]shared.SettingFlag, 0, len(attributesItem.PaymentMethodRelationAttribute.SettingsFlag))
			for _, settingsFlagItem14 := range attributesItem.PaymentMethodRelationAttribute.SettingsFlag {
				name29 := new(string)
				if !settingsFlagItem14.Name.IsUnknown() && !settingsFlagItem14.Name.IsNull() {
					*name29 = settingsFlagItem14.Name.ValueString()
				} else {
					name29 = nil
				}
				enabled14 := new(bool)
				if !settingsFlagItem14.Enabled.IsUnknown() && !settingsFlagItem14.Enabled.IsNull() {
					*enabled14 = settingsFlagItem14.Enabled.ValueBool()
				} else {
					enabled14 = nil
				}
				settingsFlag14 = append(settingsFlag14, shared.SettingFlag{
					Name:    name29,
					Enabled: enabled14,
				})
			}
			valueFormatter13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.ValueFormatter.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.ValueFormatter.IsNull() {
				*valueFormatter13 = attributesItem.PaymentMethodRelationAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter13 = nil
			}
			previewValueFormatter13 := new(string)
			if !attributesItem.PaymentMethodRelationAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter13 = attributesItem.PaymentMethodRelationAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter13 = nil
			}
			entityBuilderDisableEdit13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit13 = attributesItem.PaymentMethodRelationAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit13 = nil
			}
			protected13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Protected.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Protected.IsNull() {
				*protected13 = attributesItem.PaymentMethodRelationAttribute.Protected.ValueBool()
			} else {
				protected13 = nil
			}
			var infoHelpers13 *shared.PaymentMethodRelationAttributeInfoHelpers
			if attributesItem.PaymentMethodRelationAttribute.InfoHelpers != nil {
				hintText13 := new(string)
				if !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintText.IsNull() {
					*hintText13 = attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText13 = nil
				}
				hintTextKey13 := new(string)
				if !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey13 = attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey13 = nil
				}
				hintCustomComponent13 := new(string)
				if !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent13 = attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent13 = nil
				}
				hintTooltipPlacement13 := new(string)
				if !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement13 = attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement13 = nil
				}
				infoHelpers13 = &shared.PaymentMethodRelationAttributeInfoHelpers{
					HintText:             hintText13,
					HintTextKey:          hintTextKey13,
					HintCustomComponent:  hintCustomComponent13,
					HintTooltipPlacement: hintTooltipPlacement13,
				}
			}
			repeatable13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.Repeatable.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.Repeatable.IsNull() {
				*repeatable13 = attributesItem.PaymentMethodRelationAttribute.Repeatable.ValueBool()
			} else {
				repeatable13 = nil
			}
			hasPrimary13 := new(bool)
			if !attributesItem.PaymentMethodRelationAttribute.HasPrimary.IsUnknown() && !attributesItem.PaymentMethodRelationAttribute.HasPrimary.IsNull() {
				*hasPrimary13 = attributesItem.PaymentMethodRelationAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary13 = nil
			}
			typeVar13 := shared.PaymentMethodRelationAttributeType(attributesItem.PaymentMethodRelationAttribute.Type.ValueString())
			paymentMethodRelationAttribute := shared.PaymentMethodRelationAttribute{
				ID:                       id14,
				Name:                     name28,
				Label:                    label14,
				Placeholder:              placeholder13,
				Hidden:                   hidden13,
				ShowInTable:              showInTable13,
				Sortable:                 sortable13,
				Required:                 required13,
				Readonly:                 readonly13,
				Deprecated:               deprecated13,
				DefaultValue:             defaultValue13,
				Group:                    group13,
				Order:                    order13,
				Layout:                   layout13,
				HideLabel:                hideLabel13,
				Icon:                     icon13,
				RenderCondition:          renderCondition13,
				Purpose:                  purpose13,
				Manifest:                 manifest13,
				Constraints:              constraints13,
				FeatureFlag:              featureFlag14,
				SettingsFlag:             settingsFlag14,
				ValueFormatter:           valueFormatter13,
				PreviewValueFormatter:    previewValueFormatter13,
				EntityBuilderDisableEdit: entityBuilderDisableEdit13,
				Protected:                protected13,
				InfoHelpers:              infoHelpers13,
				Repeatable:               repeatable13,
				HasPrimary:               hasPrimary13,
				Type:                     typeVar13,
			}
			attributes = append(attributes, shared.AttributeInput{
				PaymentMethodRelationAttribute: &paymentMethodRelationAttribute,
			})
		}
		if attributesItem.CurrencyAttribute != nil {
			id15 := new(string)
			if !attributesItem.CurrencyAttribute.ID.IsUnknown() && !attributesItem.CurrencyAttribute.ID.IsNull() {
				*id15 = attributesItem.CurrencyAttribute.ID.ValueString()
			} else {
				id15 = nil
			}
			var name30 string
			name30 = attributesItem.CurrencyAttribute.Name.ValueString()

			var label15 string
			label15 = attributesItem.CurrencyAttribute.Label.ValueString()

			placeholder14 := new(string)
			if !attributesItem.CurrencyAttribute.Placeholder.IsUnknown() && !attributesItem.CurrencyAttribute.Placeholder.IsNull() {
				*placeholder14 = attributesItem.CurrencyAttribute.Placeholder.ValueString()
			} else {
				placeholder14 = nil
			}
			hidden14 := new(bool)
			if !attributesItem.CurrencyAttribute.Hidden.IsUnknown() && !attributesItem.CurrencyAttribute.Hidden.IsNull() {
				*hidden14 = attributesItem.CurrencyAttribute.Hidden.ValueBool()
			} else {
				hidden14 = nil
			}
			showInTable14 := new(bool)
			if !attributesItem.CurrencyAttribute.ShowInTable.IsUnknown() && !attributesItem.CurrencyAttribute.ShowInTable.IsNull() {
				*showInTable14 = attributesItem.CurrencyAttribute.ShowInTable.ValueBool()
			} else {
				showInTable14 = nil
			}
			sortable14 := new(bool)
			if !attributesItem.CurrencyAttribute.Sortable.IsUnknown() && !attributesItem.CurrencyAttribute.Sortable.IsNull() {
				*sortable14 = attributesItem.CurrencyAttribute.Sortable.ValueBool()
			} else {
				sortable14 = nil
			}
			required14 := new(bool)
			if !attributesItem.CurrencyAttribute.Required.IsUnknown() && !attributesItem.CurrencyAttribute.Required.IsNull() {
				*required14 = attributesItem.CurrencyAttribute.Required.ValueBool()
			} else {
				required14 = nil
			}
			readonly14 := new(bool)
			if !attributesItem.CurrencyAttribute.Readonly.IsUnknown() && !attributesItem.CurrencyAttribute.Readonly.IsNull() {
				*readonly14 = attributesItem.CurrencyAttribute.Readonly.ValueBool()
			} else {
				readonly14 = nil
			}
			deprecated14 := new(bool)
			if !attributesItem.CurrencyAttribute.Deprecated.IsUnknown() && !attributesItem.CurrencyAttribute.Deprecated.IsNull() {
				*deprecated14 = attributesItem.CurrencyAttribute.Deprecated.ValueBool()
			} else {
				deprecated14 = nil
			}
			var defaultValue14 interface{}
			if !attributesItem.CurrencyAttribute.DefaultValue.IsUnknown() && !attributesItem.CurrencyAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.CurrencyAttribute.DefaultValue.ValueString()), &defaultValue14)
			}
			group14 := new(string)
			if !attributesItem.CurrencyAttribute.Group.IsUnknown() && !attributesItem.CurrencyAttribute.Group.IsNull() {
				*group14 = attributesItem.CurrencyAttribute.Group.ValueString()
			} else {
				group14 = nil
			}
			order14 := new(int64)
			if !attributesItem.CurrencyAttribute.Order.IsUnknown() && !attributesItem.CurrencyAttribute.Order.IsNull() {
				*order14 = attributesItem.CurrencyAttribute.Order.ValueInt64()
			} else {
				order14 = nil
			}
			layout14 := new(string)
			if !attributesItem.CurrencyAttribute.Layout.IsUnknown() && !attributesItem.CurrencyAttribute.Layout.IsNull() {
				*layout14 = attributesItem.CurrencyAttribute.Layout.ValueString()
			} else {
				layout14 = nil
			}
			hideLabel14 := new(bool)
			if !attributesItem.CurrencyAttribute.HideLabel.IsUnknown() && !attributesItem.CurrencyAttribute.HideLabel.IsNull() {
				*hideLabel14 = attributesItem.CurrencyAttribute.HideLabel.ValueBool()
			} else {
				hideLabel14 = nil
			}
			icon14 := new(string)
			if !attributesItem.CurrencyAttribute.Icon.IsUnknown() && !attributesItem.CurrencyAttribute.Icon.IsNull() {
				*icon14 = attributesItem.CurrencyAttribute.Icon.ValueString()
			} else {
				icon14 = nil
			}
			renderCondition14 := new(string)
			if !attributesItem.CurrencyAttribute.RenderCondition.IsUnknown() && !attributesItem.CurrencyAttribute.RenderCondition.IsNull() {
				*renderCondition14 = attributesItem.CurrencyAttribute.RenderCondition.ValueString()
			} else {
				renderCondition14 = nil
			}
			purpose14 := make([]string, 0, len(attributesItem.CurrencyAttribute.Purpose))
			for _, purposeItem14 := range attributesItem.CurrencyAttribute.Purpose {
				purpose14 = append(purpose14, purposeItem14.ValueString())
			}
			var manifest14 []string
			if attributesItem.CurrencyAttribute.Manifest != nil {
				manifest14 = make([]string, 0, len(attributesItem.CurrencyAttribute.Manifest))
				for _, manifestItem14 := range attributesItem.CurrencyAttribute.Manifest {
					manifest14 = append(manifest14, manifestItem14.ValueString())
				}
			}
			var constraints14 *shared.CurrencyAttributeConstraints
			if attributesItem.CurrencyAttribute.Constraints != nil {
				constraints14 = &shared.CurrencyAttributeConstraints{}
			}
			featureFlag15 := new(string)
			if !attributesItem.CurrencyAttribute.FeatureFlag.IsUnknown() && !attributesItem.CurrencyAttribute.FeatureFlag.IsNull() {
				*featureFlag15 = attributesItem.CurrencyAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag15 = nil
			}
			settingsFlag15 := make([]shared.SettingFlag, 0, len(attributesItem.CurrencyAttribute.SettingsFlag))
			for _, settingsFlagItem15 := range attributesItem.CurrencyAttribute.SettingsFlag {
				name31 := new(string)
				if !settingsFlagItem15.Name.IsUnknown() && !settingsFlagItem15.Name.IsNull() {
					*name31 = settingsFlagItem15.Name.ValueString()
				} else {
					name31 = nil
				}
				enabled15 := new(bool)
				if !settingsFlagItem15.Enabled.IsUnknown() && !settingsFlagItem15.Enabled.IsNull() {
					*enabled15 = settingsFlagItem15.Enabled.ValueBool()
				} else {
					enabled15 = nil
				}
				settingsFlag15 = append(settingsFlag15, shared.SettingFlag{
					Name:    name31,
					Enabled: enabled15,
				})
			}
			valueFormatter14 := new(string)
			if !attributesItem.CurrencyAttribute.ValueFormatter.IsUnknown() && !attributesItem.CurrencyAttribute.ValueFormatter.IsNull() {
				*valueFormatter14 = attributesItem.CurrencyAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter14 = nil
			}
			previewValueFormatter14 := new(string)
			if !attributesItem.CurrencyAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.CurrencyAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter14 = attributesItem.CurrencyAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter14 = nil
			}
			entityBuilderDisableEdit14 := new(bool)
			if !attributesItem.CurrencyAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.CurrencyAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit14 = attributesItem.CurrencyAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit14 = nil
			}
			protected14 := new(bool)
			if !attributesItem.CurrencyAttribute.Protected.IsUnknown() && !attributesItem.CurrencyAttribute.Protected.IsNull() {
				*protected14 = attributesItem.CurrencyAttribute.Protected.ValueBool()
			} else {
				protected14 = nil
			}
			var infoHelpers14 *shared.CurrencyAttributeInfoHelpers
			if attributesItem.CurrencyAttribute.InfoHelpers != nil {
				hintText14 := new(string)
				if !attributesItem.CurrencyAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.CurrencyAttribute.InfoHelpers.HintText.IsNull() {
					*hintText14 = attributesItem.CurrencyAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText14 = nil
				}
				hintTextKey14 := new(string)
				if !attributesItem.CurrencyAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.CurrencyAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey14 = attributesItem.CurrencyAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey14 = nil
				}
				hintCustomComponent14 := new(string)
				if !attributesItem.CurrencyAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.CurrencyAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent14 = attributesItem.CurrencyAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent14 = nil
				}
				hintTooltipPlacement14 := new(string)
				if !attributesItem.CurrencyAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.CurrencyAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement14 = attributesItem.CurrencyAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement14 = nil
				}
				infoHelpers14 = &shared.CurrencyAttributeInfoHelpers{
					HintText:             hintText14,
					HintTextKey:          hintTextKey14,
					HintCustomComponent:  hintCustomComponent14,
					HintTooltipPlacement: hintTooltipPlacement14,
				}
			}
			repeatable14 := new(bool)
			if !attributesItem.CurrencyAttribute.Repeatable.IsUnknown() && !attributesItem.CurrencyAttribute.Repeatable.IsNull() {
				*repeatable14 = attributesItem.CurrencyAttribute.Repeatable.ValueBool()
			} else {
				repeatable14 = nil
			}
			hasPrimary14 := new(bool)
			if !attributesItem.CurrencyAttribute.HasPrimary.IsUnknown() && !attributesItem.CurrencyAttribute.HasPrimary.IsNull() {
				*hasPrimary14 = attributesItem.CurrencyAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary14 = nil
			}
			typeVar14 := shared.CurrencyAttributeType(attributesItem.CurrencyAttribute.Type.ValueString())
			currencySelectorOnly := new(bool)
			if !attributesItem.CurrencyAttribute.CurrencySelectorOnly.IsUnknown() && !attributesItem.CurrencyAttribute.CurrencySelectorOnly.IsNull() {
				*currencySelectorOnly = attributesItem.CurrencyAttribute.CurrencySelectorOnly.ValueBool()
			} else {
				currencySelectorOnly = nil
			}
			currency := make([]shared.Currency, 0, len(attributesItem.CurrencyAttribute.Currency))
			for _, currencyItem := range attributesItem.CurrencyAttribute.Currency {
				if currencyItem.One != nil {
					var code string
					code = currencyItem.One.Code.ValueString()

					var description string
					description = currencyItem.One.Description.ValueString()

					var symbol string
					symbol = currencyItem.One.Symbol.ValueString()

					flag := new(string)
					if !currencyItem.One.Flag.IsUnknown() && !currencyItem.One.Flag.IsNull() {
						*flag = currencyItem.One.Flag.ValueString()
					} else {
						flag = nil
					}
					currency1 := shared.Currency1{
						Code:        code,
						Description: description,
						Symbol:      symbol,
						Flag:        flag,
					}
					currency = append(currency, shared.Currency{
						Currency1: &currency1,
					})
				}
			}
			currencyAttribute := shared.CurrencyAttribute{
				ID:                       id15,
				Name:                     name30,
				Label:                    label15,
				Placeholder:              placeholder14,
				Hidden:                   hidden14,
				ShowInTable:              showInTable14,
				Sortable:                 sortable14,
				Required:                 required14,
				Readonly:                 readonly14,
				Deprecated:               deprecated14,
				DefaultValue:             defaultValue14,
				Group:                    group14,
				Order:                    order14,
				Layout:                   layout14,
				HideLabel:                hideLabel14,
				Icon:                     icon14,
				RenderCondition:          renderCondition14,
				Purpose:                  purpose14,
				Manifest:                 manifest14,
				Constraints:              constraints14,
				FeatureFlag:              featureFlag15,
				SettingsFlag:             settingsFlag15,
				ValueFormatter:           valueFormatter14,
				PreviewValueFormatter:    previewValueFormatter14,
				EntityBuilderDisableEdit: entityBuilderDisableEdit14,
				Protected:                protected14,
				InfoHelpers:              infoHelpers14,
				Repeatable:               repeatable14,
				HasPrimary:               hasPrimary14,
				Type:                     typeVar14,
				CurrencySelectorOnly:     currencySelectorOnly,
				Currency:                 currency,
			}
			attributes = append(attributes, shared.AttributeInput{
				CurrencyAttribute: &currencyAttribute,
			})
		}
		if attributesItem.TagsAttribute != nil {
			id16 := new(string)
			if !attributesItem.TagsAttribute.ID.IsUnknown() && !attributesItem.TagsAttribute.ID.IsNull() {
				*id16 = attributesItem.TagsAttribute.ID.ValueString()
			} else {
				id16 = nil
			}
			var name32 string
			name32 = attributesItem.TagsAttribute.Name.ValueString()

			var label16 string
			label16 = attributesItem.TagsAttribute.Label.ValueString()

			placeholder15 := new(string)
			if !attributesItem.TagsAttribute.Placeholder.IsUnknown() && !attributesItem.TagsAttribute.Placeholder.IsNull() {
				*placeholder15 = attributesItem.TagsAttribute.Placeholder.ValueString()
			} else {
				placeholder15 = nil
			}
			hidden15 := new(bool)
			if !attributesItem.TagsAttribute.Hidden.IsUnknown() && !attributesItem.TagsAttribute.Hidden.IsNull() {
				*hidden15 = attributesItem.TagsAttribute.Hidden.ValueBool()
			} else {
				hidden15 = nil
			}
			showInTable15 := new(bool)
			if !attributesItem.TagsAttribute.ShowInTable.IsUnknown() && !attributesItem.TagsAttribute.ShowInTable.IsNull() {
				*showInTable15 = attributesItem.TagsAttribute.ShowInTable.ValueBool()
			} else {
				showInTable15 = nil
			}
			sortable15 := new(bool)
			if !attributesItem.TagsAttribute.Sortable.IsUnknown() && !attributesItem.TagsAttribute.Sortable.IsNull() {
				*sortable15 = attributesItem.TagsAttribute.Sortable.ValueBool()
			} else {
				sortable15 = nil
			}
			required15 := new(bool)
			if !attributesItem.TagsAttribute.Required.IsUnknown() && !attributesItem.TagsAttribute.Required.IsNull() {
				*required15 = attributesItem.TagsAttribute.Required.ValueBool()
			} else {
				required15 = nil
			}
			readonly15 := new(bool)
			if !attributesItem.TagsAttribute.Readonly.IsUnknown() && !attributesItem.TagsAttribute.Readonly.IsNull() {
				*readonly15 = attributesItem.TagsAttribute.Readonly.ValueBool()
			} else {
				readonly15 = nil
			}
			deprecated15 := new(bool)
			if !attributesItem.TagsAttribute.Deprecated.IsUnknown() && !attributesItem.TagsAttribute.Deprecated.IsNull() {
				*deprecated15 = attributesItem.TagsAttribute.Deprecated.ValueBool()
			} else {
				deprecated15 = nil
			}
			var defaultValue15 interface{}
			if !attributesItem.TagsAttribute.DefaultValue.IsUnknown() && !attributesItem.TagsAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.TagsAttribute.DefaultValue.ValueString()), &defaultValue15)
			}
			group15 := new(string)
			if !attributesItem.TagsAttribute.Group.IsUnknown() && !attributesItem.TagsAttribute.Group.IsNull() {
				*group15 = attributesItem.TagsAttribute.Group.ValueString()
			} else {
				group15 = nil
			}
			order15 := new(int64)
			if !attributesItem.TagsAttribute.Order.IsUnknown() && !attributesItem.TagsAttribute.Order.IsNull() {
				*order15 = attributesItem.TagsAttribute.Order.ValueInt64()
			} else {
				order15 = nil
			}
			layout15 := new(string)
			if !attributesItem.TagsAttribute.Layout.IsUnknown() && !attributesItem.TagsAttribute.Layout.IsNull() {
				*layout15 = attributesItem.TagsAttribute.Layout.ValueString()
			} else {
				layout15 = nil
			}
			hideLabel15 := new(bool)
			if !attributesItem.TagsAttribute.HideLabel.IsUnknown() && !attributesItem.TagsAttribute.HideLabel.IsNull() {
				*hideLabel15 = attributesItem.TagsAttribute.HideLabel.ValueBool()
			} else {
				hideLabel15 = nil
			}
			icon15 := new(string)
			if !attributesItem.TagsAttribute.Icon.IsUnknown() && !attributesItem.TagsAttribute.Icon.IsNull() {
				*icon15 = attributesItem.TagsAttribute.Icon.ValueString()
			} else {
				icon15 = nil
			}
			renderCondition15 := new(string)
			if !attributesItem.TagsAttribute.RenderCondition.IsUnknown() && !attributesItem.TagsAttribute.RenderCondition.IsNull() {
				*renderCondition15 = attributesItem.TagsAttribute.RenderCondition.ValueString()
			} else {
				renderCondition15 = nil
			}
			purpose15 := make([]string, 0, len(attributesItem.TagsAttribute.Purpose))
			for _, purposeItem15 := range attributesItem.TagsAttribute.Purpose {
				purpose15 = append(purpose15, purposeItem15.ValueString())
			}
			var manifest15 []string
			if attributesItem.TagsAttribute.Manifest != nil {
				manifest15 = make([]string, 0, len(attributesItem.TagsAttribute.Manifest))
				for _, manifestItem15 := range attributesItem.TagsAttribute.Manifest {
					manifest15 = append(manifest15, manifestItem15.ValueString())
				}
			}
			var constraints15 *shared.TagsAttributeConstraints
			if attributesItem.TagsAttribute.Constraints != nil {
				constraints15 = &shared.TagsAttributeConstraints{}
			}
			featureFlag16 := new(string)
			if !attributesItem.TagsAttribute.FeatureFlag.IsUnknown() && !attributesItem.TagsAttribute.FeatureFlag.IsNull() {
				*featureFlag16 = attributesItem.TagsAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag16 = nil
			}
			settingsFlag16 := make([]shared.SettingFlag, 0, len(attributesItem.TagsAttribute.SettingsFlag))
			for _, settingsFlagItem16 := range attributesItem.TagsAttribute.SettingsFlag {
				name33 := new(string)
				if !settingsFlagItem16.Name.IsUnknown() && !settingsFlagItem16.Name.IsNull() {
					*name33 = settingsFlagItem16.Name.ValueString()
				} else {
					name33 = nil
				}
				enabled16 := new(bool)
				if !settingsFlagItem16.Enabled.IsUnknown() && !settingsFlagItem16.Enabled.IsNull() {
					*enabled16 = settingsFlagItem16.Enabled.ValueBool()
				} else {
					enabled16 = nil
				}
				settingsFlag16 = append(settingsFlag16, shared.SettingFlag{
					Name:    name33,
					Enabled: enabled16,
				})
			}
			valueFormatter15 := new(string)
			if !attributesItem.TagsAttribute.ValueFormatter.IsUnknown() && !attributesItem.TagsAttribute.ValueFormatter.IsNull() {
				*valueFormatter15 = attributesItem.TagsAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter15 = nil
			}
			previewValueFormatter15 := new(string)
			if !attributesItem.TagsAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.TagsAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter15 = attributesItem.TagsAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter15 = nil
			}
			entityBuilderDisableEdit15 := new(bool)
			if !attributesItem.TagsAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.TagsAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit15 = attributesItem.TagsAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit15 = nil
			}
			protected15 := new(bool)
			if !attributesItem.TagsAttribute.Protected.IsUnknown() && !attributesItem.TagsAttribute.Protected.IsNull() {
				*protected15 = attributesItem.TagsAttribute.Protected.ValueBool()
			} else {
				protected15 = nil
			}
			var infoHelpers15 *shared.TagsAttributeInfoHelpers
			if attributesItem.TagsAttribute.InfoHelpers != nil {
				hintText15 := new(string)
				if !attributesItem.TagsAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.TagsAttribute.InfoHelpers.HintText.IsNull() {
					*hintText15 = attributesItem.TagsAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText15 = nil
				}
				hintTextKey15 := new(string)
				if !attributesItem.TagsAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.TagsAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey15 = attributesItem.TagsAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey15 = nil
				}
				hintCustomComponent15 := new(string)
				if !attributesItem.TagsAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.TagsAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent15 = attributesItem.TagsAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent15 = nil
				}
				hintTooltipPlacement15 := new(string)
				if !attributesItem.TagsAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.TagsAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement15 = attributesItem.TagsAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement15 = nil
				}
				infoHelpers15 = &shared.TagsAttributeInfoHelpers{
					HintText:             hintText15,
					HintTextKey:          hintTextKey15,
					HintCustomComponent:  hintCustomComponent15,
					HintTooltipPlacement: hintTooltipPlacement15,
				}
			}
			repeatable15 := new(bool)
			if !attributesItem.TagsAttribute.Repeatable.IsUnknown() && !attributesItem.TagsAttribute.Repeatable.IsNull() {
				*repeatable15 = attributesItem.TagsAttribute.Repeatable.ValueBool()
			} else {
				repeatable15 = nil
			}
			hasPrimary15 := new(bool)
			if !attributesItem.TagsAttribute.HasPrimary.IsUnknown() && !attributesItem.TagsAttribute.HasPrimary.IsNull() {
				*hasPrimary15 = attributesItem.TagsAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary15 = nil
			}
			typeVar15 := shared.TagsAttributeType(attributesItem.TagsAttribute.Type.ValueString())
			optionsVar3 := make([]string, 0, len(attributesItem.TagsAttribute.Options))
			for _, optionsItem2 := range attributesItem.TagsAttribute.Options {
				optionsVar3 = append(optionsVar3, optionsItem2.ValueString())
			}
			suggestions := make([]string, 0, len(attributesItem.TagsAttribute.Suggestions))
			for _, suggestionsItem := range attributesItem.TagsAttribute.Suggestions {
				suggestions = append(suggestions, suggestionsItem.ValueString())
			}
			tagsAttribute := shared.TagsAttribute{
				ID:                       id16,
				Name:                     name32,
				Label:                    label16,
				Placeholder:              placeholder15,
				Hidden:                   hidden15,
				ShowInTable:              showInTable15,
				Sortable:                 sortable15,
				Required:                 required15,
				Readonly:                 readonly15,
				Deprecated:               deprecated15,
				DefaultValue:             defaultValue15,
				Group:                    group15,
				Order:                    order15,
				Layout:                   layout15,
				HideLabel:                hideLabel15,
				Icon:                     icon15,
				RenderCondition:          renderCondition15,
				Purpose:                  purpose15,
				Manifest:                 manifest15,
				Constraints:              constraints15,
				FeatureFlag:              featureFlag16,
				SettingsFlag:             settingsFlag16,
				ValueFormatter:           valueFormatter15,
				PreviewValueFormatter:    previewValueFormatter15,
				EntityBuilderDisableEdit: entityBuilderDisableEdit15,
				Protected:                protected15,
				InfoHelpers:              infoHelpers15,
				Repeatable:               repeatable15,
				HasPrimary:               hasPrimary15,
				Type:                     typeVar15,
				Options:                  optionsVar3,
				Suggestions:              suggestions,
			}
			attributes = append(attributes, shared.AttributeInput{
				TagsAttribute: &tagsAttribute,
			})
		}
		if attributesItem.MessageEmailAddressAttribute != nil {
			id17 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.ID.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.ID.IsNull() {
				*id17 = attributesItem.MessageEmailAddressAttribute.ID.ValueString()
			} else {
				id17 = nil
			}
			var name34 string
			name34 = attributesItem.MessageEmailAddressAttribute.Name.ValueString()

			var label17 string
			label17 = attributesItem.MessageEmailAddressAttribute.Label.ValueString()

			placeholder16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.Placeholder.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Placeholder.IsNull() {
				*placeholder16 = attributesItem.MessageEmailAddressAttribute.Placeholder.ValueString()
			} else {
				placeholder16 = nil
			}
			hidden16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Hidden.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Hidden.IsNull() {
				*hidden16 = attributesItem.MessageEmailAddressAttribute.Hidden.ValueBool()
			} else {
				hidden16 = nil
			}
			showInTable16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.ShowInTable.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.ShowInTable.IsNull() {
				*showInTable16 = attributesItem.MessageEmailAddressAttribute.ShowInTable.ValueBool()
			} else {
				showInTable16 = nil
			}
			sortable16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Sortable.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Sortable.IsNull() {
				*sortable16 = attributesItem.MessageEmailAddressAttribute.Sortable.ValueBool()
			} else {
				sortable16 = nil
			}
			required16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Required.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Required.IsNull() {
				*required16 = attributesItem.MessageEmailAddressAttribute.Required.ValueBool()
			} else {
				required16 = nil
			}
			readonly16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Readonly.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Readonly.IsNull() {
				*readonly16 = attributesItem.MessageEmailAddressAttribute.Readonly.ValueBool()
			} else {
				readonly16 = nil
			}
			deprecated16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Deprecated.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Deprecated.IsNull() {
				*deprecated16 = attributesItem.MessageEmailAddressAttribute.Deprecated.ValueBool()
			} else {
				deprecated16 = nil
			}
			var defaultValue16 interface{}
			if !attributesItem.MessageEmailAddressAttribute.DefaultValue.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.MessageEmailAddressAttribute.DefaultValue.ValueString()), &defaultValue16)
			}
			group16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.Group.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Group.IsNull() {
				*group16 = attributesItem.MessageEmailAddressAttribute.Group.ValueString()
			} else {
				group16 = nil
			}
			order16 := new(int64)
			if !attributesItem.MessageEmailAddressAttribute.Order.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Order.IsNull() {
				*order16 = attributesItem.MessageEmailAddressAttribute.Order.ValueInt64()
			} else {
				order16 = nil
			}
			layout16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.Layout.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Layout.IsNull() {
				*layout16 = attributesItem.MessageEmailAddressAttribute.Layout.ValueString()
			} else {
				layout16 = nil
			}
			hideLabel16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.HideLabel.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.HideLabel.IsNull() {
				*hideLabel16 = attributesItem.MessageEmailAddressAttribute.HideLabel.ValueBool()
			} else {
				hideLabel16 = nil
			}
			icon16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.Icon.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Icon.IsNull() {
				*icon16 = attributesItem.MessageEmailAddressAttribute.Icon.ValueString()
			} else {
				icon16 = nil
			}
			renderCondition16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.RenderCondition.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.RenderCondition.IsNull() {
				*renderCondition16 = attributesItem.MessageEmailAddressAttribute.RenderCondition.ValueString()
			} else {
				renderCondition16 = nil
			}
			purpose16 := make([]string, 0, len(attributesItem.MessageEmailAddressAttribute.Purpose))
			for _, purposeItem16 := range attributesItem.MessageEmailAddressAttribute.Purpose {
				purpose16 = append(purpose16, purposeItem16.ValueString())
			}
			var manifest16 []string
			if attributesItem.MessageEmailAddressAttribute.Manifest != nil {
				manifest16 = make([]string, 0, len(attributesItem.MessageEmailAddressAttribute.Manifest))
				for _, manifestItem16 := range attributesItem.MessageEmailAddressAttribute.Manifest {
					manifest16 = append(manifest16, manifestItem16.ValueString())
				}
			}
			var constraints16 *shared.MessageEmailAddressAttributeConstraints
			if attributesItem.MessageEmailAddressAttribute.Constraints != nil {
				constraints16 = &shared.MessageEmailAddressAttributeConstraints{}
			}
			featureFlag17 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.FeatureFlag.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.FeatureFlag.IsNull() {
				*featureFlag17 = attributesItem.MessageEmailAddressAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag17 = nil
			}
			settingsFlag17 := make([]shared.SettingFlag, 0, len(attributesItem.MessageEmailAddressAttribute.SettingsFlag))
			for _, settingsFlagItem17 := range attributesItem.MessageEmailAddressAttribute.SettingsFlag {
				name35 := new(string)
				if !settingsFlagItem17.Name.IsUnknown() && !settingsFlagItem17.Name.IsNull() {
					*name35 = settingsFlagItem17.Name.ValueString()
				} else {
					name35 = nil
				}
				enabled17 := new(bool)
				if !settingsFlagItem17.Enabled.IsUnknown() && !settingsFlagItem17.Enabled.IsNull() {
					*enabled17 = settingsFlagItem17.Enabled.ValueBool()
				} else {
					enabled17 = nil
				}
				settingsFlag17 = append(settingsFlag17, shared.SettingFlag{
					Name:    name35,
					Enabled: enabled17,
				})
			}
			valueFormatter16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.ValueFormatter.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.ValueFormatter.IsNull() {
				*valueFormatter16 = attributesItem.MessageEmailAddressAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter16 = nil
			}
			previewValueFormatter16 := new(string)
			if !attributesItem.MessageEmailAddressAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter16 = attributesItem.MessageEmailAddressAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter16 = nil
			}
			entityBuilderDisableEdit16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit16 = attributesItem.MessageEmailAddressAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit16 = nil
			}
			protected16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Protected.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Protected.IsNull() {
				*protected16 = attributesItem.MessageEmailAddressAttribute.Protected.ValueBool()
			} else {
				protected16 = nil
			}
			var infoHelpers16 *shared.MessageEmailAddressAttributeInfoHelpers
			if attributesItem.MessageEmailAddressAttribute.InfoHelpers != nil {
				hintText16 := new(string)
				if !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintText.IsNull() {
					*hintText16 = attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText16 = nil
				}
				hintTextKey16 := new(string)
				if !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey16 = attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey16 = nil
				}
				hintCustomComponent16 := new(string)
				if !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent16 = attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent16 = nil
				}
				hintTooltipPlacement16 := new(string)
				if !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement16 = attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement16 = nil
				}
				infoHelpers16 = &shared.MessageEmailAddressAttributeInfoHelpers{
					HintText:             hintText16,
					HintTextKey:          hintTextKey16,
					HintCustomComponent:  hintCustomComponent16,
					HintTooltipPlacement: hintTooltipPlacement16,
				}
			}
			repeatable16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.Repeatable.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Repeatable.IsNull() {
				*repeatable16 = attributesItem.MessageEmailAddressAttribute.Repeatable.ValueBool()
			} else {
				repeatable16 = nil
			}
			hasPrimary16 := new(bool)
			if !attributesItem.MessageEmailAddressAttribute.HasPrimary.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.HasPrimary.IsNull() {
				*hasPrimary16 = attributesItem.MessageEmailAddressAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary16 = nil
			}
			typeVar16 := shared.MessageEmailAddressAttributeType(attributesItem.MessageEmailAddressAttribute.Type.ValueString())
			address := new(string)
			if !attributesItem.MessageEmailAddressAttribute.Address.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.Address.IsNull() {
				*address = attributesItem.MessageEmailAddressAttribute.Address.ValueString()
			} else {
				address = nil
			}
			sendStatus := new(string)
			if !attributesItem.MessageEmailAddressAttribute.SendStatus.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.SendStatus.IsNull() {
				*sendStatus = attributesItem.MessageEmailAddressAttribute.SendStatus.ValueString()
			} else {
				sendStatus = nil
			}
			emailType := new(string)
			if !attributesItem.MessageEmailAddressAttribute.EmailType.IsUnknown() && !attributesItem.MessageEmailAddressAttribute.EmailType.IsNull() {
				*emailType = attributesItem.MessageEmailAddressAttribute.EmailType.ValueString()
			} else {
				emailType = nil
			}
			messageEmailAddressAttribute := shared.MessageEmailAddressAttribute{
				ID:                       id17,
				Name:                     name34,
				Label:                    label17,
				Placeholder:              placeholder16,
				Hidden:                   hidden16,
				ShowInTable:              showInTable16,
				Sortable:                 sortable16,
				Required:                 required16,
				Readonly:                 readonly16,
				Deprecated:               deprecated16,
				DefaultValue:             defaultValue16,
				Group:                    group16,
				Order:                    order16,
				Layout:                   layout16,
				HideLabel:                hideLabel16,
				Icon:                     icon16,
				RenderCondition:          renderCondition16,
				Purpose:                  purpose16,
				Manifest:                 manifest16,
				Constraints:              constraints16,
				FeatureFlag:              featureFlag17,
				SettingsFlag:             settingsFlag17,
				ValueFormatter:           valueFormatter16,
				PreviewValueFormatter:    previewValueFormatter16,
				EntityBuilderDisableEdit: entityBuilderDisableEdit16,
				Protected:                protected16,
				InfoHelpers:              infoHelpers16,
				Repeatable:               repeatable16,
				HasPrimary:               hasPrimary16,
				Type:                     typeVar16,
				Address:                  address,
				SendStatus:               sendStatus,
				EmailType:                emailType,
			}
			attributes = append(attributes, shared.AttributeInput{
				MessageEmailAddressAttribute: &messageEmailAddressAttribute,
			})
		}
		if attributesItem.NumberAttribute != nil {
			id18 := new(string)
			if !attributesItem.NumberAttribute.ID.IsUnknown() && !attributesItem.NumberAttribute.ID.IsNull() {
				*id18 = attributesItem.NumberAttribute.ID.ValueString()
			} else {
				id18 = nil
			}
			var name36 string
			name36 = attributesItem.NumberAttribute.Name.ValueString()

			var label18 string
			label18 = attributesItem.NumberAttribute.Label.ValueString()

			placeholder17 := new(string)
			if !attributesItem.NumberAttribute.Placeholder.IsUnknown() && !attributesItem.NumberAttribute.Placeholder.IsNull() {
				*placeholder17 = attributesItem.NumberAttribute.Placeholder.ValueString()
			} else {
				placeholder17 = nil
			}
			hidden17 := new(bool)
			if !attributesItem.NumberAttribute.Hidden.IsUnknown() && !attributesItem.NumberAttribute.Hidden.IsNull() {
				*hidden17 = attributesItem.NumberAttribute.Hidden.ValueBool()
			} else {
				hidden17 = nil
			}
			showInTable17 := new(bool)
			if !attributesItem.NumberAttribute.ShowInTable.IsUnknown() && !attributesItem.NumberAttribute.ShowInTable.IsNull() {
				*showInTable17 = attributesItem.NumberAttribute.ShowInTable.ValueBool()
			} else {
				showInTable17 = nil
			}
			sortable17 := new(bool)
			if !attributesItem.NumberAttribute.Sortable.IsUnknown() && !attributesItem.NumberAttribute.Sortable.IsNull() {
				*sortable17 = attributesItem.NumberAttribute.Sortable.ValueBool()
			} else {
				sortable17 = nil
			}
			required17 := new(bool)
			if !attributesItem.NumberAttribute.Required.IsUnknown() && !attributesItem.NumberAttribute.Required.IsNull() {
				*required17 = attributesItem.NumberAttribute.Required.ValueBool()
			} else {
				required17 = nil
			}
			readonly17 := new(bool)
			if !attributesItem.NumberAttribute.Readonly.IsUnknown() && !attributesItem.NumberAttribute.Readonly.IsNull() {
				*readonly17 = attributesItem.NumberAttribute.Readonly.ValueBool()
			} else {
				readonly17 = nil
			}
			deprecated17 := new(bool)
			if !attributesItem.NumberAttribute.Deprecated.IsUnknown() && !attributesItem.NumberAttribute.Deprecated.IsNull() {
				*deprecated17 = attributesItem.NumberAttribute.Deprecated.ValueBool()
			} else {
				deprecated17 = nil
			}
			var defaultValue17 interface{}
			if !attributesItem.NumberAttribute.DefaultValue.IsUnknown() && !attributesItem.NumberAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.NumberAttribute.DefaultValue.ValueString()), &defaultValue17)
			}
			group17 := new(string)
			if !attributesItem.NumberAttribute.Group.IsUnknown() && !attributesItem.NumberAttribute.Group.IsNull() {
				*group17 = attributesItem.NumberAttribute.Group.ValueString()
			} else {
				group17 = nil
			}
			order17 := new(int64)
			if !attributesItem.NumberAttribute.Order.IsUnknown() && !attributesItem.NumberAttribute.Order.IsNull() {
				*order17 = attributesItem.NumberAttribute.Order.ValueInt64()
			} else {
				order17 = nil
			}
			layout17 := new(string)
			if !attributesItem.NumberAttribute.Layout.IsUnknown() && !attributesItem.NumberAttribute.Layout.IsNull() {
				*layout17 = attributesItem.NumberAttribute.Layout.ValueString()
			} else {
				layout17 = nil
			}
			hideLabel17 := new(bool)
			if !attributesItem.NumberAttribute.HideLabel.IsUnknown() && !attributesItem.NumberAttribute.HideLabel.IsNull() {
				*hideLabel17 = attributesItem.NumberAttribute.HideLabel.ValueBool()
			} else {
				hideLabel17 = nil
			}
			icon17 := new(string)
			if !attributesItem.NumberAttribute.Icon.IsUnknown() && !attributesItem.NumberAttribute.Icon.IsNull() {
				*icon17 = attributesItem.NumberAttribute.Icon.ValueString()
			} else {
				icon17 = nil
			}
			renderCondition17 := new(string)
			if !attributesItem.NumberAttribute.RenderCondition.IsUnknown() && !attributesItem.NumberAttribute.RenderCondition.IsNull() {
				*renderCondition17 = attributesItem.NumberAttribute.RenderCondition.ValueString()
			} else {
				renderCondition17 = nil
			}
			purpose17 := make([]string, 0, len(attributesItem.NumberAttribute.Purpose))
			for _, purposeItem17 := range attributesItem.NumberAttribute.Purpose {
				purpose17 = append(purpose17, purposeItem17.ValueString())
			}
			var manifest17 []string
			if attributesItem.NumberAttribute.Manifest != nil {
				manifest17 = make([]string, 0, len(attributesItem.NumberAttribute.Manifest))
				for _, manifestItem17 := range attributesItem.NumberAttribute.Manifest {
					manifest17 = append(manifest17, manifestItem17.ValueString())
				}
			}
			var constraints17 *shared.NumberAttributeConstraints
			if attributesItem.NumberAttribute.Constraints != nil {
				constraints17 = &shared.NumberAttributeConstraints{}
			}
			featureFlag18 := new(string)
			if !attributesItem.NumberAttribute.FeatureFlag.IsUnknown() && !attributesItem.NumberAttribute.FeatureFlag.IsNull() {
				*featureFlag18 = attributesItem.NumberAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag18 = nil
			}
			settingsFlag18 := make([]shared.SettingFlag, 0, len(attributesItem.NumberAttribute.SettingsFlag))
			for _, settingsFlagItem18 := range attributesItem.NumberAttribute.SettingsFlag {
				name37 := new(string)
				if !settingsFlagItem18.Name.IsUnknown() && !settingsFlagItem18.Name.IsNull() {
					*name37 = settingsFlagItem18.Name.ValueString()
				} else {
					name37 = nil
				}
				enabled18 := new(bool)
				if !settingsFlagItem18.Enabled.IsUnknown() && !settingsFlagItem18.Enabled.IsNull() {
					*enabled18 = settingsFlagItem18.Enabled.ValueBool()
				} else {
					enabled18 = nil
				}
				settingsFlag18 = append(settingsFlag18, shared.SettingFlag{
					Name:    name37,
					Enabled: enabled18,
				})
			}
			valueFormatter17 := new(string)
			if !attributesItem.NumberAttribute.ValueFormatter.IsUnknown() && !attributesItem.NumberAttribute.ValueFormatter.IsNull() {
				*valueFormatter17 = attributesItem.NumberAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter17 = nil
			}
			previewValueFormatter17 := new(string)
			if !attributesItem.NumberAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.NumberAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter17 = attributesItem.NumberAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter17 = nil
			}
			entityBuilderDisableEdit17 := new(bool)
			if !attributesItem.NumberAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.NumberAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit17 = attributesItem.NumberAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit17 = nil
			}
			protected17 := new(bool)
			if !attributesItem.NumberAttribute.Protected.IsUnknown() && !attributesItem.NumberAttribute.Protected.IsNull() {
				*protected17 = attributesItem.NumberAttribute.Protected.ValueBool()
			} else {
				protected17 = nil
			}
			var infoHelpers17 *shared.NumberAttributeInfoHelpers
			if attributesItem.NumberAttribute.InfoHelpers != nil {
				hintText17 := new(string)
				if !attributesItem.NumberAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.NumberAttribute.InfoHelpers.HintText.IsNull() {
					*hintText17 = attributesItem.NumberAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText17 = nil
				}
				hintTextKey17 := new(string)
				if !attributesItem.NumberAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.NumberAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey17 = attributesItem.NumberAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey17 = nil
				}
				hintCustomComponent17 := new(string)
				if !attributesItem.NumberAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.NumberAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent17 = attributesItem.NumberAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent17 = nil
				}
				hintTooltipPlacement17 := new(string)
				if !attributesItem.NumberAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.NumberAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement17 = attributesItem.NumberAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement17 = nil
				}
				infoHelpers17 = &shared.NumberAttributeInfoHelpers{
					HintText:             hintText17,
					HintTextKey:          hintTextKey17,
					HintCustomComponent:  hintCustomComponent17,
					HintTooltipPlacement: hintTooltipPlacement17,
				}
			}
			repeatable17 := new(bool)
			if !attributesItem.NumberAttribute.Repeatable.IsUnknown() && !attributesItem.NumberAttribute.Repeatable.IsNull() {
				*repeatable17 = attributesItem.NumberAttribute.Repeatable.ValueBool()
			} else {
				repeatable17 = nil
			}
			hasPrimary17 := new(bool)
			if !attributesItem.NumberAttribute.HasPrimary.IsUnknown() && !attributesItem.NumberAttribute.HasPrimary.IsNull() {
				*hasPrimary17 = attributesItem.NumberAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary17 = nil
			}
			typeVar17 := shared.NumberAttributeType(attributesItem.NumberAttribute.Type.ValueString())
			format := new(string)
			if !attributesItem.NumberAttribute.Format.IsUnknown() && !attributesItem.NumberAttribute.Format.IsNull() {
				*format = attributesItem.NumberAttribute.Format.ValueString()
			} else {
				format = nil
			}
			showSeparator := new(bool)
			if !attributesItem.NumberAttribute.ShowSeparator.IsUnknown() && !attributesItem.NumberAttribute.ShowSeparator.IsNull() {
				*showSeparator = attributesItem.NumberAttribute.ShowSeparator.ValueBool()
			} else {
				showSeparator = nil
			}
			numberAttribute := shared.NumberAttribute{
				ID:                       id18,
				Name:                     name36,
				Label:                    label18,
				Placeholder:              placeholder17,
				Hidden:                   hidden17,
				ShowInTable:              showInTable17,
				Sortable:                 sortable17,
				Required:                 required17,
				Readonly:                 readonly17,
				Deprecated:               deprecated17,
				DefaultValue:             defaultValue17,
				Group:                    group17,
				Order:                    order17,
				Layout:                   layout17,
				HideLabel:                hideLabel17,
				Icon:                     icon17,
				RenderCondition:          renderCondition17,
				Purpose:                  purpose17,
				Manifest:                 manifest17,
				Constraints:              constraints17,
				FeatureFlag:              featureFlag18,
				SettingsFlag:             settingsFlag18,
				ValueFormatter:           valueFormatter17,
				PreviewValueFormatter:    previewValueFormatter17,
				EntityBuilderDisableEdit: entityBuilderDisableEdit17,
				Protected:                protected17,
				InfoHelpers:              infoHelpers17,
				Repeatable:               repeatable17,
				HasPrimary:               hasPrimary17,
				Type:                     typeVar17,
				Format:                   format,
				ShowSeparator:            showSeparator,
			}
			attributes = append(attributes, shared.AttributeInput{
				NumberAttribute: &numberAttribute,
			})
		}
		if attributesItem.ConsentAttribute != nil {
			id19 := new(string)
			if !attributesItem.ConsentAttribute.ID.IsUnknown() && !attributesItem.ConsentAttribute.ID.IsNull() {
				*id19 = attributesItem.ConsentAttribute.ID.ValueString()
			} else {
				id19 = nil
			}
			var name38 string
			name38 = attributesItem.ConsentAttribute.Name.ValueString()

			var label19 string
			label19 = attributesItem.ConsentAttribute.Label.ValueString()

			placeholder18 := new(string)
			if !attributesItem.ConsentAttribute.Placeholder.IsUnknown() && !attributesItem.ConsentAttribute.Placeholder.IsNull() {
				*placeholder18 = attributesItem.ConsentAttribute.Placeholder.ValueString()
			} else {
				placeholder18 = nil
			}
			hidden18 := new(bool)
			if !attributesItem.ConsentAttribute.Hidden.IsUnknown() && !attributesItem.ConsentAttribute.Hidden.IsNull() {
				*hidden18 = attributesItem.ConsentAttribute.Hidden.ValueBool()
			} else {
				hidden18 = nil
			}
			showInTable18 := new(bool)
			if !attributesItem.ConsentAttribute.ShowInTable.IsUnknown() && !attributesItem.ConsentAttribute.ShowInTable.IsNull() {
				*showInTable18 = attributesItem.ConsentAttribute.ShowInTable.ValueBool()
			} else {
				showInTable18 = nil
			}
			sortable18 := new(bool)
			if !attributesItem.ConsentAttribute.Sortable.IsUnknown() && !attributesItem.ConsentAttribute.Sortable.IsNull() {
				*sortable18 = attributesItem.ConsentAttribute.Sortable.ValueBool()
			} else {
				sortable18 = nil
			}
			required18 := new(bool)
			if !attributesItem.ConsentAttribute.Required.IsUnknown() && !attributesItem.ConsentAttribute.Required.IsNull() {
				*required18 = attributesItem.ConsentAttribute.Required.ValueBool()
			} else {
				required18 = nil
			}
			readonly18 := new(bool)
			if !attributesItem.ConsentAttribute.Readonly.IsUnknown() && !attributesItem.ConsentAttribute.Readonly.IsNull() {
				*readonly18 = attributesItem.ConsentAttribute.Readonly.ValueBool()
			} else {
				readonly18 = nil
			}
			deprecated18 := new(bool)
			if !attributesItem.ConsentAttribute.Deprecated.IsUnknown() && !attributesItem.ConsentAttribute.Deprecated.IsNull() {
				*deprecated18 = attributesItem.ConsentAttribute.Deprecated.ValueBool()
			} else {
				deprecated18 = nil
			}
			var defaultValue18 interface{}
			if !attributesItem.ConsentAttribute.DefaultValue.IsUnknown() && !attributesItem.ConsentAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.ConsentAttribute.DefaultValue.ValueString()), &defaultValue18)
			}
			group18 := new(string)
			if !attributesItem.ConsentAttribute.Group.IsUnknown() && !attributesItem.ConsentAttribute.Group.IsNull() {
				*group18 = attributesItem.ConsentAttribute.Group.ValueString()
			} else {
				group18 = nil
			}
			order18 := new(int64)
			if !attributesItem.ConsentAttribute.Order.IsUnknown() && !attributesItem.ConsentAttribute.Order.IsNull() {
				*order18 = attributesItem.ConsentAttribute.Order.ValueInt64()
			} else {
				order18 = nil
			}
			layout18 := new(string)
			if !attributesItem.ConsentAttribute.Layout.IsUnknown() && !attributesItem.ConsentAttribute.Layout.IsNull() {
				*layout18 = attributesItem.ConsentAttribute.Layout.ValueString()
			} else {
				layout18 = nil
			}
			hideLabel18 := new(bool)
			if !attributesItem.ConsentAttribute.HideLabel.IsUnknown() && !attributesItem.ConsentAttribute.HideLabel.IsNull() {
				*hideLabel18 = attributesItem.ConsentAttribute.HideLabel.ValueBool()
			} else {
				hideLabel18 = nil
			}
			icon18 := new(string)
			if !attributesItem.ConsentAttribute.Icon.IsUnknown() && !attributesItem.ConsentAttribute.Icon.IsNull() {
				*icon18 = attributesItem.ConsentAttribute.Icon.ValueString()
			} else {
				icon18 = nil
			}
			renderCondition18 := new(string)
			if !attributesItem.ConsentAttribute.RenderCondition.IsUnknown() && !attributesItem.ConsentAttribute.RenderCondition.IsNull() {
				*renderCondition18 = attributesItem.ConsentAttribute.RenderCondition.ValueString()
			} else {
				renderCondition18 = nil
			}
			purpose18 := make([]string, 0, len(attributesItem.ConsentAttribute.Purpose))
			for _, purposeItem18 := range attributesItem.ConsentAttribute.Purpose {
				purpose18 = append(purpose18, purposeItem18.ValueString())
			}
			var manifest18 []string
			if attributesItem.ConsentAttribute.Manifest != nil {
				manifest18 = make([]string, 0, len(attributesItem.ConsentAttribute.Manifest))
				for _, manifestItem18 := range attributesItem.ConsentAttribute.Manifest {
					manifest18 = append(manifest18, manifestItem18.ValueString())
				}
			}
			var constraints18 *shared.ConsentAttributeConstraints
			if attributesItem.ConsentAttribute.Constraints != nil {
				constraints18 = &shared.ConsentAttributeConstraints{}
			}
			featureFlag19 := new(string)
			if !attributesItem.ConsentAttribute.FeatureFlag.IsUnknown() && !attributesItem.ConsentAttribute.FeatureFlag.IsNull() {
				*featureFlag19 = attributesItem.ConsentAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag19 = nil
			}
			settingsFlag19 := make([]shared.SettingFlag, 0, len(attributesItem.ConsentAttribute.SettingsFlag))
			for _, settingsFlagItem19 := range attributesItem.ConsentAttribute.SettingsFlag {
				name39 := new(string)
				if !settingsFlagItem19.Name.IsUnknown() && !settingsFlagItem19.Name.IsNull() {
					*name39 = settingsFlagItem19.Name.ValueString()
				} else {
					name39 = nil
				}
				enabled19 := new(bool)
				if !settingsFlagItem19.Enabled.IsUnknown() && !settingsFlagItem19.Enabled.IsNull() {
					*enabled19 = settingsFlagItem19.Enabled.ValueBool()
				} else {
					enabled19 = nil
				}
				settingsFlag19 = append(settingsFlag19, shared.SettingFlag{
					Name:    name39,
					Enabled: enabled19,
				})
			}
			valueFormatter18 := new(string)
			if !attributesItem.ConsentAttribute.ValueFormatter.IsUnknown() && !attributesItem.ConsentAttribute.ValueFormatter.IsNull() {
				*valueFormatter18 = attributesItem.ConsentAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter18 = nil
			}
			previewValueFormatter18 := new(string)
			if !attributesItem.ConsentAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.ConsentAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter18 = attributesItem.ConsentAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter18 = nil
			}
			entityBuilderDisableEdit18 := new(bool)
			if !attributesItem.ConsentAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.ConsentAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit18 = attributesItem.ConsentAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit18 = nil
			}
			protected18 := new(bool)
			if !attributesItem.ConsentAttribute.Protected.IsUnknown() && !attributesItem.ConsentAttribute.Protected.IsNull() {
				*protected18 = attributesItem.ConsentAttribute.Protected.ValueBool()
			} else {
				protected18 = nil
			}
			var infoHelpers18 *shared.ConsentAttributeInfoHelpers
			if attributesItem.ConsentAttribute.InfoHelpers != nil {
				hintText18 := new(string)
				if !attributesItem.ConsentAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.ConsentAttribute.InfoHelpers.HintText.IsNull() {
					*hintText18 = attributesItem.ConsentAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText18 = nil
				}
				hintTextKey18 := new(string)
				if !attributesItem.ConsentAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.ConsentAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey18 = attributesItem.ConsentAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey18 = nil
				}
				hintCustomComponent18 := new(string)
				if !attributesItem.ConsentAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.ConsentAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent18 = attributesItem.ConsentAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent18 = nil
				}
				hintTooltipPlacement18 := new(string)
				if !attributesItem.ConsentAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.ConsentAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement18 = attributesItem.ConsentAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement18 = nil
				}
				infoHelpers18 = &shared.ConsentAttributeInfoHelpers{
					HintText:             hintText18,
					HintTextKey:          hintTextKey18,
					HintCustomComponent:  hintCustomComponent18,
					HintTooltipPlacement: hintTooltipPlacement18,
				}
			}
			repeatable18 := new(bool)
			if !attributesItem.ConsentAttribute.Repeatable.IsUnknown() && !attributesItem.ConsentAttribute.Repeatable.IsNull() {
				*repeatable18 = attributesItem.ConsentAttribute.Repeatable.ValueBool()
			} else {
				repeatable18 = nil
			}
			hasPrimary18 := new(bool)
			if !attributesItem.ConsentAttribute.HasPrimary.IsUnknown() && !attributesItem.ConsentAttribute.HasPrimary.IsNull() {
				*hasPrimary18 = attributesItem.ConsentAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary18 = nil
			}
			typeVar18 := shared.ConsentAttributeType(attributesItem.ConsentAttribute.Type.ValueString())
			var topic string
			topic = attributesItem.ConsentAttribute.Topic.ValueString()

			identifiers := make([]string, 0, len(attributesItem.ConsentAttribute.Identifiers))
			for _, identifiersItem := range attributesItem.ConsentAttribute.Identifiers {
				identifiers = append(identifiers, identifiersItem.ValueString())
			}
			consentAttribute := shared.ConsentAttribute{
				ID:                       id19,
				Name:                     name38,
				Label:                    label19,
				Placeholder:              placeholder18,
				Hidden:                   hidden18,
				ShowInTable:              showInTable18,
				Sortable:                 sortable18,
				Required:                 required18,
				Readonly:                 readonly18,
				Deprecated:               deprecated18,
				DefaultValue:             defaultValue18,
				Group:                    group18,
				Order:                    order18,
				Layout:                   layout18,
				HideLabel:                hideLabel18,
				Icon:                     icon18,
				RenderCondition:          renderCondition18,
				Purpose:                  purpose18,
				Manifest:                 manifest18,
				Constraints:              constraints18,
				FeatureFlag:              featureFlag19,
				SettingsFlag:             settingsFlag19,
				ValueFormatter:           valueFormatter18,
				PreviewValueFormatter:    previewValueFormatter18,
				EntityBuilderDisableEdit: entityBuilderDisableEdit18,
				Protected:                protected18,
				InfoHelpers:              infoHelpers18,
				Repeatable:               repeatable18,
				HasPrimary:               hasPrimary18,
				Type:                     typeVar18,
				Topic:                    topic,
				Identifiers:              identifiers,
			}
			attributes = append(attributes, shared.AttributeInput{
				ConsentAttribute: &consentAttribute,
			})
		}
		if attributesItem.InternalAttribute != nil {
			id20 := new(string)
			if !attributesItem.InternalAttribute.ID.IsUnknown() && !attributesItem.InternalAttribute.ID.IsNull() {
				*id20 = attributesItem.InternalAttribute.ID.ValueString()
			} else {
				id20 = nil
			}
			var name40 string
			name40 = attributesItem.InternalAttribute.Name.ValueString()

			var label20 string
			label20 = attributesItem.InternalAttribute.Label.ValueString()

			placeholder19 := new(string)
			if !attributesItem.InternalAttribute.Placeholder.IsUnknown() && !attributesItem.InternalAttribute.Placeholder.IsNull() {
				*placeholder19 = attributesItem.InternalAttribute.Placeholder.ValueString()
			} else {
				placeholder19 = nil
			}
			hidden19 := new(bool)
			if !attributesItem.InternalAttribute.Hidden.IsUnknown() && !attributesItem.InternalAttribute.Hidden.IsNull() {
				*hidden19 = attributesItem.InternalAttribute.Hidden.ValueBool()
			} else {
				hidden19 = nil
			}
			showInTable19 := new(bool)
			if !attributesItem.InternalAttribute.ShowInTable.IsUnknown() && !attributesItem.InternalAttribute.ShowInTable.IsNull() {
				*showInTable19 = attributesItem.InternalAttribute.ShowInTable.ValueBool()
			} else {
				showInTable19 = nil
			}
			sortable19 := new(bool)
			if !attributesItem.InternalAttribute.Sortable.IsUnknown() && !attributesItem.InternalAttribute.Sortable.IsNull() {
				*sortable19 = attributesItem.InternalAttribute.Sortable.ValueBool()
			} else {
				sortable19 = nil
			}
			required19 := new(bool)
			if !attributesItem.InternalAttribute.Required.IsUnknown() && !attributesItem.InternalAttribute.Required.IsNull() {
				*required19 = attributesItem.InternalAttribute.Required.ValueBool()
			} else {
				required19 = nil
			}
			readonly19 := new(bool)
			if !attributesItem.InternalAttribute.Readonly.IsUnknown() && !attributesItem.InternalAttribute.Readonly.IsNull() {
				*readonly19 = attributesItem.InternalAttribute.Readonly.ValueBool()
			} else {
				readonly19 = nil
			}
			deprecated19 := new(bool)
			if !attributesItem.InternalAttribute.Deprecated.IsUnknown() && !attributesItem.InternalAttribute.Deprecated.IsNull() {
				*deprecated19 = attributesItem.InternalAttribute.Deprecated.ValueBool()
			} else {
				deprecated19 = nil
			}
			var defaultValue19 interface{}
			if !attributesItem.InternalAttribute.DefaultValue.IsUnknown() && !attributesItem.InternalAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.InternalAttribute.DefaultValue.ValueString()), &defaultValue19)
			}
			group19 := new(string)
			if !attributesItem.InternalAttribute.Group.IsUnknown() && !attributesItem.InternalAttribute.Group.IsNull() {
				*group19 = attributesItem.InternalAttribute.Group.ValueString()
			} else {
				group19 = nil
			}
			order19 := new(int64)
			if !attributesItem.InternalAttribute.Order.IsUnknown() && !attributesItem.InternalAttribute.Order.IsNull() {
				*order19 = attributesItem.InternalAttribute.Order.ValueInt64()
			} else {
				order19 = nil
			}
			layout19 := new(string)
			if !attributesItem.InternalAttribute.Layout.IsUnknown() && !attributesItem.InternalAttribute.Layout.IsNull() {
				*layout19 = attributesItem.InternalAttribute.Layout.ValueString()
			} else {
				layout19 = nil
			}
			hideLabel19 := new(bool)
			if !attributesItem.InternalAttribute.HideLabel.IsUnknown() && !attributesItem.InternalAttribute.HideLabel.IsNull() {
				*hideLabel19 = attributesItem.InternalAttribute.HideLabel.ValueBool()
			} else {
				hideLabel19 = nil
			}
			icon19 := new(string)
			if !attributesItem.InternalAttribute.Icon.IsUnknown() && !attributesItem.InternalAttribute.Icon.IsNull() {
				*icon19 = attributesItem.InternalAttribute.Icon.ValueString()
			} else {
				icon19 = nil
			}
			renderCondition19 := new(string)
			if !attributesItem.InternalAttribute.RenderCondition.IsUnknown() && !attributesItem.InternalAttribute.RenderCondition.IsNull() {
				*renderCondition19 = attributesItem.InternalAttribute.RenderCondition.ValueString()
			} else {
				renderCondition19 = nil
			}
			purpose19 := make([]string, 0, len(attributesItem.InternalAttribute.Purpose))
			for _, purposeItem19 := range attributesItem.InternalAttribute.Purpose {
				purpose19 = append(purpose19, purposeItem19.ValueString())
			}
			var manifest19 []string
			if attributesItem.InternalAttribute.Manifest != nil {
				manifest19 = make([]string, 0, len(attributesItem.InternalAttribute.Manifest))
				for _, manifestItem19 := range attributesItem.InternalAttribute.Manifest {
					manifest19 = append(manifest19, manifestItem19.ValueString())
				}
			}
			var constraints19 *shared.InternalAttributeConstraints
			if attributesItem.InternalAttribute.Constraints != nil {
				constraints19 = &shared.InternalAttributeConstraints{}
			}
			featureFlag20 := new(string)
			if !attributesItem.InternalAttribute.FeatureFlag.IsUnknown() && !attributesItem.InternalAttribute.FeatureFlag.IsNull() {
				*featureFlag20 = attributesItem.InternalAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag20 = nil
			}
			settingsFlag20 := make([]shared.SettingFlag, 0, len(attributesItem.InternalAttribute.SettingsFlag))
			for _, settingsFlagItem20 := range attributesItem.InternalAttribute.SettingsFlag {
				name41 := new(string)
				if !settingsFlagItem20.Name.IsUnknown() && !settingsFlagItem20.Name.IsNull() {
					*name41 = settingsFlagItem20.Name.ValueString()
				} else {
					name41 = nil
				}
				enabled20 := new(bool)
				if !settingsFlagItem20.Enabled.IsUnknown() && !settingsFlagItem20.Enabled.IsNull() {
					*enabled20 = settingsFlagItem20.Enabled.ValueBool()
				} else {
					enabled20 = nil
				}
				settingsFlag20 = append(settingsFlag20, shared.SettingFlag{
					Name:    name41,
					Enabled: enabled20,
				})
			}
			valueFormatter19 := new(string)
			if !attributesItem.InternalAttribute.ValueFormatter.IsUnknown() && !attributesItem.InternalAttribute.ValueFormatter.IsNull() {
				*valueFormatter19 = attributesItem.InternalAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter19 = nil
			}
			previewValueFormatter19 := new(string)
			if !attributesItem.InternalAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.InternalAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter19 = attributesItem.InternalAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter19 = nil
			}
			entityBuilderDisableEdit19 := new(bool)
			if !attributesItem.InternalAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.InternalAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit19 = attributesItem.InternalAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit19 = nil
			}
			protected19 := new(bool)
			if !attributesItem.InternalAttribute.Protected.IsUnknown() && !attributesItem.InternalAttribute.Protected.IsNull() {
				*protected19 = attributesItem.InternalAttribute.Protected.ValueBool()
			} else {
				protected19 = nil
			}
			var infoHelpers19 *shared.InternalAttributeInfoHelpers
			if attributesItem.InternalAttribute.InfoHelpers != nil {
				hintText19 := new(string)
				if !attributesItem.InternalAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.InternalAttribute.InfoHelpers.HintText.IsNull() {
					*hintText19 = attributesItem.InternalAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText19 = nil
				}
				hintTextKey19 := new(string)
				if !attributesItem.InternalAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.InternalAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey19 = attributesItem.InternalAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey19 = nil
				}
				hintCustomComponent19 := new(string)
				if !attributesItem.InternalAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.InternalAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent19 = attributesItem.InternalAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent19 = nil
				}
				hintTooltipPlacement19 := new(string)
				if !attributesItem.InternalAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.InternalAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement19 = attributesItem.InternalAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement19 = nil
				}
				infoHelpers19 = &shared.InternalAttributeInfoHelpers{
					HintText:             hintText19,
					HintTextKey:          hintTextKey19,
					HintCustomComponent:  hintCustomComponent19,
					HintTooltipPlacement: hintTooltipPlacement19,
				}
			}
			repeatable19 := new(bool)
			if !attributesItem.InternalAttribute.Repeatable.IsUnknown() && !attributesItem.InternalAttribute.Repeatable.IsNull() {
				*repeatable19 = attributesItem.InternalAttribute.Repeatable.ValueBool()
			} else {
				repeatable19 = nil
			}
			hasPrimary19 := new(bool)
			if !attributesItem.InternalAttribute.HasPrimary.IsUnknown() && !attributesItem.InternalAttribute.HasPrimary.IsNull() {
				*hasPrimary19 = attributesItem.InternalAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary19 = nil
			}
			typeVar19 := shared.InternalAttributeType(attributesItem.InternalAttribute.Type.ValueString())
			internalAttribute := shared.InternalAttribute{
				ID:                       id20,
				Name:                     name40,
				Label:                    label20,
				Placeholder:              placeholder19,
				Hidden:                   hidden19,
				ShowInTable:              showInTable19,
				Sortable:                 sortable19,
				Required:                 required19,
				Readonly:                 readonly19,
				Deprecated:               deprecated19,
				DefaultValue:             defaultValue19,
				Group:                    group19,
				Order:                    order19,
				Layout:                   layout19,
				HideLabel:                hideLabel19,
				Icon:                     icon19,
				RenderCondition:          renderCondition19,
				Purpose:                  purpose19,
				Manifest:                 manifest19,
				Constraints:              constraints19,
				FeatureFlag:              featureFlag20,
				SettingsFlag:             settingsFlag20,
				ValueFormatter:           valueFormatter19,
				PreviewValueFormatter:    previewValueFormatter19,
				EntityBuilderDisableEdit: entityBuilderDisableEdit19,
				Protected:                protected19,
				InfoHelpers:              infoHelpers19,
				Repeatable:               repeatable19,
				HasPrimary:               hasPrimary19,
				Type:                     typeVar19,
			}
			attributes = append(attributes, shared.AttributeInput{
				InternalAttribute: &internalAttribute,
			})
		}
		if attributesItem.OrderedListAttribute != nil {
			id21 := new(string)
			if !attributesItem.OrderedListAttribute.ID.IsUnknown() && !attributesItem.OrderedListAttribute.ID.IsNull() {
				*id21 = attributesItem.OrderedListAttribute.ID.ValueString()
			} else {
				id21 = nil
			}
			var name42 string
			name42 = attributesItem.OrderedListAttribute.Name.ValueString()

			var label21 string
			label21 = attributesItem.OrderedListAttribute.Label.ValueString()

			placeholder20 := new(string)
			if !attributesItem.OrderedListAttribute.Placeholder.IsUnknown() && !attributesItem.OrderedListAttribute.Placeholder.IsNull() {
				*placeholder20 = attributesItem.OrderedListAttribute.Placeholder.ValueString()
			} else {
				placeholder20 = nil
			}
			hidden20 := new(bool)
			if !attributesItem.OrderedListAttribute.Hidden.IsUnknown() && !attributesItem.OrderedListAttribute.Hidden.IsNull() {
				*hidden20 = attributesItem.OrderedListAttribute.Hidden.ValueBool()
			} else {
				hidden20 = nil
			}
			showInTable20 := new(bool)
			if !attributesItem.OrderedListAttribute.ShowInTable.IsUnknown() && !attributesItem.OrderedListAttribute.ShowInTable.IsNull() {
				*showInTable20 = attributesItem.OrderedListAttribute.ShowInTable.ValueBool()
			} else {
				showInTable20 = nil
			}
			sortable20 := new(bool)
			if !attributesItem.OrderedListAttribute.Sortable.IsUnknown() && !attributesItem.OrderedListAttribute.Sortable.IsNull() {
				*sortable20 = attributesItem.OrderedListAttribute.Sortable.ValueBool()
			} else {
				sortable20 = nil
			}
			required20 := new(bool)
			if !attributesItem.OrderedListAttribute.Required.IsUnknown() && !attributesItem.OrderedListAttribute.Required.IsNull() {
				*required20 = attributesItem.OrderedListAttribute.Required.ValueBool()
			} else {
				required20 = nil
			}
			readonly20 := new(bool)
			if !attributesItem.OrderedListAttribute.Readonly.IsUnknown() && !attributesItem.OrderedListAttribute.Readonly.IsNull() {
				*readonly20 = attributesItem.OrderedListAttribute.Readonly.ValueBool()
			} else {
				readonly20 = nil
			}
			deprecated20 := new(bool)
			if !attributesItem.OrderedListAttribute.Deprecated.IsUnknown() && !attributesItem.OrderedListAttribute.Deprecated.IsNull() {
				*deprecated20 = attributesItem.OrderedListAttribute.Deprecated.ValueBool()
			} else {
				deprecated20 = nil
			}
			var defaultValue20 interface{}
			if !attributesItem.OrderedListAttribute.DefaultValue.IsUnknown() && !attributesItem.OrderedListAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.OrderedListAttribute.DefaultValue.ValueString()), &defaultValue20)
			}
			group20 := new(string)
			if !attributesItem.OrderedListAttribute.Group.IsUnknown() && !attributesItem.OrderedListAttribute.Group.IsNull() {
				*group20 = attributesItem.OrderedListAttribute.Group.ValueString()
			} else {
				group20 = nil
			}
			order20 := new(int64)
			if !attributesItem.OrderedListAttribute.Order.IsUnknown() && !attributesItem.OrderedListAttribute.Order.IsNull() {
				*order20 = attributesItem.OrderedListAttribute.Order.ValueInt64()
			} else {
				order20 = nil
			}
			layout20 := new(string)
			if !attributesItem.OrderedListAttribute.Layout.IsUnknown() && !attributesItem.OrderedListAttribute.Layout.IsNull() {
				*layout20 = attributesItem.OrderedListAttribute.Layout.ValueString()
			} else {
				layout20 = nil
			}
			hideLabel20 := new(bool)
			if !attributesItem.OrderedListAttribute.HideLabel.IsUnknown() && !attributesItem.OrderedListAttribute.HideLabel.IsNull() {
				*hideLabel20 = attributesItem.OrderedListAttribute.HideLabel.ValueBool()
			} else {
				hideLabel20 = nil
			}
			icon20 := new(string)
			if !attributesItem.OrderedListAttribute.Icon.IsUnknown() && !attributesItem.OrderedListAttribute.Icon.IsNull() {
				*icon20 = attributesItem.OrderedListAttribute.Icon.ValueString()
			} else {
				icon20 = nil
			}
			renderCondition20 := new(string)
			if !attributesItem.OrderedListAttribute.RenderCondition.IsUnknown() && !attributesItem.OrderedListAttribute.RenderCondition.IsNull() {
				*renderCondition20 = attributesItem.OrderedListAttribute.RenderCondition.ValueString()
			} else {
				renderCondition20 = nil
			}
			purpose20 := make([]string, 0, len(attributesItem.OrderedListAttribute.Purpose))
			for _, purposeItem20 := range attributesItem.OrderedListAttribute.Purpose {
				purpose20 = append(purpose20, purposeItem20.ValueString())
			}
			var manifest20 []string
			if attributesItem.OrderedListAttribute.Manifest != nil {
				manifest20 = make([]string, 0, len(attributesItem.OrderedListAttribute.Manifest))
				for _, manifestItem20 := range attributesItem.OrderedListAttribute.Manifest {
					manifest20 = append(manifest20, manifestItem20.ValueString())
				}
			}
			var constraints20 *shared.OrderedListAttributeConstraints
			if attributesItem.OrderedListAttribute.Constraints != nil {
				constraints20 = &shared.OrderedListAttributeConstraints{}
			}
			featureFlag21 := new(string)
			if !attributesItem.OrderedListAttribute.FeatureFlag.IsUnknown() && !attributesItem.OrderedListAttribute.FeatureFlag.IsNull() {
				*featureFlag21 = attributesItem.OrderedListAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag21 = nil
			}
			settingsFlag21 := make([]shared.SettingFlag, 0, len(attributesItem.OrderedListAttribute.SettingsFlag))
			for _, settingsFlagItem21 := range attributesItem.OrderedListAttribute.SettingsFlag {
				name43 := new(string)
				if !settingsFlagItem21.Name.IsUnknown() && !settingsFlagItem21.Name.IsNull() {
					*name43 = settingsFlagItem21.Name.ValueString()
				} else {
					name43 = nil
				}
				enabled21 := new(bool)
				if !settingsFlagItem21.Enabled.IsUnknown() && !settingsFlagItem21.Enabled.IsNull() {
					*enabled21 = settingsFlagItem21.Enabled.ValueBool()
				} else {
					enabled21 = nil
				}
				settingsFlag21 = append(settingsFlag21, shared.SettingFlag{
					Name:    name43,
					Enabled: enabled21,
				})
			}
			valueFormatter20 := new(string)
			if !attributesItem.OrderedListAttribute.ValueFormatter.IsUnknown() && !attributesItem.OrderedListAttribute.ValueFormatter.IsNull() {
				*valueFormatter20 = attributesItem.OrderedListAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter20 = nil
			}
			previewValueFormatter20 := new(string)
			if !attributesItem.OrderedListAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.OrderedListAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter20 = attributesItem.OrderedListAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter20 = nil
			}
			entityBuilderDisableEdit20 := new(bool)
			if !attributesItem.OrderedListAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.OrderedListAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit20 = attributesItem.OrderedListAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit20 = nil
			}
			protected20 := new(bool)
			if !attributesItem.OrderedListAttribute.Protected.IsUnknown() && !attributesItem.OrderedListAttribute.Protected.IsNull() {
				*protected20 = attributesItem.OrderedListAttribute.Protected.ValueBool()
			} else {
				protected20 = nil
			}
			var infoHelpers20 *shared.OrderedListAttributeInfoHelpers
			if attributesItem.OrderedListAttribute.InfoHelpers != nil {
				hintText20 := new(string)
				if !attributesItem.OrderedListAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.OrderedListAttribute.InfoHelpers.HintText.IsNull() {
					*hintText20 = attributesItem.OrderedListAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText20 = nil
				}
				hintTextKey20 := new(string)
				if !attributesItem.OrderedListAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.OrderedListAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey20 = attributesItem.OrderedListAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey20 = nil
				}
				hintCustomComponent20 := new(string)
				if !attributesItem.OrderedListAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.OrderedListAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent20 = attributesItem.OrderedListAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent20 = nil
				}
				hintTooltipPlacement20 := new(string)
				if !attributesItem.OrderedListAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.OrderedListAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement20 = attributesItem.OrderedListAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement20 = nil
				}
				infoHelpers20 = &shared.OrderedListAttributeInfoHelpers{
					HintText:             hintText20,
					HintTextKey:          hintTextKey20,
					HintCustomComponent:  hintCustomComponent20,
					HintTooltipPlacement: hintTooltipPlacement20,
				}
			}
			repeatable20 := new(bool)
			if !attributesItem.OrderedListAttribute.Repeatable.IsUnknown() && !attributesItem.OrderedListAttribute.Repeatable.IsNull() {
				*repeatable20 = attributesItem.OrderedListAttribute.Repeatable.ValueBool()
			} else {
				repeatable20 = nil
			}
			hasPrimary20 := new(bool)
			if !attributesItem.OrderedListAttribute.HasPrimary.IsUnknown() && !attributesItem.OrderedListAttribute.HasPrimary.IsNull() {
				*hasPrimary20 = attributesItem.OrderedListAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary20 = nil
			}
			typeVar20 := shared.OrderedListAttributeType(attributesItem.OrderedListAttribute.Type.ValueString())
			orderedListAttribute := shared.OrderedListAttribute{
				ID:                       id21,
				Name:                     name42,
				Label:                    label21,
				Placeholder:              placeholder20,
				Hidden:                   hidden20,
				ShowInTable:              showInTable20,
				Sortable:                 sortable20,
				Required:                 required20,
				Readonly:                 readonly20,
				Deprecated:               deprecated20,
				DefaultValue:             defaultValue20,
				Group:                    group20,
				Order:                    order20,
				Layout:                   layout20,
				HideLabel:                hideLabel20,
				Icon:                     icon20,
				RenderCondition:          renderCondition20,
				Purpose:                  purpose20,
				Manifest:                 manifest20,
				Constraints:              constraints20,
				FeatureFlag:              featureFlag21,
				SettingsFlag:             settingsFlag21,
				ValueFormatter:           valueFormatter20,
				PreviewValueFormatter:    previewValueFormatter20,
				EntityBuilderDisableEdit: entityBuilderDisableEdit20,
				Protected:                protected20,
				InfoHelpers:              infoHelpers20,
				Repeatable:               repeatable20,
				HasPrimary:               hasPrimary20,
				Type:                     typeVar20,
			}
			attributes = append(attributes, shared.AttributeInput{
				OrderedListAttribute: &orderedListAttribute,
			})
		}
		if attributesItem.FileAttribute != nil {
			id22 := new(string)
			if !attributesItem.FileAttribute.ID.IsUnknown() && !attributesItem.FileAttribute.ID.IsNull() {
				*id22 = attributesItem.FileAttribute.ID.ValueString()
			} else {
				id22 = nil
			}
			var name44 string
			name44 = attributesItem.FileAttribute.Name.ValueString()

			var label22 string
			label22 = attributesItem.FileAttribute.Label.ValueString()

			placeholder21 := new(string)
			if !attributesItem.FileAttribute.Placeholder.IsUnknown() && !attributesItem.FileAttribute.Placeholder.IsNull() {
				*placeholder21 = attributesItem.FileAttribute.Placeholder.ValueString()
			} else {
				placeholder21 = nil
			}
			hidden21 := new(bool)
			if !attributesItem.FileAttribute.Hidden.IsUnknown() && !attributesItem.FileAttribute.Hidden.IsNull() {
				*hidden21 = attributesItem.FileAttribute.Hidden.ValueBool()
			} else {
				hidden21 = nil
			}
			showInTable21 := new(bool)
			if !attributesItem.FileAttribute.ShowInTable.IsUnknown() && !attributesItem.FileAttribute.ShowInTable.IsNull() {
				*showInTable21 = attributesItem.FileAttribute.ShowInTable.ValueBool()
			} else {
				showInTable21 = nil
			}
			sortable21 := new(bool)
			if !attributesItem.FileAttribute.Sortable.IsUnknown() && !attributesItem.FileAttribute.Sortable.IsNull() {
				*sortable21 = attributesItem.FileAttribute.Sortable.ValueBool()
			} else {
				sortable21 = nil
			}
			required21 := new(bool)
			if !attributesItem.FileAttribute.Required.IsUnknown() && !attributesItem.FileAttribute.Required.IsNull() {
				*required21 = attributesItem.FileAttribute.Required.ValueBool()
			} else {
				required21 = nil
			}
			readonly21 := new(bool)
			if !attributesItem.FileAttribute.Readonly.IsUnknown() && !attributesItem.FileAttribute.Readonly.IsNull() {
				*readonly21 = attributesItem.FileAttribute.Readonly.ValueBool()
			} else {
				readonly21 = nil
			}
			deprecated21 := new(bool)
			if !attributesItem.FileAttribute.Deprecated.IsUnknown() && !attributesItem.FileAttribute.Deprecated.IsNull() {
				*deprecated21 = attributesItem.FileAttribute.Deprecated.ValueBool()
			} else {
				deprecated21 = nil
			}
			var defaultValue21 interface{}
			if !attributesItem.FileAttribute.DefaultValue.IsUnknown() && !attributesItem.FileAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.FileAttribute.DefaultValue.ValueString()), &defaultValue21)
			}
			group21 := new(string)
			if !attributesItem.FileAttribute.Group.IsUnknown() && !attributesItem.FileAttribute.Group.IsNull() {
				*group21 = attributesItem.FileAttribute.Group.ValueString()
			} else {
				group21 = nil
			}
			order21 := new(int64)
			if !attributesItem.FileAttribute.Order.IsUnknown() && !attributesItem.FileAttribute.Order.IsNull() {
				*order21 = attributesItem.FileAttribute.Order.ValueInt64()
			} else {
				order21 = nil
			}
			layout21 := new(string)
			if !attributesItem.FileAttribute.Layout.IsUnknown() && !attributesItem.FileAttribute.Layout.IsNull() {
				*layout21 = attributesItem.FileAttribute.Layout.ValueString()
			} else {
				layout21 = nil
			}
			hideLabel21 := new(bool)
			if !attributesItem.FileAttribute.HideLabel.IsUnknown() && !attributesItem.FileAttribute.HideLabel.IsNull() {
				*hideLabel21 = attributesItem.FileAttribute.HideLabel.ValueBool()
			} else {
				hideLabel21 = nil
			}
			icon21 := new(string)
			if !attributesItem.FileAttribute.Icon.IsUnknown() && !attributesItem.FileAttribute.Icon.IsNull() {
				*icon21 = attributesItem.FileAttribute.Icon.ValueString()
			} else {
				icon21 = nil
			}
			renderCondition21 := new(string)
			if !attributesItem.FileAttribute.RenderCondition.IsUnknown() && !attributesItem.FileAttribute.RenderCondition.IsNull() {
				*renderCondition21 = attributesItem.FileAttribute.RenderCondition.ValueString()
			} else {
				renderCondition21 = nil
			}
			purpose21 := make([]string, 0, len(attributesItem.FileAttribute.Purpose))
			for _, purposeItem21 := range attributesItem.FileAttribute.Purpose {
				purpose21 = append(purpose21, purposeItem21.ValueString())
			}
			var manifest21 []string
			if attributesItem.FileAttribute.Manifest != nil {
				manifest21 = make([]string, 0, len(attributesItem.FileAttribute.Manifest))
				for _, manifestItem21 := range attributesItem.FileAttribute.Manifest {
					manifest21 = append(manifest21, manifestItem21.ValueString())
				}
			}
			var constraints21 *shared.FileAttributeConstraints
			if attributesItem.FileAttribute.Constraints != nil {
				constraints21 = &shared.FileAttributeConstraints{}
			}
			featureFlag22 := new(string)
			if !attributesItem.FileAttribute.FeatureFlag.IsUnknown() && !attributesItem.FileAttribute.FeatureFlag.IsNull() {
				*featureFlag22 = attributesItem.FileAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag22 = nil
			}
			settingsFlag22 := make([]shared.SettingFlag, 0, len(attributesItem.FileAttribute.SettingsFlag))
			for _, settingsFlagItem22 := range attributesItem.FileAttribute.SettingsFlag {
				name45 := new(string)
				if !settingsFlagItem22.Name.IsUnknown() && !settingsFlagItem22.Name.IsNull() {
					*name45 = settingsFlagItem22.Name.ValueString()
				} else {
					name45 = nil
				}
				enabled22 := new(bool)
				if !settingsFlagItem22.Enabled.IsUnknown() && !settingsFlagItem22.Enabled.IsNull() {
					*enabled22 = settingsFlagItem22.Enabled.ValueBool()
				} else {
					enabled22 = nil
				}
				settingsFlag22 = append(settingsFlag22, shared.SettingFlag{
					Name:    name45,
					Enabled: enabled22,
				})
			}
			valueFormatter21 := new(string)
			if !attributesItem.FileAttribute.ValueFormatter.IsUnknown() && !attributesItem.FileAttribute.ValueFormatter.IsNull() {
				*valueFormatter21 = attributesItem.FileAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter21 = nil
			}
			previewValueFormatter21 := new(string)
			if !attributesItem.FileAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.FileAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter21 = attributesItem.FileAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter21 = nil
			}
			entityBuilderDisableEdit21 := new(bool)
			if !attributesItem.FileAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.FileAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit21 = attributesItem.FileAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit21 = nil
			}
			protected21 := new(bool)
			if !attributesItem.FileAttribute.Protected.IsUnknown() && !attributesItem.FileAttribute.Protected.IsNull() {
				*protected21 = attributesItem.FileAttribute.Protected.ValueBool()
			} else {
				protected21 = nil
			}
			var infoHelpers21 *shared.FileAttributeInfoHelpers
			if attributesItem.FileAttribute.InfoHelpers != nil {
				hintText21 := new(string)
				if !attributesItem.FileAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.FileAttribute.InfoHelpers.HintText.IsNull() {
					*hintText21 = attributesItem.FileAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText21 = nil
				}
				hintTextKey21 := new(string)
				if !attributesItem.FileAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.FileAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey21 = attributesItem.FileAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey21 = nil
				}
				hintCustomComponent21 := new(string)
				if !attributesItem.FileAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.FileAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent21 = attributesItem.FileAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent21 = nil
				}
				hintTooltipPlacement21 := new(string)
				if !attributesItem.FileAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.FileAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement21 = attributesItem.FileAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement21 = nil
				}
				infoHelpers21 = &shared.FileAttributeInfoHelpers{
					HintText:             hintText21,
					HintTextKey:          hintTextKey21,
					HintCustomComponent:  hintCustomComponent21,
					HintTooltipPlacement: hintTooltipPlacement21,
				}
			}
			repeatable21 := new(bool)
			if !attributesItem.FileAttribute.Repeatable.IsUnknown() && !attributesItem.FileAttribute.Repeatable.IsNull() {
				*repeatable21 = attributesItem.FileAttribute.Repeatable.ValueBool()
			} else {
				repeatable21 = nil
			}
			hasPrimary21 := new(bool)
			if !attributesItem.FileAttribute.HasPrimary.IsUnknown() && !attributesItem.FileAttribute.HasPrimary.IsNull() {
				*hasPrimary21 = attributesItem.FileAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary21 = nil
			}
			typeVar21 := shared.FileAttributeType(attributesItem.FileAttribute.Type.ValueString())
			multiple1 := new(bool)
			if !attributesItem.FileAttribute.Multiple.IsUnknown() && !attributesItem.FileAttribute.Multiple.IsNull() {
				*multiple1 = attributesItem.FileAttribute.Multiple.ValueBool()
			} else {
				multiple1 = nil
			}
			allowedExtensions := make([]string, 0, len(attributesItem.FileAttribute.AllowedExtensions))
			for _, allowedExtensionsItem := range attributesItem.FileAttribute.AllowedExtensions {
				allowedExtensions = append(allowedExtensions, allowedExtensionsItem.ValueString())
			}
			displayImagesLandscaped := new(bool)
			if !attributesItem.FileAttribute.DisplayImagesLandscaped.IsUnknown() && !attributesItem.FileAttribute.DisplayImagesLandscaped.IsNull() {
				*displayImagesLandscaped = attributesItem.FileAttribute.DisplayImagesLandscaped.ValueBool()
			} else {
				displayImagesLandscaped = nil
			}
			enableDescription := new(bool)
			if !attributesItem.FileAttribute.EnableDescription.IsUnknown() && !attributesItem.FileAttribute.EnableDescription.IsNull() {
				*enableDescription = attributesItem.FileAttribute.EnableDescription.ValueBool()
			} else {
				enableDescription = nil
			}
			defaultAccessControl := new(shared.DefaultAccessControl)
			if !attributesItem.FileAttribute.DefaultAccessControl.IsUnknown() && !attributesItem.FileAttribute.DefaultAccessControl.IsNull() {
				*defaultAccessControl = shared.DefaultAccessControl(attributesItem.FileAttribute.DefaultAccessControl.ValueString())
			} else {
				defaultAccessControl = nil
			}
			fileAttribute := shared.FileAttribute{
				ID:                       id22,
				Name:                     name44,
				Label:                    label22,
				Placeholder:              placeholder21,
				Hidden:                   hidden21,
				ShowInTable:              showInTable21,
				Sortable:                 sortable21,
				Required:                 required21,
				Readonly:                 readonly21,
				Deprecated:               deprecated21,
				DefaultValue:             defaultValue21,
				Group:                    group21,
				Order:                    order21,
				Layout:                   layout21,
				HideLabel:                hideLabel21,
				Icon:                     icon21,
				RenderCondition:          renderCondition21,
				Purpose:                  purpose21,
				Manifest:                 manifest21,
				Constraints:              constraints21,
				FeatureFlag:              featureFlag22,
				SettingsFlag:             settingsFlag22,
				ValueFormatter:           valueFormatter21,
				PreviewValueFormatter:    previewValueFormatter21,
				EntityBuilderDisableEdit: entityBuilderDisableEdit21,
				Protected:                protected21,
				InfoHelpers:              infoHelpers21,
				Repeatable:               repeatable21,
				HasPrimary:               hasPrimary21,
				Type:                     typeVar21,
				Multiple:                 multiple1,
				AllowedExtensions:        allowedExtensions,
				DisplayImagesLandscaped:  displayImagesLandscaped,
				EnableDescription:        enableDescription,
				DefaultAccessControl:     defaultAccessControl,
			}
			attributes = append(attributes, shared.AttributeInput{
				FileAttribute: &fileAttribute,
			})
		}
		if attributesItem.ComputedAttribute != nil {
			id23 := new(string)
			if !attributesItem.ComputedAttribute.ID.IsUnknown() && !attributesItem.ComputedAttribute.ID.IsNull() {
				*id23 = attributesItem.ComputedAttribute.ID.ValueString()
			} else {
				id23 = nil
			}
			var name46 string
			name46 = attributesItem.ComputedAttribute.Name.ValueString()

			var label23 string
			label23 = attributesItem.ComputedAttribute.Label.ValueString()

			placeholder22 := new(string)
			if !attributesItem.ComputedAttribute.Placeholder.IsUnknown() && !attributesItem.ComputedAttribute.Placeholder.IsNull() {
				*placeholder22 = attributesItem.ComputedAttribute.Placeholder.ValueString()
			} else {
				placeholder22 = nil
			}
			hidden22 := new(bool)
			if !attributesItem.ComputedAttribute.Hidden.IsUnknown() && !attributesItem.ComputedAttribute.Hidden.IsNull() {
				*hidden22 = attributesItem.ComputedAttribute.Hidden.ValueBool()
			} else {
				hidden22 = nil
			}
			showInTable22 := new(bool)
			if !attributesItem.ComputedAttribute.ShowInTable.IsUnknown() && !attributesItem.ComputedAttribute.ShowInTable.IsNull() {
				*showInTable22 = attributesItem.ComputedAttribute.ShowInTable.ValueBool()
			} else {
				showInTable22 = nil
			}
			sortable22 := new(bool)
			if !attributesItem.ComputedAttribute.Sortable.IsUnknown() && !attributesItem.ComputedAttribute.Sortable.IsNull() {
				*sortable22 = attributesItem.ComputedAttribute.Sortable.ValueBool()
			} else {
				sortable22 = nil
			}
			required22 := new(bool)
			if !attributesItem.ComputedAttribute.Required.IsUnknown() && !attributesItem.ComputedAttribute.Required.IsNull() {
				*required22 = attributesItem.ComputedAttribute.Required.ValueBool()
			} else {
				required22 = nil
			}
			readonly22 := new(bool)
			if !attributesItem.ComputedAttribute.Readonly.IsUnknown() && !attributesItem.ComputedAttribute.Readonly.IsNull() {
				*readonly22 = attributesItem.ComputedAttribute.Readonly.ValueBool()
			} else {
				readonly22 = nil
			}
			deprecated22 := new(bool)
			if !attributesItem.ComputedAttribute.Deprecated.IsUnknown() && !attributesItem.ComputedAttribute.Deprecated.IsNull() {
				*deprecated22 = attributesItem.ComputedAttribute.Deprecated.ValueBool()
			} else {
				deprecated22 = nil
			}
			var defaultValue22 interface{}
			if !attributesItem.ComputedAttribute.DefaultValue.IsUnknown() && !attributesItem.ComputedAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.ComputedAttribute.DefaultValue.ValueString()), &defaultValue22)
			}
			group22 := new(string)
			if !attributesItem.ComputedAttribute.Group.IsUnknown() && !attributesItem.ComputedAttribute.Group.IsNull() {
				*group22 = attributesItem.ComputedAttribute.Group.ValueString()
			} else {
				group22 = nil
			}
			order22 := new(int64)
			if !attributesItem.ComputedAttribute.Order.IsUnknown() && !attributesItem.ComputedAttribute.Order.IsNull() {
				*order22 = attributesItem.ComputedAttribute.Order.ValueInt64()
			} else {
				order22 = nil
			}
			layout22 := new(string)
			if !attributesItem.ComputedAttribute.Layout.IsUnknown() && !attributesItem.ComputedAttribute.Layout.IsNull() {
				*layout22 = attributesItem.ComputedAttribute.Layout.ValueString()
			} else {
				layout22 = nil
			}
			hideLabel22 := new(bool)
			if !attributesItem.ComputedAttribute.HideLabel.IsUnknown() && !attributesItem.ComputedAttribute.HideLabel.IsNull() {
				*hideLabel22 = attributesItem.ComputedAttribute.HideLabel.ValueBool()
			} else {
				hideLabel22 = nil
			}
			icon22 := new(string)
			if !attributesItem.ComputedAttribute.Icon.IsUnknown() && !attributesItem.ComputedAttribute.Icon.IsNull() {
				*icon22 = attributesItem.ComputedAttribute.Icon.ValueString()
			} else {
				icon22 = nil
			}
			renderCondition22 := new(string)
			if !attributesItem.ComputedAttribute.RenderCondition.IsUnknown() && !attributesItem.ComputedAttribute.RenderCondition.IsNull() {
				*renderCondition22 = attributesItem.ComputedAttribute.RenderCondition.ValueString()
			} else {
				renderCondition22 = nil
			}
			purpose22 := make([]string, 0, len(attributesItem.ComputedAttribute.Purpose))
			for _, purposeItem22 := range attributesItem.ComputedAttribute.Purpose {
				purpose22 = append(purpose22, purposeItem22.ValueString())
			}
			var manifest22 []string
			if attributesItem.ComputedAttribute.Manifest != nil {
				manifest22 = make([]string, 0, len(attributesItem.ComputedAttribute.Manifest))
				for _, manifestItem22 := range attributesItem.ComputedAttribute.Manifest {
					manifest22 = append(manifest22, manifestItem22.ValueString())
				}
			}
			var constraints22 *shared.ComputedAttributeConstraints
			if attributesItem.ComputedAttribute.Constraints != nil {
				constraints22 = &shared.ComputedAttributeConstraints{}
			}
			featureFlag23 := new(string)
			if !attributesItem.ComputedAttribute.FeatureFlag.IsUnknown() && !attributesItem.ComputedAttribute.FeatureFlag.IsNull() {
				*featureFlag23 = attributesItem.ComputedAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag23 = nil
			}
			settingsFlag23 := make([]shared.SettingFlag, 0, len(attributesItem.ComputedAttribute.SettingsFlag))
			for _, settingsFlagItem23 := range attributesItem.ComputedAttribute.SettingsFlag {
				name47 := new(string)
				if !settingsFlagItem23.Name.IsUnknown() && !settingsFlagItem23.Name.IsNull() {
					*name47 = settingsFlagItem23.Name.ValueString()
				} else {
					name47 = nil
				}
				enabled23 := new(bool)
				if !settingsFlagItem23.Enabled.IsUnknown() && !settingsFlagItem23.Enabled.IsNull() {
					*enabled23 = settingsFlagItem23.Enabled.ValueBool()
				} else {
					enabled23 = nil
				}
				settingsFlag23 = append(settingsFlag23, shared.SettingFlag{
					Name:    name47,
					Enabled: enabled23,
				})
			}
			var valueFormatter22 string
			valueFormatter22 = attributesItem.ComputedAttribute.ValueFormatter.ValueString()

			previewValueFormatter22 := new(string)
			if !attributesItem.ComputedAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.ComputedAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter22 = attributesItem.ComputedAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter22 = nil
			}
			entityBuilderDisableEdit22 := new(bool)
			if !attributesItem.ComputedAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.ComputedAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit22 = attributesItem.ComputedAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit22 = nil
			}
			protected22 := new(bool)
			if !attributesItem.ComputedAttribute.Protected.IsUnknown() && !attributesItem.ComputedAttribute.Protected.IsNull() {
				*protected22 = attributesItem.ComputedAttribute.Protected.ValueBool()
			} else {
				protected22 = nil
			}
			var infoHelpers22 *shared.ComputedAttributeInfoHelpers
			if attributesItem.ComputedAttribute.InfoHelpers != nil {
				hintText22 := new(string)
				if !attributesItem.ComputedAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.ComputedAttribute.InfoHelpers.HintText.IsNull() {
					*hintText22 = attributesItem.ComputedAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText22 = nil
				}
				hintTextKey22 := new(string)
				if !attributesItem.ComputedAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.ComputedAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey22 = attributesItem.ComputedAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey22 = nil
				}
				hintCustomComponent22 := new(string)
				if !attributesItem.ComputedAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.ComputedAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent22 = attributesItem.ComputedAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent22 = nil
				}
				hintTooltipPlacement22 := new(string)
				if !attributesItem.ComputedAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.ComputedAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement22 = attributesItem.ComputedAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement22 = nil
				}
				infoHelpers22 = &shared.ComputedAttributeInfoHelpers{
					HintText:             hintText22,
					HintTextKey:          hintTextKey22,
					HintCustomComponent:  hintCustomComponent22,
					HintTooltipPlacement: hintTooltipPlacement22,
				}
			}
			repeatable22 := new(bool)
			if !attributesItem.ComputedAttribute.Repeatable.IsUnknown() && !attributesItem.ComputedAttribute.Repeatable.IsNull() {
				*repeatable22 = attributesItem.ComputedAttribute.Repeatable.ValueBool()
			} else {
				repeatable22 = nil
			}
			hasPrimary22 := new(bool)
			if !attributesItem.ComputedAttribute.HasPrimary.IsUnknown() && !attributesItem.ComputedAttribute.HasPrimary.IsNull() {
				*hasPrimary22 = attributesItem.ComputedAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary22 = nil
			}
			typeVar22 := shared.ComputedAttributeType(attributesItem.ComputedAttribute.Type.ValueString())
			computed := new(bool)
			if !attributesItem.ComputedAttribute.Computed.IsUnknown() && !attributesItem.ComputedAttribute.Computed.IsNull() {
				*computed = attributesItem.ComputedAttribute.Computed.ValueBool()
			} else {
				computed = nil
			}
			amountField := new(string)
			if !attributesItem.ComputedAttribute.AmountField.IsUnknown() && !attributesItem.ComputedAttribute.AmountField.IsNull() {
				*amountField = attributesItem.ComputedAttribute.AmountField.ValueString()
			} else {
				amountField = nil
			}
			currencyField := new(string)
			if !attributesItem.ComputedAttribute.CurrencyField.IsUnknown() && !attributesItem.ComputedAttribute.CurrencyField.IsNull() {
				*currencyField = attributesItem.ComputedAttribute.CurrencyField.ValueString()
			} else {
				currencyField = nil
			}
			computedAttribute := shared.ComputedAttribute{
				ID:                       id23,
				Name:                     name46,
				Label:                    label23,
				Placeholder:              placeholder22,
				Hidden:                   hidden22,
				ShowInTable:              showInTable22,
				Sortable:                 sortable22,
				Required:                 required22,
				Readonly:                 readonly22,
				Deprecated:               deprecated22,
				DefaultValue:             defaultValue22,
				Group:                    group22,
				Order:                    order22,
				Layout:                   layout22,
				HideLabel:                hideLabel22,
				Icon:                     icon22,
				RenderCondition:          renderCondition22,
				Purpose:                  purpose22,
				Manifest:                 manifest22,
				Constraints:              constraints22,
				FeatureFlag:              featureFlag23,
				SettingsFlag:             settingsFlag23,
				ValueFormatter:           valueFormatter22,
				PreviewValueFormatter:    previewValueFormatter22,
				EntityBuilderDisableEdit: entityBuilderDisableEdit22,
				Protected:                protected22,
				InfoHelpers:              infoHelpers22,
				Repeatable:               repeatable22,
				HasPrimary:               hasPrimary22,
				Type:                     typeVar22,
				Computed:                 computed,
				AmountField:              amountField,
				CurrencyField:            currencyField,
			}
			attributes = append(attributes, shared.AttributeInput{
				ComputedAttribute: &computedAttribute,
			})
		}
		if attributesItem.PartnerStatusAttribute != nil {
			id24 := new(string)
			if !attributesItem.PartnerStatusAttribute.ID.IsUnknown() && !attributesItem.PartnerStatusAttribute.ID.IsNull() {
				*id24 = attributesItem.PartnerStatusAttribute.ID.ValueString()
			} else {
				id24 = nil
			}
			var name48 string
			name48 = attributesItem.PartnerStatusAttribute.Name.ValueString()

			var label24 string
			label24 = attributesItem.PartnerStatusAttribute.Label.ValueString()

			placeholder23 := new(string)
			if !attributesItem.PartnerStatusAttribute.Placeholder.IsUnknown() && !attributesItem.PartnerStatusAttribute.Placeholder.IsNull() {
				*placeholder23 = attributesItem.PartnerStatusAttribute.Placeholder.ValueString()
			} else {
				placeholder23 = nil
			}
			hidden23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Hidden.IsUnknown() && !attributesItem.PartnerStatusAttribute.Hidden.IsNull() {
				*hidden23 = attributesItem.PartnerStatusAttribute.Hidden.ValueBool()
			} else {
				hidden23 = nil
			}
			showInTable23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.ShowInTable.IsUnknown() && !attributesItem.PartnerStatusAttribute.ShowInTable.IsNull() {
				*showInTable23 = attributesItem.PartnerStatusAttribute.ShowInTable.ValueBool()
			} else {
				showInTable23 = nil
			}
			sortable23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Sortable.IsUnknown() && !attributesItem.PartnerStatusAttribute.Sortable.IsNull() {
				*sortable23 = attributesItem.PartnerStatusAttribute.Sortable.ValueBool()
			} else {
				sortable23 = nil
			}
			required23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Required.IsUnknown() && !attributesItem.PartnerStatusAttribute.Required.IsNull() {
				*required23 = attributesItem.PartnerStatusAttribute.Required.ValueBool()
			} else {
				required23 = nil
			}
			readonly23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Readonly.IsUnknown() && !attributesItem.PartnerStatusAttribute.Readonly.IsNull() {
				*readonly23 = attributesItem.PartnerStatusAttribute.Readonly.ValueBool()
			} else {
				readonly23 = nil
			}
			deprecated23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Deprecated.IsUnknown() && !attributesItem.PartnerStatusAttribute.Deprecated.IsNull() {
				*deprecated23 = attributesItem.PartnerStatusAttribute.Deprecated.ValueBool()
			} else {
				deprecated23 = nil
			}
			var defaultValue23 interface{}
			if !attributesItem.PartnerStatusAttribute.DefaultValue.IsUnknown() && !attributesItem.PartnerStatusAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PartnerStatusAttribute.DefaultValue.ValueString()), &defaultValue23)
			}
			group23 := new(string)
			if !attributesItem.PartnerStatusAttribute.Group.IsUnknown() && !attributesItem.PartnerStatusAttribute.Group.IsNull() {
				*group23 = attributesItem.PartnerStatusAttribute.Group.ValueString()
			} else {
				group23 = nil
			}
			order23 := new(int64)
			if !attributesItem.PartnerStatusAttribute.Order.IsUnknown() && !attributesItem.PartnerStatusAttribute.Order.IsNull() {
				*order23 = attributesItem.PartnerStatusAttribute.Order.ValueInt64()
			} else {
				order23 = nil
			}
			layout23 := new(string)
			if !attributesItem.PartnerStatusAttribute.Layout.IsUnknown() && !attributesItem.PartnerStatusAttribute.Layout.IsNull() {
				*layout23 = attributesItem.PartnerStatusAttribute.Layout.ValueString()
			} else {
				layout23 = nil
			}
			hideLabel23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.HideLabel.IsUnknown() && !attributesItem.PartnerStatusAttribute.HideLabel.IsNull() {
				*hideLabel23 = attributesItem.PartnerStatusAttribute.HideLabel.ValueBool()
			} else {
				hideLabel23 = nil
			}
			icon23 := new(string)
			if !attributesItem.PartnerStatusAttribute.Icon.IsUnknown() && !attributesItem.PartnerStatusAttribute.Icon.IsNull() {
				*icon23 = attributesItem.PartnerStatusAttribute.Icon.ValueString()
			} else {
				icon23 = nil
			}
			renderCondition23 := new(string)
			if !attributesItem.PartnerStatusAttribute.RenderCondition.IsUnknown() && !attributesItem.PartnerStatusAttribute.RenderCondition.IsNull() {
				*renderCondition23 = attributesItem.PartnerStatusAttribute.RenderCondition.ValueString()
			} else {
				renderCondition23 = nil
			}
			purpose23 := make([]string, 0, len(attributesItem.PartnerStatusAttribute.Purpose))
			for _, purposeItem23 := range attributesItem.PartnerStatusAttribute.Purpose {
				purpose23 = append(purpose23, purposeItem23.ValueString())
			}
			var manifest23 []string
			if attributesItem.PartnerStatusAttribute.Manifest != nil {
				manifest23 = make([]string, 0, len(attributesItem.PartnerStatusAttribute.Manifest))
				for _, manifestItem23 := range attributesItem.PartnerStatusAttribute.Manifest {
					manifest23 = append(manifest23, manifestItem23.ValueString())
				}
			}
			var constraints23 *shared.PartnerStatusAttributeConstraints
			if attributesItem.PartnerStatusAttribute.Constraints != nil {
				constraints23 = &shared.PartnerStatusAttributeConstraints{}
			}
			featureFlag24 := new(string)
			if !attributesItem.PartnerStatusAttribute.FeatureFlag.IsUnknown() && !attributesItem.PartnerStatusAttribute.FeatureFlag.IsNull() {
				*featureFlag24 = attributesItem.PartnerStatusAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag24 = nil
			}
			settingsFlag24 := make([]shared.SettingFlag, 0, len(attributesItem.PartnerStatusAttribute.SettingsFlag))
			for _, settingsFlagItem24 := range attributesItem.PartnerStatusAttribute.SettingsFlag {
				name49 := new(string)
				if !settingsFlagItem24.Name.IsUnknown() && !settingsFlagItem24.Name.IsNull() {
					*name49 = settingsFlagItem24.Name.ValueString()
				} else {
					name49 = nil
				}
				enabled24 := new(bool)
				if !settingsFlagItem24.Enabled.IsUnknown() && !settingsFlagItem24.Enabled.IsNull() {
					*enabled24 = settingsFlagItem24.Enabled.ValueBool()
				} else {
					enabled24 = nil
				}
				settingsFlag24 = append(settingsFlag24, shared.SettingFlag{
					Name:    name49,
					Enabled: enabled24,
				})
			}
			valueFormatter23 := new(string)
			if !attributesItem.PartnerStatusAttribute.ValueFormatter.IsUnknown() && !attributesItem.PartnerStatusAttribute.ValueFormatter.IsNull() {
				*valueFormatter23 = attributesItem.PartnerStatusAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter23 = nil
			}
			previewValueFormatter23 := new(string)
			if !attributesItem.PartnerStatusAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PartnerStatusAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter23 = attributesItem.PartnerStatusAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter23 = nil
			}
			entityBuilderDisableEdit23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PartnerStatusAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit23 = attributesItem.PartnerStatusAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit23 = nil
			}
			protected23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Protected.IsUnknown() && !attributesItem.PartnerStatusAttribute.Protected.IsNull() {
				*protected23 = attributesItem.PartnerStatusAttribute.Protected.ValueBool()
			} else {
				protected23 = nil
			}
			var infoHelpers23 *shared.PartnerStatusAttributeInfoHelpers
			if attributesItem.PartnerStatusAttribute.InfoHelpers != nil {
				hintText23 := new(string)
				if !attributesItem.PartnerStatusAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PartnerStatusAttribute.InfoHelpers.HintText.IsNull() {
					*hintText23 = attributesItem.PartnerStatusAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText23 = nil
				}
				hintTextKey23 := new(string)
				if !attributesItem.PartnerStatusAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PartnerStatusAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey23 = attributesItem.PartnerStatusAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey23 = nil
				}
				hintCustomComponent23 := new(string)
				if !attributesItem.PartnerStatusAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PartnerStatusAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent23 = attributesItem.PartnerStatusAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent23 = nil
				}
				hintTooltipPlacement23 := new(string)
				if !attributesItem.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement23 = attributesItem.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement23 = nil
				}
				infoHelpers23 = &shared.PartnerStatusAttributeInfoHelpers{
					HintText:             hintText23,
					HintTextKey:          hintTextKey23,
					HintCustomComponent:  hintCustomComponent23,
					HintTooltipPlacement: hintTooltipPlacement23,
				}
			}
			repeatable23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.Repeatable.IsUnknown() && !attributesItem.PartnerStatusAttribute.Repeatable.IsNull() {
				*repeatable23 = attributesItem.PartnerStatusAttribute.Repeatable.ValueBool()
			} else {
				repeatable23 = nil
			}
			hasPrimary23 := new(bool)
			if !attributesItem.PartnerStatusAttribute.HasPrimary.IsUnknown() && !attributesItem.PartnerStatusAttribute.HasPrimary.IsNull() {
				*hasPrimary23 = attributesItem.PartnerStatusAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary23 = nil
			}
			typeVar23 := shared.PartnerStatusAttributeType(attributesItem.PartnerStatusAttribute.Type.ValueString())
			partnerStatusAttribute := shared.PartnerStatusAttribute{
				ID:                       id24,
				Name:                     name48,
				Label:                    label24,
				Placeholder:              placeholder23,
				Hidden:                   hidden23,
				ShowInTable:              showInTable23,
				Sortable:                 sortable23,
				Required:                 required23,
				Readonly:                 readonly23,
				Deprecated:               deprecated23,
				DefaultValue:             defaultValue23,
				Group:                    group23,
				Order:                    order23,
				Layout:                   layout23,
				HideLabel:                hideLabel23,
				Icon:                     icon23,
				RenderCondition:          renderCondition23,
				Purpose:                  purpose23,
				Manifest:                 manifest23,
				Constraints:              constraints23,
				FeatureFlag:              featureFlag24,
				SettingsFlag:             settingsFlag24,
				ValueFormatter:           valueFormatter23,
				PreviewValueFormatter:    previewValueFormatter23,
				EntityBuilderDisableEdit: entityBuilderDisableEdit23,
				Protected:                protected23,
				InfoHelpers:              infoHelpers23,
				Repeatable:               repeatable23,
				HasPrimary:               hasPrimary23,
				Type:                     typeVar23,
			}
			attributes = append(attributes, shared.AttributeInput{
				PartnerStatusAttribute: &partnerStatusAttribute,
			})
		}
		if attributesItem.InvitationEmailAttribute != nil {
			id25 := new(string)
			if !attributesItem.InvitationEmailAttribute.ID.IsUnknown() && !attributesItem.InvitationEmailAttribute.ID.IsNull() {
				*id25 = attributesItem.InvitationEmailAttribute.ID.ValueString()
			} else {
				id25 = nil
			}
			var name50 string
			name50 = attributesItem.InvitationEmailAttribute.Name.ValueString()

			var label25 string
			label25 = attributesItem.InvitationEmailAttribute.Label.ValueString()

			placeholder24 := new(string)
			if !attributesItem.InvitationEmailAttribute.Placeholder.IsUnknown() && !attributesItem.InvitationEmailAttribute.Placeholder.IsNull() {
				*placeholder24 = attributesItem.InvitationEmailAttribute.Placeholder.ValueString()
			} else {
				placeholder24 = nil
			}
			hidden24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Hidden.IsUnknown() && !attributesItem.InvitationEmailAttribute.Hidden.IsNull() {
				*hidden24 = attributesItem.InvitationEmailAttribute.Hidden.ValueBool()
			} else {
				hidden24 = nil
			}
			showInTable24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.ShowInTable.IsUnknown() && !attributesItem.InvitationEmailAttribute.ShowInTable.IsNull() {
				*showInTable24 = attributesItem.InvitationEmailAttribute.ShowInTable.ValueBool()
			} else {
				showInTable24 = nil
			}
			sortable24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Sortable.IsUnknown() && !attributesItem.InvitationEmailAttribute.Sortable.IsNull() {
				*sortable24 = attributesItem.InvitationEmailAttribute.Sortable.ValueBool()
			} else {
				sortable24 = nil
			}
			required24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Required.IsUnknown() && !attributesItem.InvitationEmailAttribute.Required.IsNull() {
				*required24 = attributesItem.InvitationEmailAttribute.Required.ValueBool()
			} else {
				required24 = nil
			}
			readonly24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Readonly.IsUnknown() && !attributesItem.InvitationEmailAttribute.Readonly.IsNull() {
				*readonly24 = attributesItem.InvitationEmailAttribute.Readonly.ValueBool()
			} else {
				readonly24 = nil
			}
			deprecated24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Deprecated.IsUnknown() && !attributesItem.InvitationEmailAttribute.Deprecated.IsNull() {
				*deprecated24 = attributesItem.InvitationEmailAttribute.Deprecated.ValueBool()
			} else {
				deprecated24 = nil
			}
			var defaultValue24 interface{}
			if !attributesItem.InvitationEmailAttribute.DefaultValue.IsUnknown() && !attributesItem.InvitationEmailAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.InvitationEmailAttribute.DefaultValue.ValueString()), &defaultValue24)
			}
			group24 := new(string)
			if !attributesItem.InvitationEmailAttribute.Group.IsUnknown() && !attributesItem.InvitationEmailAttribute.Group.IsNull() {
				*group24 = attributesItem.InvitationEmailAttribute.Group.ValueString()
			} else {
				group24 = nil
			}
			order24 := new(int64)
			if !attributesItem.InvitationEmailAttribute.Order.IsUnknown() && !attributesItem.InvitationEmailAttribute.Order.IsNull() {
				*order24 = attributesItem.InvitationEmailAttribute.Order.ValueInt64()
			} else {
				order24 = nil
			}
			layout24 := new(string)
			if !attributesItem.InvitationEmailAttribute.Layout.IsUnknown() && !attributesItem.InvitationEmailAttribute.Layout.IsNull() {
				*layout24 = attributesItem.InvitationEmailAttribute.Layout.ValueString()
			} else {
				layout24 = nil
			}
			hideLabel24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.HideLabel.IsUnknown() && !attributesItem.InvitationEmailAttribute.HideLabel.IsNull() {
				*hideLabel24 = attributesItem.InvitationEmailAttribute.HideLabel.ValueBool()
			} else {
				hideLabel24 = nil
			}
			icon24 := new(string)
			if !attributesItem.InvitationEmailAttribute.Icon.IsUnknown() && !attributesItem.InvitationEmailAttribute.Icon.IsNull() {
				*icon24 = attributesItem.InvitationEmailAttribute.Icon.ValueString()
			} else {
				icon24 = nil
			}
			renderCondition24 := new(string)
			if !attributesItem.InvitationEmailAttribute.RenderCondition.IsUnknown() && !attributesItem.InvitationEmailAttribute.RenderCondition.IsNull() {
				*renderCondition24 = attributesItem.InvitationEmailAttribute.RenderCondition.ValueString()
			} else {
				renderCondition24 = nil
			}
			purpose24 := make([]string, 0, len(attributesItem.InvitationEmailAttribute.Purpose))
			for _, purposeItem24 := range attributesItem.InvitationEmailAttribute.Purpose {
				purpose24 = append(purpose24, purposeItem24.ValueString())
			}
			var manifest24 []string
			if attributesItem.InvitationEmailAttribute.Manifest != nil {
				manifest24 = make([]string, 0, len(attributesItem.InvitationEmailAttribute.Manifest))
				for _, manifestItem24 := range attributesItem.InvitationEmailAttribute.Manifest {
					manifest24 = append(manifest24, manifestItem24.ValueString())
				}
			}
			var constraints24 *shared.InvitationEmailAttributeConstraints
			if attributesItem.InvitationEmailAttribute.Constraints != nil {
				constraints24 = &shared.InvitationEmailAttributeConstraints{}
			}
			featureFlag25 := new(string)
			if !attributesItem.InvitationEmailAttribute.FeatureFlag.IsUnknown() && !attributesItem.InvitationEmailAttribute.FeatureFlag.IsNull() {
				*featureFlag25 = attributesItem.InvitationEmailAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag25 = nil
			}
			settingsFlag25 := make([]shared.SettingFlag, 0, len(attributesItem.InvitationEmailAttribute.SettingsFlag))
			for _, settingsFlagItem25 := range attributesItem.InvitationEmailAttribute.SettingsFlag {
				name51 := new(string)
				if !settingsFlagItem25.Name.IsUnknown() && !settingsFlagItem25.Name.IsNull() {
					*name51 = settingsFlagItem25.Name.ValueString()
				} else {
					name51 = nil
				}
				enabled25 := new(bool)
				if !settingsFlagItem25.Enabled.IsUnknown() && !settingsFlagItem25.Enabled.IsNull() {
					*enabled25 = settingsFlagItem25.Enabled.ValueBool()
				} else {
					enabled25 = nil
				}
				settingsFlag25 = append(settingsFlag25, shared.SettingFlag{
					Name:    name51,
					Enabled: enabled25,
				})
			}
			valueFormatter24 := new(string)
			if !attributesItem.InvitationEmailAttribute.ValueFormatter.IsUnknown() && !attributesItem.InvitationEmailAttribute.ValueFormatter.IsNull() {
				*valueFormatter24 = attributesItem.InvitationEmailAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter24 = nil
			}
			previewValueFormatter24 := new(string)
			if !attributesItem.InvitationEmailAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.InvitationEmailAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter24 = attributesItem.InvitationEmailAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter24 = nil
			}
			entityBuilderDisableEdit24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.InvitationEmailAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit24 = attributesItem.InvitationEmailAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit24 = nil
			}
			protected24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Protected.IsUnknown() && !attributesItem.InvitationEmailAttribute.Protected.IsNull() {
				*protected24 = attributesItem.InvitationEmailAttribute.Protected.ValueBool()
			} else {
				protected24 = nil
			}
			var infoHelpers24 *shared.InvitationEmailAttributeInfoHelpers
			if attributesItem.InvitationEmailAttribute.InfoHelpers != nil {
				hintText24 := new(string)
				if !attributesItem.InvitationEmailAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.InvitationEmailAttribute.InfoHelpers.HintText.IsNull() {
					*hintText24 = attributesItem.InvitationEmailAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText24 = nil
				}
				hintTextKey24 := new(string)
				if !attributesItem.InvitationEmailAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.InvitationEmailAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey24 = attributesItem.InvitationEmailAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey24 = nil
				}
				hintCustomComponent24 := new(string)
				if !attributesItem.InvitationEmailAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.InvitationEmailAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent24 = attributesItem.InvitationEmailAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent24 = nil
				}
				hintTooltipPlacement24 := new(string)
				if !attributesItem.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement24 = attributesItem.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement24 = nil
				}
				infoHelpers24 = &shared.InvitationEmailAttributeInfoHelpers{
					HintText:             hintText24,
					HintTextKey:          hintTextKey24,
					HintCustomComponent:  hintCustomComponent24,
					HintTooltipPlacement: hintTooltipPlacement24,
				}
			}
			repeatable24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.Repeatable.IsUnknown() && !attributesItem.InvitationEmailAttribute.Repeatable.IsNull() {
				*repeatable24 = attributesItem.InvitationEmailAttribute.Repeatable.ValueBool()
			} else {
				repeatable24 = nil
			}
			hasPrimary24 := new(bool)
			if !attributesItem.InvitationEmailAttribute.HasPrimary.IsUnknown() && !attributesItem.InvitationEmailAttribute.HasPrimary.IsNull() {
				*hasPrimary24 = attributesItem.InvitationEmailAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary24 = nil
			}
			typeVar24 := shared.InvitationEmailAttributeType(attributesItem.InvitationEmailAttribute.Type.ValueString())
			invitationEmailAttribute := shared.InvitationEmailAttribute{
				ID:                       id25,
				Name:                     name50,
				Label:                    label25,
				Placeholder:              placeholder24,
				Hidden:                   hidden24,
				ShowInTable:              showInTable24,
				Sortable:                 sortable24,
				Required:                 required24,
				Readonly:                 readonly24,
				Deprecated:               deprecated24,
				DefaultValue:             defaultValue24,
				Group:                    group24,
				Order:                    order24,
				Layout:                   layout24,
				HideLabel:                hideLabel24,
				Icon:                     icon24,
				RenderCondition:          renderCondition24,
				Purpose:                  purpose24,
				Manifest:                 manifest24,
				Constraints:              constraints24,
				FeatureFlag:              featureFlag25,
				SettingsFlag:             settingsFlag25,
				ValueFormatter:           valueFormatter24,
				PreviewValueFormatter:    previewValueFormatter24,
				EntityBuilderDisableEdit: entityBuilderDisableEdit24,
				Protected:                protected24,
				InfoHelpers:              infoHelpers24,
				Repeatable:               repeatable24,
				HasPrimary:               hasPrimary24,
				Type:                     typeVar24,
			}
			attributes = append(attributes, shared.AttributeInput{
				InvitationEmailAttribute: &invitationEmailAttribute,
			})
		}
		if attributesItem.AutomationAttribute != nil {
			id26 := new(string)
			if !attributesItem.AutomationAttribute.ID.IsUnknown() && !attributesItem.AutomationAttribute.ID.IsNull() {
				*id26 = attributesItem.AutomationAttribute.ID.ValueString()
			} else {
				id26 = nil
			}
			var name52 string
			name52 = attributesItem.AutomationAttribute.Name.ValueString()

			var label26 string
			label26 = attributesItem.AutomationAttribute.Label.ValueString()

			placeholder25 := new(string)
			if !attributesItem.AutomationAttribute.Placeholder.IsUnknown() && !attributesItem.AutomationAttribute.Placeholder.IsNull() {
				*placeholder25 = attributesItem.AutomationAttribute.Placeholder.ValueString()
			} else {
				placeholder25 = nil
			}
			hidden25 := new(bool)
			if !attributesItem.AutomationAttribute.Hidden.IsUnknown() && !attributesItem.AutomationAttribute.Hidden.IsNull() {
				*hidden25 = attributesItem.AutomationAttribute.Hidden.ValueBool()
			} else {
				hidden25 = nil
			}
			showInTable25 := new(bool)
			if !attributesItem.AutomationAttribute.ShowInTable.IsUnknown() && !attributesItem.AutomationAttribute.ShowInTable.IsNull() {
				*showInTable25 = attributesItem.AutomationAttribute.ShowInTable.ValueBool()
			} else {
				showInTable25 = nil
			}
			sortable25 := new(bool)
			if !attributesItem.AutomationAttribute.Sortable.IsUnknown() && !attributesItem.AutomationAttribute.Sortable.IsNull() {
				*sortable25 = attributesItem.AutomationAttribute.Sortable.ValueBool()
			} else {
				sortable25 = nil
			}
			required25 := new(bool)
			if !attributesItem.AutomationAttribute.Required.IsUnknown() && !attributesItem.AutomationAttribute.Required.IsNull() {
				*required25 = attributesItem.AutomationAttribute.Required.ValueBool()
			} else {
				required25 = nil
			}
			readonly25 := new(bool)
			if !attributesItem.AutomationAttribute.Readonly.IsUnknown() && !attributesItem.AutomationAttribute.Readonly.IsNull() {
				*readonly25 = attributesItem.AutomationAttribute.Readonly.ValueBool()
			} else {
				readonly25 = nil
			}
			deprecated25 := new(bool)
			if !attributesItem.AutomationAttribute.Deprecated.IsUnknown() && !attributesItem.AutomationAttribute.Deprecated.IsNull() {
				*deprecated25 = attributesItem.AutomationAttribute.Deprecated.ValueBool()
			} else {
				deprecated25 = nil
			}
			var defaultValue25 interface{}
			if !attributesItem.AutomationAttribute.DefaultValue.IsUnknown() && !attributesItem.AutomationAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.AutomationAttribute.DefaultValue.ValueString()), &defaultValue25)
			}
			group25 := new(string)
			if !attributesItem.AutomationAttribute.Group.IsUnknown() && !attributesItem.AutomationAttribute.Group.IsNull() {
				*group25 = attributesItem.AutomationAttribute.Group.ValueString()
			} else {
				group25 = nil
			}
			order25 := new(int64)
			if !attributesItem.AutomationAttribute.Order.IsUnknown() && !attributesItem.AutomationAttribute.Order.IsNull() {
				*order25 = attributesItem.AutomationAttribute.Order.ValueInt64()
			} else {
				order25 = nil
			}
			layout25 := new(string)
			if !attributesItem.AutomationAttribute.Layout.IsUnknown() && !attributesItem.AutomationAttribute.Layout.IsNull() {
				*layout25 = attributesItem.AutomationAttribute.Layout.ValueString()
			} else {
				layout25 = nil
			}
			hideLabel25 := new(bool)
			if !attributesItem.AutomationAttribute.HideLabel.IsUnknown() && !attributesItem.AutomationAttribute.HideLabel.IsNull() {
				*hideLabel25 = attributesItem.AutomationAttribute.HideLabel.ValueBool()
			} else {
				hideLabel25 = nil
			}
			icon25 := new(string)
			if !attributesItem.AutomationAttribute.Icon.IsUnknown() && !attributesItem.AutomationAttribute.Icon.IsNull() {
				*icon25 = attributesItem.AutomationAttribute.Icon.ValueString()
			} else {
				icon25 = nil
			}
			renderCondition25 := new(string)
			if !attributesItem.AutomationAttribute.RenderCondition.IsUnknown() && !attributesItem.AutomationAttribute.RenderCondition.IsNull() {
				*renderCondition25 = attributesItem.AutomationAttribute.RenderCondition.ValueString()
			} else {
				renderCondition25 = nil
			}
			purpose25 := make([]string, 0, len(attributesItem.AutomationAttribute.Purpose))
			for _, purposeItem25 := range attributesItem.AutomationAttribute.Purpose {
				purpose25 = append(purpose25, purposeItem25.ValueString())
			}
			var manifest25 []string
			if attributesItem.AutomationAttribute.Manifest != nil {
				manifest25 = make([]string, 0, len(attributesItem.AutomationAttribute.Manifest))
				for _, manifestItem25 := range attributesItem.AutomationAttribute.Manifest {
					manifest25 = append(manifest25, manifestItem25.ValueString())
				}
			}
			var constraints25 *shared.AutomationAttributeConstraints
			if attributesItem.AutomationAttribute.Constraints != nil {
				constraints25 = &shared.AutomationAttributeConstraints{}
			}
			featureFlag26 := new(string)
			if !attributesItem.AutomationAttribute.FeatureFlag.IsUnknown() && !attributesItem.AutomationAttribute.FeatureFlag.IsNull() {
				*featureFlag26 = attributesItem.AutomationAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag26 = nil
			}
			settingsFlag26 := make([]shared.SettingFlag, 0, len(attributesItem.AutomationAttribute.SettingsFlag))
			for _, settingsFlagItem26 := range attributesItem.AutomationAttribute.SettingsFlag {
				name53 := new(string)
				if !settingsFlagItem26.Name.IsUnknown() && !settingsFlagItem26.Name.IsNull() {
					*name53 = settingsFlagItem26.Name.ValueString()
				} else {
					name53 = nil
				}
				enabled26 := new(bool)
				if !settingsFlagItem26.Enabled.IsUnknown() && !settingsFlagItem26.Enabled.IsNull() {
					*enabled26 = settingsFlagItem26.Enabled.ValueBool()
				} else {
					enabled26 = nil
				}
				settingsFlag26 = append(settingsFlag26, shared.SettingFlag{
					Name:    name53,
					Enabled: enabled26,
				})
			}
			valueFormatter25 := new(string)
			if !attributesItem.AutomationAttribute.ValueFormatter.IsUnknown() && !attributesItem.AutomationAttribute.ValueFormatter.IsNull() {
				*valueFormatter25 = attributesItem.AutomationAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter25 = nil
			}
			previewValueFormatter25 := new(string)
			if !attributesItem.AutomationAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.AutomationAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter25 = attributesItem.AutomationAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter25 = nil
			}
			entityBuilderDisableEdit25 := new(bool)
			if !attributesItem.AutomationAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.AutomationAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit25 = attributesItem.AutomationAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit25 = nil
			}
			protected25 := new(bool)
			if !attributesItem.AutomationAttribute.Protected.IsUnknown() && !attributesItem.AutomationAttribute.Protected.IsNull() {
				*protected25 = attributesItem.AutomationAttribute.Protected.ValueBool()
			} else {
				protected25 = nil
			}
			var infoHelpers25 *shared.AutomationAttributeInfoHelpers
			if attributesItem.AutomationAttribute.InfoHelpers != nil {
				hintText25 := new(string)
				if !attributesItem.AutomationAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.AutomationAttribute.InfoHelpers.HintText.IsNull() {
					*hintText25 = attributesItem.AutomationAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText25 = nil
				}
				hintTextKey25 := new(string)
				if !attributesItem.AutomationAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.AutomationAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey25 = attributesItem.AutomationAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey25 = nil
				}
				hintCustomComponent25 := new(string)
				if !attributesItem.AutomationAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.AutomationAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent25 = attributesItem.AutomationAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent25 = nil
				}
				hintTooltipPlacement25 := new(string)
				if !attributesItem.AutomationAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.AutomationAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement25 = attributesItem.AutomationAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement25 = nil
				}
				infoHelpers25 = &shared.AutomationAttributeInfoHelpers{
					HintText:             hintText25,
					HintTextKey:          hintTextKey25,
					HintCustomComponent:  hintCustomComponent25,
					HintTooltipPlacement: hintTooltipPlacement25,
				}
			}
			repeatable25 := new(bool)
			if !attributesItem.AutomationAttribute.Repeatable.IsUnknown() && !attributesItem.AutomationAttribute.Repeatable.IsNull() {
				*repeatable25 = attributesItem.AutomationAttribute.Repeatable.ValueBool()
			} else {
				repeatable25 = nil
			}
			hasPrimary25 := new(bool)
			if !attributesItem.AutomationAttribute.HasPrimary.IsUnknown() && !attributesItem.AutomationAttribute.HasPrimary.IsNull() {
				*hasPrimary25 = attributesItem.AutomationAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary25 = nil
			}
			typeVar25 := shared.AutomationAttributeType(attributesItem.AutomationAttribute.Type.ValueString())
			automationAttribute := shared.AutomationAttribute{
				ID:                       id26,
				Name:                     name52,
				Label:                    label26,
				Placeholder:              placeholder25,
				Hidden:                   hidden25,
				ShowInTable:              showInTable25,
				Sortable:                 sortable25,
				Required:                 required25,
				Readonly:                 readonly25,
				Deprecated:               deprecated25,
				DefaultValue:             defaultValue25,
				Group:                    group25,
				Order:                    order25,
				Layout:                   layout25,
				HideLabel:                hideLabel25,
				Icon:                     icon25,
				RenderCondition:          renderCondition25,
				Purpose:                  purpose25,
				Manifest:                 manifest25,
				Constraints:              constraints25,
				FeatureFlag:              featureFlag26,
				SettingsFlag:             settingsFlag26,
				ValueFormatter:           valueFormatter25,
				PreviewValueFormatter:    previewValueFormatter25,
				EntityBuilderDisableEdit: entityBuilderDisableEdit25,
				Protected:                protected25,
				InfoHelpers:              infoHelpers25,
				Repeatable:               repeatable25,
				HasPrimary:               hasPrimary25,
				Type:                     typeVar25,
			}
			attributes = append(attributes, shared.AttributeInput{
				AutomationAttribute: &automationAttribute,
			})
		}
		if attributesItem.InternalUserAttribute != nil {
			id27 := new(string)
			if !attributesItem.InternalUserAttribute.ID.IsUnknown() && !attributesItem.InternalUserAttribute.ID.IsNull() {
				*id27 = attributesItem.InternalUserAttribute.ID.ValueString()
			} else {
				id27 = nil
			}
			var name54 string
			name54 = attributesItem.InternalUserAttribute.Name.ValueString()

			var label27 string
			label27 = attributesItem.InternalUserAttribute.Label.ValueString()

			placeholder26 := new(string)
			if !attributesItem.InternalUserAttribute.Placeholder.IsUnknown() && !attributesItem.InternalUserAttribute.Placeholder.IsNull() {
				*placeholder26 = attributesItem.InternalUserAttribute.Placeholder.ValueString()
			} else {
				placeholder26 = nil
			}
			hidden26 := new(bool)
			if !attributesItem.InternalUserAttribute.Hidden.IsUnknown() && !attributesItem.InternalUserAttribute.Hidden.IsNull() {
				*hidden26 = attributesItem.InternalUserAttribute.Hidden.ValueBool()
			} else {
				hidden26 = nil
			}
			showInTable26 := new(bool)
			if !attributesItem.InternalUserAttribute.ShowInTable.IsUnknown() && !attributesItem.InternalUserAttribute.ShowInTable.IsNull() {
				*showInTable26 = attributesItem.InternalUserAttribute.ShowInTable.ValueBool()
			} else {
				showInTable26 = nil
			}
			sortable26 := new(bool)
			if !attributesItem.InternalUserAttribute.Sortable.IsUnknown() && !attributesItem.InternalUserAttribute.Sortable.IsNull() {
				*sortable26 = attributesItem.InternalUserAttribute.Sortable.ValueBool()
			} else {
				sortable26 = nil
			}
			required26 := new(bool)
			if !attributesItem.InternalUserAttribute.Required.IsUnknown() && !attributesItem.InternalUserAttribute.Required.IsNull() {
				*required26 = attributesItem.InternalUserAttribute.Required.ValueBool()
			} else {
				required26 = nil
			}
			readonly26 := new(bool)
			if !attributesItem.InternalUserAttribute.Readonly.IsUnknown() && !attributesItem.InternalUserAttribute.Readonly.IsNull() {
				*readonly26 = attributesItem.InternalUserAttribute.Readonly.ValueBool()
			} else {
				readonly26 = nil
			}
			deprecated26 := new(bool)
			if !attributesItem.InternalUserAttribute.Deprecated.IsUnknown() && !attributesItem.InternalUserAttribute.Deprecated.IsNull() {
				*deprecated26 = attributesItem.InternalUserAttribute.Deprecated.ValueBool()
			} else {
				deprecated26 = nil
			}
			var defaultValue26 interface{}
			if !attributesItem.InternalUserAttribute.DefaultValue.IsUnknown() && !attributesItem.InternalUserAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.InternalUserAttribute.DefaultValue.ValueString()), &defaultValue26)
			}
			group26 := new(string)
			if !attributesItem.InternalUserAttribute.Group.IsUnknown() && !attributesItem.InternalUserAttribute.Group.IsNull() {
				*group26 = attributesItem.InternalUserAttribute.Group.ValueString()
			} else {
				group26 = nil
			}
			order26 := new(int64)
			if !attributesItem.InternalUserAttribute.Order.IsUnknown() && !attributesItem.InternalUserAttribute.Order.IsNull() {
				*order26 = attributesItem.InternalUserAttribute.Order.ValueInt64()
			} else {
				order26 = nil
			}
			layout26 := new(string)
			if !attributesItem.InternalUserAttribute.Layout.IsUnknown() && !attributesItem.InternalUserAttribute.Layout.IsNull() {
				*layout26 = attributesItem.InternalUserAttribute.Layout.ValueString()
			} else {
				layout26 = nil
			}
			hideLabel26 := new(bool)
			if !attributesItem.InternalUserAttribute.HideLabel.IsUnknown() && !attributesItem.InternalUserAttribute.HideLabel.IsNull() {
				*hideLabel26 = attributesItem.InternalUserAttribute.HideLabel.ValueBool()
			} else {
				hideLabel26 = nil
			}
			icon26 := new(string)
			if !attributesItem.InternalUserAttribute.Icon.IsUnknown() && !attributesItem.InternalUserAttribute.Icon.IsNull() {
				*icon26 = attributesItem.InternalUserAttribute.Icon.ValueString()
			} else {
				icon26 = nil
			}
			renderCondition26 := new(string)
			if !attributesItem.InternalUserAttribute.RenderCondition.IsUnknown() && !attributesItem.InternalUserAttribute.RenderCondition.IsNull() {
				*renderCondition26 = attributesItem.InternalUserAttribute.RenderCondition.ValueString()
			} else {
				renderCondition26 = nil
			}
			purpose26 := make([]string, 0, len(attributesItem.InternalUserAttribute.Purpose))
			for _, purposeItem26 := range attributesItem.InternalUserAttribute.Purpose {
				purpose26 = append(purpose26, purposeItem26.ValueString())
			}
			var manifest26 []string
			if attributesItem.InternalUserAttribute.Manifest != nil {
				manifest26 = make([]string, 0, len(attributesItem.InternalUserAttribute.Manifest))
				for _, manifestItem26 := range attributesItem.InternalUserAttribute.Manifest {
					manifest26 = append(manifest26, manifestItem26.ValueString())
				}
			}
			var constraints26 *shared.InternalUserAttributeConstraints
			if attributesItem.InternalUserAttribute.Constraints != nil {
				constraints26 = &shared.InternalUserAttributeConstraints{}
			}
			featureFlag27 := new(string)
			if !attributesItem.InternalUserAttribute.FeatureFlag.IsUnknown() && !attributesItem.InternalUserAttribute.FeatureFlag.IsNull() {
				*featureFlag27 = attributesItem.InternalUserAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag27 = nil
			}
			settingsFlag27 := make([]shared.SettingFlag, 0, len(attributesItem.InternalUserAttribute.SettingsFlag))
			for _, settingsFlagItem27 := range attributesItem.InternalUserAttribute.SettingsFlag {
				name55 := new(string)
				if !settingsFlagItem27.Name.IsUnknown() && !settingsFlagItem27.Name.IsNull() {
					*name55 = settingsFlagItem27.Name.ValueString()
				} else {
					name55 = nil
				}
				enabled27 := new(bool)
				if !settingsFlagItem27.Enabled.IsUnknown() && !settingsFlagItem27.Enabled.IsNull() {
					*enabled27 = settingsFlagItem27.Enabled.ValueBool()
				} else {
					enabled27 = nil
				}
				settingsFlag27 = append(settingsFlag27, shared.SettingFlag{
					Name:    name55,
					Enabled: enabled27,
				})
			}
			valueFormatter26 := new(string)
			if !attributesItem.InternalUserAttribute.ValueFormatter.IsUnknown() && !attributesItem.InternalUserAttribute.ValueFormatter.IsNull() {
				*valueFormatter26 = attributesItem.InternalUserAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter26 = nil
			}
			previewValueFormatter26 := new(string)
			if !attributesItem.InternalUserAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.InternalUserAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter26 = attributesItem.InternalUserAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter26 = nil
			}
			entityBuilderDisableEdit26 := new(bool)
			if !attributesItem.InternalUserAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.InternalUserAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit26 = attributesItem.InternalUserAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit26 = nil
			}
			protected26 := new(bool)
			if !attributesItem.InternalUserAttribute.Protected.IsUnknown() && !attributesItem.InternalUserAttribute.Protected.IsNull() {
				*protected26 = attributesItem.InternalUserAttribute.Protected.ValueBool()
			} else {
				protected26 = nil
			}
			var infoHelpers26 *shared.InternalUserAttributeInfoHelpers
			if attributesItem.InternalUserAttribute.InfoHelpers != nil {
				hintText26 := new(string)
				if !attributesItem.InternalUserAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.InternalUserAttribute.InfoHelpers.HintText.IsNull() {
					*hintText26 = attributesItem.InternalUserAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText26 = nil
				}
				hintTextKey26 := new(string)
				if !attributesItem.InternalUserAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.InternalUserAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey26 = attributesItem.InternalUserAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey26 = nil
				}
				hintCustomComponent26 := new(string)
				if !attributesItem.InternalUserAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.InternalUserAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent26 = attributesItem.InternalUserAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent26 = nil
				}
				hintTooltipPlacement26 := new(string)
				if !attributesItem.InternalUserAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.InternalUserAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement26 = attributesItem.InternalUserAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement26 = nil
				}
				infoHelpers26 = &shared.InternalUserAttributeInfoHelpers{
					HintText:             hintText26,
					HintTextKey:          hintTextKey26,
					HintCustomComponent:  hintCustomComponent26,
					HintTooltipPlacement: hintTooltipPlacement26,
				}
			}
			repeatable26 := new(bool)
			if !attributesItem.InternalUserAttribute.Repeatable.IsUnknown() && !attributesItem.InternalUserAttribute.Repeatable.IsNull() {
				*repeatable26 = attributesItem.InternalUserAttribute.Repeatable.ValueBool()
			} else {
				repeatable26 = nil
			}
			hasPrimary26 := new(bool)
			if !attributesItem.InternalUserAttribute.HasPrimary.IsUnknown() && !attributesItem.InternalUserAttribute.HasPrimary.IsNull() {
				*hasPrimary26 = attributesItem.InternalUserAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary26 = nil
			}
			typeVar26 := shared.InternalUserAttributeType(attributesItem.InternalUserAttribute.Type.ValueString())
			internalUserAttribute := shared.InternalUserAttribute{
				ID:                       id27,
				Name:                     name54,
				Label:                    label27,
				Placeholder:              placeholder26,
				Hidden:                   hidden26,
				ShowInTable:              showInTable26,
				Sortable:                 sortable26,
				Required:                 required26,
				Readonly:                 readonly26,
				Deprecated:               deprecated26,
				DefaultValue:             defaultValue26,
				Group:                    group26,
				Order:                    order26,
				Layout:                   layout26,
				HideLabel:                hideLabel26,
				Icon:                     icon26,
				RenderCondition:          renderCondition26,
				Purpose:                  purpose26,
				Manifest:                 manifest26,
				Constraints:              constraints26,
				FeatureFlag:              featureFlag27,
				SettingsFlag:             settingsFlag27,
				ValueFormatter:           valueFormatter26,
				PreviewValueFormatter:    previewValueFormatter26,
				EntityBuilderDisableEdit: entityBuilderDisableEdit26,
				Protected:                protected26,
				InfoHelpers:              infoHelpers26,
				Repeatable:               repeatable26,
				HasPrimary:               hasPrimary26,
				Type:                     typeVar26,
			}
			attributes = append(attributes, shared.AttributeInput{
				InternalUserAttribute: &internalUserAttribute,
			})
		}
		if attributesItem.PurposeAttribute != nil {
			var name56 string
			name56 = attributesItem.PurposeAttribute.Name.ValueString()

			var label28 string
			label28 = attributesItem.PurposeAttribute.Label.ValueString()

			placeholder27 := new(string)
			if !attributesItem.PurposeAttribute.Placeholder.IsUnknown() && !attributesItem.PurposeAttribute.Placeholder.IsNull() {
				*placeholder27 = attributesItem.PurposeAttribute.Placeholder.ValueString()
			} else {
				placeholder27 = nil
			}
			hidden27 := new(bool)
			if !attributesItem.PurposeAttribute.Hidden.IsUnknown() && !attributesItem.PurposeAttribute.Hidden.IsNull() {
				*hidden27 = attributesItem.PurposeAttribute.Hidden.ValueBool()
			} else {
				hidden27 = nil
			}
			showInTable27 := new(bool)
			if !attributesItem.PurposeAttribute.ShowInTable.IsUnknown() && !attributesItem.PurposeAttribute.ShowInTable.IsNull() {
				*showInTable27 = attributesItem.PurposeAttribute.ShowInTable.ValueBool()
			} else {
				showInTable27 = nil
			}
			sortable27 := new(bool)
			if !attributesItem.PurposeAttribute.Sortable.IsUnknown() && !attributesItem.PurposeAttribute.Sortable.IsNull() {
				*sortable27 = attributesItem.PurposeAttribute.Sortable.ValueBool()
			} else {
				sortable27 = nil
			}
			required27 := new(bool)
			if !attributesItem.PurposeAttribute.Required.IsUnknown() && !attributesItem.PurposeAttribute.Required.IsNull() {
				*required27 = attributesItem.PurposeAttribute.Required.ValueBool()
			} else {
				required27 = nil
			}
			readonly27 := new(bool)
			if !attributesItem.PurposeAttribute.Readonly.IsUnknown() && !attributesItem.PurposeAttribute.Readonly.IsNull() {
				*readonly27 = attributesItem.PurposeAttribute.Readonly.ValueBool()
			} else {
				readonly27 = nil
			}
			deprecated27 := new(bool)
			if !attributesItem.PurposeAttribute.Deprecated.IsUnknown() && !attributesItem.PurposeAttribute.Deprecated.IsNull() {
				*deprecated27 = attributesItem.PurposeAttribute.Deprecated.ValueBool()
			} else {
				deprecated27 = nil
			}
			var defaultValue27 interface{}
			if !attributesItem.PurposeAttribute.DefaultValue.IsUnknown() && !attributesItem.PurposeAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PurposeAttribute.DefaultValue.ValueString()), &defaultValue27)
			}
			group27 := new(string)
			if !attributesItem.PurposeAttribute.Group.IsUnknown() && !attributesItem.PurposeAttribute.Group.IsNull() {
				*group27 = attributesItem.PurposeAttribute.Group.ValueString()
			} else {
				group27 = nil
			}
			order27 := new(int64)
			if !attributesItem.PurposeAttribute.Order.IsUnknown() && !attributesItem.PurposeAttribute.Order.IsNull() {
				*order27 = attributesItem.PurposeAttribute.Order.ValueInt64()
			} else {
				order27 = nil
			}
			layout27 := new(string)
			if !attributesItem.PurposeAttribute.Layout.IsUnknown() && !attributesItem.PurposeAttribute.Layout.IsNull() {
				*layout27 = attributesItem.PurposeAttribute.Layout.ValueString()
			} else {
				layout27 = nil
			}
			hideLabel27 := new(bool)
			if !attributesItem.PurposeAttribute.HideLabel.IsUnknown() && !attributesItem.PurposeAttribute.HideLabel.IsNull() {
				*hideLabel27 = attributesItem.PurposeAttribute.HideLabel.ValueBool()
			} else {
				hideLabel27 = nil
			}
			icon27 := new(string)
			if !attributesItem.PurposeAttribute.Icon.IsUnknown() && !attributesItem.PurposeAttribute.Icon.IsNull() {
				*icon27 = attributesItem.PurposeAttribute.Icon.ValueString()
			} else {
				icon27 = nil
			}
			renderCondition27 := new(string)
			if !attributesItem.PurposeAttribute.RenderCondition.IsUnknown() && !attributesItem.PurposeAttribute.RenderCondition.IsNull() {
				*renderCondition27 = attributesItem.PurposeAttribute.RenderCondition.ValueString()
			} else {
				renderCondition27 = nil
			}
			purpose27 := make([]string, 0, len(attributesItem.PurposeAttribute.Purpose))
			for _, purposeItem27 := range attributesItem.PurposeAttribute.Purpose {
				purpose27 = append(purpose27, purposeItem27.ValueString())
			}
			var manifest27 []string
			if attributesItem.PurposeAttribute.Manifest != nil {
				manifest27 = make([]string, 0, len(attributesItem.PurposeAttribute.Manifest))
				for _, manifestItem27 := range attributesItem.PurposeAttribute.Manifest {
					manifest27 = append(manifest27, manifestItem27.ValueString())
				}
			}
			var constraints27 *shared.PurposeAttributeConstraints
			if attributesItem.PurposeAttribute.Constraints != nil {
				constraints27 = &shared.PurposeAttributeConstraints{}
			}
			featureFlag28 := new(string)
			if !attributesItem.PurposeAttribute.FeatureFlag.IsUnknown() && !attributesItem.PurposeAttribute.FeatureFlag.IsNull() {
				*featureFlag28 = attributesItem.PurposeAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag28 = nil
			}
			settingsFlag28 := make([]shared.SettingFlag, 0, len(attributesItem.PurposeAttribute.SettingsFlag))
			for _, settingsFlagItem28 := range attributesItem.PurposeAttribute.SettingsFlag {
				name57 := new(string)
				if !settingsFlagItem28.Name.IsUnknown() && !settingsFlagItem28.Name.IsNull() {
					*name57 = settingsFlagItem28.Name.ValueString()
				} else {
					name57 = nil
				}
				enabled28 := new(bool)
				if !settingsFlagItem28.Enabled.IsUnknown() && !settingsFlagItem28.Enabled.IsNull() {
					*enabled28 = settingsFlagItem28.Enabled.ValueBool()
				} else {
					enabled28 = nil
				}
				settingsFlag28 = append(settingsFlag28, shared.SettingFlag{
					Name:    name57,
					Enabled: enabled28,
				})
			}
			valueFormatter27 := new(string)
			if !attributesItem.PurposeAttribute.ValueFormatter.IsUnknown() && !attributesItem.PurposeAttribute.ValueFormatter.IsNull() {
				*valueFormatter27 = attributesItem.PurposeAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter27 = nil
			}
			previewValueFormatter27 := new(string)
			if !attributesItem.PurposeAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PurposeAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter27 = attributesItem.PurposeAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter27 = nil
			}
			entityBuilderDisableEdit27 := new(bool)
			if !attributesItem.PurposeAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PurposeAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit27 = attributesItem.PurposeAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit27 = nil
			}
			protected27 := new(bool)
			if !attributesItem.PurposeAttribute.Protected.IsUnknown() && !attributesItem.PurposeAttribute.Protected.IsNull() {
				*protected27 = attributesItem.PurposeAttribute.Protected.ValueBool()
			} else {
				protected27 = nil
			}
			var infoHelpers27 *shared.PurposeAttributeInfoHelpers
			if attributesItem.PurposeAttribute.InfoHelpers != nil {
				hintText27 := new(string)
				if !attributesItem.PurposeAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PurposeAttribute.InfoHelpers.HintText.IsNull() {
					*hintText27 = attributesItem.PurposeAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText27 = nil
				}
				hintTextKey27 := new(string)
				if !attributesItem.PurposeAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PurposeAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey27 = attributesItem.PurposeAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey27 = nil
				}
				hintCustomComponent27 := new(string)
				if !attributesItem.PurposeAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PurposeAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent27 = attributesItem.PurposeAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent27 = nil
				}
				hintTooltipPlacement27 := new(string)
				if !attributesItem.PurposeAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PurposeAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement27 = attributesItem.PurposeAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement27 = nil
				}
				infoHelpers27 = &shared.PurposeAttributeInfoHelpers{
					HintText:             hintText27,
					HintTextKey:          hintTextKey27,
					HintCustomComponent:  hintCustomComponent27,
					HintTooltipPlacement: hintTooltipPlacement27,
				}
			}
			repeatable27 := new(bool)
			if !attributesItem.PurposeAttribute.Repeatable.IsUnknown() && !attributesItem.PurposeAttribute.Repeatable.IsNull() {
				*repeatable27 = attributesItem.PurposeAttribute.Repeatable.ValueBool()
			} else {
				repeatable27 = nil
			}
			hasPrimary27 := new(bool)
			if !attributesItem.PurposeAttribute.HasPrimary.IsUnknown() && !attributesItem.PurposeAttribute.HasPrimary.IsNull() {
				*hasPrimary27 = attributesItem.PurposeAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary27 = nil
			}
			slug := new(string)
			if !attributesItem.PurposeAttribute.Slug.IsUnknown() && !attributesItem.PurposeAttribute.Slug.IsNull() {
				*slug = attributesItem.PurposeAttribute.Slug.ValueString()
			} else {
				slug = nil
			}
			parents := make([]string, 0, len(attributesItem.PurposeAttribute.Parents))
			for _, parentsItem := range attributesItem.PurposeAttribute.Parents {
				parents = append(parents, parentsItem.ValueString())
			}
			color := new(string)
			if !attributesItem.PurposeAttribute.Color.IsUnknown() && !attributesItem.PurposeAttribute.Color.IsNull() {
				*color = attributesItem.PurposeAttribute.Color.ValueString()
			} else {
				color = nil
			}
			createdAt := new(time.Time)
			if !attributesItem.PurposeAttribute.CreatedAt.IsUnknown() && !attributesItem.PurposeAttribute.CreatedAt.IsNull() {
				*createdAt, _ = time.Parse(time.RFC3339Nano, attributesItem.PurposeAttribute.CreatedAt.ValueString())
			} else {
				createdAt = nil
			}
			updatedAt := new(time.Time)
			if !attributesItem.PurposeAttribute.UpdatedAt.IsUnknown() && !attributesItem.PurposeAttribute.UpdatedAt.IsNull() {
				*updatedAt, _ = time.Parse(time.RFC3339Nano, attributesItem.PurposeAttribute.UpdatedAt.ValueString())
			} else {
				updatedAt = nil
			}
			archived := new(bool)
			if !attributesItem.PurposeAttribute.Archived.IsUnknown() && !attributesItem.PurposeAttribute.Archived.IsNull() {
				*archived = attributesItem.PurposeAttribute.Archived.ValueBool()
			} else {
				archived = nil
			}
			typeVar27 := shared.PurposeAttributeType(attributesItem.PurposeAttribute.Type.ValueString())
			purposeAttributeInput := shared.PurposeAttributeInput{
				Name:                     name56,
				Label:                    label28,
				Placeholder:              placeholder27,
				Hidden:                   hidden27,
				ShowInTable:              showInTable27,
				Sortable:                 sortable27,
				Required:                 required27,
				Readonly:                 readonly27,
				Deprecated:               deprecated27,
				DefaultValue:             defaultValue27,
				Group:                    group27,
				Order:                    order27,
				Layout:                   layout27,
				HideLabel:                hideLabel27,
				Icon:                     icon27,
				RenderCondition:          renderCondition27,
				Purpose:                  purpose27,
				Manifest:                 manifest27,
				Constraints:              constraints27,
				FeatureFlag:              featureFlag28,
				SettingsFlag:             settingsFlag28,
				ValueFormatter:           valueFormatter27,
				PreviewValueFormatter:    previewValueFormatter27,
				EntityBuilderDisableEdit: entityBuilderDisableEdit27,
				Protected:                protected27,
				InfoHelpers:              infoHelpers27,
				Repeatable:               repeatable27,
				HasPrimary:               hasPrimary27,
				Slug:                     slug,
				Parents:                  parents,
				Color:                    color,
				CreatedAt:                createdAt,
				UpdatedAt:                updatedAt,
				Archived:                 archived,
				Type:                     typeVar27,
			}
			attributes = append(attributes, shared.AttributeInput{
				PurposeAttributeInput: &purposeAttributeInput,
			})
		}
		if attributesItem.PartnerOrganisationAttribute != nil {
			id28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.ID.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.ID.IsNull() {
				*id28 = attributesItem.PartnerOrganisationAttribute.ID.ValueString()
			} else {
				id28 = nil
			}
			var name58 string
			name58 = attributesItem.PartnerOrganisationAttribute.Name.ValueString()

			var label29 string
			label29 = attributesItem.PartnerOrganisationAttribute.Label.ValueString()

			placeholder28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.Placeholder.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Placeholder.IsNull() {
				*placeholder28 = attributesItem.PartnerOrganisationAttribute.Placeholder.ValueString()
			} else {
				placeholder28 = nil
			}
			hidden28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Hidden.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Hidden.IsNull() {
				*hidden28 = attributesItem.PartnerOrganisationAttribute.Hidden.ValueBool()
			} else {
				hidden28 = nil
			}
			showInTable28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.ShowInTable.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.ShowInTable.IsNull() {
				*showInTable28 = attributesItem.PartnerOrganisationAttribute.ShowInTable.ValueBool()
			} else {
				showInTable28 = nil
			}
			sortable28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Sortable.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Sortable.IsNull() {
				*sortable28 = attributesItem.PartnerOrganisationAttribute.Sortable.ValueBool()
			} else {
				sortable28 = nil
			}
			required28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Required.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Required.IsNull() {
				*required28 = attributesItem.PartnerOrganisationAttribute.Required.ValueBool()
			} else {
				required28 = nil
			}
			readonly28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Readonly.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Readonly.IsNull() {
				*readonly28 = attributesItem.PartnerOrganisationAttribute.Readonly.ValueBool()
			} else {
				readonly28 = nil
			}
			deprecated28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Deprecated.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Deprecated.IsNull() {
				*deprecated28 = attributesItem.PartnerOrganisationAttribute.Deprecated.ValueBool()
			} else {
				deprecated28 = nil
			}
			var defaultValue28 interface{}
			if !attributesItem.PartnerOrganisationAttribute.DefaultValue.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PartnerOrganisationAttribute.DefaultValue.ValueString()), &defaultValue28)
			}
			group28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.Group.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Group.IsNull() {
				*group28 = attributesItem.PartnerOrganisationAttribute.Group.ValueString()
			} else {
				group28 = nil
			}
			order28 := new(int64)
			if !attributesItem.PartnerOrganisationAttribute.Order.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Order.IsNull() {
				*order28 = attributesItem.PartnerOrganisationAttribute.Order.ValueInt64()
			} else {
				order28 = nil
			}
			layout28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.Layout.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Layout.IsNull() {
				*layout28 = attributesItem.PartnerOrganisationAttribute.Layout.ValueString()
			} else {
				layout28 = nil
			}
			hideLabel28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.HideLabel.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.HideLabel.IsNull() {
				*hideLabel28 = attributesItem.PartnerOrganisationAttribute.HideLabel.ValueBool()
			} else {
				hideLabel28 = nil
			}
			icon28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.Icon.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Icon.IsNull() {
				*icon28 = attributesItem.PartnerOrganisationAttribute.Icon.ValueString()
			} else {
				icon28 = nil
			}
			renderCondition28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.RenderCondition.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.RenderCondition.IsNull() {
				*renderCondition28 = attributesItem.PartnerOrganisationAttribute.RenderCondition.ValueString()
			} else {
				renderCondition28 = nil
			}
			purpose28 := make([]string, 0, len(attributesItem.PartnerOrganisationAttribute.Purpose))
			for _, purposeItem28 := range attributesItem.PartnerOrganisationAttribute.Purpose {
				purpose28 = append(purpose28, purposeItem28.ValueString())
			}
			var manifest28 []string
			if attributesItem.PartnerOrganisationAttribute.Manifest != nil {
				manifest28 = make([]string, 0, len(attributesItem.PartnerOrganisationAttribute.Manifest))
				for _, manifestItem28 := range attributesItem.PartnerOrganisationAttribute.Manifest {
					manifest28 = append(manifest28, manifestItem28.ValueString())
				}
			}
			var constraints28 *shared.PartnerOrganisationAttributeConstraints
			if attributesItem.PartnerOrganisationAttribute.Constraints != nil {
				constraints28 = &shared.PartnerOrganisationAttributeConstraints{}
			}
			featureFlag29 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.FeatureFlag.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.FeatureFlag.IsNull() {
				*featureFlag29 = attributesItem.PartnerOrganisationAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag29 = nil
			}
			settingsFlag29 := make([]shared.SettingFlag, 0, len(attributesItem.PartnerOrganisationAttribute.SettingsFlag))
			for _, settingsFlagItem29 := range attributesItem.PartnerOrganisationAttribute.SettingsFlag {
				name59 := new(string)
				if !settingsFlagItem29.Name.IsUnknown() && !settingsFlagItem29.Name.IsNull() {
					*name59 = settingsFlagItem29.Name.ValueString()
				} else {
					name59 = nil
				}
				enabled29 := new(bool)
				if !settingsFlagItem29.Enabled.IsUnknown() && !settingsFlagItem29.Enabled.IsNull() {
					*enabled29 = settingsFlagItem29.Enabled.ValueBool()
				} else {
					enabled29 = nil
				}
				settingsFlag29 = append(settingsFlag29, shared.SettingFlag{
					Name:    name59,
					Enabled: enabled29,
				})
			}
			valueFormatter28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.ValueFormatter.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.ValueFormatter.IsNull() {
				*valueFormatter28 = attributesItem.PartnerOrganisationAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter28 = nil
			}
			previewValueFormatter28 := new(string)
			if !attributesItem.PartnerOrganisationAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter28 = attributesItem.PartnerOrganisationAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter28 = nil
			}
			entityBuilderDisableEdit28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit28 = attributesItem.PartnerOrganisationAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit28 = nil
			}
			protected28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Protected.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Protected.IsNull() {
				*protected28 = attributesItem.PartnerOrganisationAttribute.Protected.ValueBool()
			} else {
				protected28 = nil
			}
			var infoHelpers28 *shared.PartnerOrganisationAttributeInfoHelpers
			if attributesItem.PartnerOrganisationAttribute.InfoHelpers != nil {
				hintText28 := new(string)
				if !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintText.IsNull() {
					*hintText28 = attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText28 = nil
				}
				hintTextKey28 := new(string)
				if !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey28 = attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey28 = nil
				}
				hintCustomComponent28 := new(string)
				if !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent28 = attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent28 = nil
				}
				hintTooltipPlacement28 := new(string)
				if !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement28 = attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement28 = nil
				}
				infoHelpers28 = &shared.PartnerOrganisationAttributeInfoHelpers{
					HintText:             hintText28,
					HintTextKey:          hintTextKey28,
					HintCustomComponent:  hintCustomComponent28,
					HintTooltipPlacement: hintTooltipPlacement28,
				}
			}
			repeatable28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.Repeatable.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.Repeatable.IsNull() {
				*repeatable28 = attributesItem.PartnerOrganisationAttribute.Repeatable.ValueBool()
			} else {
				repeatable28 = nil
			}
			hasPrimary28 := new(bool)
			if !attributesItem.PartnerOrganisationAttribute.HasPrimary.IsUnknown() && !attributesItem.PartnerOrganisationAttribute.HasPrimary.IsNull() {
				*hasPrimary28 = attributesItem.PartnerOrganisationAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary28 = nil
			}
			typeVar28 := shared.PartnerOrganisationAttributeType(attributesItem.PartnerOrganisationAttribute.Type.ValueString())
			partnerOrganisationAttribute := shared.PartnerOrganisationAttribute{
				ID:                       id28,
				Name:                     name58,
				Label:                    label29,
				Placeholder:              placeholder28,
				Hidden:                   hidden28,
				ShowInTable:              showInTable28,
				Sortable:                 sortable28,
				Required:                 required28,
				Readonly:                 readonly28,
				Deprecated:               deprecated28,
				DefaultValue:             defaultValue28,
				Group:                    group28,
				Order:                    order28,
				Layout:                   layout28,
				HideLabel:                hideLabel28,
				Icon:                     icon28,
				RenderCondition:          renderCondition28,
				Purpose:                  purpose28,
				Manifest:                 manifest28,
				Constraints:              constraints28,
				FeatureFlag:              featureFlag29,
				SettingsFlag:             settingsFlag29,
				ValueFormatter:           valueFormatter28,
				PreviewValueFormatter:    previewValueFormatter28,
				EntityBuilderDisableEdit: entityBuilderDisableEdit28,
				Protected:                protected28,
				InfoHelpers:              infoHelpers28,
				Repeatable:               repeatable28,
				HasPrimary:               hasPrimary28,
				Type:                     typeVar28,
			}
			attributes = append(attributes, shared.AttributeInput{
				PartnerOrganisationAttribute: &partnerOrganisationAttribute,
			})
		}
		if attributesItem.PhoneAttribute != nil {
			id29 := new(string)
			if !attributesItem.PhoneAttribute.ID.IsUnknown() && !attributesItem.PhoneAttribute.ID.IsNull() {
				*id29 = attributesItem.PhoneAttribute.ID.ValueString()
			} else {
				id29 = nil
			}
			var name60 string
			name60 = attributesItem.PhoneAttribute.Name.ValueString()

			var label30 string
			label30 = attributesItem.PhoneAttribute.Label.ValueString()

			placeholder29 := new(string)
			if !attributesItem.PhoneAttribute.Placeholder.IsUnknown() && !attributesItem.PhoneAttribute.Placeholder.IsNull() {
				*placeholder29 = attributesItem.PhoneAttribute.Placeholder.ValueString()
			} else {
				placeholder29 = nil
			}
			hidden29 := new(bool)
			if !attributesItem.PhoneAttribute.Hidden.IsUnknown() && !attributesItem.PhoneAttribute.Hidden.IsNull() {
				*hidden29 = attributesItem.PhoneAttribute.Hidden.ValueBool()
			} else {
				hidden29 = nil
			}
			showInTable29 := new(bool)
			if !attributesItem.PhoneAttribute.ShowInTable.IsUnknown() && !attributesItem.PhoneAttribute.ShowInTable.IsNull() {
				*showInTable29 = attributesItem.PhoneAttribute.ShowInTable.ValueBool()
			} else {
				showInTable29 = nil
			}
			sortable29 := new(bool)
			if !attributesItem.PhoneAttribute.Sortable.IsUnknown() && !attributesItem.PhoneAttribute.Sortable.IsNull() {
				*sortable29 = attributesItem.PhoneAttribute.Sortable.ValueBool()
			} else {
				sortable29 = nil
			}
			required29 := new(bool)
			if !attributesItem.PhoneAttribute.Required.IsUnknown() && !attributesItem.PhoneAttribute.Required.IsNull() {
				*required29 = attributesItem.PhoneAttribute.Required.ValueBool()
			} else {
				required29 = nil
			}
			readonly29 := new(bool)
			if !attributesItem.PhoneAttribute.Readonly.IsUnknown() && !attributesItem.PhoneAttribute.Readonly.IsNull() {
				*readonly29 = attributesItem.PhoneAttribute.Readonly.ValueBool()
			} else {
				readonly29 = nil
			}
			deprecated29 := new(bool)
			if !attributesItem.PhoneAttribute.Deprecated.IsUnknown() && !attributesItem.PhoneAttribute.Deprecated.IsNull() {
				*deprecated29 = attributesItem.PhoneAttribute.Deprecated.ValueBool()
			} else {
				deprecated29 = nil
			}
			var defaultValue29 interface{}
			if !attributesItem.PhoneAttribute.DefaultValue.IsUnknown() && !attributesItem.PhoneAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PhoneAttribute.DefaultValue.ValueString()), &defaultValue29)
			}
			group29 := new(string)
			if !attributesItem.PhoneAttribute.Group.IsUnknown() && !attributesItem.PhoneAttribute.Group.IsNull() {
				*group29 = attributesItem.PhoneAttribute.Group.ValueString()
			} else {
				group29 = nil
			}
			order29 := new(int64)
			if !attributesItem.PhoneAttribute.Order.IsUnknown() && !attributesItem.PhoneAttribute.Order.IsNull() {
				*order29 = attributesItem.PhoneAttribute.Order.ValueInt64()
			} else {
				order29 = nil
			}
			layout29 := new(string)
			if !attributesItem.PhoneAttribute.Layout.IsUnknown() && !attributesItem.PhoneAttribute.Layout.IsNull() {
				*layout29 = attributesItem.PhoneAttribute.Layout.ValueString()
			} else {
				layout29 = nil
			}
			hideLabel29 := new(bool)
			if !attributesItem.PhoneAttribute.HideLabel.IsUnknown() && !attributesItem.PhoneAttribute.HideLabel.IsNull() {
				*hideLabel29 = attributesItem.PhoneAttribute.HideLabel.ValueBool()
			} else {
				hideLabel29 = nil
			}
			icon29 := new(string)
			if !attributesItem.PhoneAttribute.Icon.IsUnknown() && !attributesItem.PhoneAttribute.Icon.IsNull() {
				*icon29 = attributesItem.PhoneAttribute.Icon.ValueString()
			} else {
				icon29 = nil
			}
			renderCondition29 := new(string)
			if !attributesItem.PhoneAttribute.RenderCondition.IsUnknown() && !attributesItem.PhoneAttribute.RenderCondition.IsNull() {
				*renderCondition29 = attributesItem.PhoneAttribute.RenderCondition.ValueString()
			} else {
				renderCondition29 = nil
			}
			purpose29 := make([]string, 0, len(attributesItem.PhoneAttribute.Purpose))
			for _, purposeItem29 := range attributesItem.PhoneAttribute.Purpose {
				purpose29 = append(purpose29, purposeItem29.ValueString())
			}
			var manifest29 []string
			if attributesItem.PhoneAttribute.Manifest != nil {
				manifest29 = make([]string, 0, len(attributesItem.PhoneAttribute.Manifest))
				for _, manifestItem29 := range attributesItem.PhoneAttribute.Manifest {
					manifest29 = append(manifest29, manifestItem29.ValueString())
				}
			}
			var constraints29 *shared.PhoneAttributeConstraints
			if attributesItem.PhoneAttribute.Constraints != nil {
				constraints29 = &shared.PhoneAttributeConstraints{}
			}
			featureFlag30 := new(string)
			if !attributesItem.PhoneAttribute.FeatureFlag.IsUnknown() && !attributesItem.PhoneAttribute.FeatureFlag.IsNull() {
				*featureFlag30 = attributesItem.PhoneAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag30 = nil
			}
			settingsFlag30 := make([]shared.SettingFlag, 0, len(attributesItem.PhoneAttribute.SettingsFlag))
			for _, settingsFlagItem30 := range attributesItem.PhoneAttribute.SettingsFlag {
				name61 := new(string)
				if !settingsFlagItem30.Name.IsUnknown() && !settingsFlagItem30.Name.IsNull() {
					*name61 = settingsFlagItem30.Name.ValueString()
				} else {
					name61 = nil
				}
				enabled30 := new(bool)
				if !settingsFlagItem30.Enabled.IsUnknown() && !settingsFlagItem30.Enabled.IsNull() {
					*enabled30 = settingsFlagItem30.Enabled.ValueBool()
				} else {
					enabled30 = nil
				}
				settingsFlag30 = append(settingsFlag30, shared.SettingFlag{
					Name:    name61,
					Enabled: enabled30,
				})
			}
			valueFormatter29 := new(string)
			if !attributesItem.PhoneAttribute.ValueFormatter.IsUnknown() && !attributesItem.PhoneAttribute.ValueFormatter.IsNull() {
				*valueFormatter29 = attributesItem.PhoneAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter29 = nil
			}
			previewValueFormatter29 := new(string)
			if !attributesItem.PhoneAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PhoneAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter29 = attributesItem.PhoneAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter29 = nil
			}
			entityBuilderDisableEdit29 := new(bool)
			if !attributesItem.PhoneAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PhoneAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit29 = attributesItem.PhoneAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit29 = nil
			}
			protected29 := new(bool)
			if !attributesItem.PhoneAttribute.Protected.IsUnknown() && !attributesItem.PhoneAttribute.Protected.IsNull() {
				*protected29 = attributesItem.PhoneAttribute.Protected.ValueBool()
			} else {
				protected29 = nil
			}
			var infoHelpers29 *shared.PhoneAttributeInfoHelpers
			if attributesItem.PhoneAttribute.InfoHelpers != nil {
				hintText29 := new(string)
				if !attributesItem.PhoneAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PhoneAttribute.InfoHelpers.HintText.IsNull() {
					*hintText29 = attributesItem.PhoneAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText29 = nil
				}
				hintTextKey29 := new(string)
				if !attributesItem.PhoneAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PhoneAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey29 = attributesItem.PhoneAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey29 = nil
				}
				hintCustomComponent29 := new(string)
				if !attributesItem.PhoneAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PhoneAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent29 = attributesItem.PhoneAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent29 = nil
				}
				hintTooltipPlacement29 := new(string)
				if !attributesItem.PhoneAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PhoneAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement29 = attributesItem.PhoneAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement29 = nil
				}
				infoHelpers29 = &shared.PhoneAttributeInfoHelpers{
					HintText:             hintText29,
					HintTextKey:          hintTextKey29,
					HintCustomComponent:  hintCustomComponent29,
					HintTooltipPlacement: hintTooltipPlacement29,
				}
			}
			repeatable29 := new(bool)
			if !attributesItem.PhoneAttribute.Repeatable.IsUnknown() && !attributesItem.PhoneAttribute.Repeatable.IsNull() {
				*repeatable29 = attributesItem.PhoneAttribute.Repeatable.ValueBool()
			} else {
				repeatable29 = nil
			}
			hasPrimary29 := new(bool)
			if !attributesItem.PhoneAttribute.HasPrimary.IsUnknown() && !attributesItem.PhoneAttribute.HasPrimary.IsNull() {
				*hasPrimary29 = attributesItem.PhoneAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary29 = nil
			}
			typeVar29 := shared.PhoneAttributeType(attributesItem.PhoneAttribute.Type.ValueString())
			phoneAttribute := shared.PhoneAttribute{
				ID:                       id29,
				Name:                     name60,
				Label:                    label30,
				Placeholder:              placeholder29,
				Hidden:                   hidden29,
				ShowInTable:              showInTable29,
				Sortable:                 sortable29,
				Required:                 required29,
				Readonly:                 readonly29,
				Deprecated:               deprecated29,
				DefaultValue:             defaultValue29,
				Group:                    group29,
				Order:                    order29,
				Layout:                   layout29,
				HideLabel:                hideLabel29,
				Icon:                     icon29,
				RenderCondition:          renderCondition29,
				Purpose:                  purpose29,
				Manifest:                 manifest29,
				Constraints:              constraints29,
				FeatureFlag:              featureFlag30,
				SettingsFlag:             settingsFlag30,
				ValueFormatter:           valueFormatter29,
				PreviewValueFormatter:    previewValueFormatter29,
				EntityBuilderDisableEdit: entityBuilderDisableEdit29,
				Protected:                protected29,
				InfoHelpers:              infoHelpers29,
				Repeatable:               repeatable29,
				HasPrimary:               hasPrimary29,
				Type:                     typeVar29,
			}
			attributes = append(attributes, shared.AttributeInput{
				PhoneAttribute: &phoneAttribute,
			})
		}
		if attributesItem.EmailAttribute != nil {
			id30 := new(string)
			if !attributesItem.EmailAttribute.ID.IsUnknown() && !attributesItem.EmailAttribute.ID.IsNull() {
				*id30 = attributesItem.EmailAttribute.ID.ValueString()
			} else {
				id30 = nil
			}
			var name62 string
			name62 = attributesItem.EmailAttribute.Name.ValueString()

			var label31 string
			label31 = attributesItem.EmailAttribute.Label.ValueString()

			placeholder30 := new(string)
			if !attributesItem.EmailAttribute.Placeholder.IsUnknown() && !attributesItem.EmailAttribute.Placeholder.IsNull() {
				*placeholder30 = attributesItem.EmailAttribute.Placeholder.ValueString()
			} else {
				placeholder30 = nil
			}
			hidden30 := new(bool)
			if !attributesItem.EmailAttribute.Hidden.IsUnknown() && !attributesItem.EmailAttribute.Hidden.IsNull() {
				*hidden30 = attributesItem.EmailAttribute.Hidden.ValueBool()
			} else {
				hidden30 = nil
			}
			showInTable30 := new(bool)
			if !attributesItem.EmailAttribute.ShowInTable.IsUnknown() && !attributesItem.EmailAttribute.ShowInTable.IsNull() {
				*showInTable30 = attributesItem.EmailAttribute.ShowInTable.ValueBool()
			} else {
				showInTable30 = nil
			}
			sortable30 := new(bool)
			if !attributesItem.EmailAttribute.Sortable.IsUnknown() && !attributesItem.EmailAttribute.Sortable.IsNull() {
				*sortable30 = attributesItem.EmailAttribute.Sortable.ValueBool()
			} else {
				sortable30 = nil
			}
			required30 := new(bool)
			if !attributesItem.EmailAttribute.Required.IsUnknown() && !attributesItem.EmailAttribute.Required.IsNull() {
				*required30 = attributesItem.EmailAttribute.Required.ValueBool()
			} else {
				required30 = nil
			}
			readonly30 := new(bool)
			if !attributesItem.EmailAttribute.Readonly.IsUnknown() && !attributesItem.EmailAttribute.Readonly.IsNull() {
				*readonly30 = attributesItem.EmailAttribute.Readonly.ValueBool()
			} else {
				readonly30 = nil
			}
			deprecated30 := new(bool)
			if !attributesItem.EmailAttribute.Deprecated.IsUnknown() && !attributesItem.EmailAttribute.Deprecated.IsNull() {
				*deprecated30 = attributesItem.EmailAttribute.Deprecated.ValueBool()
			} else {
				deprecated30 = nil
			}
			var defaultValue30 interface{}
			if !attributesItem.EmailAttribute.DefaultValue.IsUnknown() && !attributesItem.EmailAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.EmailAttribute.DefaultValue.ValueString()), &defaultValue30)
			}
			group30 := new(string)
			if !attributesItem.EmailAttribute.Group.IsUnknown() && !attributesItem.EmailAttribute.Group.IsNull() {
				*group30 = attributesItem.EmailAttribute.Group.ValueString()
			} else {
				group30 = nil
			}
			order30 := new(int64)
			if !attributesItem.EmailAttribute.Order.IsUnknown() && !attributesItem.EmailAttribute.Order.IsNull() {
				*order30 = attributesItem.EmailAttribute.Order.ValueInt64()
			} else {
				order30 = nil
			}
			layout30 := new(string)
			if !attributesItem.EmailAttribute.Layout.IsUnknown() && !attributesItem.EmailAttribute.Layout.IsNull() {
				*layout30 = attributesItem.EmailAttribute.Layout.ValueString()
			} else {
				layout30 = nil
			}
			hideLabel30 := new(bool)
			if !attributesItem.EmailAttribute.HideLabel.IsUnknown() && !attributesItem.EmailAttribute.HideLabel.IsNull() {
				*hideLabel30 = attributesItem.EmailAttribute.HideLabel.ValueBool()
			} else {
				hideLabel30 = nil
			}
			icon30 := new(string)
			if !attributesItem.EmailAttribute.Icon.IsUnknown() && !attributesItem.EmailAttribute.Icon.IsNull() {
				*icon30 = attributesItem.EmailAttribute.Icon.ValueString()
			} else {
				icon30 = nil
			}
			renderCondition30 := new(string)
			if !attributesItem.EmailAttribute.RenderCondition.IsUnknown() && !attributesItem.EmailAttribute.RenderCondition.IsNull() {
				*renderCondition30 = attributesItem.EmailAttribute.RenderCondition.ValueString()
			} else {
				renderCondition30 = nil
			}
			purpose30 := make([]string, 0, len(attributesItem.EmailAttribute.Purpose))
			for _, purposeItem30 := range attributesItem.EmailAttribute.Purpose {
				purpose30 = append(purpose30, purposeItem30.ValueString())
			}
			var manifest30 []string
			if attributesItem.EmailAttribute.Manifest != nil {
				manifest30 = make([]string, 0, len(attributesItem.EmailAttribute.Manifest))
				for _, manifestItem30 := range attributesItem.EmailAttribute.Manifest {
					manifest30 = append(manifest30, manifestItem30.ValueString())
				}
			}
			var constraints30 *shared.EmailAttributeConstraints
			if attributesItem.EmailAttribute.Constraints != nil {
				constraints30 = &shared.EmailAttributeConstraints{}
			}
			featureFlag31 := new(string)
			if !attributesItem.EmailAttribute.FeatureFlag.IsUnknown() && !attributesItem.EmailAttribute.FeatureFlag.IsNull() {
				*featureFlag31 = attributesItem.EmailAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag31 = nil
			}
			settingsFlag31 := make([]shared.SettingFlag, 0, len(attributesItem.EmailAttribute.SettingsFlag))
			for _, settingsFlagItem31 := range attributesItem.EmailAttribute.SettingsFlag {
				name63 := new(string)
				if !settingsFlagItem31.Name.IsUnknown() && !settingsFlagItem31.Name.IsNull() {
					*name63 = settingsFlagItem31.Name.ValueString()
				} else {
					name63 = nil
				}
				enabled31 := new(bool)
				if !settingsFlagItem31.Enabled.IsUnknown() && !settingsFlagItem31.Enabled.IsNull() {
					*enabled31 = settingsFlagItem31.Enabled.ValueBool()
				} else {
					enabled31 = nil
				}
				settingsFlag31 = append(settingsFlag31, shared.SettingFlag{
					Name:    name63,
					Enabled: enabled31,
				})
			}
			valueFormatter30 := new(string)
			if !attributesItem.EmailAttribute.ValueFormatter.IsUnknown() && !attributesItem.EmailAttribute.ValueFormatter.IsNull() {
				*valueFormatter30 = attributesItem.EmailAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter30 = nil
			}
			previewValueFormatter30 := new(string)
			if !attributesItem.EmailAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.EmailAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter30 = attributesItem.EmailAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter30 = nil
			}
			entityBuilderDisableEdit30 := new(bool)
			if !attributesItem.EmailAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.EmailAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit30 = attributesItem.EmailAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit30 = nil
			}
			protected30 := new(bool)
			if !attributesItem.EmailAttribute.Protected.IsUnknown() && !attributesItem.EmailAttribute.Protected.IsNull() {
				*protected30 = attributesItem.EmailAttribute.Protected.ValueBool()
			} else {
				protected30 = nil
			}
			var infoHelpers30 *shared.EmailAttributeInfoHelpers
			if attributesItem.EmailAttribute.InfoHelpers != nil {
				hintText30 := new(string)
				if !attributesItem.EmailAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.EmailAttribute.InfoHelpers.HintText.IsNull() {
					*hintText30 = attributesItem.EmailAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText30 = nil
				}
				hintTextKey30 := new(string)
				if !attributesItem.EmailAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.EmailAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey30 = attributesItem.EmailAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey30 = nil
				}
				hintCustomComponent30 := new(string)
				if !attributesItem.EmailAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.EmailAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent30 = attributesItem.EmailAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent30 = nil
				}
				hintTooltipPlacement30 := new(string)
				if !attributesItem.EmailAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.EmailAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement30 = attributesItem.EmailAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement30 = nil
				}
				infoHelpers30 = &shared.EmailAttributeInfoHelpers{
					HintText:             hintText30,
					HintTextKey:          hintTextKey30,
					HintCustomComponent:  hintCustomComponent30,
					HintTooltipPlacement: hintTooltipPlacement30,
				}
			}
			repeatable30 := new(bool)
			if !attributesItem.EmailAttribute.Repeatable.IsUnknown() && !attributesItem.EmailAttribute.Repeatable.IsNull() {
				*repeatable30 = attributesItem.EmailAttribute.Repeatable.ValueBool()
			} else {
				repeatable30 = nil
			}
			hasPrimary30 := new(bool)
			if !attributesItem.EmailAttribute.HasPrimary.IsUnknown() && !attributesItem.EmailAttribute.HasPrimary.IsNull() {
				*hasPrimary30 = attributesItem.EmailAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary30 = nil
			}
			typeVar30 := shared.EmailAttributeType(attributesItem.EmailAttribute.Type.ValueString())
			emailAttribute := shared.EmailAttribute{
				ID:                       id30,
				Name:                     name62,
				Label:                    label31,
				Placeholder:              placeholder30,
				Hidden:                   hidden30,
				ShowInTable:              showInTable30,
				Sortable:                 sortable30,
				Required:                 required30,
				Readonly:                 readonly30,
				Deprecated:               deprecated30,
				DefaultValue:             defaultValue30,
				Group:                    group30,
				Order:                    order30,
				Layout:                   layout30,
				HideLabel:                hideLabel30,
				Icon:                     icon30,
				RenderCondition:          renderCondition30,
				Purpose:                  purpose30,
				Manifest:                 manifest30,
				Constraints:              constraints30,
				FeatureFlag:              featureFlag31,
				SettingsFlag:             settingsFlag31,
				ValueFormatter:           valueFormatter30,
				PreviewValueFormatter:    previewValueFormatter30,
				EntityBuilderDisableEdit: entityBuilderDisableEdit30,
				Protected:                protected30,
				InfoHelpers:              infoHelpers30,
				Repeatable:               repeatable30,
				HasPrimary:               hasPrimary30,
				Type:                     typeVar30,
			}
			attributes = append(attributes, shared.AttributeInput{
				EmailAttribute: &emailAttribute,
			})
		}
		if attributesItem.PaymentAttribute != nil {
			id31 := new(string)
			if !attributesItem.PaymentAttribute.ID.IsUnknown() && !attributesItem.PaymentAttribute.ID.IsNull() {
				*id31 = attributesItem.PaymentAttribute.ID.ValueString()
			} else {
				id31 = nil
			}
			var name64 string
			name64 = attributesItem.PaymentAttribute.Name.ValueString()

			var label32 string
			label32 = attributesItem.PaymentAttribute.Label.ValueString()

			placeholder31 := new(string)
			if !attributesItem.PaymentAttribute.Placeholder.IsUnknown() && !attributesItem.PaymentAttribute.Placeholder.IsNull() {
				*placeholder31 = attributesItem.PaymentAttribute.Placeholder.ValueString()
			} else {
				placeholder31 = nil
			}
			hidden31 := new(bool)
			if !attributesItem.PaymentAttribute.Hidden.IsUnknown() && !attributesItem.PaymentAttribute.Hidden.IsNull() {
				*hidden31 = attributesItem.PaymentAttribute.Hidden.ValueBool()
			} else {
				hidden31 = nil
			}
			showInTable31 := new(bool)
			if !attributesItem.PaymentAttribute.ShowInTable.IsUnknown() && !attributesItem.PaymentAttribute.ShowInTable.IsNull() {
				*showInTable31 = attributesItem.PaymentAttribute.ShowInTable.ValueBool()
			} else {
				showInTable31 = nil
			}
			sortable31 := new(bool)
			if !attributesItem.PaymentAttribute.Sortable.IsUnknown() && !attributesItem.PaymentAttribute.Sortable.IsNull() {
				*sortable31 = attributesItem.PaymentAttribute.Sortable.ValueBool()
			} else {
				sortable31 = nil
			}
			required31 := new(bool)
			if !attributesItem.PaymentAttribute.Required.IsUnknown() && !attributesItem.PaymentAttribute.Required.IsNull() {
				*required31 = attributesItem.PaymentAttribute.Required.ValueBool()
			} else {
				required31 = nil
			}
			readonly31 := new(bool)
			if !attributesItem.PaymentAttribute.Readonly.IsUnknown() && !attributesItem.PaymentAttribute.Readonly.IsNull() {
				*readonly31 = attributesItem.PaymentAttribute.Readonly.ValueBool()
			} else {
				readonly31 = nil
			}
			deprecated31 := new(bool)
			if !attributesItem.PaymentAttribute.Deprecated.IsUnknown() && !attributesItem.PaymentAttribute.Deprecated.IsNull() {
				*deprecated31 = attributesItem.PaymentAttribute.Deprecated.ValueBool()
			} else {
				deprecated31 = nil
			}
			var defaultValue31 interface{}
			if !attributesItem.PaymentAttribute.DefaultValue.IsUnknown() && !attributesItem.PaymentAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PaymentAttribute.DefaultValue.ValueString()), &defaultValue31)
			}
			group31 := new(string)
			if !attributesItem.PaymentAttribute.Group.IsUnknown() && !attributesItem.PaymentAttribute.Group.IsNull() {
				*group31 = attributesItem.PaymentAttribute.Group.ValueString()
			} else {
				group31 = nil
			}
			order31 := new(int64)
			if !attributesItem.PaymentAttribute.Order.IsUnknown() && !attributesItem.PaymentAttribute.Order.IsNull() {
				*order31 = attributesItem.PaymentAttribute.Order.ValueInt64()
			} else {
				order31 = nil
			}
			layout31 := new(string)
			if !attributesItem.PaymentAttribute.Layout.IsUnknown() && !attributesItem.PaymentAttribute.Layout.IsNull() {
				*layout31 = attributesItem.PaymentAttribute.Layout.ValueString()
			} else {
				layout31 = nil
			}
			hideLabel31 := new(bool)
			if !attributesItem.PaymentAttribute.HideLabel.IsUnknown() && !attributesItem.PaymentAttribute.HideLabel.IsNull() {
				*hideLabel31 = attributesItem.PaymentAttribute.HideLabel.ValueBool()
			} else {
				hideLabel31 = nil
			}
			icon31 := new(string)
			if !attributesItem.PaymentAttribute.Icon.IsUnknown() && !attributesItem.PaymentAttribute.Icon.IsNull() {
				*icon31 = attributesItem.PaymentAttribute.Icon.ValueString()
			} else {
				icon31 = nil
			}
			renderCondition31 := new(string)
			if !attributesItem.PaymentAttribute.RenderCondition.IsUnknown() && !attributesItem.PaymentAttribute.RenderCondition.IsNull() {
				*renderCondition31 = attributesItem.PaymentAttribute.RenderCondition.ValueString()
			} else {
				renderCondition31 = nil
			}
			purpose31 := make([]string, 0, len(attributesItem.PaymentAttribute.Purpose))
			for _, purposeItem31 := range attributesItem.PaymentAttribute.Purpose {
				purpose31 = append(purpose31, purposeItem31.ValueString())
			}
			var manifest31 []string
			if attributesItem.PaymentAttribute.Manifest != nil {
				manifest31 = make([]string, 0, len(attributesItem.PaymentAttribute.Manifest))
				for _, manifestItem31 := range attributesItem.PaymentAttribute.Manifest {
					manifest31 = append(manifest31, manifestItem31.ValueString())
				}
			}
			var constraints31 *shared.PaymentAttributeConstraints
			if attributesItem.PaymentAttribute.Constraints != nil {
				constraints31 = &shared.PaymentAttributeConstraints{}
			}
			featureFlag32 := new(string)
			if !attributesItem.PaymentAttribute.FeatureFlag.IsUnknown() && !attributesItem.PaymentAttribute.FeatureFlag.IsNull() {
				*featureFlag32 = attributesItem.PaymentAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag32 = nil
			}
			settingsFlag32 := make([]shared.SettingFlag, 0, len(attributesItem.PaymentAttribute.SettingsFlag))
			for _, settingsFlagItem32 := range attributesItem.PaymentAttribute.SettingsFlag {
				name65 := new(string)
				if !settingsFlagItem32.Name.IsUnknown() && !settingsFlagItem32.Name.IsNull() {
					*name65 = settingsFlagItem32.Name.ValueString()
				} else {
					name65 = nil
				}
				enabled32 := new(bool)
				if !settingsFlagItem32.Enabled.IsUnknown() && !settingsFlagItem32.Enabled.IsNull() {
					*enabled32 = settingsFlagItem32.Enabled.ValueBool()
				} else {
					enabled32 = nil
				}
				settingsFlag32 = append(settingsFlag32, shared.SettingFlag{
					Name:    name65,
					Enabled: enabled32,
				})
			}
			valueFormatter31 := new(string)
			if !attributesItem.PaymentAttribute.ValueFormatter.IsUnknown() && !attributesItem.PaymentAttribute.ValueFormatter.IsNull() {
				*valueFormatter31 = attributesItem.PaymentAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter31 = nil
			}
			previewValueFormatter31 := new(string)
			if !attributesItem.PaymentAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PaymentAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter31 = attributesItem.PaymentAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter31 = nil
			}
			entityBuilderDisableEdit31 := new(bool)
			if !attributesItem.PaymentAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PaymentAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit31 = attributesItem.PaymentAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit31 = nil
			}
			protected31 := new(bool)
			if !attributesItem.PaymentAttribute.Protected.IsUnknown() && !attributesItem.PaymentAttribute.Protected.IsNull() {
				*protected31 = attributesItem.PaymentAttribute.Protected.ValueBool()
			} else {
				protected31 = nil
			}
			var infoHelpers31 *shared.PaymentAttributeInfoHelpers
			if attributesItem.PaymentAttribute.InfoHelpers != nil {
				hintText31 := new(string)
				if !attributesItem.PaymentAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PaymentAttribute.InfoHelpers.HintText.IsNull() {
					*hintText31 = attributesItem.PaymentAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText31 = nil
				}
				hintTextKey31 := new(string)
				if !attributesItem.PaymentAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PaymentAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey31 = attributesItem.PaymentAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey31 = nil
				}
				hintCustomComponent31 := new(string)
				if !attributesItem.PaymentAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PaymentAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent31 = attributesItem.PaymentAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent31 = nil
				}
				hintTooltipPlacement31 := new(string)
				if !attributesItem.PaymentAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PaymentAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement31 = attributesItem.PaymentAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement31 = nil
				}
				infoHelpers31 = &shared.PaymentAttributeInfoHelpers{
					HintText:             hintText31,
					HintTextKey:          hintTextKey31,
					HintCustomComponent:  hintCustomComponent31,
					HintTooltipPlacement: hintTooltipPlacement31,
				}
			}
			repeatable31 := new(bool)
			if !attributesItem.PaymentAttribute.Repeatable.IsUnknown() && !attributesItem.PaymentAttribute.Repeatable.IsNull() {
				*repeatable31 = attributesItem.PaymentAttribute.Repeatable.ValueBool()
			} else {
				repeatable31 = nil
			}
			hasPrimary31 := new(bool)
			if !attributesItem.PaymentAttribute.HasPrimary.IsUnknown() && !attributesItem.PaymentAttribute.HasPrimary.IsNull() {
				*hasPrimary31 = attributesItem.PaymentAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary31 = nil
			}
			typeVar31 := shared.PaymentAttributeType(attributesItem.PaymentAttribute.Type.ValueString())
			paymentAttribute := shared.PaymentAttribute{
				ID:                       id31,
				Name:                     name64,
				Label:                    label32,
				Placeholder:              placeholder31,
				Hidden:                   hidden31,
				ShowInTable:              showInTable31,
				Sortable:                 sortable31,
				Required:                 required31,
				Readonly:                 readonly31,
				Deprecated:               deprecated31,
				DefaultValue:             defaultValue31,
				Group:                    group31,
				Order:                    order31,
				Layout:                   layout31,
				HideLabel:                hideLabel31,
				Icon:                     icon31,
				RenderCondition:          renderCondition31,
				Purpose:                  purpose31,
				Manifest:                 manifest31,
				Constraints:              constraints31,
				FeatureFlag:              featureFlag32,
				SettingsFlag:             settingsFlag32,
				ValueFormatter:           valueFormatter31,
				PreviewValueFormatter:    previewValueFormatter31,
				EntityBuilderDisableEdit: entityBuilderDisableEdit31,
				Protected:                protected31,
				InfoHelpers:              infoHelpers31,
				Repeatable:               repeatable31,
				HasPrimary:               hasPrimary31,
				Type:                     typeVar31,
			}
			attributes = append(attributes, shared.AttributeInput{
				PaymentAttribute: &paymentAttribute,
			})
		}
		if attributesItem.PriceComponentAttribute != nil {
			id32 := new(string)
			if !attributesItem.PriceComponentAttribute.ID.IsUnknown() && !attributesItem.PriceComponentAttribute.ID.IsNull() {
				*id32 = attributesItem.PriceComponentAttribute.ID.ValueString()
			} else {
				id32 = nil
			}
			var name66 string
			name66 = attributesItem.PriceComponentAttribute.Name.ValueString()

			var label33 string
			label33 = attributesItem.PriceComponentAttribute.Label.ValueString()

			placeholder32 := new(string)
			if !attributesItem.PriceComponentAttribute.Placeholder.IsUnknown() && !attributesItem.PriceComponentAttribute.Placeholder.IsNull() {
				*placeholder32 = attributesItem.PriceComponentAttribute.Placeholder.ValueString()
			} else {
				placeholder32 = nil
			}
			hidden32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Hidden.IsUnknown() && !attributesItem.PriceComponentAttribute.Hidden.IsNull() {
				*hidden32 = attributesItem.PriceComponentAttribute.Hidden.ValueBool()
			} else {
				hidden32 = nil
			}
			showInTable32 := new(bool)
			if !attributesItem.PriceComponentAttribute.ShowInTable.IsUnknown() && !attributesItem.PriceComponentAttribute.ShowInTable.IsNull() {
				*showInTable32 = attributesItem.PriceComponentAttribute.ShowInTable.ValueBool()
			} else {
				showInTable32 = nil
			}
			sortable32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Sortable.IsUnknown() && !attributesItem.PriceComponentAttribute.Sortable.IsNull() {
				*sortable32 = attributesItem.PriceComponentAttribute.Sortable.ValueBool()
			} else {
				sortable32 = nil
			}
			required32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Required.IsUnknown() && !attributesItem.PriceComponentAttribute.Required.IsNull() {
				*required32 = attributesItem.PriceComponentAttribute.Required.ValueBool()
			} else {
				required32 = nil
			}
			readonly32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Readonly.IsUnknown() && !attributesItem.PriceComponentAttribute.Readonly.IsNull() {
				*readonly32 = attributesItem.PriceComponentAttribute.Readonly.ValueBool()
			} else {
				readonly32 = nil
			}
			deprecated32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Deprecated.IsUnknown() && !attributesItem.PriceComponentAttribute.Deprecated.IsNull() {
				*deprecated32 = attributesItem.PriceComponentAttribute.Deprecated.ValueBool()
			} else {
				deprecated32 = nil
			}
			var defaultValue32 interface{}
			if !attributesItem.PriceComponentAttribute.DefaultValue.IsUnknown() && !attributesItem.PriceComponentAttribute.DefaultValue.IsNull() {
				_ = json.Unmarshal([]byte(attributesItem.PriceComponentAttribute.DefaultValue.ValueString()), &defaultValue32)
			}
			group32 := new(string)
			if !attributesItem.PriceComponentAttribute.Group.IsUnknown() && !attributesItem.PriceComponentAttribute.Group.IsNull() {
				*group32 = attributesItem.PriceComponentAttribute.Group.ValueString()
			} else {
				group32 = nil
			}
			order32 := new(int64)
			if !attributesItem.PriceComponentAttribute.Order.IsUnknown() && !attributesItem.PriceComponentAttribute.Order.IsNull() {
				*order32 = attributesItem.PriceComponentAttribute.Order.ValueInt64()
			} else {
				order32 = nil
			}
			layout32 := new(string)
			if !attributesItem.PriceComponentAttribute.Layout.IsUnknown() && !attributesItem.PriceComponentAttribute.Layout.IsNull() {
				*layout32 = attributesItem.PriceComponentAttribute.Layout.ValueString()
			} else {
				layout32 = nil
			}
			hideLabel32 := new(bool)
			if !attributesItem.PriceComponentAttribute.HideLabel.IsUnknown() && !attributesItem.PriceComponentAttribute.HideLabel.IsNull() {
				*hideLabel32 = attributesItem.PriceComponentAttribute.HideLabel.ValueBool()
			} else {
				hideLabel32 = nil
			}
			icon32 := new(string)
			if !attributesItem.PriceComponentAttribute.Icon.IsUnknown() && !attributesItem.PriceComponentAttribute.Icon.IsNull() {
				*icon32 = attributesItem.PriceComponentAttribute.Icon.ValueString()
			} else {
				icon32 = nil
			}
			renderCondition32 := new(string)
			if !attributesItem.PriceComponentAttribute.RenderCondition.IsUnknown() && !attributesItem.PriceComponentAttribute.RenderCondition.IsNull() {
				*renderCondition32 = attributesItem.PriceComponentAttribute.RenderCondition.ValueString()
			} else {
				renderCondition32 = nil
			}
			purpose32 := make([]string, 0, len(attributesItem.PriceComponentAttribute.Purpose))
			for _, purposeItem32 := range attributesItem.PriceComponentAttribute.Purpose {
				purpose32 = append(purpose32, purposeItem32.ValueString())
			}
			var manifest32 []string
			if attributesItem.PriceComponentAttribute.Manifest != nil {
				manifest32 = make([]string, 0, len(attributesItem.PriceComponentAttribute.Manifest))
				for _, manifestItem32 := range attributesItem.PriceComponentAttribute.Manifest {
					manifest32 = append(manifest32, manifestItem32.ValueString())
				}
			}
			var constraints32 *shared.PriceComponentAttributeConstraints
			if attributesItem.PriceComponentAttribute.Constraints != nil {
				constraints32 = &shared.PriceComponentAttributeConstraints{}
			}
			featureFlag33 := new(string)
			if !attributesItem.PriceComponentAttribute.FeatureFlag.IsUnknown() && !attributesItem.PriceComponentAttribute.FeatureFlag.IsNull() {
				*featureFlag33 = attributesItem.PriceComponentAttribute.FeatureFlag.ValueString()
			} else {
				featureFlag33 = nil
			}
			settingsFlag33 := make([]shared.SettingFlag, 0, len(attributesItem.PriceComponentAttribute.SettingsFlag))
			for _, settingsFlagItem33 := range attributesItem.PriceComponentAttribute.SettingsFlag {
				name67 := new(string)
				if !settingsFlagItem33.Name.IsUnknown() && !settingsFlagItem33.Name.IsNull() {
					*name67 = settingsFlagItem33.Name.ValueString()
				} else {
					name67 = nil
				}
				enabled33 := new(bool)
				if !settingsFlagItem33.Enabled.IsUnknown() && !settingsFlagItem33.Enabled.IsNull() {
					*enabled33 = settingsFlagItem33.Enabled.ValueBool()
				} else {
					enabled33 = nil
				}
				settingsFlag33 = append(settingsFlag33, shared.SettingFlag{
					Name:    name67,
					Enabled: enabled33,
				})
			}
			valueFormatter32 := new(string)
			if !attributesItem.PriceComponentAttribute.ValueFormatter.IsUnknown() && !attributesItem.PriceComponentAttribute.ValueFormatter.IsNull() {
				*valueFormatter32 = attributesItem.PriceComponentAttribute.ValueFormatter.ValueString()
			} else {
				valueFormatter32 = nil
			}
			previewValueFormatter32 := new(string)
			if !attributesItem.PriceComponentAttribute.PreviewValueFormatter.IsUnknown() && !attributesItem.PriceComponentAttribute.PreviewValueFormatter.IsNull() {
				*previewValueFormatter32 = attributesItem.PriceComponentAttribute.PreviewValueFormatter.ValueString()
			} else {
				previewValueFormatter32 = nil
			}
			entityBuilderDisableEdit32 := new(bool)
			if !attributesItem.PriceComponentAttribute.EntityBuilderDisableEdit.IsUnknown() && !attributesItem.PriceComponentAttribute.EntityBuilderDisableEdit.IsNull() {
				*entityBuilderDisableEdit32 = attributesItem.PriceComponentAttribute.EntityBuilderDisableEdit.ValueBool()
			} else {
				entityBuilderDisableEdit32 = nil
			}
			protected32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Protected.IsUnknown() && !attributesItem.PriceComponentAttribute.Protected.IsNull() {
				*protected32 = attributesItem.PriceComponentAttribute.Protected.ValueBool()
			} else {
				protected32 = nil
			}
			var infoHelpers32 *shared.PriceComponentAttributeInfoHelpers
			if attributesItem.PriceComponentAttribute.InfoHelpers != nil {
				hintText32 := new(string)
				if !attributesItem.PriceComponentAttribute.InfoHelpers.HintText.IsUnknown() && !attributesItem.PriceComponentAttribute.InfoHelpers.HintText.IsNull() {
					*hintText32 = attributesItem.PriceComponentAttribute.InfoHelpers.HintText.ValueString()
				} else {
					hintText32 = nil
				}
				hintTextKey32 := new(string)
				if !attributesItem.PriceComponentAttribute.InfoHelpers.HintTextKey.IsUnknown() && !attributesItem.PriceComponentAttribute.InfoHelpers.HintTextKey.IsNull() {
					*hintTextKey32 = attributesItem.PriceComponentAttribute.InfoHelpers.HintTextKey.ValueString()
				} else {
					hintTextKey32 = nil
				}
				hintCustomComponent32 := new(string)
				if !attributesItem.PriceComponentAttribute.InfoHelpers.HintCustomComponent.IsUnknown() && !attributesItem.PriceComponentAttribute.InfoHelpers.HintCustomComponent.IsNull() {
					*hintCustomComponent32 = attributesItem.PriceComponentAttribute.InfoHelpers.HintCustomComponent.ValueString()
				} else {
					hintCustomComponent32 = nil
				}
				hintTooltipPlacement32 := new(string)
				if !attributesItem.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement.IsUnknown() && !attributesItem.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement.IsNull() {
					*hintTooltipPlacement32 = attributesItem.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement.ValueString()
				} else {
					hintTooltipPlacement32 = nil
				}
				infoHelpers32 = &shared.PriceComponentAttributeInfoHelpers{
					HintText:             hintText32,
					HintTextKey:          hintTextKey32,
					HintCustomComponent:  hintCustomComponent32,
					HintTooltipPlacement: hintTooltipPlacement32,
				}
			}
			repeatable32 := new(bool)
			if !attributesItem.PriceComponentAttribute.Repeatable.IsUnknown() && !attributesItem.PriceComponentAttribute.Repeatable.IsNull() {
				*repeatable32 = attributesItem.PriceComponentAttribute.Repeatable.ValueBool()
			} else {
				repeatable32 = nil
			}
			hasPrimary32 := new(bool)
			if !attributesItem.PriceComponentAttribute.HasPrimary.IsUnknown() && !attributesItem.PriceComponentAttribute.HasPrimary.IsNull() {
				*hasPrimary32 = attributesItem.PriceComponentAttribute.HasPrimary.ValueBool()
			} else {
				hasPrimary32 = nil
			}
			typeVar32 := shared.PriceComponentAttributeType(attributesItem.PriceComponentAttribute.Type.ValueString())
			priceComponentAttribute := shared.PriceComponentAttribute{
				ID:                       id32,
				Name:                     name66,
				Label:                    label33,
				Placeholder:              placeholder32,
				Hidden:                   hidden32,
				ShowInTable:              showInTable32,
				Sortable:                 sortable32,
				Required:                 required32,
				Readonly:                 readonly32,
				Deprecated:               deprecated32,
				DefaultValue:             defaultValue32,
				Group:                    group32,
				Order:                    order32,
				Layout:                   layout32,
				HideLabel:                hideLabel32,
				Icon:                     icon32,
				RenderCondition:          renderCondition32,
				Purpose:                  purpose32,
				Manifest:                 manifest32,
				Constraints:              constraints32,
				FeatureFlag:              featureFlag33,
				SettingsFlag:             settingsFlag33,
				ValueFormatter:           valueFormatter32,
				PreviewValueFormatter:    previewValueFormatter32,
				EntityBuilderDisableEdit: entityBuilderDisableEdit32,
				Protected:                protected32,
				InfoHelpers:              infoHelpers32,
				Repeatable:               repeatable32,
				HasPrimary:               hasPrimary32,
				Type:                     typeVar32,
			}
			attributes = append(attributes, shared.AttributeInput{
				PriceComponentAttribute: &priceComponentAttribute,
			})
		}
	}
	purpose33 := make([]string, 0, len(r.Purpose))
	for _, purposeItem33 := range r.Purpose {
		purpose33 = append(purpose33, purposeItem33.ValueString())
	}
	var manifest33 []string
	if r.Manifest != nil {
		manifest33 = make([]string, 0, len(r.Manifest))
		for _, manifestItem33 := range r.Manifest {
			manifest33 = append(manifest33, manifestItem33.ValueString())
		}
	}
	uiHooks := make([]shared.UIHooks, 0, len(r.UIHooks))
	for _, uiHooksItem := range r.UIHooks {
		var hook string
		hook = uiHooksItem.Hook.ValueString()

		renderCondition33 := new(string)
		if !uiHooksItem.RenderCondition.IsUnknown() && !uiHooksItem.RenderCondition.IsNull() {
			*renderCondition33 = uiHooksItem.RenderCondition.ValueString()
		} else {
			renderCondition33 = nil
		}
		order33 := new(int64)
		if !uiHooksItem.Order.IsUnknown() && !uiHooksItem.Order.IsNull() {
			*order33 = uiHooksItem.Order.ValueInt64()
		} else {
			order33 = nil
		}
		title3 := new(string)
		if !uiHooksItem.Title.IsUnknown() && !uiHooksItem.Title.IsNull() {
			*title3 = uiHooksItem.Title.ValueString()
		} else {
			title3 = nil
		}
		groupExpanded := new(bool)
		if !uiHooksItem.GroupExpanded.IsUnknown() && !uiHooksItem.GroupExpanded.IsNull() {
			*groupExpanded = uiHooksItem.GroupExpanded.ValueBool()
		} else {
			groupExpanded = nil
		}
		importVar := new(string)
		if !uiHooksItem.Import.IsUnknown() && !uiHooksItem.Import.IsNull() {
			*importVar = uiHooksItem.Import.ValueString()
		} else {
			importVar = nil
		}
		component := new(string)
		if !uiHooksItem.Component.IsUnknown() && !uiHooksItem.Component.IsNull() {
			*component = uiHooksItem.Component.ValueString()
		} else {
			component = nil
		}
		route := new(string)
		if !uiHooksItem.Route.IsUnknown() && !uiHooksItem.Route.IsNull() {
			*route = uiHooksItem.Route.ValueString()
		} else {
			route = nil
		}
		icon33 := new(string)
		if !uiHooksItem.Icon.IsUnknown() && !uiHooksItem.Icon.IsNull() {
			*icon33 = uiHooksItem.Icon.ValueString()
		} else {
			icon33 = nil
		}
		disabled := new(bool)
		if !uiHooksItem.Disabled.IsUnknown() && !uiHooksItem.Disabled.IsNull() {
			*disabled = uiHooksItem.Disabled.ValueBool()
		} else {
			disabled = nil
		}
		header := new(bool)
		if !uiHooksItem.Header.IsUnknown() && !uiHooksItem.Header.IsNull() {
			*header = uiHooksItem.Header.ValueBool()
		} else {
			header = nil
		}
		var requiredPermission *shared.RequiredPermission
		if uiHooksItem.RequiredPermission != nil {
			var action string
			action = uiHooksItem.RequiredPermission.Action.ValueString()

			resource := new(string)
			if !uiHooksItem.RequiredPermission.Resource.IsUnknown() && !uiHooksItem.RequiredPermission.Resource.IsNull() {
				*resource = uiHooksItem.RequiredPermission.Resource.ValueString()
			} else {
				resource = nil
			}
			requiredPermission = &shared.RequiredPermission{
				Action:   action,
				Resource: resource,
			}
		}
		var additionalProperties interface{}
		if !uiHooksItem.AdditionalProperties.IsUnknown() && !uiHooksItem.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(uiHooksItem.AdditionalProperties.ValueString()), &additionalProperties)
		}
		uiHooks = append(uiHooks, shared.UIHooks{
			Hook:                 hook,
			RenderCondition:      renderCondition33,
			Order:                order33,
			Title:                title3,
			GroupExpanded:        groupExpanded,
			Import:               importVar,
			Component:            component,
			Route:                route,
			Icon:                 icon33,
			Disabled:             disabled,
			Header:               header,
			RequiredPermission:   requiredPermission,
			AdditionalProperties: additionalProperties,
		})
	}
	featureFlag34 := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag34 = r.FeatureFlag.ValueString()
	} else {
		featureFlag34 = nil
	}
	settingsFlag34 := make([]shared.SettingFlag, 0, len(r.SettingsFlag))
	for _, settingsFlagItem34 := range r.SettingsFlag {
		name68 := new(string)
		if !settingsFlagItem34.Name.IsUnknown() && !settingsFlagItem34.Name.IsNull() {
			*name68 = settingsFlagItem34.Name.ValueString()
		} else {
			name68 = nil
		}
		enabled34 := new(bool)
		if !settingsFlagItem34.Enabled.IsUnknown() && !settingsFlagItem34.Enabled.IsNull() {
			*enabled34 = settingsFlagItem34.Enabled.ValueBool()
		} else {
			enabled34 = nil
		}
		settingsFlag34 = append(settingsFlag34, shared.SettingFlag{
			Name:    name68,
			Enabled: enabled34,
		})
	}
	schema := new(string)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = r.Schema.ValueString()
	} else {
		schema = nil
	}
	out := shared.EntityCapabilityWithCompositeIDInput{
		ID:           id,
		Name:         name,
		Title:        title,
		Attributes:   attributes,
		Purpose:      purpose33,
		Manifest:     manifest33,
		UIHooks:      uiHooks,
		FeatureFlag:  featureFlag34,
		SettingsFlag: settingsFlag34,
		Schema:       schema,
	}

	return &out, diags
}

func (r *SchemaCapabilityResourceModel) ToOperationsPutSchemaCapabilityRequest(ctx context.Context) (*operations.PutSchemaCapabilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	entityCapabilityWithCompositeID, entityCapabilityWithCompositeIDDiags := r.ToSharedEntityCapabilityWithCompositeIDInput(ctx)
	diags.Append(entityCapabilityWithCompositeIDDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSchemaCapabilityRequest{
		CompositeID:                     compositeID,
		EntityCapabilityWithCompositeID: entityCapabilityWithCompositeID,
	}

	return &out, diags
}

func (r *SchemaCapabilityResourceModel) ToOperationsGetSchemaCapabilityRequest(ctx context.Context) (*operations.GetSchemaCapabilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	out := operations.GetSchemaCapabilityRequest{
		CompositeID: compositeID,
	}

	return &out, diags
}

func (r *SchemaCapabilityResourceModel) ToOperationsDeleteSchemaCapabilityRequest(ctx context.Context) (*operations.DeleteSchemaCapabilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	out := operations.DeleteSchemaCapabilityRequest{
		CompositeID: compositeID,
	}

	return &out, diags
}

func (r *SchemaCapabilityResourceModel) RefreshFromSharedEntityCapabilityWithCompositeID(ctx context.Context, resp *shared.EntityCapabilityWithCompositeID) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Manifest != nil {
			r.Manifest = make([]types.String, 0, len(resp.Manifest))
			for _, v := range resp.Manifest {
				r.Manifest = append(r.Manifest, types.StringValue(v))
			}
		}
		r.Purpose = make([]types.String, 0, len(resp.Purpose))
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.Attributes = []tfTypes.Attribute{}
		if len(r.Attributes) > len(resp.Attributes) {
			r.Attributes = r.Attributes[:len(resp.Attributes)]
		}
		for attributesCount, attributesItem := range resp.Attributes {
			var attributes tfTypes.Attribute
			if attributesItem.AddressAttribute != nil {
				attributes.AddressAttribute = &tfTypes.AddressAttribute{}
				if attributesItem.AddressAttribute.Manifest != nil {
					attributes.AddressAttribute.Manifest = make([]types.String, 0, len(attributesItem.AddressAttribute.Manifest))
					for _, v := range attributesItem.AddressAttribute.Manifest {
						attributes.AddressAttribute.Manifest = append(attributes.AddressAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.AddressAttribute.Purpose = make([]types.String, 0, len(attributesItem.AddressAttribute.Purpose))
				for _, v := range attributesItem.AddressAttribute.Purpose {
					attributes.AddressAttribute.Purpose = append(attributes.AddressAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.AddressAttribute.Constraints == nil {
					attributes.AddressAttribute.Constraints = nil
				} else {
					attributes.AddressAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.AddressAttribute.DefaultAddressFields != nil {
					attributes.AddressAttribute.DefaultAddressFields = make([]types.String, 0, len(attributesItem.AddressAttribute.DefaultAddressFields))
					for _, v := range attributesItem.AddressAttribute.DefaultAddressFields {
						attributes.AddressAttribute.DefaultAddressFields = append(attributes.AddressAttribute.DefaultAddressFields, types.StringValue(v))
					}
				}
				if attributesItem.AddressAttribute.DefaultValue == nil {
					attributes.AddressAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult, _ := json.Marshal(attributesItem.AddressAttribute.DefaultValue)
					attributes.AddressAttribute.DefaultValue = types.StringValue(string(defaultValueResult))
				}
				attributes.AddressAttribute.Deprecated = types.BoolPointerValue(attributesItem.AddressAttribute.Deprecated)
				attributes.AddressAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.AddressAttribute.EntityBuilderDisableEdit)
				attributes.AddressAttribute.FeatureFlag = types.StringPointerValue(attributesItem.AddressAttribute.FeatureFlag)
				attributes.AddressAttribute.Group = types.StringPointerValue(attributesItem.AddressAttribute.Group)
				attributes.AddressAttribute.HasPrimary = types.BoolPointerValue(attributesItem.AddressAttribute.HasPrimary)
				attributes.AddressAttribute.Hidden = types.BoolPointerValue(attributesItem.AddressAttribute.Hidden)
				attributes.AddressAttribute.HideLabel = types.BoolPointerValue(attributesItem.AddressAttribute.HideLabel)
				attributes.AddressAttribute.Icon = types.StringPointerValue(attributesItem.AddressAttribute.Icon)
				attributes.AddressAttribute.ID = types.StringPointerValue(attributesItem.AddressAttribute.ID)
				if attributesItem.AddressAttribute.InfoHelpers == nil {
					attributes.AddressAttribute.InfoHelpers = nil
				} else {
					attributes.AddressAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.AddressAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintCustomComponent)
					attributes.AddressAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintText)
					attributes.AddressAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintTextKey)
					attributes.AddressAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.AddressAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.AddressAttribute.Label = types.StringValue(attributesItem.AddressAttribute.Label)
				attributes.AddressAttribute.Layout = types.StringPointerValue(attributesItem.AddressAttribute.Layout)
				attributes.AddressAttribute.Name = types.StringValue(attributesItem.AddressAttribute.Name)
				attributes.AddressAttribute.Order = types.Int64PointerValue(attributesItem.AddressAttribute.Order)
				attributes.AddressAttribute.Placeholder = types.StringPointerValue(attributesItem.AddressAttribute.Placeholder)
				attributes.AddressAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.AddressAttribute.PreviewValueFormatter)
				attributes.AddressAttribute.Protected = types.BoolPointerValue(attributesItem.AddressAttribute.Protected)
				attributes.AddressAttribute.Readonly = types.BoolPointerValue(attributesItem.AddressAttribute.Readonly)
				attributes.AddressAttribute.RenderCondition = types.StringPointerValue(attributesItem.AddressAttribute.RenderCondition)
				attributes.AddressAttribute.Repeatable = types.BoolPointerValue(attributesItem.AddressAttribute.Repeatable)
				attributes.AddressAttribute.Required = types.BoolPointerValue(attributesItem.AddressAttribute.Required)
				attributes.AddressAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount, settingsFlagItem := range attributesItem.AddressAttribute.SettingsFlag {
					var settingsFlag tfTypes.SettingFlag
					settingsFlag.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
					settingsFlag.Name = types.StringPointerValue(settingsFlagItem.Name)
					if settingsFlagCount+1 > len(attributes.AddressAttribute.SettingsFlag) {
						attributes.AddressAttribute.SettingsFlag = append(attributes.AddressAttribute.SettingsFlag, settingsFlag)
					} else {
						attributes.AddressAttribute.SettingsFlag[settingsFlagCount].Enabled = settingsFlag.Enabled
						attributes.AddressAttribute.SettingsFlag[settingsFlagCount].Name = settingsFlag.Name
					}
				}
				attributes.AddressAttribute.ShowInTable = types.BoolPointerValue(attributesItem.AddressAttribute.ShowInTable)
				attributes.AddressAttribute.Sortable = types.BoolPointerValue(attributesItem.AddressAttribute.Sortable)
				attributes.AddressAttribute.Type = types.StringValue(string(attributesItem.AddressAttribute.Type))
				attributes.AddressAttribute.ValueFormatter = types.StringPointerValue(attributesItem.AddressAttribute.ValueFormatter)
			}
			if attributesItem.AddressRelationAttribute != nil {
				attributes.AddressRelationAttribute = &tfTypes.AddressAttribute{}
				if attributesItem.AddressRelationAttribute.Manifest != nil {
					attributes.AddressRelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.AddressRelationAttribute.Manifest))
					for _, v := range attributesItem.AddressRelationAttribute.Manifest {
						attributes.AddressRelationAttribute.Manifest = append(attributes.AddressRelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.AddressRelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.AddressRelationAttribute.Purpose))
				for _, v := range attributesItem.AddressRelationAttribute.Purpose {
					attributes.AddressRelationAttribute.Purpose = append(attributes.AddressRelationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.AddressRelationAttribute.Constraints == nil {
					attributes.AddressRelationAttribute.Constraints = nil
				} else {
					attributes.AddressRelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.AddressRelationAttribute.DefaultAddressFields != nil {
					attributes.AddressRelationAttribute.DefaultAddressFields = make([]types.String, 0, len(attributesItem.AddressRelationAttribute.DefaultAddressFields))
					for _, v := range attributesItem.AddressRelationAttribute.DefaultAddressFields {
						attributes.AddressRelationAttribute.DefaultAddressFields = append(attributes.AddressRelationAttribute.DefaultAddressFields, types.StringValue(v))
					}
				}
				if attributesItem.AddressRelationAttribute.DefaultValue == nil {
					attributes.AddressRelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult1, _ := json.Marshal(attributesItem.AddressRelationAttribute.DefaultValue)
					attributes.AddressRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult1))
				}
				attributes.AddressRelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Deprecated)
				attributes.AddressRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.AddressRelationAttribute.EntityBuilderDisableEdit)
				attributes.AddressRelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.AddressRelationAttribute.FeatureFlag)
				attributes.AddressRelationAttribute.Group = types.StringPointerValue(attributesItem.AddressRelationAttribute.Group)
				attributes.AddressRelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.AddressRelationAttribute.HasPrimary)
				attributes.AddressRelationAttribute.Hidden = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Hidden)
				attributes.AddressRelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.AddressRelationAttribute.HideLabel)
				attributes.AddressRelationAttribute.Icon = types.StringPointerValue(attributesItem.AddressRelationAttribute.Icon)
				attributes.AddressRelationAttribute.ID = types.StringPointerValue(attributesItem.AddressRelationAttribute.ID)
				if attributesItem.AddressRelationAttribute.InfoHelpers == nil {
					attributes.AddressRelationAttribute.InfoHelpers = nil
				} else {
					attributes.AddressRelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.AddressRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.AddressRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintText)
					attributes.AddressRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintTextKey)
					attributes.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.AddressRelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.AddressRelationAttribute.Label = types.StringValue(attributesItem.AddressRelationAttribute.Label)
				attributes.AddressRelationAttribute.Layout = types.StringPointerValue(attributesItem.AddressRelationAttribute.Layout)
				attributes.AddressRelationAttribute.Name = types.StringValue(attributesItem.AddressRelationAttribute.Name)
				attributes.AddressRelationAttribute.Order = types.Int64PointerValue(attributesItem.AddressRelationAttribute.Order)
				attributes.AddressRelationAttribute.Placeholder = types.StringPointerValue(attributesItem.AddressRelationAttribute.Placeholder)
				attributes.AddressRelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.AddressRelationAttribute.PreviewValueFormatter)
				attributes.AddressRelationAttribute.Protected = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Protected)
				attributes.AddressRelationAttribute.Readonly = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Readonly)
				attributes.AddressRelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.AddressRelationAttribute.RenderCondition)
				attributes.AddressRelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Repeatable)
				attributes.AddressRelationAttribute.Required = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Required)
				attributes.AddressRelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount1, settingsFlagItem1 := range attributesItem.AddressRelationAttribute.SettingsFlag {
					var settingsFlag1 tfTypes.SettingFlag
					settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem1.Enabled)
					settingsFlag1.Name = types.StringPointerValue(settingsFlagItem1.Name)
					if settingsFlagCount1+1 > len(attributes.AddressRelationAttribute.SettingsFlag) {
						attributes.AddressRelationAttribute.SettingsFlag = append(attributes.AddressRelationAttribute.SettingsFlag, settingsFlag1)
					} else {
						attributes.AddressRelationAttribute.SettingsFlag[settingsFlagCount1].Enabled = settingsFlag1.Enabled
						attributes.AddressRelationAttribute.SettingsFlag[settingsFlagCount1].Name = settingsFlag1.Name
					}
				}
				attributes.AddressRelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.AddressRelationAttribute.ShowInTable)
				attributes.AddressRelationAttribute.Sortable = types.BoolPointerValue(attributesItem.AddressRelationAttribute.Sortable)
				attributes.AddressRelationAttribute.Type = types.StringValue(string(attributesItem.AddressRelationAttribute.Type))
				attributes.AddressRelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.AddressRelationAttribute.ValueFormatter)
			}
			if attributesItem.AutomationAttribute != nil {
				attributes.AutomationAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.AutomationAttribute.Manifest != nil {
					attributes.AutomationAttribute.Manifest = make([]types.String, 0, len(attributesItem.AutomationAttribute.Manifest))
					for _, v := range attributesItem.AutomationAttribute.Manifest {
						attributes.AutomationAttribute.Manifest = append(attributes.AutomationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.AutomationAttribute.Purpose = make([]types.String, 0, len(attributesItem.AutomationAttribute.Purpose))
				for _, v := range attributesItem.AutomationAttribute.Purpose {
					attributes.AutomationAttribute.Purpose = append(attributes.AutomationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.AutomationAttribute.Constraints == nil {
					attributes.AutomationAttribute.Constraints = nil
				} else {
					attributes.AutomationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.AutomationAttribute.DefaultValue == nil {
					attributes.AutomationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult2, _ := json.Marshal(attributesItem.AutomationAttribute.DefaultValue)
					attributes.AutomationAttribute.DefaultValue = types.StringValue(string(defaultValueResult2))
				}
				attributes.AutomationAttribute.Deprecated = types.BoolPointerValue(attributesItem.AutomationAttribute.Deprecated)
				attributes.AutomationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.AutomationAttribute.EntityBuilderDisableEdit)
				attributes.AutomationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.AutomationAttribute.FeatureFlag)
				attributes.AutomationAttribute.Group = types.StringPointerValue(attributesItem.AutomationAttribute.Group)
				attributes.AutomationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.AutomationAttribute.HasPrimary)
				attributes.AutomationAttribute.Hidden = types.BoolPointerValue(attributesItem.AutomationAttribute.Hidden)
				attributes.AutomationAttribute.HideLabel = types.BoolPointerValue(attributesItem.AutomationAttribute.HideLabel)
				attributes.AutomationAttribute.Icon = types.StringPointerValue(attributesItem.AutomationAttribute.Icon)
				attributes.AutomationAttribute.ID = types.StringPointerValue(attributesItem.AutomationAttribute.ID)
				if attributesItem.AutomationAttribute.InfoHelpers == nil {
					attributes.AutomationAttribute.InfoHelpers = nil
				} else {
					attributes.AutomationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.AutomationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintCustomComponent)
					attributes.AutomationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintText)
					attributes.AutomationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintTextKey)
					attributes.AutomationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.AutomationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.AutomationAttribute.Label = types.StringValue(attributesItem.AutomationAttribute.Label)
				attributes.AutomationAttribute.Layout = types.StringPointerValue(attributesItem.AutomationAttribute.Layout)
				attributes.AutomationAttribute.Name = types.StringValue(attributesItem.AutomationAttribute.Name)
				attributes.AutomationAttribute.Order = types.Int64PointerValue(attributesItem.AutomationAttribute.Order)
				attributes.AutomationAttribute.Placeholder = types.StringPointerValue(attributesItem.AutomationAttribute.Placeholder)
				attributes.AutomationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.AutomationAttribute.PreviewValueFormatter)
				attributes.AutomationAttribute.Protected = types.BoolPointerValue(attributesItem.AutomationAttribute.Protected)
				attributes.AutomationAttribute.Readonly = types.BoolPointerValue(attributesItem.AutomationAttribute.Readonly)
				attributes.AutomationAttribute.RenderCondition = types.StringPointerValue(attributesItem.AutomationAttribute.RenderCondition)
				attributes.AutomationAttribute.Repeatable = types.BoolPointerValue(attributesItem.AutomationAttribute.Repeatable)
				attributes.AutomationAttribute.Required = types.BoolPointerValue(attributesItem.AutomationAttribute.Required)
				attributes.AutomationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount2, settingsFlagItem2 := range attributesItem.AutomationAttribute.SettingsFlag {
					var settingsFlag2 tfTypes.SettingFlag
					settingsFlag2.Enabled = types.BoolPointerValue(settingsFlagItem2.Enabled)
					settingsFlag2.Name = types.StringPointerValue(settingsFlagItem2.Name)
					if settingsFlagCount2+1 > len(attributes.AutomationAttribute.SettingsFlag) {
						attributes.AutomationAttribute.SettingsFlag = append(attributes.AutomationAttribute.SettingsFlag, settingsFlag2)
					} else {
						attributes.AutomationAttribute.SettingsFlag[settingsFlagCount2].Enabled = settingsFlag2.Enabled
						attributes.AutomationAttribute.SettingsFlag[settingsFlagCount2].Name = settingsFlag2.Name
					}
				}
				attributes.AutomationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.AutomationAttribute.ShowInTable)
				attributes.AutomationAttribute.Sortable = types.BoolPointerValue(attributesItem.AutomationAttribute.Sortable)
				attributes.AutomationAttribute.Type = types.StringValue(string(attributesItem.AutomationAttribute.Type))
				attributes.AutomationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.AutomationAttribute.ValueFormatter)
			}
			if attributesItem.BooleanAttribute != nil {
				attributes.BooleanAttribute = &tfTypes.BooleanAttribute{}
				if attributesItem.BooleanAttribute.Manifest != nil {
					attributes.BooleanAttribute.Manifest = make([]types.String, 0, len(attributesItem.BooleanAttribute.Manifest))
					for _, v := range attributesItem.BooleanAttribute.Manifest {
						attributes.BooleanAttribute.Manifest = append(attributes.BooleanAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.BooleanAttribute.Purpose = make([]types.String, 0, len(attributesItem.BooleanAttribute.Purpose))
				for _, v := range attributesItem.BooleanAttribute.Purpose {
					attributes.BooleanAttribute.Purpose = append(attributes.BooleanAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.BooleanAttribute.Constraints == nil {
					attributes.BooleanAttribute.Constraints = nil
				} else {
					attributes.BooleanAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.BooleanAttribute.DefaultValue == nil {
					attributes.BooleanAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult3, _ := json.Marshal(attributesItem.BooleanAttribute.DefaultValue)
					attributes.BooleanAttribute.DefaultValue = types.StringValue(string(defaultValueResult3))
				}
				attributes.BooleanAttribute.Deprecated = types.BoolPointerValue(attributesItem.BooleanAttribute.Deprecated)
				if attributesItem.BooleanAttribute.DisplayType != nil {
					attributes.BooleanAttribute.DisplayType = types.StringValue(string(*attributesItem.BooleanAttribute.DisplayType))
				} else {
					attributes.BooleanAttribute.DisplayType = types.StringNull()
				}
				attributes.BooleanAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.BooleanAttribute.EntityBuilderDisableEdit)
				attributes.BooleanAttribute.FeatureFlag = types.StringPointerValue(attributesItem.BooleanAttribute.FeatureFlag)
				attributes.BooleanAttribute.Group = types.StringPointerValue(attributesItem.BooleanAttribute.Group)
				attributes.BooleanAttribute.HasPrimary = types.BoolPointerValue(attributesItem.BooleanAttribute.HasPrimary)
				attributes.BooleanAttribute.Hidden = types.BoolPointerValue(attributesItem.BooleanAttribute.Hidden)
				attributes.BooleanAttribute.HideLabel = types.BoolPointerValue(attributesItem.BooleanAttribute.HideLabel)
				attributes.BooleanAttribute.Icon = types.StringPointerValue(attributesItem.BooleanAttribute.Icon)
				attributes.BooleanAttribute.ID = types.StringPointerValue(attributesItem.BooleanAttribute.ID)
				if attributesItem.BooleanAttribute.InfoHelpers == nil {
					attributes.BooleanAttribute.InfoHelpers = nil
				} else {
					attributes.BooleanAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.BooleanAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintCustomComponent)
					attributes.BooleanAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintText)
					attributes.BooleanAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintTextKey)
					attributes.BooleanAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.BooleanAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.BooleanAttribute.Label = types.StringValue(attributesItem.BooleanAttribute.Label)
				attributes.BooleanAttribute.Layout = types.StringPointerValue(attributesItem.BooleanAttribute.Layout)
				attributes.BooleanAttribute.Name = types.StringValue(attributesItem.BooleanAttribute.Name)
				attributes.BooleanAttribute.Order = types.Int64PointerValue(attributesItem.BooleanAttribute.Order)
				attributes.BooleanAttribute.Placeholder = types.StringPointerValue(attributesItem.BooleanAttribute.Placeholder)
				attributes.BooleanAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.BooleanAttribute.PreviewValueFormatter)
				attributes.BooleanAttribute.Protected = types.BoolPointerValue(attributesItem.BooleanAttribute.Protected)
				attributes.BooleanAttribute.Readonly = types.BoolPointerValue(attributesItem.BooleanAttribute.Readonly)
				attributes.BooleanAttribute.RenderCondition = types.StringPointerValue(attributesItem.BooleanAttribute.RenderCondition)
				attributes.BooleanAttribute.Repeatable = types.BoolPointerValue(attributesItem.BooleanAttribute.Repeatable)
				attributes.BooleanAttribute.Required = types.BoolPointerValue(attributesItem.BooleanAttribute.Required)
				attributes.BooleanAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount3, settingsFlagItem3 := range attributesItem.BooleanAttribute.SettingsFlag {
					var settingsFlag3 tfTypes.SettingFlag
					settingsFlag3.Enabled = types.BoolPointerValue(settingsFlagItem3.Enabled)
					settingsFlag3.Name = types.StringPointerValue(settingsFlagItem3.Name)
					if settingsFlagCount3+1 > len(attributes.BooleanAttribute.SettingsFlag) {
						attributes.BooleanAttribute.SettingsFlag = append(attributes.BooleanAttribute.SettingsFlag, settingsFlag3)
					} else {
						attributes.BooleanAttribute.SettingsFlag[settingsFlagCount3].Enabled = settingsFlag3.Enabled
						attributes.BooleanAttribute.SettingsFlag[settingsFlagCount3].Name = settingsFlag3.Name
					}
				}
				attributes.BooleanAttribute.ShowInTable = types.BoolPointerValue(attributesItem.BooleanAttribute.ShowInTable)
				attributes.BooleanAttribute.Sortable = types.BoolPointerValue(attributesItem.BooleanAttribute.Sortable)
				attributes.BooleanAttribute.Type = types.StringValue(string(attributesItem.BooleanAttribute.Type))
				attributes.BooleanAttribute.ValueFormatter = types.StringPointerValue(attributesItem.BooleanAttribute.ValueFormatter)
			}
			if attributesItem.ComputedAttribute != nil {
				attributes.ComputedAttribute = &tfTypes.ComputedAttribute{}
				if attributesItem.ComputedAttribute.Manifest != nil {
					attributes.ComputedAttribute.Manifest = make([]types.String, 0, len(attributesItem.ComputedAttribute.Manifest))
					for _, v := range attributesItem.ComputedAttribute.Manifest {
						attributes.ComputedAttribute.Manifest = append(attributes.ComputedAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.ComputedAttribute.Purpose = make([]types.String, 0, len(attributesItem.ComputedAttribute.Purpose))
				for _, v := range attributesItem.ComputedAttribute.Purpose {
					attributes.ComputedAttribute.Purpose = append(attributes.ComputedAttribute.Purpose, types.StringValue(v))
				}
				attributes.ComputedAttribute.AmountField = types.StringPointerValue(attributesItem.ComputedAttribute.AmountField)
				attributes.ComputedAttribute.Computed = types.BoolPointerValue(attributesItem.ComputedAttribute.Computed)
				if attributesItem.ComputedAttribute.Constraints == nil {
					attributes.ComputedAttribute.Constraints = nil
				} else {
					attributes.ComputedAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				attributes.ComputedAttribute.CurrencyField = types.StringPointerValue(attributesItem.ComputedAttribute.CurrencyField)
				if attributesItem.ComputedAttribute.DefaultValue == nil {
					attributes.ComputedAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult4, _ := json.Marshal(attributesItem.ComputedAttribute.DefaultValue)
					attributes.ComputedAttribute.DefaultValue = types.StringValue(string(defaultValueResult4))
				}
				attributes.ComputedAttribute.Deprecated = types.BoolPointerValue(attributesItem.ComputedAttribute.Deprecated)
				attributes.ComputedAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.ComputedAttribute.EntityBuilderDisableEdit)
				attributes.ComputedAttribute.FeatureFlag = types.StringPointerValue(attributesItem.ComputedAttribute.FeatureFlag)
				attributes.ComputedAttribute.Group = types.StringPointerValue(attributesItem.ComputedAttribute.Group)
				attributes.ComputedAttribute.HasPrimary = types.BoolPointerValue(attributesItem.ComputedAttribute.HasPrimary)
				attributes.ComputedAttribute.Hidden = types.BoolPointerValue(attributesItem.ComputedAttribute.Hidden)
				attributes.ComputedAttribute.HideLabel = types.BoolPointerValue(attributesItem.ComputedAttribute.HideLabel)
				attributes.ComputedAttribute.Icon = types.StringPointerValue(attributesItem.ComputedAttribute.Icon)
				attributes.ComputedAttribute.ID = types.StringPointerValue(attributesItem.ComputedAttribute.ID)
				if attributesItem.ComputedAttribute.InfoHelpers == nil {
					attributes.ComputedAttribute.InfoHelpers = nil
				} else {
					attributes.ComputedAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.ComputedAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintCustomComponent)
					attributes.ComputedAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintText)
					attributes.ComputedAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintTextKey)
					attributes.ComputedAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.ComputedAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.ComputedAttribute.Label = types.StringValue(attributesItem.ComputedAttribute.Label)
				attributes.ComputedAttribute.Layout = types.StringPointerValue(attributesItem.ComputedAttribute.Layout)
				attributes.ComputedAttribute.Name = types.StringValue(attributesItem.ComputedAttribute.Name)
				attributes.ComputedAttribute.Order = types.Int64PointerValue(attributesItem.ComputedAttribute.Order)
				attributes.ComputedAttribute.Placeholder = types.StringPointerValue(attributesItem.ComputedAttribute.Placeholder)
				attributes.ComputedAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.ComputedAttribute.PreviewValueFormatter)
				attributes.ComputedAttribute.Protected = types.BoolPointerValue(attributesItem.ComputedAttribute.Protected)
				attributes.ComputedAttribute.Readonly = types.BoolPointerValue(attributesItem.ComputedAttribute.Readonly)
				attributes.ComputedAttribute.RenderCondition = types.StringPointerValue(attributesItem.ComputedAttribute.RenderCondition)
				attributes.ComputedAttribute.Repeatable = types.BoolPointerValue(attributesItem.ComputedAttribute.Repeatable)
				attributes.ComputedAttribute.Required = types.BoolPointerValue(attributesItem.ComputedAttribute.Required)
				attributes.ComputedAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount4, settingsFlagItem4 := range attributesItem.ComputedAttribute.SettingsFlag {
					var settingsFlag4 tfTypes.SettingFlag
					settingsFlag4.Enabled = types.BoolPointerValue(settingsFlagItem4.Enabled)
					settingsFlag4.Name = types.StringPointerValue(settingsFlagItem4.Name)
					if settingsFlagCount4+1 > len(attributes.ComputedAttribute.SettingsFlag) {
						attributes.ComputedAttribute.SettingsFlag = append(attributes.ComputedAttribute.SettingsFlag, settingsFlag4)
					} else {
						attributes.ComputedAttribute.SettingsFlag[settingsFlagCount4].Enabled = settingsFlag4.Enabled
						attributes.ComputedAttribute.SettingsFlag[settingsFlagCount4].Name = settingsFlag4.Name
					}
				}
				attributes.ComputedAttribute.ShowInTable = types.BoolPointerValue(attributesItem.ComputedAttribute.ShowInTable)
				attributes.ComputedAttribute.Sortable = types.BoolPointerValue(attributesItem.ComputedAttribute.Sortable)
				attributes.ComputedAttribute.Type = types.StringValue(string(attributesItem.ComputedAttribute.Type))
				attributes.ComputedAttribute.ValueFormatter = types.StringValue(attributesItem.ComputedAttribute.ValueFormatter)
			}
			if attributesItem.ConsentAttribute != nil {
				attributes.ConsentAttribute = &tfTypes.ConsentAttribute{}
				if attributesItem.ConsentAttribute.Manifest != nil {
					attributes.ConsentAttribute.Manifest = make([]types.String, 0, len(attributesItem.ConsentAttribute.Manifest))
					for _, v := range attributesItem.ConsentAttribute.Manifest {
						attributes.ConsentAttribute.Manifest = append(attributes.ConsentAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.ConsentAttribute.Purpose = make([]types.String, 0, len(attributesItem.ConsentAttribute.Purpose))
				for _, v := range attributesItem.ConsentAttribute.Purpose {
					attributes.ConsentAttribute.Purpose = append(attributes.ConsentAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.ConsentAttribute.Constraints == nil {
					attributes.ConsentAttribute.Constraints = nil
				} else {
					attributes.ConsentAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.ConsentAttribute.DefaultValue == nil {
					attributes.ConsentAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult5, _ := json.Marshal(attributesItem.ConsentAttribute.DefaultValue)
					attributes.ConsentAttribute.DefaultValue = types.StringValue(string(defaultValueResult5))
				}
				attributes.ConsentAttribute.Deprecated = types.BoolPointerValue(attributesItem.ConsentAttribute.Deprecated)
				attributes.ConsentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.ConsentAttribute.EntityBuilderDisableEdit)
				attributes.ConsentAttribute.FeatureFlag = types.StringPointerValue(attributesItem.ConsentAttribute.FeatureFlag)
				attributes.ConsentAttribute.Group = types.StringPointerValue(attributesItem.ConsentAttribute.Group)
				attributes.ConsentAttribute.HasPrimary = types.BoolPointerValue(attributesItem.ConsentAttribute.HasPrimary)
				attributes.ConsentAttribute.Hidden = types.BoolPointerValue(attributesItem.ConsentAttribute.Hidden)
				attributes.ConsentAttribute.HideLabel = types.BoolPointerValue(attributesItem.ConsentAttribute.HideLabel)
				attributes.ConsentAttribute.Icon = types.StringPointerValue(attributesItem.ConsentAttribute.Icon)
				attributes.ConsentAttribute.ID = types.StringPointerValue(attributesItem.ConsentAttribute.ID)
				attributes.ConsentAttribute.Identifiers = make([]types.String, 0, len(attributesItem.ConsentAttribute.Identifiers))
				for _, v := range attributesItem.ConsentAttribute.Identifiers {
					attributes.ConsentAttribute.Identifiers = append(attributes.ConsentAttribute.Identifiers, types.StringValue(v))
				}
				if attributesItem.ConsentAttribute.InfoHelpers == nil {
					attributes.ConsentAttribute.InfoHelpers = nil
				} else {
					attributes.ConsentAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.ConsentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintCustomComponent)
					attributes.ConsentAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintText)
					attributes.ConsentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintTextKey)
					attributes.ConsentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.ConsentAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.ConsentAttribute.Label = types.StringValue(attributesItem.ConsentAttribute.Label)
				attributes.ConsentAttribute.Layout = types.StringPointerValue(attributesItem.ConsentAttribute.Layout)
				attributes.ConsentAttribute.Name = types.StringValue(attributesItem.ConsentAttribute.Name)
				attributes.ConsentAttribute.Order = types.Int64PointerValue(attributesItem.ConsentAttribute.Order)
				attributes.ConsentAttribute.Placeholder = types.StringPointerValue(attributesItem.ConsentAttribute.Placeholder)
				attributes.ConsentAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.ConsentAttribute.PreviewValueFormatter)
				attributes.ConsentAttribute.Protected = types.BoolPointerValue(attributesItem.ConsentAttribute.Protected)
				attributes.ConsentAttribute.Readonly = types.BoolPointerValue(attributesItem.ConsentAttribute.Readonly)
				attributes.ConsentAttribute.RenderCondition = types.StringPointerValue(attributesItem.ConsentAttribute.RenderCondition)
				attributes.ConsentAttribute.Repeatable = types.BoolPointerValue(attributesItem.ConsentAttribute.Repeatable)
				attributes.ConsentAttribute.Required = types.BoolPointerValue(attributesItem.ConsentAttribute.Required)
				attributes.ConsentAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount5, settingsFlagItem5 := range attributesItem.ConsentAttribute.SettingsFlag {
					var settingsFlag5 tfTypes.SettingFlag
					settingsFlag5.Enabled = types.BoolPointerValue(settingsFlagItem5.Enabled)
					settingsFlag5.Name = types.StringPointerValue(settingsFlagItem5.Name)
					if settingsFlagCount5+1 > len(attributes.ConsentAttribute.SettingsFlag) {
						attributes.ConsentAttribute.SettingsFlag = append(attributes.ConsentAttribute.SettingsFlag, settingsFlag5)
					} else {
						attributes.ConsentAttribute.SettingsFlag[settingsFlagCount5].Enabled = settingsFlag5.Enabled
						attributes.ConsentAttribute.SettingsFlag[settingsFlagCount5].Name = settingsFlag5.Name
					}
				}
				attributes.ConsentAttribute.ShowInTable = types.BoolPointerValue(attributesItem.ConsentAttribute.ShowInTable)
				attributes.ConsentAttribute.Sortable = types.BoolPointerValue(attributesItem.ConsentAttribute.Sortable)
				attributes.ConsentAttribute.Topic = types.StringValue(attributesItem.ConsentAttribute.Topic)
				attributes.ConsentAttribute.Type = types.StringValue(string(attributesItem.ConsentAttribute.Type))
				attributes.ConsentAttribute.ValueFormatter = types.StringPointerValue(attributesItem.ConsentAttribute.ValueFormatter)
			}
			if attributesItem.CountryAttribute != nil {
				attributes.CountryAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.CountryAttribute.Manifest != nil {
					attributes.CountryAttribute.Manifest = make([]types.String, 0, len(attributesItem.CountryAttribute.Manifest))
					for _, v := range attributesItem.CountryAttribute.Manifest {
						attributes.CountryAttribute.Manifest = append(attributes.CountryAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.CountryAttribute.Purpose = make([]types.String, 0, len(attributesItem.CountryAttribute.Purpose))
				for _, v := range attributesItem.CountryAttribute.Purpose {
					attributes.CountryAttribute.Purpose = append(attributes.CountryAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.CountryAttribute.Constraints == nil {
					attributes.CountryAttribute.Constraints = nil
				} else {
					attributes.CountryAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.CountryAttribute.DefaultValue == nil {
					attributes.CountryAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult6, _ := json.Marshal(attributesItem.CountryAttribute.DefaultValue)
					attributes.CountryAttribute.DefaultValue = types.StringValue(string(defaultValueResult6))
				}
				attributes.CountryAttribute.Deprecated = types.BoolPointerValue(attributesItem.CountryAttribute.Deprecated)
				attributes.CountryAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.CountryAttribute.EntityBuilderDisableEdit)
				attributes.CountryAttribute.FeatureFlag = types.StringPointerValue(attributesItem.CountryAttribute.FeatureFlag)
				attributes.CountryAttribute.Group = types.StringPointerValue(attributesItem.CountryAttribute.Group)
				attributes.CountryAttribute.HasPrimary = types.BoolPointerValue(attributesItem.CountryAttribute.HasPrimary)
				attributes.CountryAttribute.Hidden = types.BoolPointerValue(attributesItem.CountryAttribute.Hidden)
				attributes.CountryAttribute.HideLabel = types.BoolPointerValue(attributesItem.CountryAttribute.HideLabel)
				attributes.CountryAttribute.Icon = types.StringPointerValue(attributesItem.CountryAttribute.Icon)
				attributes.CountryAttribute.ID = types.StringPointerValue(attributesItem.CountryAttribute.ID)
				if attributesItem.CountryAttribute.InfoHelpers == nil {
					attributes.CountryAttribute.InfoHelpers = nil
				} else {
					attributes.CountryAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.CountryAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintCustomComponent)
					attributes.CountryAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintText)
					attributes.CountryAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintTextKey)
					attributes.CountryAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.CountryAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.CountryAttribute.Label = types.StringValue(attributesItem.CountryAttribute.Label)
				attributes.CountryAttribute.Layout = types.StringPointerValue(attributesItem.CountryAttribute.Layout)
				attributes.CountryAttribute.Name = types.StringValue(attributesItem.CountryAttribute.Name)
				attributes.CountryAttribute.Order = types.Int64PointerValue(attributesItem.CountryAttribute.Order)
				attributes.CountryAttribute.Placeholder = types.StringPointerValue(attributesItem.CountryAttribute.Placeholder)
				attributes.CountryAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.CountryAttribute.PreviewValueFormatter)
				attributes.CountryAttribute.Protected = types.BoolPointerValue(attributesItem.CountryAttribute.Protected)
				attributes.CountryAttribute.Readonly = types.BoolPointerValue(attributesItem.CountryAttribute.Readonly)
				attributes.CountryAttribute.RenderCondition = types.StringPointerValue(attributesItem.CountryAttribute.RenderCondition)
				attributes.CountryAttribute.Repeatable = types.BoolPointerValue(attributesItem.CountryAttribute.Repeatable)
				attributes.CountryAttribute.Required = types.BoolPointerValue(attributesItem.CountryAttribute.Required)
				attributes.CountryAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount6, settingsFlagItem6 := range attributesItem.CountryAttribute.SettingsFlag {
					var settingsFlag6 tfTypes.SettingFlag
					settingsFlag6.Enabled = types.BoolPointerValue(settingsFlagItem6.Enabled)
					settingsFlag6.Name = types.StringPointerValue(settingsFlagItem6.Name)
					if settingsFlagCount6+1 > len(attributes.CountryAttribute.SettingsFlag) {
						attributes.CountryAttribute.SettingsFlag = append(attributes.CountryAttribute.SettingsFlag, settingsFlag6)
					} else {
						attributes.CountryAttribute.SettingsFlag[settingsFlagCount6].Enabled = settingsFlag6.Enabled
						attributes.CountryAttribute.SettingsFlag[settingsFlagCount6].Name = settingsFlag6.Name
					}
				}
				attributes.CountryAttribute.ShowInTable = types.BoolPointerValue(attributesItem.CountryAttribute.ShowInTable)
				attributes.CountryAttribute.Sortable = types.BoolPointerValue(attributesItem.CountryAttribute.Sortable)
				attributes.CountryAttribute.Type = types.StringValue(string(attributesItem.CountryAttribute.Type))
				attributes.CountryAttribute.ValueFormatter = types.StringPointerValue(attributesItem.CountryAttribute.ValueFormatter)
			}
			if attributesItem.CurrencyAttribute != nil {
				attributes.CurrencyAttribute = &tfTypes.CurrencyAttribute{}
				if attributesItem.CurrencyAttribute.Manifest != nil {
					attributes.CurrencyAttribute.Manifest = make([]types.String, 0, len(attributesItem.CurrencyAttribute.Manifest))
					for _, v := range attributesItem.CurrencyAttribute.Manifest {
						attributes.CurrencyAttribute.Manifest = append(attributes.CurrencyAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.CurrencyAttribute.Purpose = make([]types.String, 0, len(attributesItem.CurrencyAttribute.Purpose))
				for _, v := range attributesItem.CurrencyAttribute.Purpose {
					attributes.CurrencyAttribute.Purpose = append(attributes.CurrencyAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.CurrencyAttribute.Constraints == nil {
					attributes.CurrencyAttribute.Constraints = nil
				} else {
					attributes.CurrencyAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				attributes.CurrencyAttribute.Currency = []tfTypes.CurrencyAttributeCurrency{}
				for currencyCount, currencyItem := range attributesItem.CurrencyAttribute.Currency {
					var currency tfTypes.CurrencyAttributeCurrency
					if currencyItem.Currency1 != nil {
						currency.One = &tfTypes.CurrencyAttributeCurrency1{}
						currency.One.Code = types.StringValue(currencyItem.Currency1.Code)
						currency.One.Description = types.StringValue(currencyItem.Currency1.Description)
						currency.One.Flag = types.StringPointerValue(currencyItem.Currency1.Flag)
						currency.One.Symbol = types.StringValue(currencyItem.Currency1.Symbol)
					}
					if currencyCount+1 > len(attributes.CurrencyAttribute.Currency) {
						attributes.CurrencyAttribute.Currency = append(attributes.CurrencyAttribute.Currency, currency)
					} else {
						attributes.CurrencyAttribute.Currency[currencyCount].One = currency.One
					}
				}
				attributes.CurrencyAttribute.CurrencySelectorOnly = types.BoolPointerValue(attributesItem.CurrencyAttribute.CurrencySelectorOnly)
				if attributesItem.CurrencyAttribute.DefaultValue == nil {
					attributes.CurrencyAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult7, _ := json.Marshal(attributesItem.CurrencyAttribute.DefaultValue)
					attributes.CurrencyAttribute.DefaultValue = types.StringValue(string(defaultValueResult7))
				}
				attributes.CurrencyAttribute.Deprecated = types.BoolPointerValue(attributesItem.CurrencyAttribute.Deprecated)
				attributes.CurrencyAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.CurrencyAttribute.EntityBuilderDisableEdit)
				attributes.CurrencyAttribute.FeatureFlag = types.StringPointerValue(attributesItem.CurrencyAttribute.FeatureFlag)
				attributes.CurrencyAttribute.Group = types.StringPointerValue(attributesItem.CurrencyAttribute.Group)
				attributes.CurrencyAttribute.HasPrimary = types.BoolPointerValue(attributesItem.CurrencyAttribute.HasPrimary)
				attributes.CurrencyAttribute.Hidden = types.BoolPointerValue(attributesItem.CurrencyAttribute.Hidden)
				attributes.CurrencyAttribute.HideLabel = types.BoolPointerValue(attributesItem.CurrencyAttribute.HideLabel)
				attributes.CurrencyAttribute.Icon = types.StringPointerValue(attributesItem.CurrencyAttribute.Icon)
				attributes.CurrencyAttribute.ID = types.StringPointerValue(attributesItem.CurrencyAttribute.ID)
				if attributesItem.CurrencyAttribute.InfoHelpers == nil {
					attributes.CurrencyAttribute.InfoHelpers = nil
				} else {
					attributes.CurrencyAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.CurrencyAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintCustomComponent)
					attributes.CurrencyAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintText)
					attributes.CurrencyAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintTextKey)
					attributes.CurrencyAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.CurrencyAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.CurrencyAttribute.Label = types.StringValue(attributesItem.CurrencyAttribute.Label)
				attributes.CurrencyAttribute.Layout = types.StringPointerValue(attributesItem.CurrencyAttribute.Layout)
				attributes.CurrencyAttribute.Name = types.StringValue(attributesItem.CurrencyAttribute.Name)
				attributes.CurrencyAttribute.Order = types.Int64PointerValue(attributesItem.CurrencyAttribute.Order)
				attributes.CurrencyAttribute.Placeholder = types.StringPointerValue(attributesItem.CurrencyAttribute.Placeholder)
				attributes.CurrencyAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.CurrencyAttribute.PreviewValueFormatter)
				attributes.CurrencyAttribute.Protected = types.BoolPointerValue(attributesItem.CurrencyAttribute.Protected)
				attributes.CurrencyAttribute.Readonly = types.BoolPointerValue(attributesItem.CurrencyAttribute.Readonly)
				attributes.CurrencyAttribute.RenderCondition = types.StringPointerValue(attributesItem.CurrencyAttribute.RenderCondition)
				attributes.CurrencyAttribute.Repeatable = types.BoolPointerValue(attributesItem.CurrencyAttribute.Repeatable)
				attributes.CurrencyAttribute.Required = types.BoolPointerValue(attributesItem.CurrencyAttribute.Required)
				attributes.CurrencyAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount7, settingsFlagItem7 := range attributesItem.CurrencyAttribute.SettingsFlag {
					var settingsFlag7 tfTypes.SettingFlag
					settingsFlag7.Enabled = types.BoolPointerValue(settingsFlagItem7.Enabled)
					settingsFlag7.Name = types.StringPointerValue(settingsFlagItem7.Name)
					if settingsFlagCount7+1 > len(attributes.CurrencyAttribute.SettingsFlag) {
						attributes.CurrencyAttribute.SettingsFlag = append(attributes.CurrencyAttribute.SettingsFlag, settingsFlag7)
					} else {
						attributes.CurrencyAttribute.SettingsFlag[settingsFlagCount7].Enabled = settingsFlag7.Enabled
						attributes.CurrencyAttribute.SettingsFlag[settingsFlagCount7].Name = settingsFlag7.Name
					}
				}
				attributes.CurrencyAttribute.ShowInTable = types.BoolPointerValue(attributesItem.CurrencyAttribute.ShowInTable)
				attributes.CurrencyAttribute.Sortable = types.BoolPointerValue(attributesItem.CurrencyAttribute.Sortable)
				attributes.CurrencyAttribute.Type = types.StringValue(string(attributesItem.CurrencyAttribute.Type))
				attributes.CurrencyAttribute.ValueFormatter = types.StringPointerValue(attributesItem.CurrencyAttribute.ValueFormatter)
			}
			if attributesItem.DateAttribute != nil {
				attributes.DateAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.DateAttribute.Manifest != nil {
					attributes.DateAttribute.Manifest = make([]types.String, 0, len(attributesItem.DateAttribute.Manifest))
					for _, v := range attributesItem.DateAttribute.Manifest {
						attributes.DateAttribute.Manifest = append(attributes.DateAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.DateAttribute.Purpose = make([]types.String, 0, len(attributesItem.DateAttribute.Purpose))
				for _, v := range attributesItem.DateAttribute.Purpose {
					attributes.DateAttribute.Purpose = append(attributes.DateAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.DateAttribute.Constraints == nil {
					attributes.DateAttribute.Constraints = nil
				} else {
					attributes.DateAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.DateAttribute.DefaultValue == nil {
					attributes.DateAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult8, _ := json.Marshal(attributesItem.DateAttribute.DefaultValue)
					attributes.DateAttribute.DefaultValue = types.StringValue(string(defaultValueResult8))
				}
				attributes.DateAttribute.Deprecated = types.BoolPointerValue(attributesItem.DateAttribute.Deprecated)
				attributes.DateAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.DateAttribute.EntityBuilderDisableEdit)
				attributes.DateAttribute.FeatureFlag = types.StringPointerValue(attributesItem.DateAttribute.FeatureFlag)
				attributes.DateAttribute.Group = types.StringPointerValue(attributesItem.DateAttribute.Group)
				attributes.DateAttribute.HasPrimary = types.BoolPointerValue(attributesItem.DateAttribute.HasPrimary)
				attributes.DateAttribute.Hidden = types.BoolPointerValue(attributesItem.DateAttribute.Hidden)
				attributes.DateAttribute.HideLabel = types.BoolPointerValue(attributesItem.DateAttribute.HideLabel)
				attributes.DateAttribute.Icon = types.StringPointerValue(attributesItem.DateAttribute.Icon)
				attributes.DateAttribute.ID = types.StringPointerValue(attributesItem.DateAttribute.ID)
				if attributesItem.DateAttribute.InfoHelpers == nil {
					attributes.DateAttribute.InfoHelpers = nil
				} else {
					attributes.DateAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.DateAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintCustomComponent)
					attributes.DateAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintText)
					attributes.DateAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintTextKey)
					attributes.DateAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.DateAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.DateAttribute.Label = types.StringValue(attributesItem.DateAttribute.Label)
				attributes.DateAttribute.Layout = types.StringPointerValue(attributesItem.DateAttribute.Layout)
				attributes.DateAttribute.Name = types.StringValue(attributesItem.DateAttribute.Name)
				attributes.DateAttribute.Order = types.Int64PointerValue(attributesItem.DateAttribute.Order)
				attributes.DateAttribute.Placeholder = types.StringPointerValue(attributesItem.DateAttribute.Placeholder)
				attributes.DateAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.DateAttribute.PreviewValueFormatter)
				attributes.DateAttribute.Protected = types.BoolPointerValue(attributesItem.DateAttribute.Protected)
				attributes.DateAttribute.Readonly = types.BoolPointerValue(attributesItem.DateAttribute.Readonly)
				attributes.DateAttribute.RenderCondition = types.StringPointerValue(attributesItem.DateAttribute.RenderCondition)
				attributes.DateAttribute.Repeatable = types.BoolPointerValue(attributesItem.DateAttribute.Repeatable)
				attributes.DateAttribute.Required = types.BoolPointerValue(attributesItem.DateAttribute.Required)
				attributes.DateAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount8, settingsFlagItem8 := range attributesItem.DateAttribute.SettingsFlag {
					var settingsFlag8 tfTypes.SettingFlag
					settingsFlag8.Enabled = types.BoolPointerValue(settingsFlagItem8.Enabled)
					settingsFlag8.Name = types.StringPointerValue(settingsFlagItem8.Name)
					if settingsFlagCount8+1 > len(attributes.DateAttribute.SettingsFlag) {
						attributes.DateAttribute.SettingsFlag = append(attributes.DateAttribute.SettingsFlag, settingsFlag8)
					} else {
						attributes.DateAttribute.SettingsFlag[settingsFlagCount8].Enabled = settingsFlag8.Enabled
						attributes.DateAttribute.SettingsFlag[settingsFlagCount8].Name = settingsFlag8.Name
					}
				}
				attributes.DateAttribute.ShowInTable = types.BoolPointerValue(attributesItem.DateAttribute.ShowInTable)
				attributes.DateAttribute.Sortable = types.BoolPointerValue(attributesItem.DateAttribute.Sortable)
				attributes.DateAttribute.Type = types.StringValue(string(attributesItem.DateAttribute.Type))
				attributes.DateAttribute.ValueFormatter = types.StringPointerValue(attributesItem.DateAttribute.ValueFormatter)
			}
			if attributesItem.EmailAttribute != nil {
				attributes.EmailAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.EmailAttribute.Manifest != nil {
					attributes.EmailAttribute.Manifest = make([]types.String, 0, len(attributesItem.EmailAttribute.Manifest))
					for _, v := range attributesItem.EmailAttribute.Manifest {
						attributes.EmailAttribute.Manifest = append(attributes.EmailAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.EmailAttribute.Purpose = make([]types.String, 0, len(attributesItem.EmailAttribute.Purpose))
				for _, v := range attributesItem.EmailAttribute.Purpose {
					attributes.EmailAttribute.Purpose = append(attributes.EmailAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.EmailAttribute.Constraints == nil {
					attributes.EmailAttribute.Constraints = nil
				} else {
					attributes.EmailAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.EmailAttribute.DefaultValue == nil {
					attributes.EmailAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult9, _ := json.Marshal(attributesItem.EmailAttribute.DefaultValue)
					attributes.EmailAttribute.DefaultValue = types.StringValue(string(defaultValueResult9))
				}
				attributes.EmailAttribute.Deprecated = types.BoolPointerValue(attributesItem.EmailAttribute.Deprecated)
				attributes.EmailAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.EmailAttribute.EntityBuilderDisableEdit)
				attributes.EmailAttribute.FeatureFlag = types.StringPointerValue(attributesItem.EmailAttribute.FeatureFlag)
				attributes.EmailAttribute.Group = types.StringPointerValue(attributesItem.EmailAttribute.Group)
				attributes.EmailAttribute.HasPrimary = types.BoolPointerValue(attributesItem.EmailAttribute.HasPrimary)
				attributes.EmailAttribute.Hidden = types.BoolPointerValue(attributesItem.EmailAttribute.Hidden)
				attributes.EmailAttribute.HideLabel = types.BoolPointerValue(attributesItem.EmailAttribute.HideLabel)
				attributes.EmailAttribute.Icon = types.StringPointerValue(attributesItem.EmailAttribute.Icon)
				attributes.EmailAttribute.ID = types.StringPointerValue(attributesItem.EmailAttribute.ID)
				if attributesItem.EmailAttribute.InfoHelpers == nil {
					attributes.EmailAttribute.InfoHelpers = nil
				} else {
					attributes.EmailAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.EmailAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintCustomComponent)
					attributes.EmailAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintText)
					attributes.EmailAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintTextKey)
					attributes.EmailAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.EmailAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.EmailAttribute.Label = types.StringValue(attributesItem.EmailAttribute.Label)
				attributes.EmailAttribute.Layout = types.StringPointerValue(attributesItem.EmailAttribute.Layout)
				attributes.EmailAttribute.Name = types.StringValue(attributesItem.EmailAttribute.Name)
				attributes.EmailAttribute.Order = types.Int64PointerValue(attributesItem.EmailAttribute.Order)
				attributes.EmailAttribute.Placeholder = types.StringPointerValue(attributesItem.EmailAttribute.Placeholder)
				attributes.EmailAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.EmailAttribute.PreviewValueFormatter)
				attributes.EmailAttribute.Protected = types.BoolPointerValue(attributesItem.EmailAttribute.Protected)
				attributes.EmailAttribute.Readonly = types.BoolPointerValue(attributesItem.EmailAttribute.Readonly)
				attributes.EmailAttribute.RenderCondition = types.StringPointerValue(attributesItem.EmailAttribute.RenderCondition)
				attributes.EmailAttribute.Repeatable = types.BoolPointerValue(attributesItem.EmailAttribute.Repeatable)
				attributes.EmailAttribute.Required = types.BoolPointerValue(attributesItem.EmailAttribute.Required)
				attributes.EmailAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount9, settingsFlagItem9 := range attributesItem.EmailAttribute.SettingsFlag {
					var settingsFlag9 tfTypes.SettingFlag
					settingsFlag9.Enabled = types.BoolPointerValue(settingsFlagItem9.Enabled)
					settingsFlag9.Name = types.StringPointerValue(settingsFlagItem9.Name)
					if settingsFlagCount9+1 > len(attributes.EmailAttribute.SettingsFlag) {
						attributes.EmailAttribute.SettingsFlag = append(attributes.EmailAttribute.SettingsFlag, settingsFlag9)
					} else {
						attributes.EmailAttribute.SettingsFlag[settingsFlagCount9].Enabled = settingsFlag9.Enabled
						attributes.EmailAttribute.SettingsFlag[settingsFlagCount9].Name = settingsFlag9.Name
					}
				}
				attributes.EmailAttribute.ShowInTable = types.BoolPointerValue(attributesItem.EmailAttribute.ShowInTable)
				attributes.EmailAttribute.Sortable = types.BoolPointerValue(attributesItem.EmailAttribute.Sortable)
				attributes.EmailAttribute.Type = types.StringValue(string(attributesItem.EmailAttribute.Type))
				attributes.EmailAttribute.ValueFormatter = types.StringPointerValue(attributesItem.EmailAttribute.ValueFormatter)
			}
			if attributesItem.FileAttribute != nil {
				attributes.FileAttribute = &tfTypes.FileAttribute{}
				if attributesItem.FileAttribute.Manifest != nil {
					attributes.FileAttribute.Manifest = make([]types.String, 0, len(attributesItem.FileAttribute.Manifest))
					for _, v := range attributesItem.FileAttribute.Manifest {
						attributes.FileAttribute.Manifest = append(attributes.FileAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.FileAttribute.Purpose = make([]types.String, 0, len(attributesItem.FileAttribute.Purpose))
				for _, v := range attributesItem.FileAttribute.Purpose {
					attributes.FileAttribute.Purpose = append(attributes.FileAttribute.Purpose, types.StringValue(v))
				}
				attributes.FileAttribute.AllowedExtensions = make([]types.String, 0, len(attributesItem.FileAttribute.AllowedExtensions))
				for _, v := range attributesItem.FileAttribute.AllowedExtensions {
					attributes.FileAttribute.AllowedExtensions = append(attributes.FileAttribute.AllowedExtensions, types.StringValue(v))
				}
				if attributesItem.FileAttribute.Constraints == nil {
					attributes.FileAttribute.Constraints = nil
				} else {
					attributes.FileAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.FileAttribute.DefaultAccessControl != nil {
					attributes.FileAttribute.DefaultAccessControl = types.StringValue(string(*attributesItem.FileAttribute.DefaultAccessControl))
				} else {
					attributes.FileAttribute.DefaultAccessControl = types.StringNull()
				}
				if attributesItem.FileAttribute.DefaultValue == nil {
					attributes.FileAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult10, _ := json.Marshal(attributesItem.FileAttribute.DefaultValue)
					attributes.FileAttribute.DefaultValue = types.StringValue(string(defaultValueResult10))
				}
				attributes.FileAttribute.Deprecated = types.BoolPointerValue(attributesItem.FileAttribute.Deprecated)
				attributes.FileAttribute.DisplayImagesLandscaped = types.BoolPointerValue(attributesItem.FileAttribute.DisplayImagesLandscaped)
				attributes.FileAttribute.EnableDescription = types.BoolPointerValue(attributesItem.FileAttribute.EnableDescription)
				attributes.FileAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.FileAttribute.EntityBuilderDisableEdit)
				attributes.FileAttribute.FeatureFlag = types.StringPointerValue(attributesItem.FileAttribute.FeatureFlag)
				attributes.FileAttribute.Group = types.StringPointerValue(attributesItem.FileAttribute.Group)
				attributes.FileAttribute.HasPrimary = types.BoolPointerValue(attributesItem.FileAttribute.HasPrimary)
				attributes.FileAttribute.Hidden = types.BoolPointerValue(attributesItem.FileAttribute.Hidden)
				attributes.FileAttribute.HideLabel = types.BoolPointerValue(attributesItem.FileAttribute.HideLabel)
				attributes.FileAttribute.Icon = types.StringPointerValue(attributesItem.FileAttribute.Icon)
				attributes.FileAttribute.ID = types.StringPointerValue(attributesItem.FileAttribute.ID)
				if attributesItem.FileAttribute.InfoHelpers == nil {
					attributes.FileAttribute.InfoHelpers = nil
				} else {
					attributes.FileAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.FileAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintCustomComponent)
					attributes.FileAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintText)
					attributes.FileAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintTextKey)
					attributes.FileAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.FileAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.FileAttribute.Label = types.StringValue(attributesItem.FileAttribute.Label)
				attributes.FileAttribute.Layout = types.StringPointerValue(attributesItem.FileAttribute.Layout)
				attributes.FileAttribute.Multiple = types.BoolPointerValue(attributesItem.FileAttribute.Multiple)
				attributes.FileAttribute.Name = types.StringValue(attributesItem.FileAttribute.Name)
				attributes.FileAttribute.Order = types.Int64PointerValue(attributesItem.FileAttribute.Order)
				attributes.FileAttribute.Placeholder = types.StringPointerValue(attributesItem.FileAttribute.Placeholder)
				attributes.FileAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.FileAttribute.PreviewValueFormatter)
				attributes.FileAttribute.Protected = types.BoolPointerValue(attributesItem.FileAttribute.Protected)
				attributes.FileAttribute.Readonly = types.BoolPointerValue(attributesItem.FileAttribute.Readonly)
				attributes.FileAttribute.RenderCondition = types.StringPointerValue(attributesItem.FileAttribute.RenderCondition)
				attributes.FileAttribute.Repeatable = types.BoolPointerValue(attributesItem.FileAttribute.Repeatable)
				attributes.FileAttribute.Required = types.BoolPointerValue(attributesItem.FileAttribute.Required)
				attributes.FileAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount10, settingsFlagItem10 := range attributesItem.FileAttribute.SettingsFlag {
					var settingsFlag10 tfTypes.SettingFlag
					settingsFlag10.Enabled = types.BoolPointerValue(settingsFlagItem10.Enabled)
					settingsFlag10.Name = types.StringPointerValue(settingsFlagItem10.Name)
					if settingsFlagCount10+1 > len(attributes.FileAttribute.SettingsFlag) {
						attributes.FileAttribute.SettingsFlag = append(attributes.FileAttribute.SettingsFlag, settingsFlag10)
					} else {
						attributes.FileAttribute.SettingsFlag[settingsFlagCount10].Enabled = settingsFlag10.Enabled
						attributes.FileAttribute.SettingsFlag[settingsFlagCount10].Name = settingsFlag10.Name
					}
				}
				attributes.FileAttribute.ShowInTable = types.BoolPointerValue(attributesItem.FileAttribute.ShowInTable)
				attributes.FileAttribute.Sortable = types.BoolPointerValue(attributesItem.FileAttribute.Sortable)
				attributes.FileAttribute.Type = types.StringValue(string(attributesItem.FileAttribute.Type))
				attributes.FileAttribute.ValueFormatter = types.StringPointerValue(attributesItem.FileAttribute.ValueFormatter)
			}
			if attributesItem.InternalAttribute != nil {
				attributes.InternalAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.InternalAttribute.Manifest != nil {
					attributes.InternalAttribute.Manifest = make([]types.String, 0, len(attributesItem.InternalAttribute.Manifest))
					for _, v := range attributesItem.InternalAttribute.Manifest {
						attributes.InternalAttribute.Manifest = append(attributes.InternalAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.InternalAttribute.Purpose = make([]types.String, 0, len(attributesItem.InternalAttribute.Purpose))
				for _, v := range attributesItem.InternalAttribute.Purpose {
					attributes.InternalAttribute.Purpose = append(attributes.InternalAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.InternalAttribute.Constraints == nil {
					attributes.InternalAttribute.Constraints = nil
				} else {
					attributes.InternalAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.InternalAttribute.DefaultValue == nil {
					attributes.InternalAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult11, _ := json.Marshal(attributesItem.InternalAttribute.DefaultValue)
					attributes.InternalAttribute.DefaultValue = types.StringValue(string(defaultValueResult11))
				}
				attributes.InternalAttribute.Deprecated = types.BoolPointerValue(attributesItem.InternalAttribute.Deprecated)
				attributes.InternalAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.InternalAttribute.EntityBuilderDisableEdit)
				attributes.InternalAttribute.FeatureFlag = types.StringPointerValue(attributesItem.InternalAttribute.FeatureFlag)
				attributes.InternalAttribute.Group = types.StringPointerValue(attributesItem.InternalAttribute.Group)
				attributes.InternalAttribute.HasPrimary = types.BoolPointerValue(attributesItem.InternalAttribute.HasPrimary)
				attributes.InternalAttribute.Hidden = types.BoolPointerValue(attributesItem.InternalAttribute.Hidden)
				attributes.InternalAttribute.HideLabel = types.BoolPointerValue(attributesItem.InternalAttribute.HideLabel)
				attributes.InternalAttribute.Icon = types.StringPointerValue(attributesItem.InternalAttribute.Icon)
				attributes.InternalAttribute.ID = types.StringPointerValue(attributesItem.InternalAttribute.ID)
				if attributesItem.InternalAttribute.InfoHelpers == nil {
					attributes.InternalAttribute.InfoHelpers = nil
				} else {
					attributes.InternalAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.InternalAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintCustomComponent)
					attributes.InternalAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintText)
					attributes.InternalAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintTextKey)
					attributes.InternalAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InternalAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.InternalAttribute.Label = types.StringValue(attributesItem.InternalAttribute.Label)
				attributes.InternalAttribute.Layout = types.StringPointerValue(attributesItem.InternalAttribute.Layout)
				attributes.InternalAttribute.Name = types.StringValue(attributesItem.InternalAttribute.Name)
				attributes.InternalAttribute.Order = types.Int64PointerValue(attributesItem.InternalAttribute.Order)
				attributes.InternalAttribute.Placeholder = types.StringPointerValue(attributesItem.InternalAttribute.Placeholder)
				attributes.InternalAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.InternalAttribute.PreviewValueFormatter)
				attributes.InternalAttribute.Protected = types.BoolPointerValue(attributesItem.InternalAttribute.Protected)
				attributes.InternalAttribute.Readonly = types.BoolPointerValue(attributesItem.InternalAttribute.Readonly)
				attributes.InternalAttribute.RenderCondition = types.StringPointerValue(attributesItem.InternalAttribute.RenderCondition)
				attributes.InternalAttribute.Repeatable = types.BoolPointerValue(attributesItem.InternalAttribute.Repeatable)
				attributes.InternalAttribute.Required = types.BoolPointerValue(attributesItem.InternalAttribute.Required)
				attributes.InternalAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount11, settingsFlagItem11 := range attributesItem.InternalAttribute.SettingsFlag {
					var settingsFlag11 tfTypes.SettingFlag
					settingsFlag11.Enabled = types.BoolPointerValue(settingsFlagItem11.Enabled)
					settingsFlag11.Name = types.StringPointerValue(settingsFlagItem11.Name)
					if settingsFlagCount11+1 > len(attributes.InternalAttribute.SettingsFlag) {
						attributes.InternalAttribute.SettingsFlag = append(attributes.InternalAttribute.SettingsFlag, settingsFlag11)
					} else {
						attributes.InternalAttribute.SettingsFlag[settingsFlagCount11].Enabled = settingsFlag11.Enabled
						attributes.InternalAttribute.SettingsFlag[settingsFlagCount11].Name = settingsFlag11.Name
					}
				}
				attributes.InternalAttribute.ShowInTable = types.BoolPointerValue(attributesItem.InternalAttribute.ShowInTable)
				attributes.InternalAttribute.Sortable = types.BoolPointerValue(attributesItem.InternalAttribute.Sortable)
				attributes.InternalAttribute.Type = types.StringValue(string(attributesItem.InternalAttribute.Type))
				attributes.InternalAttribute.ValueFormatter = types.StringPointerValue(attributesItem.InternalAttribute.ValueFormatter)
			}
			if attributesItem.InternalUserAttribute != nil {
				attributes.InternalUserAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.InternalUserAttribute.Manifest != nil {
					attributes.InternalUserAttribute.Manifest = make([]types.String, 0, len(attributesItem.InternalUserAttribute.Manifest))
					for _, v := range attributesItem.InternalUserAttribute.Manifest {
						attributes.InternalUserAttribute.Manifest = append(attributes.InternalUserAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.InternalUserAttribute.Purpose = make([]types.String, 0, len(attributesItem.InternalUserAttribute.Purpose))
				for _, v := range attributesItem.InternalUserAttribute.Purpose {
					attributes.InternalUserAttribute.Purpose = append(attributes.InternalUserAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.InternalUserAttribute.Constraints == nil {
					attributes.InternalUserAttribute.Constraints = nil
				} else {
					attributes.InternalUserAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.InternalUserAttribute.DefaultValue == nil {
					attributes.InternalUserAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult12, _ := json.Marshal(attributesItem.InternalUserAttribute.DefaultValue)
					attributes.InternalUserAttribute.DefaultValue = types.StringValue(string(defaultValueResult12))
				}
				attributes.InternalUserAttribute.Deprecated = types.BoolPointerValue(attributesItem.InternalUserAttribute.Deprecated)
				attributes.InternalUserAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.InternalUserAttribute.EntityBuilderDisableEdit)
				attributes.InternalUserAttribute.FeatureFlag = types.StringPointerValue(attributesItem.InternalUserAttribute.FeatureFlag)
				attributes.InternalUserAttribute.Group = types.StringPointerValue(attributesItem.InternalUserAttribute.Group)
				attributes.InternalUserAttribute.HasPrimary = types.BoolPointerValue(attributesItem.InternalUserAttribute.HasPrimary)
				attributes.InternalUserAttribute.Hidden = types.BoolPointerValue(attributesItem.InternalUserAttribute.Hidden)
				attributes.InternalUserAttribute.HideLabel = types.BoolPointerValue(attributesItem.InternalUserAttribute.HideLabel)
				attributes.InternalUserAttribute.Icon = types.StringPointerValue(attributesItem.InternalUserAttribute.Icon)
				attributes.InternalUserAttribute.ID = types.StringPointerValue(attributesItem.InternalUserAttribute.ID)
				if attributesItem.InternalUserAttribute.InfoHelpers == nil {
					attributes.InternalUserAttribute.InfoHelpers = nil
				} else {
					attributes.InternalUserAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.InternalUserAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintCustomComponent)
					attributes.InternalUserAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintText)
					attributes.InternalUserAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintTextKey)
					attributes.InternalUserAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InternalUserAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.InternalUserAttribute.Label = types.StringValue(attributesItem.InternalUserAttribute.Label)
				attributes.InternalUserAttribute.Layout = types.StringPointerValue(attributesItem.InternalUserAttribute.Layout)
				attributes.InternalUserAttribute.Name = types.StringValue(attributesItem.InternalUserAttribute.Name)
				attributes.InternalUserAttribute.Order = types.Int64PointerValue(attributesItem.InternalUserAttribute.Order)
				attributes.InternalUserAttribute.Placeholder = types.StringPointerValue(attributesItem.InternalUserAttribute.Placeholder)
				attributes.InternalUserAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.InternalUserAttribute.PreviewValueFormatter)
				attributes.InternalUserAttribute.Protected = types.BoolPointerValue(attributesItem.InternalUserAttribute.Protected)
				attributes.InternalUserAttribute.Readonly = types.BoolPointerValue(attributesItem.InternalUserAttribute.Readonly)
				attributes.InternalUserAttribute.RenderCondition = types.StringPointerValue(attributesItem.InternalUserAttribute.RenderCondition)
				attributes.InternalUserAttribute.Repeatable = types.BoolPointerValue(attributesItem.InternalUserAttribute.Repeatable)
				attributes.InternalUserAttribute.Required = types.BoolPointerValue(attributesItem.InternalUserAttribute.Required)
				attributes.InternalUserAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount12, settingsFlagItem12 := range attributesItem.InternalUserAttribute.SettingsFlag {
					var settingsFlag12 tfTypes.SettingFlag
					settingsFlag12.Enabled = types.BoolPointerValue(settingsFlagItem12.Enabled)
					settingsFlag12.Name = types.StringPointerValue(settingsFlagItem12.Name)
					if settingsFlagCount12+1 > len(attributes.InternalUserAttribute.SettingsFlag) {
						attributes.InternalUserAttribute.SettingsFlag = append(attributes.InternalUserAttribute.SettingsFlag, settingsFlag12)
					} else {
						attributes.InternalUserAttribute.SettingsFlag[settingsFlagCount12].Enabled = settingsFlag12.Enabled
						attributes.InternalUserAttribute.SettingsFlag[settingsFlagCount12].Name = settingsFlag12.Name
					}
				}
				attributes.InternalUserAttribute.ShowInTable = types.BoolPointerValue(attributesItem.InternalUserAttribute.ShowInTable)
				attributes.InternalUserAttribute.Sortable = types.BoolPointerValue(attributesItem.InternalUserAttribute.Sortable)
				attributes.InternalUserAttribute.Type = types.StringValue(string(attributesItem.InternalUserAttribute.Type))
				attributes.InternalUserAttribute.ValueFormatter = types.StringPointerValue(attributesItem.InternalUserAttribute.ValueFormatter)
			}
			if attributesItem.InvitationEmailAttribute != nil {
				attributes.InvitationEmailAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.InvitationEmailAttribute.Manifest != nil {
					attributes.InvitationEmailAttribute.Manifest = make([]types.String, 0, len(attributesItem.InvitationEmailAttribute.Manifest))
					for _, v := range attributesItem.InvitationEmailAttribute.Manifest {
						attributes.InvitationEmailAttribute.Manifest = append(attributes.InvitationEmailAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.InvitationEmailAttribute.Purpose = make([]types.String, 0, len(attributesItem.InvitationEmailAttribute.Purpose))
				for _, v := range attributesItem.InvitationEmailAttribute.Purpose {
					attributes.InvitationEmailAttribute.Purpose = append(attributes.InvitationEmailAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.InvitationEmailAttribute.Constraints == nil {
					attributes.InvitationEmailAttribute.Constraints = nil
				} else {
					attributes.InvitationEmailAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.InvitationEmailAttribute.DefaultValue == nil {
					attributes.InvitationEmailAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult13, _ := json.Marshal(attributesItem.InvitationEmailAttribute.DefaultValue)
					attributes.InvitationEmailAttribute.DefaultValue = types.StringValue(string(defaultValueResult13))
				}
				attributes.InvitationEmailAttribute.Deprecated = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Deprecated)
				attributes.InvitationEmailAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.EntityBuilderDisableEdit)
				attributes.InvitationEmailAttribute.FeatureFlag = types.StringPointerValue(attributesItem.InvitationEmailAttribute.FeatureFlag)
				attributes.InvitationEmailAttribute.Group = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Group)
				attributes.InvitationEmailAttribute.HasPrimary = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.HasPrimary)
				attributes.InvitationEmailAttribute.Hidden = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Hidden)
				attributes.InvitationEmailAttribute.HideLabel = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.HideLabel)
				attributes.InvitationEmailAttribute.Icon = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Icon)
				attributes.InvitationEmailAttribute.ID = types.StringPointerValue(attributesItem.InvitationEmailAttribute.ID)
				if attributesItem.InvitationEmailAttribute.InfoHelpers == nil {
					attributes.InvitationEmailAttribute.InfoHelpers = nil
				} else {
					attributes.InvitationEmailAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.InvitationEmailAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintCustomComponent)
					attributes.InvitationEmailAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintText)
					attributes.InvitationEmailAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintTextKey)
					attributes.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.InvitationEmailAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.InvitationEmailAttribute.Label = types.StringValue(attributesItem.InvitationEmailAttribute.Label)
				attributes.InvitationEmailAttribute.Layout = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Layout)
				attributes.InvitationEmailAttribute.Name = types.StringValue(attributesItem.InvitationEmailAttribute.Name)
				attributes.InvitationEmailAttribute.Order = types.Int64PointerValue(attributesItem.InvitationEmailAttribute.Order)
				attributes.InvitationEmailAttribute.Placeholder = types.StringPointerValue(attributesItem.InvitationEmailAttribute.Placeholder)
				attributes.InvitationEmailAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.InvitationEmailAttribute.PreviewValueFormatter)
				attributes.InvitationEmailAttribute.Protected = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Protected)
				attributes.InvitationEmailAttribute.Readonly = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Readonly)
				attributes.InvitationEmailAttribute.RenderCondition = types.StringPointerValue(attributesItem.InvitationEmailAttribute.RenderCondition)
				attributes.InvitationEmailAttribute.Repeatable = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Repeatable)
				attributes.InvitationEmailAttribute.Required = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Required)
				attributes.InvitationEmailAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount13, settingsFlagItem13 := range attributesItem.InvitationEmailAttribute.SettingsFlag {
					var settingsFlag13 tfTypes.SettingFlag
					settingsFlag13.Enabled = types.BoolPointerValue(settingsFlagItem13.Enabled)
					settingsFlag13.Name = types.StringPointerValue(settingsFlagItem13.Name)
					if settingsFlagCount13+1 > len(attributes.InvitationEmailAttribute.SettingsFlag) {
						attributes.InvitationEmailAttribute.SettingsFlag = append(attributes.InvitationEmailAttribute.SettingsFlag, settingsFlag13)
					} else {
						attributes.InvitationEmailAttribute.SettingsFlag[settingsFlagCount13].Enabled = settingsFlag13.Enabled
						attributes.InvitationEmailAttribute.SettingsFlag[settingsFlagCount13].Name = settingsFlag13.Name
					}
				}
				attributes.InvitationEmailAttribute.ShowInTable = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.ShowInTable)
				attributes.InvitationEmailAttribute.Sortable = types.BoolPointerValue(attributesItem.InvitationEmailAttribute.Sortable)
				attributes.InvitationEmailAttribute.Type = types.StringValue(string(attributesItem.InvitationEmailAttribute.Type))
				attributes.InvitationEmailAttribute.ValueFormatter = types.StringPointerValue(attributesItem.InvitationEmailAttribute.ValueFormatter)
			}
			if attributesItem.LinkAttribute != nil {
				attributes.LinkAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.LinkAttribute.Manifest != nil {
					attributes.LinkAttribute.Manifest = make([]types.String, 0, len(attributesItem.LinkAttribute.Manifest))
					for _, v := range attributesItem.LinkAttribute.Manifest {
						attributes.LinkAttribute.Manifest = append(attributes.LinkAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.LinkAttribute.Purpose = make([]types.String, 0, len(attributesItem.LinkAttribute.Purpose))
				for _, v := range attributesItem.LinkAttribute.Purpose {
					attributes.LinkAttribute.Purpose = append(attributes.LinkAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.LinkAttribute.Constraints == nil {
					attributes.LinkAttribute.Constraints = nil
				} else {
					attributes.LinkAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.LinkAttribute.DefaultValue == nil {
					attributes.LinkAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult14, _ := json.Marshal(attributesItem.LinkAttribute.DefaultValue)
					attributes.LinkAttribute.DefaultValue = types.StringValue(string(defaultValueResult14))
				}
				attributes.LinkAttribute.Deprecated = types.BoolPointerValue(attributesItem.LinkAttribute.Deprecated)
				attributes.LinkAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.LinkAttribute.EntityBuilderDisableEdit)
				attributes.LinkAttribute.FeatureFlag = types.StringPointerValue(attributesItem.LinkAttribute.FeatureFlag)
				attributes.LinkAttribute.Group = types.StringPointerValue(attributesItem.LinkAttribute.Group)
				attributes.LinkAttribute.HasPrimary = types.BoolPointerValue(attributesItem.LinkAttribute.HasPrimary)
				attributes.LinkAttribute.Hidden = types.BoolPointerValue(attributesItem.LinkAttribute.Hidden)
				attributes.LinkAttribute.HideLabel = types.BoolPointerValue(attributesItem.LinkAttribute.HideLabel)
				attributes.LinkAttribute.Icon = types.StringPointerValue(attributesItem.LinkAttribute.Icon)
				attributes.LinkAttribute.ID = types.StringPointerValue(attributesItem.LinkAttribute.ID)
				if attributesItem.LinkAttribute.InfoHelpers == nil {
					attributes.LinkAttribute.InfoHelpers = nil
				} else {
					attributes.LinkAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.LinkAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintCustomComponent)
					attributes.LinkAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintText)
					attributes.LinkAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintTextKey)
					attributes.LinkAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.LinkAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.LinkAttribute.Label = types.StringValue(attributesItem.LinkAttribute.Label)
				attributes.LinkAttribute.Layout = types.StringPointerValue(attributesItem.LinkAttribute.Layout)
				attributes.LinkAttribute.Name = types.StringValue(attributesItem.LinkAttribute.Name)
				attributes.LinkAttribute.Order = types.Int64PointerValue(attributesItem.LinkAttribute.Order)
				attributes.LinkAttribute.Placeholder = types.StringPointerValue(attributesItem.LinkAttribute.Placeholder)
				attributes.LinkAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.LinkAttribute.PreviewValueFormatter)
				attributes.LinkAttribute.Protected = types.BoolPointerValue(attributesItem.LinkAttribute.Protected)
				attributes.LinkAttribute.Readonly = types.BoolPointerValue(attributesItem.LinkAttribute.Readonly)
				attributes.LinkAttribute.RenderCondition = types.StringPointerValue(attributesItem.LinkAttribute.RenderCondition)
				attributes.LinkAttribute.Repeatable = types.BoolPointerValue(attributesItem.LinkAttribute.Repeatable)
				attributes.LinkAttribute.Required = types.BoolPointerValue(attributesItem.LinkAttribute.Required)
				attributes.LinkAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount14, settingsFlagItem14 := range attributesItem.LinkAttribute.SettingsFlag {
					var settingsFlag14 tfTypes.SettingFlag
					settingsFlag14.Enabled = types.BoolPointerValue(settingsFlagItem14.Enabled)
					settingsFlag14.Name = types.StringPointerValue(settingsFlagItem14.Name)
					if settingsFlagCount14+1 > len(attributes.LinkAttribute.SettingsFlag) {
						attributes.LinkAttribute.SettingsFlag = append(attributes.LinkAttribute.SettingsFlag, settingsFlag14)
					} else {
						attributes.LinkAttribute.SettingsFlag[settingsFlagCount14].Enabled = settingsFlag14.Enabled
						attributes.LinkAttribute.SettingsFlag[settingsFlagCount14].Name = settingsFlag14.Name
					}
				}
				attributes.LinkAttribute.ShowInTable = types.BoolPointerValue(attributesItem.LinkAttribute.ShowInTable)
				attributes.LinkAttribute.Sortable = types.BoolPointerValue(attributesItem.LinkAttribute.Sortable)
				attributes.LinkAttribute.Type = types.StringValue(string(attributesItem.LinkAttribute.Type))
				attributes.LinkAttribute.ValueFormatter = types.StringPointerValue(attributesItem.LinkAttribute.ValueFormatter)
			}
			if attributesItem.MessageEmailAddressAttribute != nil {
				attributes.MessageEmailAddressAttribute = &tfTypes.MessageEmailAddressAttribute{}
				if attributesItem.MessageEmailAddressAttribute.Manifest != nil {
					attributes.MessageEmailAddressAttribute.Manifest = make([]types.String, 0, len(attributesItem.MessageEmailAddressAttribute.Manifest))
					for _, v := range attributesItem.MessageEmailAddressAttribute.Manifest {
						attributes.MessageEmailAddressAttribute.Manifest = append(attributes.MessageEmailAddressAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.MessageEmailAddressAttribute.Purpose = make([]types.String, 0, len(attributesItem.MessageEmailAddressAttribute.Purpose))
				for _, v := range attributesItem.MessageEmailAddressAttribute.Purpose {
					attributes.MessageEmailAddressAttribute.Purpose = append(attributes.MessageEmailAddressAttribute.Purpose, types.StringValue(v))
				}
				attributes.MessageEmailAddressAttribute.Address = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Address)
				if attributesItem.MessageEmailAddressAttribute.Constraints == nil {
					attributes.MessageEmailAddressAttribute.Constraints = nil
				} else {
					attributes.MessageEmailAddressAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.MessageEmailAddressAttribute.DefaultValue == nil {
					attributes.MessageEmailAddressAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult15, _ := json.Marshal(attributesItem.MessageEmailAddressAttribute.DefaultValue)
					attributes.MessageEmailAddressAttribute.DefaultValue = types.StringValue(string(defaultValueResult15))
				}
				attributes.MessageEmailAddressAttribute.Deprecated = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Deprecated)
				attributes.MessageEmailAddressAttribute.EmailType = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.EmailType)
				attributes.MessageEmailAddressAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.EntityBuilderDisableEdit)
				attributes.MessageEmailAddressAttribute.FeatureFlag = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.FeatureFlag)
				attributes.MessageEmailAddressAttribute.Group = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Group)
				attributes.MessageEmailAddressAttribute.HasPrimary = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.HasPrimary)
				attributes.MessageEmailAddressAttribute.Hidden = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Hidden)
				attributes.MessageEmailAddressAttribute.HideLabel = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.HideLabel)
				attributes.MessageEmailAddressAttribute.Icon = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Icon)
				attributes.MessageEmailAddressAttribute.ID = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.ID)
				if attributesItem.MessageEmailAddressAttribute.InfoHelpers == nil {
					attributes.MessageEmailAddressAttribute.InfoHelpers = nil
				} else {
					attributes.MessageEmailAddressAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintCustomComponent)
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintText)
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTextKey)
					attributes.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.MessageEmailAddressAttribute.Label = types.StringValue(attributesItem.MessageEmailAddressAttribute.Label)
				attributes.MessageEmailAddressAttribute.Layout = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Layout)
				attributes.MessageEmailAddressAttribute.Name = types.StringValue(attributesItem.MessageEmailAddressAttribute.Name)
				attributes.MessageEmailAddressAttribute.Order = types.Int64PointerValue(attributesItem.MessageEmailAddressAttribute.Order)
				attributes.MessageEmailAddressAttribute.Placeholder = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.Placeholder)
				attributes.MessageEmailAddressAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.PreviewValueFormatter)
				attributes.MessageEmailAddressAttribute.Protected = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Protected)
				attributes.MessageEmailAddressAttribute.Readonly = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Readonly)
				attributes.MessageEmailAddressAttribute.RenderCondition = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.RenderCondition)
				attributes.MessageEmailAddressAttribute.Repeatable = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Repeatable)
				attributes.MessageEmailAddressAttribute.Required = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Required)
				attributes.MessageEmailAddressAttribute.SendStatus = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.SendStatus)
				attributes.MessageEmailAddressAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount15, settingsFlagItem15 := range attributesItem.MessageEmailAddressAttribute.SettingsFlag {
					var settingsFlag15 tfTypes.SettingFlag
					settingsFlag15.Enabled = types.BoolPointerValue(settingsFlagItem15.Enabled)
					settingsFlag15.Name = types.StringPointerValue(settingsFlagItem15.Name)
					if settingsFlagCount15+1 > len(attributes.MessageEmailAddressAttribute.SettingsFlag) {
						attributes.MessageEmailAddressAttribute.SettingsFlag = append(attributes.MessageEmailAddressAttribute.SettingsFlag, settingsFlag15)
					} else {
						attributes.MessageEmailAddressAttribute.SettingsFlag[settingsFlagCount15].Enabled = settingsFlag15.Enabled
						attributes.MessageEmailAddressAttribute.SettingsFlag[settingsFlagCount15].Name = settingsFlag15.Name
					}
				}
				attributes.MessageEmailAddressAttribute.ShowInTable = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.ShowInTable)
				attributes.MessageEmailAddressAttribute.Sortable = types.BoolPointerValue(attributesItem.MessageEmailAddressAttribute.Sortable)
				attributes.MessageEmailAddressAttribute.Type = types.StringValue(string(attributesItem.MessageEmailAddressAttribute.Type))
				attributes.MessageEmailAddressAttribute.ValueFormatter = types.StringPointerValue(attributesItem.MessageEmailAddressAttribute.ValueFormatter)
			}
			if attributesItem.MultiSelectAttribute != nil {
				attributes.MultiSelectAttribute = &tfTypes.MultiSelectAttribute{}
				if attributesItem.MultiSelectAttribute.Manifest != nil {
					attributes.MultiSelectAttribute.Manifest = make([]types.String, 0, len(attributesItem.MultiSelectAttribute.Manifest))
					for _, v := range attributesItem.MultiSelectAttribute.Manifest {
						attributes.MultiSelectAttribute.Manifest = append(attributes.MultiSelectAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.MultiSelectAttribute.Purpose = make([]types.String, 0, len(attributesItem.MultiSelectAttribute.Purpose))
				for _, v := range attributesItem.MultiSelectAttribute.Purpose {
					attributes.MultiSelectAttribute.Purpose = append(attributes.MultiSelectAttribute.Purpose, types.StringValue(v))
				}
				attributes.MultiSelectAttribute.AllowAny = types.BoolPointerValue(attributesItem.MultiSelectAttribute.AllowAny)
				attributes.MultiSelectAttribute.AllowExtraOptions = types.BoolPointerValue(attributesItem.MultiSelectAttribute.AllowExtraOptions)
				if attributesItem.MultiSelectAttribute.Constraints == nil {
					attributes.MultiSelectAttribute.Constraints = nil
				} else {
					attributes.MultiSelectAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.MultiSelectAttribute.DefaultValue == nil {
					attributes.MultiSelectAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult16, _ := json.Marshal(attributesItem.MultiSelectAttribute.DefaultValue)
					attributes.MultiSelectAttribute.DefaultValue = types.StringValue(string(defaultValueResult16))
				}
				attributes.MultiSelectAttribute.Deprecated = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Deprecated)
				attributes.MultiSelectAttribute.DisableCaseSensitive = types.BoolPointerValue(attributesItem.MultiSelectAttribute.DisableCaseSensitive)
				attributes.MultiSelectAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.MultiSelectAttribute.EntityBuilderDisableEdit)
				attributes.MultiSelectAttribute.FeatureFlag = types.StringPointerValue(attributesItem.MultiSelectAttribute.FeatureFlag)
				attributes.MultiSelectAttribute.Group = types.StringPointerValue(attributesItem.MultiSelectAttribute.Group)
				attributes.MultiSelectAttribute.HasPrimary = types.BoolPointerValue(attributesItem.MultiSelectAttribute.HasPrimary)
				attributes.MultiSelectAttribute.Hidden = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Hidden)
				attributes.MultiSelectAttribute.HideLabel = types.BoolPointerValue(attributesItem.MultiSelectAttribute.HideLabel)
				attributes.MultiSelectAttribute.Icon = types.StringPointerValue(attributesItem.MultiSelectAttribute.Icon)
				attributes.MultiSelectAttribute.ID = types.StringPointerValue(attributesItem.MultiSelectAttribute.ID)
				if attributesItem.MultiSelectAttribute.InfoHelpers == nil {
					attributes.MultiSelectAttribute.InfoHelpers = nil
				} else {
					attributes.MultiSelectAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.MultiSelectAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintCustomComponent)
					attributes.MultiSelectAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintText)
					attributes.MultiSelectAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintTextKey)
					attributes.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.MultiSelectAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.MultiSelectAttribute.Label = types.StringValue(attributesItem.MultiSelectAttribute.Label)
				attributes.MultiSelectAttribute.Layout = types.StringPointerValue(attributesItem.MultiSelectAttribute.Layout)
				attributes.MultiSelectAttribute.Name = types.StringValue(attributesItem.MultiSelectAttribute.Name)
				attributes.MultiSelectAttribute.Options = []tfTypes.MultiSelectAttributeOptions{}
				for optionsVarCount, optionsVarItem := range attributesItem.MultiSelectAttribute.Options {
					var optionsVar tfTypes.MultiSelectAttributeOptions
					if optionsVarItem.Str != nil {
						optionsVar.Str = types.StringPointerValue(optionsVarItem.Str)
					}
					if optionsVarItem.Options2 != nil {
						optionsVar.Two = &tfTypes.MultiSelectAttributeOptions2{}
						optionsVar.Two.Title = types.StringPointerValue(optionsVarItem.Options2.Title)
						optionsVar.Two.Value = types.StringValue(optionsVarItem.Options2.Value)
					}
					if optionsVarCount+1 > len(attributes.MultiSelectAttribute.Options) {
						attributes.MultiSelectAttribute.Options = append(attributes.MultiSelectAttribute.Options, optionsVar)
					} else {
						attributes.MultiSelectAttribute.Options[optionsVarCount].Str = optionsVar.Str
						attributes.MultiSelectAttribute.Options[optionsVarCount].Two = optionsVar.Two
					}
				}
				attributes.MultiSelectAttribute.Order = types.Int64PointerValue(attributesItem.MultiSelectAttribute.Order)
				attributes.MultiSelectAttribute.Placeholder = types.StringPointerValue(attributesItem.MultiSelectAttribute.Placeholder)
				attributes.MultiSelectAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.MultiSelectAttribute.PreviewValueFormatter)
				attributes.MultiSelectAttribute.Protected = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Protected)
				attributes.MultiSelectAttribute.Readonly = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Readonly)
				attributes.MultiSelectAttribute.RenderCondition = types.StringPointerValue(attributesItem.MultiSelectAttribute.RenderCondition)
				attributes.MultiSelectAttribute.Repeatable = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Repeatable)
				attributes.MultiSelectAttribute.Required = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Required)
				attributes.MultiSelectAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount16, settingsFlagItem16 := range attributesItem.MultiSelectAttribute.SettingsFlag {
					var settingsFlag16 tfTypes.SettingFlag
					settingsFlag16.Enabled = types.BoolPointerValue(settingsFlagItem16.Enabled)
					settingsFlag16.Name = types.StringPointerValue(settingsFlagItem16.Name)
					if settingsFlagCount16+1 > len(attributes.MultiSelectAttribute.SettingsFlag) {
						attributes.MultiSelectAttribute.SettingsFlag = append(attributes.MultiSelectAttribute.SettingsFlag, settingsFlag16)
					} else {
						attributes.MultiSelectAttribute.SettingsFlag[settingsFlagCount16].Enabled = settingsFlag16.Enabled
						attributes.MultiSelectAttribute.SettingsFlag[settingsFlagCount16].Name = settingsFlag16.Name
					}
				}
				attributes.MultiSelectAttribute.ShowInTable = types.BoolPointerValue(attributesItem.MultiSelectAttribute.ShowInTable)
				attributes.MultiSelectAttribute.Sortable = types.BoolPointerValue(attributesItem.MultiSelectAttribute.Sortable)
				attributes.MultiSelectAttribute.Type = types.StringValue(string(attributesItem.MultiSelectAttribute.Type))
				attributes.MultiSelectAttribute.ValueFormatter = types.StringPointerValue(attributesItem.MultiSelectAttribute.ValueFormatter)
			}
			if attributesItem.NumberAttribute != nil {
				attributes.NumberAttribute = &tfTypes.NumberAttribute{}
				if attributesItem.NumberAttribute.Manifest != nil {
					attributes.NumberAttribute.Manifest = make([]types.String, 0, len(attributesItem.NumberAttribute.Manifest))
					for _, v := range attributesItem.NumberAttribute.Manifest {
						attributes.NumberAttribute.Manifest = append(attributes.NumberAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.NumberAttribute.Purpose = make([]types.String, 0, len(attributesItem.NumberAttribute.Purpose))
				for _, v := range attributesItem.NumberAttribute.Purpose {
					attributes.NumberAttribute.Purpose = append(attributes.NumberAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.NumberAttribute.Constraints == nil {
					attributes.NumberAttribute.Constraints = nil
				} else {
					attributes.NumberAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.NumberAttribute.DefaultValue == nil {
					attributes.NumberAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult17, _ := json.Marshal(attributesItem.NumberAttribute.DefaultValue)
					attributes.NumberAttribute.DefaultValue = types.StringValue(string(defaultValueResult17))
				}
				attributes.NumberAttribute.Deprecated = types.BoolPointerValue(attributesItem.NumberAttribute.Deprecated)
				attributes.NumberAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.NumberAttribute.EntityBuilderDisableEdit)
				attributes.NumberAttribute.FeatureFlag = types.StringPointerValue(attributesItem.NumberAttribute.FeatureFlag)
				attributes.NumberAttribute.Format = types.StringPointerValue(attributesItem.NumberAttribute.Format)
				attributes.NumberAttribute.Group = types.StringPointerValue(attributesItem.NumberAttribute.Group)
				attributes.NumberAttribute.HasPrimary = types.BoolPointerValue(attributesItem.NumberAttribute.HasPrimary)
				attributes.NumberAttribute.Hidden = types.BoolPointerValue(attributesItem.NumberAttribute.Hidden)
				attributes.NumberAttribute.HideLabel = types.BoolPointerValue(attributesItem.NumberAttribute.HideLabel)
				attributes.NumberAttribute.Icon = types.StringPointerValue(attributesItem.NumberAttribute.Icon)
				attributes.NumberAttribute.ID = types.StringPointerValue(attributesItem.NumberAttribute.ID)
				if attributesItem.NumberAttribute.InfoHelpers == nil {
					attributes.NumberAttribute.InfoHelpers = nil
				} else {
					attributes.NumberAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.NumberAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintCustomComponent)
					attributes.NumberAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintText)
					attributes.NumberAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintTextKey)
					attributes.NumberAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.NumberAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.NumberAttribute.Label = types.StringValue(attributesItem.NumberAttribute.Label)
				attributes.NumberAttribute.Layout = types.StringPointerValue(attributesItem.NumberAttribute.Layout)
				attributes.NumberAttribute.Name = types.StringValue(attributesItem.NumberAttribute.Name)
				attributes.NumberAttribute.Order = types.Int64PointerValue(attributesItem.NumberAttribute.Order)
				attributes.NumberAttribute.Placeholder = types.StringPointerValue(attributesItem.NumberAttribute.Placeholder)
				attributes.NumberAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.NumberAttribute.PreviewValueFormatter)
				attributes.NumberAttribute.Protected = types.BoolPointerValue(attributesItem.NumberAttribute.Protected)
				attributes.NumberAttribute.Readonly = types.BoolPointerValue(attributesItem.NumberAttribute.Readonly)
				attributes.NumberAttribute.RenderCondition = types.StringPointerValue(attributesItem.NumberAttribute.RenderCondition)
				attributes.NumberAttribute.Repeatable = types.BoolPointerValue(attributesItem.NumberAttribute.Repeatable)
				attributes.NumberAttribute.Required = types.BoolPointerValue(attributesItem.NumberAttribute.Required)
				attributes.NumberAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount17, settingsFlagItem17 := range attributesItem.NumberAttribute.SettingsFlag {
					var settingsFlag17 tfTypes.SettingFlag
					settingsFlag17.Enabled = types.BoolPointerValue(settingsFlagItem17.Enabled)
					settingsFlag17.Name = types.StringPointerValue(settingsFlagItem17.Name)
					if settingsFlagCount17+1 > len(attributes.NumberAttribute.SettingsFlag) {
						attributes.NumberAttribute.SettingsFlag = append(attributes.NumberAttribute.SettingsFlag, settingsFlag17)
					} else {
						attributes.NumberAttribute.SettingsFlag[settingsFlagCount17].Enabled = settingsFlag17.Enabled
						attributes.NumberAttribute.SettingsFlag[settingsFlagCount17].Name = settingsFlag17.Name
					}
				}
				attributes.NumberAttribute.ShowInTable = types.BoolPointerValue(attributesItem.NumberAttribute.ShowInTable)
				attributes.NumberAttribute.ShowSeparator = types.BoolPointerValue(attributesItem.NumberAttribute.ShowSeparator)
				attributes.NumberAttribute.Sortable = types.BoolPointerValue(attributesItem.NumberAttribute.Sortable)
				attributes.NumberAttribute.Type = types.StringValue(string(attributesItem.NumberAttribute.Type))
				attributes.NumberAttribute.ValueFormatter = types.StringPointerValue(attributesItem.NumberAttribute.ValueFormatter)
			}
			if attributesItem.OrderedListAttribute != nil {
				attributes.OrderedListAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.OrderedListAttribute.Manifest != nil {
					attributes.OrderedListAttribute.Manifest = make([]types.String, 0, len(attributesItem.OrderedListAttribute.Manifest))
					for _, v := range attributesItem.OrderedListAttribute.Manifest {
						attributes.OrderedListAttribute.Manifest = append(attributes.OrderedListAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.OrderedListAttribute.Purpose = make([]types.String, 0, len(attributesItem.OrderedListAttribute.Purpose))
				for _, v := range attributesItem.OrderedListAttribute.Purpose {
					attributes.OrderedListAttribute.Purpose = append(attributes.OrderedListAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.OrderedListAttribute.Constraints == nil {
					attributes.OrderedListAttribute.Constraints = nil
				} else {
					attributes.OrderedListAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.OrderedListAttribute.DefaultValue == nil {
					attributes.OrderedListAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult18, _ := json.Marshal(attributesItem.OrderedListAttribute.DefaultValue)
					attributes.OrderedListAttribute.DefaultValue = types.StringValue(string(defaultValueResult18))
				}
				attributes.OrderedListAttribute.Deprecated = types.BoolPointerValue(attributesItem.OrderedListAttribute.Deprecated)
				attributes.OrderedListAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.OrderedListAttribute.EntityBuilderDisableEdit)
				attributes.OrderedListAttribute.FeatureFlag = types.StringPointerValue(attributesItem.OrderedListAttribute.FeatureFlag)
				attributes.OrderedListAttribute.Group = types.StringPointerValue(attributesItem.OrderedListAttribute.Group)
				attributes.OrderedListAttribute.HasPrimary = types.BoolPointerValue(attributesItem.OrderedListAttribute.HasPrimary)
				attributes.OrderedListAttribute.Hidden = types.BoolPointerValue(attributesItem.OrderedListAttribute.Hidden)
				attributes.OrderedListAttribute.HideLabel = types.BoolPointerValue(attributesItem.OrderedListAttribute.HideLabel)
				attributes.OrderedListAttribute.Icon = types.StringPointerValue(attributesItem.OrderedListAttribute.Icon)
				attributes.OrderedListAttribute.ID = types.StringPointerValue(attributesItem.OrderedListAttribute.ID)
				if attributesItem.OrderedListAttribute.InfoHelpers == nil {
					attributes.OrderedListAttribute.InfoHelpers = nil
				} else {
					attributes.OrderedListAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.OrderedListAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintCustomComponent)
					attributes.OrderedListAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintText)
					attributes.OrderedListAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintTextKey)
					attributes.OrderedListAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.OrderedListAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.OrderedListAttribute.Label = types.StringValue(attributesItem.OrderedListAttribute.Label)
				attributes.OrderedListAttribute.Layout = types.StringPointerValue(attributesItem.OrderedListAttribute.Layout)
				attributes.OrderedListAttribute.Name = types.StringValue(attributesItem.OrderedListAttribute.Name)
				attributes.OrderedListAttribute.Order = types.Int64PointerValue(attributesItem.OrderedListAttribute.Order)
				attributes.OrderedListAttribute.Placeholder = types.StringPointerValue(attributesItem.OrderedListAttribute.Placeholder)
				attributes.OrderedListAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.OrderedListAttribute.PreviewValueFormatter)
				attributes.OrderedListAttribute.Protected = types.BoolPointerValue(attributesItem.OrderedListAttribute.Protected)
				attributes.OrderedListAttribute.Readonly = types.BoolPointerValue(attributesItem.OrderedListAttribute.Readonly)
				attributes.OrderedListAttribute.RenderCondition = types.StringPointerValue(attributesItem.OrderedListAttribute.RenderCondition)
				attributes.OrderedListAttribute.Repeatable = types.BoolPointerValue(attributesItem.OrderedListAttribute.Repeatable)
				attributes.OrderedListAttribute.Required = types.BoolPointerValue(attributesItem.OrderedListAttribute.Required)
				attributes.OrderedListAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount18, settingsFlagItem18 := range attributesItem.OrderedListAttribute.SettingsFlag {
					var settingsFlag18 tfTypes.SettingFlag
					settingsFlag18.Enabled = types.BoolPointerValue(settingsFlagItem18.Enabled)
					settingsFlag18.Name = types.StringPointerValue(settingsFlagItem18.Name)
					if settingsFlagCount18+1 > len(attributes.OrderedListAttribute.SettingsFlag) {
						attributes.OrderedListAttribute.SettingsFlag = append(attributes.OrderedListAttribute.SettingsFlag, settingsFlag18)
					} else {
						attributes.OrderedListAttribute.SettingsFlag[settingsFlagCount18].Enabled = settingsFlag18.Enabled
						attributes.OrderedListAttribute.SettingsFlag[settingsFlagCount18].Name = settingsFlag18.Name
					}
				}
				attributes.OrderedListAttribute.ShowInTable = types.BoolPointerValue(attributesItem.OrderedListAttribute.ShowInTable)
				attributes.OrderedListAttribute.Sortable = types.BoolPointerValue(attributesItem.OrderedListAttribute.Sortable)
				attributes.OrderedListAttribute.Type = types.StringValue(string(attributesItem.OrderedListAttribute.Type))
				attributes.OrderedListAttribute.ValueFormatter = types.StringPointerValue(attributesItem.OrderedListAttribute.ValueFormatter)
			}
			if attributesItem.PartnerOrganisationAttribute != nil {
				attributes.PartnerOrganisationAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PartnerOrganisationAttribute.Manifest != nil {
					attributes.PartnerOrganisationAttribute.Manifest = make([]types.String, 0, len(attributesItem.PartnerOrganisationAttribute.Manifest))
					for _, v := range attributesItem.PartnerOrganisationAttribute.Manifest {
						attributes.PartnerOrganisationAttribute.Manifest = append(attributes.PartnerOrganisationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PartnerOrganisationAttribute.Purpose = make([]types.String, 0, len(attributesItem.PartnerOrganisationAttribute.Purpose))
				for _, v := range attributesItem.PartnerOrganisationAttribute.Purpose {
					attributes.PartnerOrganisationAttribute.Purpose = append(attributes.PartnerOrganisationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PartnerOrganisationAttribute.Constraints == nil {
					attributes.PartnerOrganisationAttribute.Constraints = nil
				} else {
					attributes.PartnerOrganisationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PartnerOrganisationAttribute.DefaultValue == nil {
					attributes.PartnerOrganisationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult19, _ := json.Marshal(attributesItem.PartnerOrganisationAttribute.DefaultValue)
					attributes.PartnerOrganisationAttribute.DefaultValue = types.StringValue(string(defaultValueResult19))
				}
				attributes.PartnerOrganisationAttribute.Deprecated = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Deprecated)
				attributes.PartnerOrganisationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.EntityBuilderDisableEdit)
				attributes.PartnerOrganisationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.FeatureFlag)
				attributes.PartnerOrganisationAttribute.Group = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Group)
				attributes.PartnerOrganisationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.HasPrimary)
				attributes.PartnerOrganisationAttribute.Hidden = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Hidden)
				attributes.PartnerOrganisationAttribute.HideLabel = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.HideLabel)
				attributes.PartnerOrganisationAttribute.Icon = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Icon)
				attributes.PartnerOrganisationAttribute.ID = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.ID)
				if attributesItem.PartnerOrganisationAttribute.InfoHelpers == nil {
					attributes.PartnerOrganisationAttribute.InfoHelpers = nil
				} else {
					attributes.PartnerOrganisationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintCustomComponent)
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintText)
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTextKey)
					attributes.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PartnerOrganisationAttribute.Label = types.StringValue(attributesItem.PartnerOrganisationAttribute.Label)
				attributes.PartnerOrganisationAttribute.Layout = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Layout)
				attributes.PartnerOrganisationAttribute.Name = types.StringValue(attributesItem.PartnerOrganisationAttribute.Name)
				attributes.PartnerOrganisationAttribute.Order = types.Int64PointerValue(attributesItem.PartnerOrganisationAttribute.Order)
				attributes.PartnerOrganisationAttribute.Placeholder = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.Placeholder)
				attributes.PartnerOrganisationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.PreviewValueFormatter)
				attributes.PartnerOrganisationAttribute.Protected = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Protected)
				attributes.PartnerOrganisationAttribute.Readonly = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Readonly)
				attributes.PartnerOrganisationAttribute.RenderCondition = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.RenderCondition)
				attributes.PartnerOrganisationAttribute.Repeatable = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Repeatable)
				attributes.PartnerOrganisationAttribute.Required = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Required)
				attributes.PartnerOrganisationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount19, settingsFlagItem19 := range attributesItem.PartnerOrganisationAttribute.SettingsFlag {
					var settingsFlag19 tfTypes.SettingFlag
					settingsFlag19.Enabled = types.BoolPointerValue(settingsFlagItem19.Enabled)
					settingsFlag19.Name = types.StringPointerValue(settingsFlagItem19.Name)
					if settingsFlagCount19+1 > len(attributes.PartnerOrganisationAttribute.SettingsFlag) {
						attributes.PartnerOrganisationAttribute.SettingsFlag = append(attributes.PartnerOrganisationAttribute.SettingsFlag, settingsFlag19)
					} else {
						attributes.PartnerOrganisationAttribute.SettingsFlag[settingsFlagCount19].Enabled = settingsFlag19.Enabled
						attributes.PartnerOrganisationAttribute.SettingsFlag[settingsFlagCount19].Name = settingsFlag19.Name
					}
				}
				attributes.PartnerOrganisationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.ShowInTable)
				attributes.PartnerOrganisationAttribute.Sortable = types.BoolPointerValue(attributesItem.PartnerOrganisationAttribute.Sortable)
				attributes.PartnerOrganisationAttribute.Type = types.StringValue(string(attributesItem.PartnerOrganisationAttribute.Type))
				attributes.PartnerOrganisationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PartnerOrganisationAttribute.ValueFormatter)
			}
			if attributesItem.PartnerStatusAttribute != nil {
				attributes.PartnerStatusAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PartnerStatusAttribute.Manifest != nil {
					attributes.PartnerStatusAttribute.Manifest = make([]types.String, 0, len(attributesItem.PartnerStatusAttribute.Manifest))
					for _, v := range attributesItem.PartnerStatusAttribute.Manifest {
						attributes.PartnerStatusAttribute.Manifest = append(attributes.PartnerStatusAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PartnerStatusAttribute.Purpose = make([]types.String, 0, len(attributesItem.PartnerStatusAttribute.Purpose))
				for _, v := range attributesItem.PartnerStatusAttribute.Purpose {
					attributes.PartnerStatusAttribute.Purpose = append(attributes.PartnerStatusAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PartnerStatusAttribute.Constraints == nil {
					attributes.PartnerStatusAttribute.Constraints = nil
				} else {
					attributes.PartnerStatusAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PartnerStatusAttribute.DefaultValue == nil {
					attributes.PartnerStatusAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult20, _ := json.Marshal(attributesItem.PartnerStatusAttribute.DefaultValue)
					attributes.PartnerStatusAttribute.DefaultValue = types.StringValue(string(defaultValueResult20))
				}
				attributes.PartnerStatusAttribute.Deprecated = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Deprecated)
				attributes.PartnerStatusAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.EntityBuilderDisableEdit)
				attributes.PartnerStatusAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PartnerStatusAttribute.FeatureFlag)
				attributes.PartnerStatusAttribute.Group = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Group)
				attributes.PartnerStatusAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.HasPrimary)
				attributes.PartnerStatusAttribute.Hidden = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Hidden)
				attributes.PartnerStatusAttribute.HideLabel = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.HideLabel)
				attributes.PartnerStatusAttribute.Icon = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Icon)
				attributes.PartnerStatusAttribute.ID = types.StringPointerValue(attributesItem.PartnerStatusAttribute.ID)
				if attributesItem.PartnerStatusAttribute.InfoHelpers == nil {
					attributes.PartnerStatusAttribute.InfoHelpers = nil
				} else {
					attributes.PartnerStatusAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PartnerStatusAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintCustomComponent)
					attributes.PartnerStatusAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintText)
					attributes.PartnerStatusAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintTextKey)
					attributes.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PartnerStatusAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PartnerStatusAttribute.Label = types.StringValue(attributesItem.PartnerStatusAttribute.Label)
				attributes.PartnerStatusAttribute.Layout = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Layout)
				attributes.PartnerStatusAttribute.Name = types.StringValue(attributesItem.PartnerStatusAttribute.Name)
				attributes.PartnerStatusAttribute.Order = types.Int64PointerValue(attributesItem.PartnerStatusAttribute.Order)
				attributes.PartnerStatusAttribute.Placeholder = types.StringPointerValue(attributesItem.PartnerStatusAttribute.Placeholder)
				attributes.PartnerStatusAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PartnerStatusAttribute.PreviewValueFormatter)
				attributes.PartnerStatusAttribute.Protected = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Protected)
				attributes.PartnerStatusAttribute.Readonly = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Readonly)
				attributes.PartnerStatusAttribute.RenderCondition = types.StringPointerValue(attributesItem.PartnerStatusAttribute.RenderCondition)
				attributes.PartnerStatusAttribute.Repeatable = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Repeatable)
				attributes.PartnerStatusAttribute.Required = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Required)
				attributes.PartnerStatusAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount20, settingsFlagItem20 := range attributesItem.PartnerStatusAttribute.SettingsFlag {
					var settingsFlag20 tfTypes.SettingFlag
					settingsFlag20.Enabled = types.BoolPointerValue(settingsFlagItem20.Enabled)
					settingsFlag20.Name = types.StringPointerValue(settingsFlagItem20.Name)
					if settingsFlagCount20+1 > len(attributes.PartnerStatusAttribute.SettingsFlag) {
						attributes.PartnerStatusAttribute.SettingsFlag = append(attributes.PartnerStatusAttribute.SettingsFlag, settingsFlag20)
					} else {
						attributes.PartnerStatusAttribute.SettingsFlag[settingsFlagCount20].Enabled = settingsFlag20.Enabled
						attributes.PartnerStatusAttribute.SettingsFlag[settingsFlagCount20].Name = settingsFlag20.Name
					}
				}
				attributes.PartnerStatusAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.ShowInTable)
				attributes.PartnerStatusAttribute.Sortable = types.BoolPointerValue(attributesItem.PartnerStatusAttribute.Sortable)
				attributes.PartnerStatusAttribute.Type = types.StringValue(string(attributesItem.PartnerStatusAttribute.Type))
				attributes.PartnerStatusAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PartnerStatusAttribute.ValueFormatter)
			}
			if attributesItem.PaymentAttribute != nil {
				attributes.PaymentAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PaymentAttribute.Manifest != nil {
					attributes.PaymentAttribute.Manifest = make([]types.String, 0, len(attributesItem.PaymentAttribute.Manifest))
					for _, v := range attributesItem.PaymentAttribute.Manifest {
						attributes.PaymentAttribute.Manifest = append(attributes.PaymentAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PaymentAttribute.Purpose = make([]types.String, 0, len(attributesItem.PaymentAttribute.Purpose))
				for _, v := range attributesItem.PaymentAttribute.Purpose {
					attributes.PaymentAttribute.Purpose = append(attributes.PaymentAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PaymentAttribute.Constraints == nil {
					attributes.PaymentAttribute.Constraints = nil
				} else {
					attributes.PaymentAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PaymentAttribute.DefaultValue == nil {
					attributes.PaymentAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult21, _ := json.Marshal(attributesItem.PaymentAttribute.DefaultValue)
					attributes.PaymentAttribute.DefaultValue = types.StringValue(string(defaultValueResult21))
				}
				attributes.PaymentAttribute.Deprecated = types.BoolPointerValue(attributesItem.PaymentAttribute.Deprecated)
				attributes.PaymentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PaymentAttribute.EntityBuilderDisableEdit)
				attributes.PaymentAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PaymentAttribute.FeatureFlag)
				attributes.PaymentAttribute.Group = types.StringPointerValue(attributesItem.PaymentAttribute.Group)
				attributes.PaymentAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PaymentAttribute.HasPrimary)
				attributes.PaymentAttribute.Hidden = types.BoolPointerValue(attributesItem.PaymentAttribute.Hidden)
				attributes.PaymentAttribute.HideLabel = types.BoolPointerValue(attributesItem.PaymentAttribute.HideLabel)
				attributes.PaymentAttribute.Icon = types.StringPointerValue(attributesItem.PaymentAttribute.Icon)
				attributes.PaymentAttribute.ID = types.StringPointerValue(attributesItem.PaymentAttribute.ID)
				if attributesItem.PaymentAttribute.InfoHelpers == nil {
					attributes.PaymentAttribute.InfoHelpers = nil
				} else {
					attributes.PaymentAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PaymentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintCustomComponent)
					attributes.PaymentAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintText)
					attributes.PaymentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintTextKey)
					attributes.PaymentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PaymentAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PaymentAttribute.Label = types.StringValue(attributesItem.PaymentAttribute.Label)
				attributes.PaymentAttribute.Layout = types.StringPointerValue(attributesItem.PaymentAttribute.Layout)
				attributes.PaymentAttribute.Name = types.StringValue(attributesItem.PaymentAttribute.Name)
				attributes.PaymentAttribute.Order = types.Int64PointerValue(attributesItem.PaymentAttribute.Order)
				attributes.PaymentAttribute.Placeholder = types.StringPointerValue(attributesItem.PaymentAttribute.Placeholder)
				attributes.PaymentAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PaymentAttribute.PreviewValueFormatter)
				attributes.PaymentAttribute.Protected = types.BoolPointerValue(attributesItem.PaymentAttribute.Protected)
				attributes.PaymentAttribute.Readonly = types.BoolPointerValue(attributesItem.PaymentAttribute.Readonly)
				attributes.PaymentAttribute.RenderCondition = types.StringPointerValue(attributesItem.PaymentAttribute.RenderCondition)
				attributes.PaymentAttribute.Repeatable = types.BoolPointerValue(attributesItem.PaymentAttribute.Repeatable)
				attributes.PaymentAttribute.Required = types.BoolPointerValue(attributesItem.PaymentAttribute.Required)
				attributes.PaymentAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount21, settingsFlagItem21 := range attributesItem.PaymentAttribute.SettingsFlag {
					var settingsFlag21 tfTypes.SettingFlag
					settingsFlag21.Enabled = types.BoolPointerValue(settingsFlagItem21.Enabled)
					settingsFlag21.Name = types.StringPointerValue(settingsFlagItem21.Name)
					if settingsFlagCount21+1 > len(attributes.PaymentAttribute.SettingsFlag) {
						attributes.PaymentAttribute.SettingsFlag = append(attributes.PaymentAttribute.SettingsFlag, settingsFlag21)
					} else {
						attributes.PaymentAttribute.SettingsFlag[settingsFlagCount21].Enabled = settingsFlag21.Enabled
						attributes.PaymentAttribute.SettingsFlag[settingsFlagCount21].Name = settingsFlag21.Name
					}
				}
				attributes.PaymentAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PaymentAttribute.ShowInTable)
				attributes.PaymentAttribute.Sortable = types.BoolPointerValue(attributesItem.PaymentAttribute.Sortable)
				attributes.PaymentAttribute.Type = types.StringValue(string(attributesItem.PaymentAttribute.Type))
				attributes.PaymentAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PaymentAttribute.ValueFormatter)
			}
			if attributesItem.PaymentMethodRelationAttribute != nil {
				attributes.PaymentMethodRelationAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PaymentMethodRelationAttribute.Manifest != nil {
					attributes.PaymentMethodRelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.PaymentMethodRelationAttribute.Manifest))
					for _, v := range attributesItem.PaymentMethodRelationAttribute.Manifest {
						attributes.PaymentMethodRelationAttribute.Manifest = append(attributes.PaymentMethodRelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PaymentMethodRelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.PaymentMethodRelationAttribute.Purpose))
				for _, v := range attributesItem.PaymentMethodRelationAttribute.Purpose {
					attributes.PaymentMethodRelationAttribute.Purpose = append(attributes.PaymentMethodRelationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PaymentMethodRelationAttribute.Constraints == nil {
					attributes.PaymentMethodRelationAttribute.Constraints = nil
				} else {
					attributes.PaymentMethodRelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PaymentMethodRelationAttribute.DefaultValue == nil {
					attributes.PaymentMethodRelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult22, _ := json.Marshal(attributesItem.PaymentMethodRelationAttribute.DefaultValue)
					attributes.PaymentMethodRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult22))
				}
				attributes.PaymentMethodRelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Deprecated)
				attributes.PaymentMethodRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.EntityBuilderDisableEdit)
				attributes.PaymentMethodRelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.FeatureFlag)
				attributes.PaymentMethodRelationAttribute.Group = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Group)
				attributes.PaymentMethodRelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.HasPrimary)
				attributes.PaymentMethodRelationAttribute.Hidden = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Hidden)
				attributes.PaymentMethodRelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.HideLabel)
				attributes.PaymentMethodRelationAttribute.Icon = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Icon)
				attributes.PaymentMethodRelationAttribute.ID = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.ID)
				if attributesItem.PaymentMethodRelationAttribute.InfoHelpers == nil {
					attributes.PaymentMethodRelationAttribute.InfoHelpers = nil
				} else {
					attributes.PaymentMethodRelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintText)
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTextKey)
					attributes.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PaymentMethodRelationAttribute.Label = types.StringValue(attributesItem.PaymentMethodRelationAttribute.Label)
				attributes.PaymentMethodRelationAttribute.Layout = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Layout)
				attributes.PaymentMethodRelationAttribute.Name = types.StringValue(attributesItem.PaymentMethodRelationAttribute.Name)
				attributes.PaymentMethodRelationAttribute.Order = types.Int64PointerValue(attributesItem.PaymentMethodRelationAttribute.Order)
				attributes.PaymentMethodRelationAttribute.Placeholder = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.Placeholder)
				attributes.PaymentMethodRelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.PreviewValueFormatter)
				attributes.PaymentMethodRelationAttribute.Protected = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Protected)
				attributes.PaymentMethodRelationAttribute.Readonly = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Readonly)
				attributes.PaymentMethodRelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.RenderCondition)
				attributes.PaymentMethodRelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Repeatable)
				attributes.PaymentMethodRelationAttribute.Required = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Required)
				attributes.PaymentMethodRelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount22, settingsFlagItem22 := range attributesItem.PaymentMethodRelationAttribute.SettingsFlag {
					var settingsFlag22 tfTypes.SettingFlag
					settingsFlag22.Enabled = types.BoolPointerValue(settingsFlagItem22.Enabled)
					settingsFlag22.Name = types.StringPointerValue(settingsFlagItem22.Name)
					if settingsFlagCount22+1 > len(attributes.PaymentMethodRelationAttribute.SettingsFlag) {
						attributes.PaymentMethodRelationAttribute.SettingsFlag = append(attributes.PaymentMethodRelationAttribute.SettingsFlag, settingsFlag22)
					} else {
						attributes.PaymentMethodRelationAttribute.SettingsFlag[settingsFlagCount22].Enabled = settingsFlag22.Enabled
						attributes.PaymentMethodRelationAttribute.SettingsFlag[settingsFlagCount22].Name = settingsFlag22.Name
					}
				}
				attributes.PaymentMethodRelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.ShowInTable)
				attributes.PaymentMethodRelationAttribute.Sortable = types.BoolPointerValue(attributesItem.PaymentMethodRelationAttribute.Sortable)
				attributes.PaymentMethodRelationAttribute.Type = types.StringValue(string(attributesItem.PaymentMethodRelationAttribute.Type))
				attributes.PaymentMethodRelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PaymentMethodRelationAttribute.ValueFormatter)
			}
			if attributesItem.PhoneAttribute != nil {
				attributes.PhoneAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PhoneAttribute.Manifest != nil {
					attributes.PhoneAttribute.Manifest = make([]types.String, 0, len(attributesItem.PhoneAttribute.Manifest))
					for _, v := range attributesItem.PhoneAttribute.Manifest {
						attributes.PhoneAttribute.Manifest = append(attributes.PhoneAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PhoneAttribute.Purpose = make([]types.String, 0, len(attributesItem.PhoneAttribute.Purpose))
				for _, v := range attributesItem.PhoneAttribute.Purpose {
					attributes.PhoneAttribute.Purpose = append(attributes.PhoneAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PhoneAttribute.Constraints == nil {
					attributes.PhoneAttribute.Constraints = nil
				} else {
					attributes.PhoneAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PhoneAttribute.DefaultValue == nil {
					attributes.PhoneAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult23, _ := json.Marshal(attributesItem.PhoneAttribute.DefaultValue)
					attributes.PhoneAttribute.DefaultValue = types.StringValue(string(defaultValueResult23))
				}
				attributes.PhoneAttribute.Deprecated = types.BoolPointerValue(attributesItem.PhoneAttribute.Deprecated)
				attributes.PhoneAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PhoneAttribute.EntityBuilderDisableEdit)
				attributes.PhoneAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PhoneAttribute.FeatureFlag)
				attributes.PhoneAttribute.Group = types.StringPointerValue(attributesItem.PhoneAttribute.Group)
				attributes.PhoneAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PhoneAttribute.HasPrimary)
				attributes.PhoneAttribute.Hidden = types.BoolPointerValue(attributesItem.PhoneAttribute.Hidden)
				attributes.PhoneAttribute.HideLabel = types.BoolPointerValue(attributesItem.PhoneAttribute.HideLabel)
				attributes.PhoneAttribute.Icon = types.StringPointerValue(attributesItem.PhoneAttribute.Icon)
				attributes.PhoneAttribute.ID = types.StringPointerValue(attributesItem.PhoneAttribute.ID)
				if attributesItem.PhoneAttribute.InfoHelpers == nil {
					attributes.PhoneAttribute.InfoHelpers = nil
				} else {
					attributes.PhoneAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PhoneAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintCustomComponent)
					attributes.PhoneAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintText)
					attributes.PhoneAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintTextKey)
					attributes.PhoneAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PhoneAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PhoneAttribute.Label = types.StringValue(attributesItem.PhoneAttribute.Label)
				attributes.PhoneAttribute.Layout = types.StringPointerValue(attributesItem.PhoneAttribute.Layout)
				attributes.PhoneAttribute.Name = types.StringValue(attributesItem.PhoneAttribute.Name)
				attributes.PhoneAttribute.Order = types.Int64PointerValue(attributesItem.PhoneAttribute.Order)
				attributes.PhoneAttribute.Placeholder = types.StringPointerValue(attributesItem.PhoneAttribute.Placeholder)
				attributes.PhoneAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PhoneAttribute.PreviewValueFormatter)
				attributes.PhoneAttribute.Protected = types.BoolPointerValue(attributesItem.PhoneAttribute.Protected)
				attributes.PhoneAttribute.Readonly = types.BoolPointerValue(attributesItem.PhoneAttribute.Readonly)
				attributes.PhoneAttribute.RenderCondition = types.StringPointerValue(attributesItem.PhoneAttribute.RenderCondition)
				attributes.PhoneAttribute.Repeatable = types.BoolPointerValue(attributesItem.PhoneAttribute.Repeatable)
				attributes.PhoneAttribute.Required = types.BoolPointerValue(attributesItem.PhoneAttribute.Required)
				attributes.PhoneAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount23, settingsFlagItem23 := range attributesItem.PhoneAttribute.SettingsFlag {
					var settingsFlag23 tfTypes.SettingFlag
					settingsFlag23.Enabled = types.BoolPointerValue(settingsFlagItem23.Enabled)
					settingsFlag23.Name = types.StringPointerValue(settingsFlagItem23.Name)
					if settingsFlagCount23+1 > len(attributes.PhoneAttribute.SettingsFlag) {
						attributes.PhoneAttribute.SettingsFlag = append(attributes.PhoneAttribute.SettingsFlag, settingsFlag23)
					} else {
						attributes.PhoneAttribute.SettingsFlag[settingsFlagCount23].Enabled = settingsFlag23.Enabled
						attributes.PhoneAttribute.SettingsFlag[settingsFlagCount23].Name = settingsFlag23.Name
					}
				}
				attributes.PhoneAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PhoneAttribute.ShowInTable)
				attributes.PhoneAttribute.Sortable = types.BoolPointerValue(attributesItem.PhoneAttribute.Sortable)
				attributes.PhoneAttribute.Type = types.StringValue(string(attributesItem.PhoneAttribute.Type))
				attributes.PhoneAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PhoneAttribute.ValueFormatter)
			}
			if attributesItem.PriceComponentAttribute != nil {
				attributes.PriceComponentAttribute = &tfTypes.AutomationAttribute{}
				if attributesItem.PriceComponentAttribute.Manifest != nil {
					attributes.PriceComponentAttribute.Manifest = make([]types.String, 0, len(attributesItem.PriceComponentAttribute.Manifest))
					for _, v := range attributesItem.PriceComponentAttribute.Manifest {
						attributes.PriceComponentAttribute.Manifest = append(attributes.PriceComponentAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PriceComponentAttribute.Purpose = make([]types.String, 0, len(attributesItem.PriceComponentAttribute.Purpose))
				for _, v := range attributesItem.PriceComponentAttribute.Purpose {
					attributes.PriceComponentAttribute.Purpose = append(attributes.PriceComponentAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.PriceComponentAttribute.Constraints == nil {
					attributes.PriceComponentAttribute.Constraints = nil
				} else {
					attributes.PriceComponentAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.PriceComponentAttribute.DefaultValue == nil {
					attributes.PriceComponentAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult24, _ := json.Marshal(attributesItem.PriceComponentAttribute.DefaultValue)
					attributes.PriceComponentAttribute.DefaultValue = types.StringValue(string(defaultValueResult24))
				}
				attributes.PriceComponentAttribute.Deprecated = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Deprecated)
				attributes.PriceComponentAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PriceComponentAttribute.EntityBuilderDisableEdit)
				attributes.PriceComponentAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PriceComponentAttribute.FeatureFlag)
				attributes.PriceComponentAttribute.Group = types.StringPointerValue(attributesItem.PriceComponentAttribute.Group)
				attributes.PriceComponentAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PriceComponentAttribute.HasPrimary)
				attributes.PriceComponentAttribute.Hidden = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Hidden)
				attributes.PriceComponentAttribute.HideLabel = types.BoolPointerValue(attributesItem.PriceComponentAttribute.HideLabel)
				attributes.PriceComponentAttribute.Icon = types.StringPointerValue(attributesItem.PriceComponentAttribute.Icon)
				attributes.PriceComponentAttribute.ID = types.StringPointerValue(attributesItem.PriceComponentAttribute.ID)
				if attributesItem.PriceComponentAttribute.InfoHelpers == nil {
					attributes.PriceComponentAttribute.InfoHelpers = nil
				} else {
					attributes.PriceComponentAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PriceComponentAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintCustomComponent)
					attributes.PriceComponentAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintText)
					attributes.PriceComponentAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintTextKey)
					attributes.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PriceComponentAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PriceComponentAttribute.Label = types.StringValue(attributesItem.PriceComponentAttribute.Label)
				attributes.PriceComponentAttribute.Layout = types.StringPointerValue(attributesItem.PriceComponentAttribute.Layout)
				attributes.PriceComponentAttribute.Name = types.StringValue(attributesItem.PriceComponentAttribute.Name)
				attributes.PriceComponentAttribute.Order = types.Int64PointerValue(attributesItem.PriceComponentAttribute.Order)
				attributes.PriceComponentAttribute.Placeholder = types.StringPointerValue(attributesItem.PriceComponentAttribute.Placeholder)
				attributes.PriceComponentAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PriceComponentAttribute.PreviewValueFormatter)
				attributes.PriceComponentAttribute.Protected = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Protected)
				attributes.PriceComponentAttribute.Readonly = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Readonly)
				attributes.PriceComponentAttribute.RenderCondition = types.StringPointerValue(attributesItem.PriceComponentAttribute.RenderCondition)
				attributes.PriceComponentAttribute.Repeatable = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Repeatable)
				attributes.PriceComponentAttribute.Required = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Required)
				attributes.PriceComponentAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount24, settingsFlagItem24 := range attributesItem.PriceComponentAttribute.SettingsFlag {
					var settingsFlag24 tfTypes.SettingFlag
					settingsFlag24.Enabled = types.BoolPointerValue(settingsFlagItem24.Enabled)
					settingsFlag24.Name = types.StringPointerValue(settingsFlagItem24.Name)
					if settingsFlagCount24+1 > len(attributes.PriceComponentAttribute.SettingsFlag) {
						attributes.PriceComponentAttribute.SettingsFlag = append(attributes.PriceComponentAttribute.SettingsFlag, settingsFlag24)
					} else {
						attributes.PriceComponentAttribute.SettingsFlag[settingsFlagCount24].Enabled = settingsFlag24.Enabled
						attributes.PriceComponentAttribute.SettingsFlag[settingsFlagCount24].Name = settingsFlag24.Name
					}
				}
				attributes.PriceComponentAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PriceComponentAttribute.ShowInTable)
				attributes.PriceComponentAttribute.Sortable = types.BoolPointerValue(attributesItem.PriceComponentAttribute.Sortable)
				attributes.PriceComponentAttribute.Type = types.StringValue(string(attributesItem.PriceComponentAttribute.Type))
				attributes.PriceComponentAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PriceComponentAttribute.ValueFormatter)
			}
			if attributesItem.PurposeAttribute != nil {
				attributes.PurposeAttribute = &tfTypes.PurposeAttribute{}
				if attributesItem.PurposeAttribute.Manifest != nil {
					attributes.PurposeAttribute.Manifest = make([]types.String, 0, len(attributesItem.PurposeAttribute.Manifest))
					for _, v := range attributesItem.PurposeAttribute.Manifest {
						attributes.PurposeAttribute.Manifest = append(attributes.PurposeAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.PurposeAttribute.Purpose = make([]types.String, 0, len(attributesItem.PurposeAttribute.Purpose))
				for _, v := range attributesItem.PurposeAttribute.Purpose {
					attributes.PurposeAttribute.Purpose = append(attributes.PurposeAttribute.Purpose, types.StringValue(v))
				}
				attributes.PurposeAttribute.Archived = types.BoolPointerValue(attributesItem.PurposeAttribute.Archived)
				attributes.PurposeAttribute.Color = types.StringPointerValue(attributesItem.PurposeAttribute.Color)
				if attributesItem.PurposeAttribute.Constraints == nil {
					attributes.PurposeAttribute.Constraints = nil
				} else {
					attributes.PurposeAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				attributes.PurposeAttribute.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(attributesItem.PurposeAttribute.CreatedAt))
				if attributesItem.PurposeAttribute.DefaultValue == nil {
					attributes.PurposeAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult25, _ := json.Marshal(attributesItem.PurposeAttribute.DefaultValue)
					attributes.PurposeAttribute.DefaultValue = types.StringValue(string(defaultValueResult25))
				}
				attributes.PurposeAttribute.Deprecated = types.BoolPointerValue(attributesItem.PurposeAttribute.Deprecated)
				attributes.PurposeAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.PurposeAttribute.EntityBuilderDisableEdit)
				attributes.PurposeAttribute.FeatureFlag = types.StringPointerValue(attributesItem.PurposeAttribute.FeatureFlag)
				attributes.PurposeAttribute.Group = types.StringPointerValue(attributesItem.PurposeAttribute.Group)
				attributes.PurposeAttribute.HasPrimary = types.BoolPointerValue(attributesItem.PurposeAttribute.HasPrimary)
				attributes.PurposeAttribute.Hidden = types.BoolPointerValue(attributesItem.PurposeAttribute.Hidden)
				attributes.PurposeAttribute.HideLabel = types.BoolPointerValue(attributesItem.PurposeAttribute.HideLabel)
				attributes.PurposeAttribute.Icon = types.StringPointerValue(attributesItem.PurposeAttribute.Icon)
				attributes.PurposeAttribute.ID = types.StringPointerValue(attributesItem.PurposeAttribute.ID)
				if attributesItem.PurposeAttribute.InfoHelpers == nil {
					attributes.PurposeAttribute.InfoHelpers = nil
				} else {
					attributes.PurposeAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.PurposeAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintCustomComponent)
					attributes.PurposeAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintText)
					attributes.PurposeAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintTextKey)
					attributes.PurposeAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.PurposeAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.PurposeAttribute.Label = types.StringValue(attributesItem.PurposeAttribute.Label)
				attributes.PurposeAttribute.Layout = types.StringPointerValue(attributesItem.PurposeAttribute.Layout)
				attributes.PurposeAttribute.Name = types.StringValue(attributesItem.PurposeAttribute.Name)
				attributes.PurposeAttribute.Order = types.Int64PointerValue(attributesItem.PurposeAttribute.Order)
				attributes.PurposeAttribute.Parents = make([]types.String, 0, len(attributesItem.PurposeAttribute.Parents))
				for _, v := range attributesItem.PurposeAttribute.Parents {
					attributes.PurposeAttribute.Parents = append(attributes.PurposeAttribute.Parents, types.StringValue(v))
				}
				attributes.PurposeAttribute.Placeholder = types.StringPointerValue(attributesItem.PurposeAttribute.Placeholder)
				attributes.PurposeAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.PurposeAttribute.PreviewValueFormatter)
				attributes.PurposeAttribute.Protected = types.BoolPointerValue(attributesItem.PurposeAttribute.Protected)
				attributes.PurposeAttribute.Readonly = types.BoolPointerValue(attributesItem.PurposeAttribute.Readonly)
				attributes.PurposeAttribute.RenderCondition = types.StringPointerValue(attributesItem.PurposeAttribute.RenderCondition)
				attributes.PurposeAttribute.Repeatable = types.BoolPointerValue(attributesItem.PurposeAttribute.Repeatable)
				attributes.PurposeAttribute.Required = types.BoolPointerValue(attributesItem.PurposeAttribute.Required)
				attributes.PurposeAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount25, settingsFlagItem25 := range attributesItem.PurposeAttribute.SettingsFlag {
					var settingsFlag25 tfTypes.SettingFlag
					settingsFlag25.Enabled = types.BoolPointerValue(settingsFlagItem25.Enabled)
					settingsFlag25.Name = types.StringPointerValue(settingsFlagItem25.Name)
					if settingsFlagCount25+1 > len(attributes.PurposeAttribute.SettingsFlag) {
						attributes.PurposeAttribute.SettingsFlag = append(attributes.PurposeAttribute.SettingsFlag, settingsFlag25)
					} else {
						attributes.PurposeAttribute.SettingsFlag[settingsFlagCount25].Enabled = settingsFlag25.Enabled
						attributes.PurposeAttribute.SettingsFlag[settingsFlagCount25].Name = settingsFlag25.Name
					}
				}
				attributes.PurposeAttribute.ShowInTable = types.BoolPointerValue(attributesItem.PurposeAttribute.ShowInTable)
				attributes.PurposeAttribute.Slug = types.StringPointerValue(attributesItem.PurposeAttribute.Slug)
				attributes.PurposeAttribute.Sortable = types.BoolPointerValue(attributesItem.PurposeAttribute.Sortable)
				attributes.PurposeAttribute.Type = types.StringValue(string(attributesItem.PurposeAttribute.Type))
				attributes.PurposeAttribute.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(attributesItem.PurposeAttribute.UpdatedAt))
				attributes.PurposeAttribute.ValueFormatter = types.StringPointerValue(attributesItem.PurposeAttribute.ValueFormatter)
			}
			if attributesItem.RelationAttribute != nil {
				attributes.RelationAttribute = &tfTypes.RelationAttribute{}
				if attributesItem.RelationAttribute.Manifest != nil {
					attributes.RelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.RelationAttribute.Manifest))
					for _, v := range attributesItem.RelationAttribute.Manifest {
						attributes.RelationAttribute.Manifest = append(attributes.RelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.RelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.RelationAttribute.Purpose))
				for _, v := range attributesItem.RelationAttribute.Purpose {
					attributes.RelationAttribute.Purpose = append(attributes.RelationAttribute.Purpose, types.StringValue(v))
				}
				attributes.RelationAttribute.Actions = []tfTypes.RelationAttributeActions{}
				for actionsCount, actionsItem := range attributesItem.RelationAttribute.Actions {
					var actions tfTypes.RelationAttributeActions
					if actionsItem.ActionType != nil {
						actions.ActionType = types.StringValue(string(*actionsItem.ActionType))
					} else {
						actions.ActionType = types.StringNull()
					}
					actions.Default = types.BoolPointerValue(actionsItem.Default)
					actions.FeatureFlag = types.StringPointerValue(actionsItem.FeatureFlag)
					actions.Label = types.StringPointerValue(actionsItem.Label)
					if actionsItem.NewEntityItem == nil {
						actions.NewEntityItem = types.StringNull()
					} else {
						newEntityItemResult, _ := json.Marshal(actionsItem.NewEntityItem)
						actions.NewEntityItem = types.StringValue(string(newEntityItemResult))
					}
					actions.SettingsFlag = []tfTypes.SettingFlag{}
					for settingsFlagCount26, settingsFlagItem26 := range actionsItem.SettingsFlag {
						var settingsFlag26 tfTypes.SettingFlag
						settingsFlag26.Enabled = types.BoolPointerValue(settingsFlagItem26.Enabled)
						settingsFlag26.Name = types.StringPointerValue(settingsFlagItem26.Name)
						if settingsFlagCount26+1 > len(actions.SettingsFlag) {
							actions.SettingsFlag = append(actions.SettingsFlag, settingsFlag26)
						} else {
							actions.SettingsFlag[settingsFlagCount26].Enabled = settingsFlag26.Enabled
							actions.SettingsFlag[settingsFlagCount26].Name = settingsFlag26.Name
						}
					}
					if actionsCount+1 > len(attributes.RelationAttribute.Actions) {
						attributes.RelationAttribute.Actions = append(attributes.RelationAttribute.Actions, actions)
					} else {
						attributes.RelationAttribute.Actions[actionsCount].ActionType = actions.ActionType
						attributes.RelationAttribute.Actions[actionsCount].Default = actions.Default
						attributes.RelationAttribute.Actions[actionsCount].FeatureFlag = actions.FeatureFlag
						attributes.RelationAttribute.Actions[actionsCount].Label = actions.Label
						attributes.RelationAttribute.Actions[actionsCount].NewEntityItem = actions.NewEntityItem
						attributes.RelationAttribute.Actions[actionsCount].SettingsFlag = actions.SettingsFlag
					}
				}
				attributes.RelationAttribute.AddButtonLabel = types.StringPointerValue(attributesItem.RelationAttribute.AddButtonLabel)
				attributes.RelationAttribute.AllowedSchemas = make([]types.String, 0, len(attributesItem.RelationAttribute.AllowedSchemas))
				for _, v := range attributesItem.RelationAttribute.AllowedSchemas {
					attributes.RelationAttribute.AllowedSchemas = append(attributes.RelationAttribute.AllowedSchemas, types.StringValue(v))
				}
				if attributesItem.RelationAttribute.Constraints == nil {
					attributes.RelationAttribute.Constraints = nil
				} else {
					attributes.RelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.RelationAttribute.DefaultValue == nil {
					attributes.RelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult26, _ := json.Marshal(attributesItem.RelationAttribute.DefaultValue)
					attributes.RelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult26))
				}
				attributes.RelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.RelationAttribute.Deprecated)
				attributes.RelationAttribute.DetailsViewModeEnabled = types.BoolPointerValue(attributesItem.RelationAttribute.DetailsViewModeEnabled)
				if attributesItem.RelationAttribute.DrawerSize != nil {
					attributes.RelationAttribute.DrawerSize = types.StringValue(string(*attributesItem.RelationAttribute.DrawerSize))
				} else {
					attributes.RelationAttribute.DrawerSize = types.StringNull()
				}
				if attributesItem.RelationAttribute.EditMode != nil {
					attributes.RelationAttribute.EditMode = types.StringValue(string(*attributesItem.RelationAttribute.EditMode))
				} else {
					attributes.RelationAttribute.EditMode = types.StringNull()
				}
				attributes.RelationAttribute.EnableRelationPicker = types.BoolPointerValue(attributesItem.RelationAttribute.EnableRelationPicker)
				attributes.RelationAttribute.EnableRelationTags = types.BoolPointerValue(attributesItem.RelationAttribute.EnableRelationTags)
				attributes.RelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.RelationAttribute.EntityBuilderDisableEdit)
				attributes.RelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.RelationAttribute.FeatureFlag)
				attributes.RelationAttribute.Group = types.StringPointerValue(attributesItem.RelationAttribute.Group)
				attributes.RelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.RelationAttribute.HasPrimary)
				attributes.RelationAttribute.Hidden = types.BoolPointerValue(attributesItem.RelationAttribute.Hidden)
				attributes.RelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.RelationAttribute.HideLabel)
				attributes.RelationAttribute.Icon = types.StringPointerValue(attributesItem.RelationAttribute.Icon)
				attributes.RelationAttribute.ID = types.StringPointerValue(attributesItem.RelationAttribute.ID)
				if attributesItem.RelationAttribute.InfoHelpers == nil {
					attributes.RelationAttribute.InfoHelpers = nil
				} else {
					attributes.RelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.RelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.RelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintText)
					attributes.RelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintTextKey)
					attributes.RelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.RelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.RelationAttribute.Label = types.StringValue(attributesItem.RelationAttribute.Label)
				attributes.RelationAttribute.Layout = types.StringPointerValue(attributesItem.RelationAttribute.Layout)
				attributes.RelationAttribute.Name = types.StringValue(attributesItem.RelationAttribute.Name)
				attributes.RelationAttribute.Order = types.Int64PointerValue(attributesItem.RelationAttribute.Order)
				attributes.RelationAttribute.Placeholder = types.StringPointerValue(attributesItem.RelationAttribute.Placeholder)
				attributes.RelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.RelationAttribute.PreviewValueFormatter)
				attributes.RelationAttribute.Protected = types.BoolPointerValue(attributesItem.RelationAttribute.Protected)
				attributes.RelationAttribute.Readonly = types.BoolPointerValue(attributesItem.RelationAttribute.Readonly)
				if attributesItem.RelationAttribute.RelationAffinityMode != nil {
					attributes.RelationAttribute.RelationAffinityMode = types.StringValue(string(*attributesItem.RelationAttribute.RelationAffinityMode))
				} else {
					attributes.RelationAttribute.RelationAffinityMode = types.StringNull()
				}
				if attributesItem.RelationAttribute.RelationPickerFilter == nil {
					attributes.RelationAttribute.RelationPickerFilter = nil
				} else {
					attributes.RelationAttribute.RelationPickerFilter = &tfTypes.RelationAttributeRelationPickerFilter{}
					attributes.RelationAttribute.RelationPickerFilter.Q = types.StringValue(attributesItem.RelationAttribute.RelationPickerFilter.Q)
				}
				if attributesItem.RelationAttribute.RelationType != nil {
					attributes.RelationAttribute.RelationType = types.StringValue(string(*attributesItem.RelationAttribute.RelationType))
				} else {
					attributes.RelationAttribute.RelationType = types.StringNull()
				}
				attributes.RelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.RelationAttribute.RenderCondition)
				attributes.RelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.RelationAttribute.Repeatable)
				attributes.RelationAttribute.Required = types.BoolPointerValue(attributesItem.RelationAttribute.Required)
				if len(attributesItem.RelationAttribute.ReverseAttributes) > 0 {
					attributes.RelationAttribute.ReverseAttributes = make(map[string]types.String, len(attributesItem.RelationAttribute.ReverseAttributes))
					for key, value := range attributesItem.RelationAttribute.ReverseAttributes {
						attributes.RelationAttribute.ReverseAttributes[key] = types.StringValue(value)
					}
				}
				attributes.RelationAttribute.SearchPlaceholder = types.StringPointerValue(attributesItem.RelationAttribute.SearchPlaceholder)
				attributes.RelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount27, settingsFlagItem27 := range attributesItem.RelationAttribute.SettingsFlag {
					var settingsFlag27 tfTypes.SettingFlag
					settingsFlag27.Enabled = types.BoolPointerValue(settingsFlagItem27.Enabled)
					settingsFlag27.Name = types.StringPointerValue(settingsFlagItem27.Name)
					if settingsFlagCount27+1 > len(attributes.RelationAttribute.SettingsFlag) {
						attributes.RelationAttribute.SettingsFlag = append(attributes.RelationAttribute.SettingsFlag, settingsFlag27)
					} else {
						attributes.RelationAttribute.SettingsFlag[settingsFlagCount27].Enabled = settingsFlag27.Enabled
						attributes.RelationAttribute.SettingsFlag[settingsFlagCount27].Name = settingsFlag27.Name
					}
				}
				attributes.RelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.RelationAttribute.ShowInTable)
				attributes.RelationAttribute.Sortable = types.BoolPointerValue(attributesItem.RelationAttribute.Sortable)
				attributes.RelationAttribute.SummaryFields = []tfTypes.RelationAttributeSummaryFields{}
				for summaryFieldsCount, summaryFieldsItem := range attributesItem.RelationAttribute.SummaryFields {
					var summaryFields tfTypes.RelationAttributeSummaryFields
					if summaryFieldsItem.Str != nil {
						summaryFields.Str = types.StringPointerValue(summaryFieldsItem.Str)
					}
					if summaryFieldsItem.SummaryField != nil {
						summaryFields.SummaryField = &tfTypes.SummaryField{}
						summaryFields.SummaryField.DisplayAs = types.StringPointerValue(summaryFieldsItem.SummaryField.DisplayAs)
						summaryFields.SummaryField.Field = types.StringPointerValue(summaryFieldsItem.SummaryField.Field)
					}
					if summaryFieldsCount+1 > len(attributes.RelationAttribute.SummaryFields) {
						attributes.RelationAttribute.SummaryFields = append(attributes.RelationAttribute.SummaryFields, summaryFields)
					} else {
						attributes.RelationAttribute.SummaryFields[summaryFieldsCount].Str = summaryFields.Str
						attributes.RelationAttribute.SummaryFields[summaryFieldsCount].SummaryField = summaryFields.SummaryField
					}
				}
				attributes.RelationAttribute.Type = types.StringValue(string(attributesItem.RelationAttribute.Type))
				attributes.RelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.RelationAttribute.ValueFormatter)
			}
			if attributesItem.SelectAttribute != nil {
				attributes.SelectAttribute = &tfTypes.SelectAttribute{}
				if attributesItem.SelectAttribute.Manifest != nil {
					attributes.SelectAttribute.Manifest = make([]types.String, 0, len(attributesItem.SelectAttribute.Manifest))
					for _, v := range attributesItem.SelectAttribute.Manifest {
						attributes.SelectAttribute.Manifest = append(attributes.SelectAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.SelectAttribute.Purpose = make([]types.String, 0, len(attributesItem.SelectAttribute.Purpose))
				for _, v := range attributesItem.SelectAttribute.Purpose {
					attributes.SelectAttribute.Purpose = append(attributes.SelectAttribute.Purpose, types.StringValue(v))
				}
				attributes.SelectAttribute.AllowAny = types.BoolPointerValue(attributesItem.SelectAttribute.AllowAny)
				if attributesItem.SelectAttribute.Constraints == nil {
					attributes.SelectAttribute.Constraints = nil
				} else {
					attributes.SelectAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.SelectAttribute.DefaultValue == nil {
					attributes.SelectAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult27, _ := json.Marshal(attributesItem.SelectAttribute.DefaultValue)
					attributes.SelectAttribute.DefaultValue = types.StringValue(string(defaultValueResult27))
				}
				attributes.SelectAttribute.Deprecated = types.BoolPointerValue(attributesItem.SelectAttribute.Deprecated)
				attributes.SelectAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.SelectAttribute.EntityBuilderDisableEdit)
				attributes.SelectAttribute.FeatureFlag = types.StringPointerValue(attributesItem.SelectAttribute.FeatureFlag)
				attributes.SelectAttribute.Group = types.StringPointerValue(attributesItem.SelectAttribute.Group)
				attributes.SelectAttribute.HasPrimary = types.BoolPointerValue(attributesItem.SelectAttribute.HasPrimary)
				attributes.SelectAttribute.Hidden = types.BoolPointerValue(attributesItem.SelectAttribute.Hidden)
				attributes.SelectAttribute.HideLabel = types.BoolPointerValue(attributesItem.SelectAttribute.HideLabel)
				attributes.SelectAttribute.Icon = types.StringPointerValue(attributesItem.SelectAttribute.Icon)
				attributes.SelectAttribute.ID = types.StringPointerValue(attributesItem.SelectAttribute.ID)
				if attributesItem.SelectAttribute.InfoHelpers == nil {
					attributes.SelectAttribute.InfoHelpers = nil
				} else {
					attributes.SelectAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.SelectAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintCustomComponent)
					attributes.SelectAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintText)
					attributes.SelectAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintTextKey)
					attributes.SelectAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.SelectAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.SelectAttribute.Label = types.StringValue(attributesItem.SelectAttribute.Label)
				attributes.SelectAttribute.Layout = types.StringPointerValue(attributesItem.SelectAttribute.Layout)
				attributes.SelectAttribute.Name = types.StringValue(attributesItem.SelectAttribute.Name)
				if attributesItem.SelectAttribute.Options == nil {
					attributes.SelectAttribute.Options = types.StringNull()
				} else {
					optionsVarResult, _ := json.Marshal(attributesItem.SelectAttribute.Options)
					attributes.SelectAttribute.Options = types.StringValue(string(optionsVarResult))
				}
				attributes.SelectAttribute.Order = types.Int64PointerValue(attributesItem.SelectAttribute.Order)
				attributes.SelectAttribute.Placeholder = types.StringPointerValue(attributesItem.SelectAttribute.Placeholder)
				attributes.SelectAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.SelectAttribute.PreviewValueFormatter)
				attributes.SelectAttribute.Protected = types.BoolPointerValue(attributesItem.SelectAttribute.Protected)
				attributes.SelectAttribute.Readonly = types.BoolPointerValue(attributesItem.SelectAttribute.Readonly)
				attributes.SelectAttribute.RenderCondition = types.StringPointerValue(attributesItem.SelectAttribute.RenderCondition)
				attributes.SelectAttribute.Repeatable = types.BoolPointerValue(attributesItem.SelectAttribute.Repeatable)
				attributes.SelectAttribute.Required = types.BoolPointerValue(attributesItem.SelectAttribute.Required)
				attributes.SelectAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount28, settingsFlagItem28 := range attributesItem.SelectAttribute.SettingsFlag {
					var settingsFlag28 tfTypes.SettingFlag
					settingsFlag28.Enabled = types.BoolPointerValue(settingsFlagItem28.Enabled)
					settingsFlag28.Name = types.StringPointerValue(settingsFlagItem28.Name)
					if settingsFlagCount28+1 > len(attributes.SelectAttribute.SettingsFlag) {
						attributes.SelectAttribute.SettingsFlag = append(attributes.SelectAttribute.SettingsFlag, settingsFlag28)
					} else {
						attributes.SelectAttribute.SettingsFlag[settingsFlagCount28].Enabled = settingsFlag28.Enabled
						attributes.SelectAttribute.SettingsFlag[settingsFlagCount28].Name = settingsFlag28.Name
					}
				}
				attributes.SelectAttribute.ShowInTable = types.BoolPointerValue(attributesItem.SelectAttribute.ShowInTable)
				attributes.SelectAttribute.Sortable = types.BoolPointerValue(attributesItem.SelectAttribute.Sortable)
				attributes.SelectAttribute.Type = types.StringValue(string(attributesItem.SelectAttribute.Type))
				attributes.SelectAttribute.ValueFormatter = types.StringPointerValue(attributesItem.SelectAttribute.ValueFormatter)
			}
			if attributesItem.SequenceAttribute != nil {
				attributes.SequenceAttribute = &tfTypes.SequenceAttribute{}
				if attributesItem.SequenceAttribute.Manifest != nil {
					attributes.SequenceAttribute.Manifest = make([]types.String, 0, len(attributesItem.SequenceAttribute.Manifest))
					for _, v := range attributesItem.SequenceAttribute.Manifest {
						attributes.SequenceAttribute.Manifest = append(attributes.SequenceAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.SequenceAttribute.Purpose = make([]types.String, 0, len(attributesItem.SequenceAttribute.Purpose))
				for _, v := range attributesItem.SequenceAttribute.Purpose {
					attributes.SequenceAttribute.Purpose = append(attributes.SequenceAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.SequenceAttribute.Constraints == nil {
					attributes.SequenceAttribute.Constraints = nil
				} else {
					attributes.SequenceAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.SequenceAttribute.DefaultValue == nil {
					attributes.SequenceAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult28, _ := json.Marshal(attributesItem.SequenceAttribute.DefaultValue)
					attributes.SequenceAttribute.DefaultValue = types.StringValue(string(defaultValueResult28))
				}
				attributes.SequenceAttribute.Deprecated = types.BoolPointerValue(attributesItem.SequenceAttribute.Deprecated)
				attributes.SequenceAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.SequenceAttribute.EntityBuilderDisableEdit)
				attributes.SequenceAttribute.FeatureFlag = types.StringPointerValue(attributesItem.SequenceAttribute.FeatureFlag)
				attributes.SequenceAttribute.Group = types.StringPointerValue(attributesItem.SequenceAttribute.Group)
				attributes.SequenceAttribute.HasPrimary = types.BoolPointerValue(attributesItem.SequenceAttribute.HasPrimary)
				attributes.SequenceAttribute.Hidden = types.BoolPointerValue(attributesItem.SequenceAttribute.Hidden)
				attributes.SequenceAttribute.HideLabel = types.BoolPointerValue(attributesItem.SequenceAttribute.HideLabel)
				attributes.SequenceAttribute.Icon = types.StringPointerValue(attributesItem.SequenceAttribute.Icon)
				attributes.SequenceAttribute.ID = types.StringPointerValue(attributesItem.SequenceAttribute.ID)
				if attributesItem.SequenceAttribute.InfoHelpers == nil {
					attributes.SequenceAttribute.InfoHelpers = nil
				} else {
					attributes.SequenceAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.SequenceAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintCustomComponent)
					attributes.SequenceAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintText)
					attributes.SequenceAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintTextKey)
					attributes.SequenceAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.SequenceAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.SequenceAttribute.Label = types.StringValue(attributesItem.SequenceAttribute.Label)
				attributes.SequenceAttribute.Layout = types.StringPointerValue(attributesItem.SequenceAttribute.Layout)
				attributes.SequenceAttribute.Name = types.StringValue(attributesItem.SequenceAttribute.Name)
				attributes.SequenceAttribute.Order = types.Int64PointerValue(attributesItem.SequenceAttribute.Order)
				attributes.SequenceAttribute.Placeholder = types.StringPointerValue(attributesItem.SequenceAttribute.Placeholder)
				attributes.SequenceAttribute.Prefix = types.StringPointerValue(attributesItem.SequenceAttribute.Prefix)
				attributes.SequenceAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.SequenceAttribute.PreviewValueFormatter)
				attributes.SequenceAttribute.Protected = types.BoolPointerValue(attributesItem.SequenceAttribute.Protected)
				attributes.SequenceAttribute.Readonly = types.BoolPointerValue(attributesItem.SequenceAttribute.Readonly)
				attributes.SequenceAttribute.RenderCondition = types.StringPointerValue(attributesItem.SequenceAttribute.RenderCondition)
				attributes.SequenceAttribute.Repeatable = types.BoolPointerValue(attributesItem.SequenceAttribute.Repeatable)
				attributes.SequenceAttribute.Required = types.BoolPointerValue(attributesItem.SequenceAttribute.Required)
				attributes.SequenceAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount29, settingsFlagItem29 := range attributesItem.SequenceAttribute.SettingsFlag {
					var settingsFlag29 tfTypes.SettingFlag
					settingsFlag29.Enabled = types.BoolPointerValue(settingsFlagItem29.Enabled)
					settingsFlag29.Name = types.StringPointerValue(settingsFlagItem29.Name)
					if settingsFlagCount29+1 > len(attributes.SequenceAttribute.SettingsFlag) {
						attributes.SequenceAttribute.SettingsFlag = append(attributes.SequenceAttribute.SettingsFlag, settingsFlag29)
					} else {
						attributes.SequenceAttribute.SettingsFlag[settingsFlagCount29].Enabled = settingsFlag29.Enabled
						attributes.SequenceAttribute.SettingsFlag[settingsFlagCount29].Name = settingsFlag29.Name
					}
				}
				attributes.SequenceAttribute.ShowInTable = types.BoolPointerValue(attributesItem.SequenceAttribute.ShowInTable)
				attributes.SequenceAttribute.Sortable = types.BoolPointerValue(attributesItem.SequenceAttribute.Sortable)
				attributes.SequenceAttribute.StartNumber = types.Int64PointerValue(attributesItem.SequenceAttribute.StartNumber)
				attributes.SequenceAttribute.Type = types.StringValue(string(attributesItem.SequenceAttribute.Type))
				attributes.SequenceAttribute.ValueFormatter = types.StringPointerValue(attributesItem.SequenceAttribute.ValueFormatter)
			}
			if attributesItem.StatusAttribute != nil {
				attributes.StatusAttribute = &tfTypes.StatusAttribute{}
				if attributesItem.StatusAttribute.Manifest != nil {
					attributes.StatusAttribute.Manifest = make([]types.String, 0, len(attributesItem.StatusAttribute.Manifest))
					for _, v := range attributesItem.StatusAttribute.Manifest {
						attributes.StatusAttribute.Manifest = append(attributes.StatusAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.StatusAttribute.Purpose = make([]types.String, 0, len(attributesItem.StatusAttribute.Purpose))
				for _, v := range attributesItem.StatusAttribute.Purpose {
					attributes.StatusAttribute.Purpose = append(attributes.StatusAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.StatusAttribute.Constraints == nil {
					attributes.StatusAttribute.Constraints = nil
				} else {
					attributes.StatusAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.StatusAttribute.DefaultValue == nil {
					attributes.StatusAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult29, _ := json.Marshal(attributesItem.StatusAttribute.DefaultValue)
					attributes.StatusAttribute.DefaultValue = types.StringValue(string(defaultValueResult29))
				}
				attributes.StatusAttribute.Deprecated = types.BoolPointerValue(attributesItem.StatusAttribute.Deprecated)
				attributes.StatusAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.StatusAttribute.EntityBuilderDisableEdit)
				attributes.StatusAttribute.FeatureFlag = types.StringPointerValue(attributesItem.StatusAttribute.FeatureFlag)
				attributes.StatusAttribute.Group = types.StringPointerValue(attributesItem.StatusAttribute.Group)
				attributes.StatusAttribute.HasPrimary = types.BoolPointerValue(attributesItem.StatusAttribute.HasPrimary)
				attributes.StatusAttribute.Hidden = types.BoolPointerValue(attributesItem.StatusAttribute.Hidden)
				attributes.StatusAttribute.HideLabel = types.BoolPointerValue(attributesItem.StatusAttribute.HideLabel)
				attributes.StatusAttribute.Icon = types.StringPointerValue(attributesItem.StatusAttribute.Icon)
				attributes.StatusAttribute.ID = types.StringPointerValue(attributesItem.StatusAttribute.ID)
				if attributesItem.StatusAttribute.InfoHelpers == nil {
					attributes.StatusAttribute.InfoHelpers = nil
				} else {
					attributes.StatusAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.StatusAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintCustomComponent)
					attributes.StatusAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintText)
					attributes.StatusAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintTextKey)
					attributes.StatusAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.StatusAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.StatusAttribute.Label = types.StringValue(attributesItem.StatusAttribute.Label)
				attributes.StatusAttribute.Layout = types.StringPointerValue(attributesItem.StatusAttribute.Layout)
				attributes.StatusAttribute.Name = types.StringValue(attributesItem.StatusAttribute.Name)
				attributes.StatusAttribute.Options = []tfTypes.MultiSelectAttributeOptions{}
				for optionsVarCount1, optionsVarItem1 := range attributesItem.StatusAttribute.Options {
					var optionsVar1 tfTypes.MultiSelectAttributeOptions
					if optionsVarItem1.Str != nil {
						optionsVar1.Str = types.StringPointerValue(optionsVarItem1.Str)
					}
					if optionsVarItem1.StatusAttributeOptions2 != nil {
						optionsVar1.Two = &tfTypes.MultiSelectAttributeOptions2{}
						optionsVar1.Two.Title = types.StringPointerValue(optionsVarItem1.StatusAttributeOptions2.Title)
						optionsVar1.Two.Value = types.StringValue(optionsVarItem1.StatusAttributeOptions2.Value)
					}
					if optionsVarCount1+1 > len(attributes.StatusAttribute.Options) {
						attributes.StatusAttribute.Options = append(attributes.StatusAttribute.Options, optionsVar1)
					} else {
						attributes.StatusAttribute.Options[optionsVarCount1].Str = optionsVar1.Str
						attributes.StatusAttribute.Options[optionsVarCount1].Two = optionsVar1.Two
					}
				}
				attributes.StatusAttribute.Order = types.Int64PointerValue(attributesItem.StatusAttribute.Order)
				attributes.StatusAttribute.Placeholder = types.StringPointerValue(attributesItem.StatusAttribute.Placeholder)
				attributes.StatusAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.StatusAttribute.PreviewValueFormatter)
				attributes.StatusAttribute.Protected = types.BoolPointerValue(attributesItem.StatusAttribute.Protected)
				attributes.StatusAttribute.Readonly = types.BoolPointerValue(attributesItem.StatusAttribute.Readonly)
				attributes.StatusAttribute.RenderCondition = types.StringPointerValue(attributesItem.StatusAttribute.RenderCondition)
				attributes.StatusAttribute.Repeatable = types.BoolPointerValue(attributesItem.StatusAttribute.Repeatable)
				attributes.StatusAttribute.Required = types.BoolPointerValue(attributesItem.StatusAttribute.Required)
				attributes.StatusAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount30, settingsFlagItem30 := range attributesItem.StatusAttribute.SettingsFlag {
					var settingsFlag30 tfTypes.SettingFlag
					settingsFlag30.Enabled = types.BoolPointerValue(settingsFlagItem30.Enabled)
					settingsFlag30.Name = types.StringPointerValue(settingsFlagItem30.Name)
					if settingsFlagCount30+1 > len(attributes.StatusAttribute.SettingsFlag) {
						attributes.StatusAttribute.SettingsFlag = append(attributes.StatusAttribute.SettingsFlag, settingsFlag30)
					} else {
						attributes.StatusAttribute.SettingsFlag[settingsFlagCount30].Enabled = settingsFlag30.Enabled
						attributes.StatusAttribute.SettingsFlag[settingsFlagCount30].Name = settingsFlag30.Name
					}
				}
				attributes.StatusAttribute.ShowInTable = types.BoolPointerValue(attributesItem.StatusAttribute.ShowInTable)
				attributes.StatusAttribute.Sortable = types.BoolPointerValue(attributesItem.StatusAttribute.Sortable)
				attributes.StatusAttribute.Type = types.StringValue(string(attributesItem.StatusAttribute.Type))
				attributes.StatusAttribute.ValueFormatter = types.StringPointerValue(attributesItem.StatusAttribute.ValueFormatter)
			}
			if attributesItem.TagsAttribute != nil {
				attributes.TagsAttribute = &tfTypes.TagsAttribute{}
				if attributesItem.TagsAttribute.Manifest != nil {
					attributes.TagsAttribute.Manifest = make([]types.String, 0, len(attributesItem.TagsAttribute.Manifest))
					for _, v := range attributesItem.TagsAttribute.Manifest {
						attributes.TagsAttribute.Manifest = append(attributes.TagsAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.TagsAttribute.Purpose = make([]types.String, 0, len(attributesItem.TagsAttribute.Purpose))
				for _, v := range attributesItem.TagsAttribute.Purpose {
					attributes.TagsAttribute.Purpose = append(attributes.TagsAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.TagsAttribute.Constraints == nil {
					attributes.TagsAttribute.Constraints = nil
				} else {
					attributes.TagsAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.TagsAttribute.DefaultValue == nil {
					attributes.TagsAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult30, _ := json.Marshal(attributesItem.TagsAttribute.DefaultValue)
					attributes.TagsAttribute.DefaultValue = types.StringValue(string(defaultValueResult30))
				}
				attributes.TagsAttribute.Deprecated = types.BoolPointerValue(attributesItem.TagsAttribute.Deprecated)
				attributes.TagsAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.TagsAttribute.EntityBuilderDisableEdit)
				attributes.TagsAttribute.FeatureFlag = types.StringPointerValue(attributesItem.TagsAttribute.FeatureFlag)
				attributes.TagsAttribute.Group = types.StringPointerValue(attributesItem.TagsAttribute.Group)
				attributes.TagsAttribute.HasPrimary = types.BoolPointerValue(attributesItem.TagsAttribute.HasPrimary)
				attributes.TagsAttribute.Hidden = types.BoolPointerValue(attributesItem.TagsAttribute.Hidden)
				attributes.TagsAttribute.HideLabel = types.BoolPointerValue(attributesItem.TagsAttribute.HideLabel)
				attributes.TagsAttribute.Icon = types.StringPointerValue(attributesItem.TagsAttribute.Icon)
				attributes.TagsAttribute.ID = types.StringPointerValue(attributesItem.TagsAttribute.ID)
				if attributesItem.TagsAttribute.InfoHelpers == nil {
					attributes.TagsAttribute.InfoHelpers = nil
				} else {
					attributes.TagsAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.TagsAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintCustomComponent)
					attributes.TagsAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintText)
					attributes.TagsAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintTextKey)
					attributes.TagsAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.TagsAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.TagsAttribute.Label = types.StringValue(attributesItem.TagsAttribute.Label)
				attributes.TagsAttribute.Layout = types.StringPointerValue(attributesItem.TagsAttribute.Layout)
				attributes.TagsAttribute.Name = types.StringValue(attributesItem.TagsAttribute.Name)
				attributes.TagsAttribute.Options = make([]types.String, 0, len(attributesItem.TagsAttribute.Options))
				for _, v := range attributesItem.TagsAttribute.Options {
					attributes.TagsAttribute.Options = append(attributes.TagsAttribute.Options, types.StringValue(v))
				}
				attributes.TagsAttribute.Order = types.Int64PointerValue(attributesItem.TagsAttribute.Order)
				attributes.TagsAttribute.Placeholder = types.StringPointerValue(attributesItem.TagsAttribute.Placeholder)
				attributes.TagsAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.TagsAttribute.PreviewValueFormatter)
				attributes.TagsAttribute.Protected = types.BoolPointerValue(attributesItem.TagsAttribute.Protected)
				attributes.TagsAttribute.Readonly = types.BoolPointerValue(attributesItem.TagsAttribute.Readonly)
				attributes.TagsAttribute.RenderCondition = types.StringPointerValue(attributesItem.TagsAttribute.RenderCondition)
				attributes.TagsAttribute.Repeatable = types.BoolPointerValue(attributesItem.TagsAttribute.Repeatable)
				attributes.TagsAttribute.Required = types.BoolPointerValue(attributesItem.TagsAttribute.Required)
				attributes.TagsAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount31, settingsFlagItem31 := range attributesItem.TagsAttribute.SettingsFlag {
					var settingsFlag31 tfTypes.SettingFlag
					settingsFlag31.Enabled = types.BoolPointerValue(settingsFlagItem31.Enabled)
					settingsFlag31.Name = types.StringPointerValue(settingsFlagItem31.Name)
					if settingsFlagCount31+1 > len(attributes.TagsAttribute.SettingsFlag) {
						attributes.TagsAttribute.SettingsFlag = append(attributes.TagsAttribute.SettingsFlag, settingsFlag31)
					} else {
						attributes.TagsAttribute.SettingsFlag[settingsFlagCount31].Enabled = settingsFlag31.Enabled
						attributes.TagsAttribute.SettingsFlag[settingsFlagCount31].Name = settingsFlag31.Name
					}
				}
				attributes.TagsAttribute.ShowInTable = types.BoolPointerValue(attributesItem.TagsAttribute.ShowInTable)
				attributes.TagsAttribute.Sortable = types.BoolPointerValue(attributesItem.TagsAttribute.Sortable)
				attributes.TagsAttribute.Suggestions = make([]types.String, 0, len(attributesItem.TagsAttribute.Suggestions))
				for _, v := range attributesItem.TagsAttribute.Suggestions {
					attributes.TagsAttribute.Suggestions = append(attributes.TagsAttribute.Suggestions, types.StringValue(v))
				}
				attributes.TagsAttribute.Type = types.StringValue(string(attributesItem.TagsAttribute.Type))
				attributes.TagsAttribute.ValueFormatter = types.StringPointerValue(attributesItem.TagsAttribute.ValueFormatter)
			}
			if attributesItem.TextAttribute != nil {
				attributes.TextAttribute = &tfTypes.TextAttribute{}
				if attributesItem.TextAttribute.Manifest != nil {
					attributes.TextAttribute.Manifest = make([]types.String, 0, len(attributesItem.TextAttribute.Manifest))
					for _, v := range attributesItem.TextAttribute.Manifest {
						attributes.TextAttribute.Manifest = append(attributes.TextAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.TextAttribute.Purpose = make([]types.String, 0, len(attributesItem.TextAttribute.Purpose))
				for _, v := range attributesItem.TextAttribute.Purpose {
					attributes.TextAttribute.Purpose = append(attributes.TextAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.TextAttribute.Constraints == nil {
					attributes.TextAttribute.Constraints = nil
				} else {
					attributes.TextAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.TextAttribute.DefaultValue == nil {
					attributes.TextAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult31, _ := json.Marshal(attributesItem.TextAttribute.DefaultValue)
					attributes.TextAttribute.DefaultValue = types.StringValue(string(defaultValueResult31))
				}
				attributes.TextAttribute.Deprecated = types.BoolPointerValue(attributesItem.TextAttribute.Deprecated)
				attributes.TextAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.TextAttribute.EntityBuilderDisableEdit)
				attributes.TextAttribute.FeatureFlag = types.StringPointerValue(attributesItem.TextAttribute.FeatureFlag)
				attributes.TextAttribute.Group = types.StringPointerValue(attributesItem.TextAttribute.Group)
				attributes.TextAttribute.HasPrimary = types.BoolPointerValue(attributesItem.TextAttribute.HasPrimary)
				attributes.TextAttribute.Hidden = types.BoolPointerValue(attributesItem.TextAttribute.Hidden)
				attributes.TextAttribute.HideLabel = types.BoolPointerValue(attributesItem.TextAttribute.HideLabel)
				attributes.TextAttribute.Icon = types.StringPointerValue(attributesItem.TextAttribute.Icon)
				attributes.TextAttribute.ID = types.StringPointerValue(attributesItem.TextAttribute.ID)
				if attributesItem.TextAttribute.InfoHelpers == nil {
					attributes.TextAttribute.InfoHelpers = nil
				} else {
					attributes.TextAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.TextAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintCustomComponent)
					attributes.TextAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintText)
					attributes.TextAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintTextKey)
					attributes.TextAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.TextAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.TextAttribute.Label = types.StringValue(attributesItem.TextAttribute.Label)
				attributes.TextAttribute.Layout = types.StringPointerValue(attributesItem.TextAttribute.Layout)
				attributes.TextAttribute.Multiline = types.BoolPointerValue(attributesItem.TextAttribute.Multiline)
				attributes.TextAttribute.Name = types.StringValue(attributesItem.TextAttribute.Name)
				attributes.TextAttribute.Order = types.Int64PointerValue(attributesItem.TextAttribute.Order)
				attributes.TextAttribute.Placeholder = types.StringPointerValue(attributesItem.TextAttribute.Placeholder)
				attributes.TextAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.TextAttribute.PreviewValueFormatter)
				attributes.TextAttribute.Protected = types.BoolPointerValue(attributesItem.TextAttribute.Protected)
				attributes.TextAttribute.Readonly = types.BoolPointerValue(attributesItem.TextAttribute.Readonly)
				attributes.TextAttribute.RenderCondition = types.StringPointerValue(attributesItem.TextAttribute.RenderCondition)
				attributes.TextAttribute.Repeatable = types.BoolPointerValue(attributesItem.TextAttribute.Repeatable)
				attributes.TextAttribute.Required = types.BoolPointerValue(attributesItem.TextAttribute.Required)
				attributes.TextAttribute.RichText = types.BoolPointerValue(attributesItem.TextAttribute.RichText)
				if attributesItem.TextAttribute.Rows == nil {
					attributes.TextAttribute.Rows = types.StringNull()
				} else {
					rowsResult, _ := json.Marshal(attributesItem.TextAttribute.Rows)
					attributes.TextAttribute.Rows = types.StringValue(string(rowsResult))
				}
				attributes.TextAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount32, settingsFlagItem32 := range attributesItem.TextAttribute.SettingsFlag {
					var settingsFlag32 tfTypes.SettingFlag
					settingsFlag32.Enabled = types.BoolPointerValue(settingsFlagItem32.Enabled)
					settingsFlag32.Name = types.StringPointerValue(settingsFlagItem32.Name)
					if settingsFlagCount32+1 > len(attributes.TextAttribute.SettingsFlag) {
						attributes.TextAttribute.SettingsFlag = append(attributes.TextAttribute.SettingsFlag, settingsFlag32)
					} else {
						attributes.TextAttribute.SettingsFlag[settingsFlagCount32].Enabled = settingsFlag32.Enabled
						attributes.TextAttribute.SettingsFlag[settingsFlagCount32].Name = settingsFlag32.Name
					}
				}
				attributes.TextAttribute.ShowInTable = types.BoolPointerValue(attributesItem.TextAttribute.ShowInTable)
				attributes.TextAttribute.Sortable = types.BoolPointerValue(attributesItem.TextAttribute.Sortable)
				attributes.TextAttribute.Type = types.StringValue(string(attributesItem.TextAttribute.Type))
				attributes.TextAttribute.ValueFormatter = types.StringPointerValue(attributesItem.TextAttribute.ValueFormatter)
			}
			if attributesItem.UserRelationAttribute != nil {
				attributes.UserRelationAttribute = &tfTypes.UserRelationAttribute{}
				if attributesItem.UserRelationAttribute.Manifest != nil {
					attributes.UserRelationAttribute.Manifest = make([]types.String, 0, len(attributesItem.UserRelationAttribute.Manifest))
					for _, v := range attributesItem.UserRelationAttribute.Manifest {
						attributes.UserRelationAttribute.Manifest = append(attributes.UserRelationAttribute.Manifest, types.StringValue(v))
					}
				}
				attributes.UserRelationAttribute.Purpose = make([]types.String, 0, len(attributesItem.UserRelationAttribute.Purpose))
				for _, v := range attributesItem.UserRelationAttribute.Purpose {
					attributes.UserRelationAttribute.Purpose = append(attributes.UserRelationAttribute.Purpose, types.StringValue(v))
				}
				if attributesItem.UserRelationAttribute.Constraints == nil {
					attributes.UserRelationAttribute.Constraints = nil
				} else {
					attributes.UserRelationAttribute.Constraints = &tfTypes.EntityDefaultTableParams{}
				}
				if attributesItem.UserRelationAttribute.DefaultValue == nil {
					attributes.UserRelationAttribute.DefaultValue = types.StringNull()
				} else {
					defaultValueResult32, _ := json.Marshal(attributesItem.UserRelationAttribute.DefaultValue)
					attributes.UserRelationAttribute.DefaultValue = types.StringValue(string(defaultValueResult32))
				}
				attributes.UserRelationAttribute.Deprecated = types.BoolPointerValue(attributesItem.UserRelationAttribute.Deprecated)
				attributes.UserRelationAttribute.EntityBuilderDisableEdit = types.BoolPointerValue(attributesItem.UserRelationAttribute.EntityBuilderDisableEdit)
				attributes.UserRelationAttribute.FeatureFlag = types.StringPointerValue(attributesItem.UserRelationAttribute.FeatureFlag)
				attributes.UserRelationAttribute.Group = types.StringPointerValue(attributesItem.UserRelationAttribute.Group)
				attributes.UserRelationAttribute.HasPrimary = types.BoolPointerValue(attributesItem.UserRelationAttribute.HasPrimary)
				attributes.UserRelationAttribute.Hidden = types.BoolPointerValue(attributesItem.UserRelationAttribute.Hidden)
				attributes.UserRelationAttribute.HideLabel = types.BoolPointerValue(attributesItem.UserRelationAttribute.HideLabel)
				attributes.UserRelationAttribute.Icon = types.StringPointerValue(attributesItem.UserRelationAttribute.Icon)
				attributes.UserRelationAttribute.ID = types.StringPointerValue(attributesItem.UserRelationAttribute.ID)
				if attributesItem.UserRelationAttribute.InfoHelpers == nil {
					attributes.UserRelationAttribute.InfoHelpers = nil
				} else {
					attributes.UserRelationAttribute.InfoHelpers = &tfTypes.AddressAttributeAttributeWithCompositeIDInfoHelpers{}
					attributes.UserRelationAttribute.InfoHelpers.HintCustomComponent = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintCustomComponent)
					attributes.UserRelationAttribute.InfoHelpers.HintText = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintText)
					attributes.UserRelationAttribute.InfoHelpers.HintTextKey = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintTextKey)
					attributes.UserRelationAttribute.InfoHelpers.HintTooltipPlacement = types.StringPointerValue(attributesItem.UserRelationAttribute.InfoHelpers.HintTooltipPlacement)
				}
				attributes.UserRelationAttribute.Label = types.StringValue(attributesItem.UserRelationAttribute.Label)
				attributes.UserRelationAttribute.Layout = types.StringPointerValue(attributesItem.UserRelationAttribute.Layout)
				attributes.UserRelationAttribute.Multiple = types.BoolPointerValue(attributesItem.UserRelationAttribute.Multiple)
				attributes.UserRelationAttribute.Name = types.StringValue(attributesItem.UserRelationAttribute.Name)
				attributes.UserRelationAttribute.Order = types.Int64PointerValue(attributesItem.UserRelationAttribute.Order)
				attributes.UserRelationAttribute.Placeholder = types.StringPointerValue(attributesItem.UserRelationAttribute.Placeholder)
				attributes.UserRelationAttribute.PreviewValueFormatter = types.StringPointerValue(attributesItem.UserRelationAttribute.PreviewValueFormatter)
				attributes.UserRelationAttribute.Protected = types.BoolPointerValue(attributesItem.UserRelationAttribute.Protected)
				attributes.UserRelationAttribute.Readonly = types.BoolPointerValue(attributesItem.UserRelationAttribute.Readonly)
				attributes.UserRelationAttribute.RenderCondition = types.StringPointerValue(attributesItem.UserRelationAttribute.RenderCondition)
				attributes.UserRelationAttribute.Repeatable = types.BoolPointerValue(attributesItem.UserRelationAttribute.Repeatable)
				attributes.UserRelationAttribute.Required = types.BoolPointerValue(attributesItem.UserRelationAttribute.Required)
				attributes.UserRelationAttribute.SettingsFlag = []tfTypes.SettingFlag{}
				for settingsFlagCount33, settingsFlagItem33 := range attributesItem.UserRelationAttribute.SettingsFlag {
					var settingsFlag33 tfTypes.SettingFlag
					settingsFlag33.Enabled = types.BoolPointerValue(settingsFlagItem33.Enabled)
					settingsFlag33.Name = types.StringPointerValue(settingsFlagItem33.Name)
					if settingsFlagCount33+1 > len(attributes.UserRelationAttribute.SettingsFlag) {
						attributes.UserRelationAttribute.SettingsFlag = append(attributes.UserRelationAttribute.SettingsFlag, settingsFlag33)
					} else {
						attributes.UserRelationAttribute.SettingsFlag[settingsFlagCount33].Enabled = settingsFlag33.Enabled
						attributes.UserRelationAttribute.SettingsFlag[settingsFlagCount33].Name = settingsFlag33.Name
					}
				}
				attributes.UserRelationAttribute.ShowInTable = types.BoolPointerValue(attributesItem.UserRelationAttribute.ShowInTable)
				attributes.UserRelationAttribute.Sortable = types.BoolPointerValue(attributesItem.UserRelationAttribute.Sortable)
				attributes.UserRelationAttribute.Type = types.StringValue(string(attributesItem.UserRelationAttribute.Type))
				attributes.UserRelationAttribute.ValueFormatter = types.StringPointerValue(attributesItem.UserRelationAttribute.ValueFormatter)
			}
			if attributesCount+1 > len(r.Attributes) {
				r.Attributes = append(r.Attributes, attributes)
			} else {
				r.Attributes[attributesCount].AddressAttribute = attributes.AddressAttribute
				r.Attributes[attributesCount].AddressRelationAttribute = attributes.AddressRelationAttribute
				r.Attributes[attributesCount].AutomationAttribute = attributes.AutomationAttribute
				r.Attributes[attributesCount].BooleanAttribute = attributes.BooleanAttribute
				r.Attributes[attributesCount].ComputedAttribute = attributes.ComputedAttribute
				r.Attributes[attributesCount].ConsentAttribute = attributes.ConsentAttribute
				r.Attributes[attributesCount].CountryAttribute = attributes.CountryAttribute
				r.Attributes[attributesCount].CurrencyAttribute = attributes.CurrencyAttribute
				r.Attributes[attributesCount].DateAttribute = attributes.DateAttribute
				r.Attributes[attributesCount].EmailAttribute = attributes.EmailAttribute
				r.Attributes[attributesCount].FileAttribute = attributes.FileAttribute
				r.Attributes[attributesCount].InternalAttribute = attributes.InternalAttribute
				r.Attributes[attributesCount].InternalUserAttribute = attributes.InternalUserAttribute
				r.Attributes[attributesCount].InvitationEmailAttribute = attributes.InvitationEmailAttribute
				r.Attributes[attributesCount].LinkAttribute = attributes.LinkAttribute
				r.Attributes[attributesCount].MessageEmailAddressAttribute = attributes.MessageEmailAddressAttribute
				r.Attributes[attributesCount].MultiSelectAttribute = attributes.MultiSelectAttribute
				r.Attributes[attributesCount].NumberAttribute = attributes.NumberAttribute
				r.Attributes[attributesCount].OrderedListAttribute = attributes.OrderedListAttribute
				r.Attributes[attributesCount].PartnerOrganisationAttribute = attributes.PartnerOrganisationAttribute
				r.Attributes[attributesCount].PartnerStatusAttribute = attributes.PartnerStatusAttribute
				r.Attributes[attributesCount].PaymentAttribute = attributes.PaymentAttribute
				r.Attributes[attributesCount].PaymentMethodRelationAttribute = attributes.PaymentMethodRelationAttribute
				r.Attributes[attributesCount].PhoneAttribute = attributes.PhoneAttribute
				r.Attributes[attributesCount].PriceComponentAttribute = attributes.PriceComponentAttribute
				r.Attributes[attributesCount].PurposeAttribute = attributes.PurposeAttribute
				r.Attributes[attributesCount].RelationAttribute = attributes.RelationAttribute
				r.Attributes[attributesCount].SelectAttribute = attributes.SelectAttribute
				r.Attributes[attributesCount].SequenceAttribute = attributes.SequenceAttribute
				r.Attributes[attributesCount].StatusAttribute = attributes.StatusAttribute
				r.Attributes[attributesCount].TagsAttribute = attributes.TagsAttribute
				r.Attributes[attributesCount].TextAttribute = attributes.TextAttribute
				r.Attributes[attributesCount].UserRelationAttribute = attributes.UserRelationAttribute
			}
		}
		r.CompositeID = types.StringPointerValue(resp.CompositeID)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.Schema = types.StringPointerValue(resp.Schema)
		r.SettingsFlag = []tfTypes.SettingFlag{}
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount34, settingsFlagItem34 := range resp.SettingsFlag {
			var settingsFlag34 tfTypes.SettingFlag
			settingsFlag34.Enabled = types.BoolPointerValue(settingsFlagItem34.Enabled)
			settingsFlag34.Name = types.StringPointerValue(settingsFlagItem34.Name)
			if settingsFlagCount34+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag34)
			} else {
				r.SettingsFlag[settingsFlagCount34].Enabled = settingsFlag34.Enabled
				r.SettingsFlag[settingsFlagCount34].Name = settingsFlag34.Name
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UIHooks = []tfTypes.UIHooks{}
		if len(r.UIHooks) > len(resp.UIHooks) {
			r.UIHooks = r.UIHooks[:len(resp.UIHooks)]
		}
		for uiHooksCount, uiHooksItem := range resp.UIHooks {
			var uiHooks tfTypes.UIHooks
			if uiHooksItem.AdditionalProperties == nil {
				uiHooks.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult, _ := json.Marshal(uiHooksItem.AdditionalProperties)
				uiHooks.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
			}
			uiHooks.Component = types.StringPointerValue(uiHooksItem.Component)
			uiHooks.Disabled = types.BoolPointerValue(uiHooksItem.Disabled)
			uiHooks.GroupExpanded = types.BoolPointerValue(uiHooksItem.GroupExpanded)
			uiHooks.Header = types.BoolPointerValue(uiHooksItem.Header)
			uiHooks.Hook = types.StringValue(uiHooksItem.Hook)
			uiHooks.Icon = types.StringPointerValue(uiHooksItem.Icon)
			uiHooks.Import = types.StringPointerValue(uiHooksItem.Import)
			uiHooks.Order = types.Int64PointerValue(uiHooksItem.Order)
			uiHooks.RenderCondition = types.StringPointerValue(uiHooksItem.RenderCondition)
			if uiHooksItem.RequiredPermission == nil {
				uiHooks.RequiredPermission = nil
			} else {
				uiHooks.RequiredPermission = &tfTypes.RequiredPermission{}
				uiHooks.RequiredPermission.Action = types.StringValue(uiHooksItem.RequiredPermission.Action)
				uiHooks.RequiredPermission.Resource = types.StringPointerValue(uiHooksItem.RequiredPermission.Resource)
			}
			uiHooks.Route = types.StringPointerValue(uiHooksItem.Route)
			uiHooks.Title = types.StringPointerValue(uiHooksItem.Title)
			if uiHooksCount+1 > len(r.UIHooks) {
				r.UIHooks = append(r.UIHooks, uiHooks)
			} else {
				r.UIHooks[uiHooksCount].AdditionalProperties = uiHooks.AdditionalProperties
				r.UIHooks[uiHooksCount].Component = uiHooks.Component
				r.UIHooks[uiHooksCount].Disabled = uiHooks.Disabled
				r.UIHooks[uiHooksCount].GroupExpanded = uiHooks.GroupExpanded
				r.UIHooks[uiHooksCount].Header = uiHooks.Header
				r.UIHooks[uiHooksCount].Hook = uiHooks.Hook
				r.UIHooks[uiHooksCount].Icon = uiHooks.Icon
				r.UIHooks[uiHooksCount].Import = uiHooks.Import
				r.UIHooks[uiHooksCount].Order = uiHooks.Order
				r.UIHooks[uiHooksCount].RenderCondition = uiHooks.RenderCondition
				r.UIHooks[uiHooksCount].RequiredPermission = uiHooks.RequiredPermission
				r.UIHooks[uiHooksCount].Route = uiHooks.Route
				r.UIHooks[uiHooksCount].Title = uiHooks.Title
			}
		}
	}

	return diags
}
