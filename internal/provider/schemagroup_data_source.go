// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SchemaGroupDataSource{}
var _ datasource.DataSourceWithConfigure = &SchemaGroupDataSource{}

func NewSchemaGroupDataSource() datasource.DataSource {
	return &SchemaGroupDataSource{}
}

// SchemaGroupDataSource is the data source implementation.
type SchemaGroupDataSource struct {
	client *sdk.SDK
}

// SchemaGroupDataSourceModel describes the data model.
type SchemaGroupDataSourceModel struct {
	CompositeID      types.String              `tfsdk:"composite_id"`
	Expanded         types.Bool                `tfsdk:"expanded"`
	FeatureFlag      types.String              `tfsdk:"feature_flag"`
	ID               types.String              `tfsdk:"id"`
	InfoTooltipTitle *tfTypes.InfoTooltipTitle `tfsdk:"info_tooltip_title"`
	Label            types.String              `tfsdk:"label"`
	Manifest         []types.String            `tfsdk:"manifest"`
	Order            types.Int64               `tfsdk:"order"`
	Purpose          []types.String            `tfsdk:"purpose"`
	RenderCondition  types.String              `tfsdk:"render_condition"`
	Schema           types.String              `tfsdk:"schema"`
	SettingsFlag     []tfTypes.SettingFlag     `tfsdk:"settings_flag"`
}

// Metadata returns the data source type name.
func (r *SchemaGroupDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema_group"
}

// Schema defines the schema for the data source.
func (r *SchemaGroupDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SchemaGroup DataSource",

		Attributes: map[string]schema.Attribute{
			"composite_id": schema.StringAttribute{
				Required:    true,
				Description: `Schema Slug and the Group ID`,
			},
			"expanded": schema.BoolAttribute{
				Computed:    true,
				Description: `Expanded by default`,
			},
			"feature_flag": schema.StringAttribute{
				Computed:    true,
				Description: `This group should only be active when the feature flag is enabled`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"info_tooltip_title": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"default": schema.StringAttribute{
						Computed:    true,
						Description: `Default string for info tooltip`,
					},
					"key": schema.StringAttribute{
						Computed:    true,
						Description: `Translation key for info tooltip`,
					},
				},
			},
			"label": schema.StringAttribute{
				Computed: true,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the schema group`,
			},
			"order": schema.Int64Attribute{
				Computed:    true,
				Description: `Render order of the group`,
			},
			"purpose": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Only render group when one of the purposes is enabled`,
			},
			"render_condition": schema.StringAttribute{
				Computed:    true,
				Description: `Only render group when render_condition resolves to true`,
			},
			"schema": schema.StringAttribute{
				Computed:    true,
				Description: `Schema slug the group belongs to`,
			},
			"settings_flag": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `Whether the setting should be enabled or not`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the organization setting to check`,
						},
					},
				},
				Description: `This group should only be active when all the settings have the correct value`,
			},
		},
	}
}

func (r *SchemaGroupDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaGroupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SchemaGroupDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSchemaGroupRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Schemas.GetSchemaGroup(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.EntitySchemaGroupWithCompositeID != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedEntitySchemaGroupWithCompositeID(ctx, res.EntitySchemaGroupWithCompositeID)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
