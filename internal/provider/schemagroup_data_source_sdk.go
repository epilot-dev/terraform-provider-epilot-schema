// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SchemaGroupDataSourceModel) ToOperationsGetSchemaGroupRequest(ctx context.Context) (*operations.GetSchemaGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	out := operations.GetSchemaGroupRequest{
		CompositeID: compositeID,
	}

	return &out, diags
}

func (r *SchemaGroupDataSourceModel) RefreshFromSharedEntitySchemaGroupWithCompositeID(ctx context.Context, resp *shared.EntitySchemaGroupWithCompositeID) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Manifest != nil {
			r.Manifest = make([]types.String, 0, len(resp.Manifest))
			for _, v := range resp.Manifest {
				r.Manifest = append(r.Manifest, types.StringValue(v))
			}
		}
		r.Purpose = make([]types.String, 0, len(resp.Purpose))
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.CompositeID = types.StringPointerValue(resp.CompositeID)
		r.Expanded = types.BoolPointerValue(resp.Expanded)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.InfoTooltipTitle == nil {
			r.InfoTooltipTitle = nil
		} else {
			r.InfoTooltipTitle = &tfTypes.InfoTooltipTitle{}
			r.InfoTooltipTitle.Default = types.StringPointerValue(resp.InfoTooltipTitle.Default)
			r.InfoTooltipTitle.Key = types.StringPointerValue(resp.InfoTooltipTitle.Key)
		}
		r.Label = types.StringValue(resp.Label)
		r.Order = types.Int64PointerValue(resp.Order)
		r.RenderCondition = types.StringPointerValue(resp.RenderCondition)
		r.Schema = types.StringPointerValue(resp.Schema)
		r.SettingsFlag = []tfTypes.SettingFlag{}
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount, settingsFlagItem := range resp.SettingsFlag {
			var settingsFlag tfTypes.SettingFlag
			settingsFlag.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
			settingsFlag.Name = types.StringPointerValue(settingsFlagItem.Name)
			if settingsFlagCount+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag)
			} else {
				r.SettingsFlag[settingsFlagCount].Enabled = settingsFlag.Enabled
				r.SettingsFlag[settingsFlagCount].Name = settingsFlag.Name
			}
		}
	}

	return diags
}
