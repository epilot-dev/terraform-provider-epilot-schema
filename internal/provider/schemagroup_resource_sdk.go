// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SchemaGroupResourceModel) ToSharedEntitySchemaGroupWithCompositeIDInput() *shared.EntitySchemaGroupWithCompositeIDInput {
	label := r.Label.ValueString()
	id := r.ID.ValueString()
	order := new(int64)
	if !r.Order.IsUnknown() && !r.Order.IsNull() {
		*order = r.Order.ValueInt64()
	} else {
		order = nil
	}
	expanded := new(bool)
	if !r.Expanded.IsUnknown() && !r.Expanded.IsNull() {
		*expanded = r.Expanded.ValueBool()
	} else {
		expanded = nil
	}
	renderCondition := new(string)
	if !r.RenderCondition.IsUnknown() && !r.RenderCondition.IsNull() {
		*renderCondition = r.RenderCondition.ValueString()
	} else {
		renderCondition = nil
	}
	var purpose []string = []string{}
	for _, purposeItem := range r.Purpose {
		purpose = append(purpose, purposeItem.ValueString())
	}
	featureFlag := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag = r.FeatureFlag.ValueString()
	} else {
		featureFlag = nil
	}
	var settingsFlag []shared.SettingFlag = []shared.SettingFlag{}
	for _, settingsFlagItem := range r.SettingsFlag {
		name := new(string)
		if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
			*name = settingsFlagItem.Name.ValueString()
		} else {
			name = nil
		}
		enabled := new(bool)
		if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
			*enabled = settingsFlagItem.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		settingsFlag = append(settingsFlag, shared.SettingFlag{
			Name:    name,
			Enabled: enabled,
		})
	}
	var infoTooltipTitle *shared.EntitySchemaGroupWithCompositeIDInfoTooltipTitle
	if r.InfoTooltipTitle != nil {
		key := new(string)
		if !r.InfoTooltipTitle.Key.IsUnknown() && !r.InfoTooltipTitle.Key.IsNull() {
			*key = r.InfoTooltipTitle.Key.ValueString()
		} else {
			key = nil
		}
		defaultVar := new(string)
		if !r.InfoTooltipTitle.Default.IsUnknown() && !r.InfoTooltipTitle.Default.IsNull() {
			*defaultVar = r.InfoTooltipTitle.Default.ValueString()
		} else {
			defaultVar = nil
		}
		infoTooltipTitle = &shared.EntitySchemaGroupWithCompositeIDInfoTooltipTitle{
			Key:     key,
			Default: defaultVar,
		}
	}
	out := shared.EntitySchemaGroupWithCompositeIDInput{
		Label:            label,
		ID:               id,
		Order:            order,
		Expanded:         expanded,
		RenderCondition:  renderCondition,
		Purpose:          purpose,
		FeatureFlag:      featureFlag,
		SettingsFlag:     settingsFlag,
		InfoTooltipTitle: infoTooltipTitle,
	}
	return &out
}

func (r *SchemaGroupResourceModel) RefreshFromSharedEntitySchemaGroupWithCompositeID(resp *shared.EntitySchemaGroupWithCompositeID) {
	if resp != nil {
		r.Purpose = []types.String{}
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.CompositeID = types.StringPointerValue(resp.CompositeID)
		r.Expanded = types.BoolPointerValue(resp.Expanded)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.ID = types.StringValue(resp.ID)
		if resp.InfoTooltipTitle == nil {
			r.InfoTooltipTitle = nil
		} else {
			r.InfoTooltipTitle = &tfTypes.InfoTooltipTitle{}
			r.InfoTooltipTitle.Default = types.StringPointerValue(resp.InfoTooltipTitle.Default)
			r.InfoTooltipTitle.Key = types.StringPointerValue(resp.InfoTooltipTitle.Key)
		}
		r.Label = types.StringValue(resp.Label)
		r.Order = types.Int64PointerValue(resp.Order)
		r.RenderCondition = types.StringPointerValue(resp.RenderCondition)
		r.SettingsFlag = []tfTypes.SettingFlag{}
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount, settingsFlagItem := range resp.SettingsFlag {
			var settingsFlag1 tfTypes.SettingFlag
			settingsFlag1.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
			settingsFlag1.Name = types.StringPointerValue(settingsFlagItem.Name)
			if settingsFlagCount+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag1)
			} else {
				r.SettingsFlag[settingsFlagCount].Enabled = settingsFlag1.Enabled
				r.SettingsFlag[settingsFlagCount].Name = settingsFlag1.Name
			}
		}
	}
}
