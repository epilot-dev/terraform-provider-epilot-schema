// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/epilot/terraform-provider-epilot-schema/internal/provider/types"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SchemaGroupResourceModel) ToSharedEntitySchemaGroupWithCompositeIDInput(ctx context.Context) (*shared.EntitySchemaGroupWithCompositeIDInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	var label string
	label = r.Label.ValueString()

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	order := new(int64)
	if !r.Order.IsUnknown() && !r.Order.IsNull() {
		*order = r.Order.ValueInt64()
	} else {
		order = nil
	}
	expanded := new(bool)
	if !r.Expanded.IsUnknown() && !r.Expanded.IsNull() {
		*expanded = r.Expanded.ValueBool()
	} else {
		expanded = nil
	}
	renderCondition := new(string)
	if !r.RenderCondition.IsUnknown() && !r.RenderCondition.IsNull() {
		*renderCondition = r.RenderCondition.ValueString()
	} else {
		renderCondition = nil
	}
	purpose := make([]string, 0, len(r.Purpose))
	for _, purposeItem := range r.Purpose {
		purpose = append(purpose, purposeItem.ValueString())
	}
	var manifest []string
	if r.Manifest != nil {
		manifest = make([]string, 0, len(r.Manifest))
		for _, manifestItem := range r.Manifest {
			manifest = append(manifest, manifestItem.ValueString())
		}
	}
	featureFlag := new(string)
	if !r.FeatureFlag.IsUnknown() && !r.FeatureFlag.IsNull() {
		*featureFlag = r.FeatureFlag.ValueString()
	} else {
		featureFlag = nil
	}
	settingsFlag := make([]shared.SettingFlag, 0, len(r.SettingsFlag))
	for _, settingsFlagItem := range r.SettingsFlag {
		name := new(string)
		if !settingsFlagItem.Name.IsUnknown() && !settingsFlagItem.Name.IsNull() {
			*name = settingsFlagItem.Name.ValueString()
		} else {
			name = nil
		}
		enabled := new(bool)
		if !settingsFlagItem.Enabled.IsUnknown() && !settingsFlagItem.Enabled.IsNull() {
			*enabled = settingsFlagItem.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		settingsFlag = append(settingsFlag, shared.SettingFlag{
			Name:    name,
			Enabled: enabled,
		})
	}
	var infoTooltipTitle *shared.InfoTooltipTitle
	if r.InfoTooltipTitle != nil {
		key := new(string)
		if !r.InfoTooltipTitle.Key.IsUnknown() && !r.InfoTooltipTitle.Key.IsNull() {
			*key = r.InfoTooltipTitle.Key.ValueString()
		} else {
			key = nil
		}
		defaultVar := new(string)
		if !r.InfoTooltipTitle.Default.IsUnknown() && !r.InfoTooltipTitle.Default.IsNull() {
			*defaultVar = r.InfoTooltipTitle.Default.ValueString()
		} else {
			defaultVar = nil
		}
		infoTooltipTitle = &shared.InfoTooltipTitle{
			Key:     key,
			Default: defaultVar,
		}
	}
	schema := new(string)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = r.Schema.ValueString()
	} else {
		schema = nil
	}
	out := shared.EntitySchemaGroupWithCompositeIDInput{
		Label:            label,
		ID:               id,
		Order:            order,
		Expanded:         expanded,
		RenderCondition:  renderCondition,
		Purpose:          purpose,
		Manifest:         manifest,
		FeatureFlag:      featureFlag,
		SettingsFlag:     settingsFlag,
		InfoTooltipTitle: infoTooltipTitle,
		Schema:           schema,
	}

	return &out, diags
}

func (r *SchemaGroupResourceModel) ToOperationsPutSchemaGroupRequest(ctx context.Context) (*operations.PutSchemaGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	entitySchemaGroupWithCompositeID, entitySchemaGroupWithCompositeIDDiags := r.ToSharedEntitySchemaGroupWithCompositeIDInput(ctx)
	diags.Append(entitySchemaGroupWithCompositeIDDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSchemaGroupRequest{
		CompositeID:                      compositeID,
		EntitySchemaGroupWithCompositeID: entitySchemaGroupWithCompositeID,
	}

	return &out, diags
}

func (r *SchemaGroupResourceModel) ToOperationsGetSchemaGroupRequest(ctx context.Context) (*operations.GetSchemaGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	out := operations.GetSchemaGroupRequest{
		CompositeID: compositeID,
	}

	return &out, diags
}

func (r *SchemaGroupResourceModel) ToOperationsDeleteSchemaGroupRequest(ctx context.Context) (*operations.DeleteSchemaGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var compositeID string
	compositeID = r.CompositeID.ValueString()

	out := operations.DeleteSchemaGroupRequest{
		CompositeID: compositeID,
	}

	return &out, diags
}

func (r *SchemaGroupResourceModel) RefreshFromSharedEntitySchemaGroupWithCompositeID(ctx context.Context, resp *shared.EntitySchemaGroupWithCompositeID) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Manifest != nil {
			r.Manifest = make([]types.String, 0, len(resp.Manifest))
			for _, v := range resp.Manifest {
				r.Manifest = append(r.Manifest, types.StringValue(v))
			}
		}
		r.Purpose = make([]types.String, 0, len(resp.Purpose))
		for _, v := range resp.Purpose {
			r.Purpose = append(r.Purpose, types.StringValue(v))
		}
		r.CompositeID = types.StringPointerValue(resp.CompositeID)
		r.Expanded = types.BoolPointerValue(resp.Expanded)
		r.FeatureFlag = types.StringPointerValue(resp.FeatureFlag)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.InfoTooltipTitle == nil {
			r.InfoTooltipTitle = nil
		} else {
			r.InfoTooltipTitle = &tfTypes.InfoTooltipTitle{}
			r.InfoTooltipTitle.Default = types.StringPointerValue(resp.InfoTooltipTitle.Default)
			r.InfoTooltipTitle.Key = types.StringPointerValue(resp.InfoTooltipTitle.Key)
		}
		r.Label = types.StringValue(resp.Label)
		r.Order = types.Int64PointerValue(resp.Order)
		r.RenderCondition = types.StringPointerValue(resp.RenderCondition)
		r.Schema = types.StringPointerValue(resp.Schema)
		r.SettingsFlag = []tfTypes.SettingFlag{}
		if len(r.SettingsFlag) > len(resp.SettingsFlag) {
			r.SettingsFlag = r.SettingsFlag[:len(resp.SettingsFlag)]
		}
		for settingsFlagCount, settingsFlagItem := range resp.SettingsFlag {
			var settingsFlag tfTypes.SettingFlag
			settingsFlag.Enabled = types.BoolPointerValue(settingsFlagItem.Enabled)
			settingsFlag.Name = types.StringPointerValue(settingsFlagItem.Name)
			if settingsFlagCount+1 > len(r.SettingsFlag) {
				r.SettingsFlag = append(r.SettingsFlag, settingsFlag)
			} else {
				r.SettingsFlag[settingsFlagCount].Enabled = settingsFlag.Enabled
				r.SettingsFlag[settingsFlagCount].Name = settingsFlag.Name
			}
		}
	}

	return diags
}
