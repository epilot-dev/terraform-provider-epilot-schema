// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SchemaGroupHeadlineDataSource{}
var _ datasource.DataSourceWithConfigure = &SchemaGroupHeadlineDataSource{}

func NewSchemaGroupHeadlineDataSource() datasource.DataSource {
	return &SchemaGroupHeadlineDataSource{}
}

// SchemaGroupHeadlineDataSource is the data source implementation.
type SchemaGroupHeadlineDataSource struct {
	client *sdk.SDK
}

// SchemaGroupHeadlineDataSourceModel describes the data model.
type SchemaGroupHeadlineDataSourceModel struct {
	CompositeID   types.String   `tfsdk:"composite_id"`
	Divider       types.String   `tfsdk:"divider"`
	EnableDivider types.Bool     `tfsdk:"enable_divider"`
	Group         types.String   `tfsdk:"group"`
	ID            types.String   `tfsdk:"id"`
	Label         types.String   `tfsdk:"label"`
	Layout        types.String   `tfsdk:"layout"`
	Manifest      []types.String `tfsdk:"manifest"`
	Name          types.String   `tfsdk:"name"`
	Order         types.Int64    `tfsdk:"order"`
	Schema        types.String   `tfsdk:"schema"`
	Type          types.String   `tfsdk:"type"`
}

// Metadata returns the data source type name.
func (r *SchemaGroupHeadlineDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema_group_headline"
}

// Schema defines the schema for the data source.
func (r *SchemaGroupHeadlineDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SchemaGroupHeadline DataSource",

		Attributes: map[string]schema.Attribute{
			"composite_id": schema.StringAttribute{
				Required:    true,
				Description: `Schema Slug and the Schema Group ID`,
			},
			"divider": schema.StringAttribute{
				Computed: true,
			},
			"enable_divider": schema.BoolAttribute{
				Computed: true,
			},
			"group": schema.StringAttribute{
				Computed:    true,
				Description: `The group of headline attribute`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"label": schema.StringAttribute{
				Computed: true,
			},
			"layout": schema.StringAttribute{
				Computed: true,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the schema group headline`,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"order": schema.Int64Attribute{
				Computed:    true,
				Description: `The order of headline attribute`,
			},
			"schema": schema.StringAttribute{
				Computed:    true,
				Description: `Schema slug the capability belongs to`,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SchemaGroupHeadlineDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaGroupHeadlineDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SchemaGroupHeadlineDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var compositeID string
	compositeID = data.CompositeID.ValueString()

	request := operations.GetSchemaGroupHeadlineRequest{
		CompositeID: compositeID,
	}
	res, err := r.client.Schemas.GetSchemaGroupHeadline(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GroupHeadlineWithCompositeID != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroupHeadlineWithCompositeID(res.GroupHeadlineWithCompositeID)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
