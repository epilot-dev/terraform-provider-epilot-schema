// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SchemaGroupHeadlineResource{}
var _ resource.ResourceWithImportState = &SchemaGroupHeadlineResource{}

func NewSchemaGroupHeadlineResource() resource.Resource {
	return &SchemaGroupHeadlineResource{}
}

// SchemaGroupHeadlineResource defines the resource implementation.
type SchemaGroupHeadlineResource struct {
	client *sdk.SDK
}

// SchemaGroupHeadlineResourceModel describes the resource data model.
type SchemaGroupHeadlineResourceModel struct {
	CompositeID   types.String   `tfsdk:"composite_id"`
	Divider       types.String   `tfsdk:"divider"`
	EnableDivider types.Bool     `tfsdk:"enable_divider"`
	Group         types.String   `tfsdk:"group"`
	ID            types.String   `tfsdk:"id"`
	Label         types.String   `tfsdk:"label"`
	Layout        types.String   `tfsdk:"layout"`
	Manifest      []types.String `tfsdk:"manifest"`
	Name          types.String   `tfsdk:"name"`
	Order         types.Int64    `tfsdk:"order"`
	Schema        types.String   `tfsdk:"schema"`
	Type          types.String   `tfsdk:"type"`
}

func (r *SchemaGroupHeadlineResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema_group_headline"
}

func (r *SchemaGroupHeadlineResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SchemaGroupHeadline Resource",
		Attributes: map[string]schema.Attribute{
			"composite_id": schema.StringAttribute{
				Computed:    true,
				Description: `Schema Slug and the Schema Group ID`,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^.+:.+$`), "must match pattern "+regexp.MustCompile(`^.+:.+$`).String()),
				},
			},
			"divider": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `must be one of ["top_divider", "bottom_divider"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"top_divider",
						"bottom_divider",
					),
				},
			},
			"enable_divider": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Default: false`,
			},
			"group": schema.StringAttribute{
				Required:    true,
				Description: `The group of headline attribute`,
			},
			"id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"label": schema.StringAttribute{
				Required: true,
			},
			"layout": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the schema group headline`,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"order": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `The order of headline attribute`,
			},
			"schema": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Schema slug the capability belongs to`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `must be "headline"`,
				Validators: []validator.String{
					stringvalidator.OneOf("headline"),
				},
			},
		},
	}
}

func (r *SchemaGroupHeadlineResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaGroupHeadlineResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SchemaGroupHeadlineResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedGroupHeadlineWithCompositeIDInput()
	res, err := r.client.Schemas.CreateSchemaGroupHeadline(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GroupHeadlineWithCompositeID != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroupHeadlineWithCompositeID(res.GroupHeadlineWithCompositeID)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaGroupHeadlineResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SchemaGroupHeadlineResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var compositeID string
	compositeID = data.CompositeID.ValueString()

	request := operations.GetSchemaGroupHeadlineRequest{
		CompositeID: compositeID,
	}
	res, err := r.client.Schemas.GetSchemaGroupHeadline(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GroupHeadlineWithCompositeID != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroupHeadlineWithCompositeID(res.GroupHeadlineWithCompositeID)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaGroupHeadlineResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SchemaGroupHeadlineResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var compositeID string
	compositeID = data.CompositeID.ValueString()

	groupHeadlineWithCompositeID := data.ToSharedGroupHeadlineWithCompositeIDInput()
	request := operations.PutSchemaGroupHeadlineRequest{
		CompositeID:                  compositeID,
		GroupHeadlineWithCompositeID: groupHeadlineWithCompositeID,
	}
	res, err := r.client.Schemas.PutSchemaGroupHeadline(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GroupHeadlineWithCompositeID != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroupHeadlineWithCompositeID(res.GroupHeadlineWithCompositeID)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaGroupHeadlineResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SchemaGroupHeadlineResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var compositeID string
	compositeID = data.CompositeID.ValueString()

	request := operations.DeleteSchemaGroupHeadlineRequest{
		CompositeID: compositeID,
	}
	res, err := r.client.Schemas.DeleteSchemaGroupHeadline(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SchemaGroupHeadlineResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("composite_id"), req.ID)...)
}
