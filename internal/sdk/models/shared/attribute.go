// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
	"time"
)

// PartnerOrganisationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PartnerOrganisationAttributeConstraints struct {
}

// PartnerOrganisationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PartnerOrganisationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PartnerOrganisationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PartnerOrganisationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PartnerOrganisationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PartnerOrganisationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PartnerOrganisationAttributeType string

const (
	PartnerOrganisationAttributeTypePartnerOrganisation PartnerOrganisationAttributeType = "partner_organisation"
)

func (e PartnerOrganisationAttributeType) ToPointer() *PartnerOrganisationAttributeType {
	return &e
}
func (e *PartnerOrganisationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_organisation":
		*e = PartnerOrganisationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerOrganisationAttributeType: %v", v)
	}
}

// PartnerOrganisationAttribute - Shared Partner Organisations
type PartnerOrganisationAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PartnerOrganisationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PartnerOrganisationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PartnerOrganisationAttributeType        `json:"type,omitempty"`
}

func (p PartnerOrganisationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerOrganisationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PartnerOrganisationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PartnerOrganisationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PartnerOrganisationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *PartnerOrganisationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *PartnerOrganisationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *PartnerOrganisationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *PartnerOrganisationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *PartnerOrganisationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *PartnerOrganisationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *PartnerOrganisationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *PartnerOrganisationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *PartnerOrganisationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *PartnerOrganisationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PartnerOrganisationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *PartnerOrganisationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *PartnerOrganisationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *PartnerOrganisationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *PartnerOrganisationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *PartnerOrganisationAttribute) GetConstraints() *PartnerOrganisationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *PartnerOrganisationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *PartnerOrganisationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *PartnerOrganisationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *PartnerOrganisationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *PartnerOrganisationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *PartnerOrganisationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *PartnerOrganisationAttribute) GetInfoHelpers() *PartnerOrganisationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *PartnerOrganisationAttribute) GetType() *PartnerOrganisationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// PurposeAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PurposeAttributeConstraints struct {
}

// PurposeAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PurposeAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PurposeAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PurposeAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PurposeAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PurposeAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PurposeAttributeType string

const (
	PurposeAttributeTypePurpose PurposeAttributeType = "purpose"
)

func (e PurposeAttributeType) ToPointer() *PurposeAttributeType {
	return &e
}
func (e *PurposeAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "purpose":
		*e = PurposeAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurposeAttributeType: %v", v)
	}
}

// PurposeAttribute - Entity Taxonomy
type PurposeAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PurposeAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PurposeAttributeInfoHelpers `json:"info_helpers,omitempty"`
	// URL-friendly identifier for the classification
	Slug      *string               `json:"slug,omitempty"`
	Parents   []string              `json:"parents,omitempty"`
	CreatedAt *time.Time            `json:"created_at,omitempty"`
	UpdatedAt *time.Time            `json:"updated_at,omitempty"`
	Type      *PurposeAttributeType `json:"type,omitempty"`
}

func (p PurposeAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PurposeAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PurposeAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PurposeAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PurposeAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *PurposeAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *PurposeAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *PurposeAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *PurposeAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *PurposeAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *PurposeAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *PurposeAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *PurposeAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *PurposeAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *PurposeAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PurposeAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *PurposeAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *PurposeAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *PurposeAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *PurposeAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *PurposeAttribute) GetConstraints() *PurposeAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *PurposeAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *PurposeAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *PurposeAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *PurposeAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *PurposeAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *PurposeAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *PurposeAttribute) GetInfoHelpers() *PurposeAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *PurposeAttribute) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PurposeAttribute) GetParents() []string {
	if o == nil {
		return nil
	}
	return o.Parents
}

func (o *PurposeAttribute) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PurposeAttribute) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PurposeAttribute) GetType() *PurposeAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// InternalUserAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type InternalUserAttributeConstraints struct {
}

// InternalUserAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InternalUserAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InternalUserAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InternalUserAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InternalUserAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InternalUserAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type InternalUserAttributeType string

const (
	InternalUserAttributeTypeInternalUser InternalUserAttributeType = "internal_user"
)

func (e InternalUserAttributeType) ToPointer() *InternalUserAttributeType {
	return &e
}
func (e *InternalUserAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_user":
		*e = InternalUserAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InternalUserAttributeType: %v", v)
	}
}

// InternalUserAttribute - Epilot internal user info
type InternalUserAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InternalUserAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InternalUserAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InternalUserAttributeType        `json:"type,omitempty"`
}

func (i InternalUserAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InternalUserAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InternalUserAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InternalUserAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InternalUserAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *InternalUserAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *InternalUserAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *InternalUserAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *InternalUserAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *InternalUserAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *InternalUserAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *InternalUserAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *InternalUserAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *InternalUserAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *InternalUserAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *InternalUserAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *InternalUserAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *InternalUserAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *InternalUserAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *InternalUserAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *InternalUserAttribute) GetConstraints() *InternalUserAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *InternalUserAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *InternalUserAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *InternalUserAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *InternalUserAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *InternalUserAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *InternalUserAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *InternalUserAttribute) GetInfoHelpers() *InternalUserAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *InternalUserAttribute) GetType() *InternalUserAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AutomationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type AutomationAttributeConstraints struct {
}

// AutomationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type AutomationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *AutomationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *AutomationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *AutomationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *AutomationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type AutomationAttributeType string

const (
	AutomationAttributeTypeAutomation AutomationAttributeType = "automation"
)

func (e AutomationAttributeType) ToPointer() *AutomationAttributeType {
	return &e
}
func (e *AutomationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation":
		*e = AutomationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutomationAttributeType: %v", v)
	}
}

// AutomationAttribute - Automation entity
type AutomationAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *AutomationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *AutomationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *AutomationAttributeType        `json:"type,omitempty"`
}

func (a AutomationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AutomationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AutomationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AutomationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AutomationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AutomationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AutomationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AutomationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AutomationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AutomationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AutomationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AutomationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AutomationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AutomationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AutomationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AutomationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AutomationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AutomationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AutomationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AutomationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AutomationAttribute) GetConstraints() *AutomationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AutomationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AutomationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AutomationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AutomationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AutomationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AutomationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AutomationAttribute) GetInfoHelpers() *AutomationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AutomationAttribute) GetType() *AutomationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// InvitationEmailAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type InvitationEmailAttributeConstraints struct {
}

// InvitationEmailAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InvitationEmailAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InvitationEmailAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InvitationEmailAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InvitationEmailAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InvitationEmailAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type InvitationEmailAttributeType string

const (
	InvitationEmailAttributeTypeInvitationEmail InvitationEmailAttributeType = "invitation_email"
)

func (e InvitationEmailAttributeType) ToPointer() *InvitationEmailAttributeType {
	return &e
}
func (e *InvitationEmailAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invitation_email":
		*e = InvitationEmailAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationEmailAttributeType: %v", v)
	}
}

// InvitationEmailAttribute - Email address for send invitation
type InvitationEmailAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InvitationEmailAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InvitationEmailAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InvitationEmailAttributeType        `json:"type,omitempty"`
}

func (i InvitationEmailAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvitationEmailAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvitationEmailAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InvitationEmailAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InvitationEmailAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *InvitationEmailAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *InvitationEmailAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *InvitationEmailAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *InvitationEmailAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *InvitationEmailAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *InvitationEmailAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *InvitationEmailAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *InvitationEmailAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *InvitationEmailAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *InvitationEmailAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *InvitationEmailAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *InvitationEmailAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *InvitationEmailAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *InvitationEmailAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *InvitationEmailAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *InvitationEmailAttribute) GetConstraints() *InvitationEmailAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *InvitationEmailAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *InvitationEmailAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *InvitationEmailAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *InvitationEmailAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *InvitationEmailAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *InvitationEmailAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *InvitationEmailAttribute) GetInfoHelpers() *InvitationEmailAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *InvitationEmailAttribute) GetType() *InvitationEmailAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// PartnerStatusAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PartnerStatusAttributeConstraints struct {
}

// PartnerStatusAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PartnerStatusAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PartnerStatusAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PartnerStatusAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PartnerStatusAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PartnerStatusAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PartnerStatusAttributeType string

const (
	PartnerStatusAttributeTypePartnerStatus PartnerStatusAttributeType = "partner_status"
)

func (e PartnerStatusAttributeType) ToPointer() *PartnerStatusAttributeType {
	return &e
}
func (e *PartnerStatusAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_status":
		*e = PartnerStatusAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerStatusAttributeType: %v", v)
	}
}

// PartnerStatusAttribute - Partner Status
type PartnerStatusAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PartnerStatusAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PartnerStatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PartnerStatusAttributeType        `json:"type,omitempty"`
}

func (p PartnerStatusAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerStatusAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PartnerStatusAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PartnerStatusAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PartnerStatusAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *PartnerStatusAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *PartnerStatusAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *PartnerStatusAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *PartnerStatusAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *PartnerStatusAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *PartnerStatusAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *PartnerStatusAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *PartnerStatusAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *PartnerStatusAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *PartnerStatusAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PartnerStatusAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *PartnerStatusAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *PartnerStatusAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *PartnerStatusAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *PartnerStatusAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *PartnerStatusAttribute) GetConstraints() *PartnerStatusAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *PartnerStatusAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *PartnerStatusAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *PartnerStatusAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *PartnerStatusAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *PartnerStatusAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *PartnerStatusAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *PartnerStatusAttribute) GetInfoHelpers() *PartnerStatusAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *PartnerStatusAttribute) GetType() *PartnerStatusAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ComputedAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type ComputedAttributeConstraints struct {
}

// ComputedAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type ComputedAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *ComputedAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *ComputedAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *ComputedAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *ComputedAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type ComputedAttributeType string

const (
	ComputedAttributeTypeComputed ComputedAttributeType = "computed"
)

func (e ComputedAttributeType) ToPointer() *ComputedAttributeType {
	return &e
}
func (e *ComputedAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "computed":
		*e = ComputedAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputedAttributeType: %v", v)
	}
}

// ComputedAttribute - An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)
type ComputedAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *ComputedAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *ComputedAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *ComputedAttributeType        `json:"type,omitempty"`
}

func (c ComputedAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputedAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ComputedAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ComputedAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ComputedAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ComputedAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ComputedAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *ComputedAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *ComputedAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *ComputedAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ComputedAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *ComputedAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *ComputedAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ComputedAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *ComputedAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ComputedAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *ComputedAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *ComputedAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *ComputedAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *ComputedAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *ComputedAttribute) GetConstraints() *ComputedAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *ComputedAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *ComputedAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *ComputedAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *ComputedAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *ComputedAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *ComputedAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *ComputedAttribute) GetInfoHelpers() *ComputedAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *ComputedAttribute) GetType() *ComputedAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// FileAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type FileAttributeConstraints struct {
}

// FileAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type FileAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *FileAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *FileAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *FileAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *FileAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type FileAttributeType string

const (
	FileAttributeTypeImage FileAttributeType = "image"
	FileAttributeTypeFile  FileAttributeType = "file"
)

func (e FileAttributeType) ToPointer() *FileAttributeType {
	return &e
}
func (e *FileAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image":
		fallthrough
	case "file":
		*e = FileAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileAttributeType: %v", v)
	}
}

type DefaultAccessControl string

const (
	DefaultAccessControlPublicRead DefaultAccessControl = "public-read"
	DefaultAccessControlPrivate    DefaultAccessControl = "private"
)

func (e DefaultAccessControl) ToPointer() *DefaultAccessControl {
	return &e
}
func (e *DefaultAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public-read":
		fallthrough
	case "private":
		*e = DefaultAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultAccessControl: %v", v)
	}
}

// FileAttribute - File or Image Attachment
type FileAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *FileAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *FileAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        FileAttributeType         `json:"type"`
	Multiple    *bool                     `json:"multiple,omitempty"`
	// List of file extensions (without the dot suffix)
	AllowedExtensions []string `json:"allowed_extensions,omitempty"`
	// Controls how the images are presented to the user during upload on the Entity Details view.
	DisplayImagesLandscaped *bool `json:"display_images_landscaped,omitempty"`
	// When set to true, an i18n description will be used alongside the attribute label.
	// This description should be set through the platform locales in the form: `file.{attribute_name}.description_text`.
	//
	EnableDescription    *bool                 `json:"enable_description,omitempty"`
	DefaultAccessControl *DefaultAccessControl `json:"default_access_control,omitempty"`
}

func (f FileAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FileAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FileAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FileAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *FileAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *FileAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FileAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *FileAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *FileAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *FileAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FileAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *FileAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *FileAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *FileAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *FileAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *FileAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *FileAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *FileAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *FileAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *FileAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *FileAttribute) GetConstraints() *FileAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *FileAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *FileAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *FileAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *FileAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *FileAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *FileAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *FileAttribute) GetInfoHelpers() *FileAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *FileAttribute) GetType() FileAttributeType {
	if o == nil {
		return FileAttributeType("")
	}
	return o.Type
}

func (o *FileAttribute) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

func (o *FileAttribute) GetAllowedExtensions() []string {
	if o == nil {
		return nil
	}
	return o.AllowedExtensions
}

func (o *FileAttribute) GetDisplayImagesLandscaped() *bool {
	if o == nil {
		return nil
	}
	return o.DisplayImagesLandscaped
}

func (o *FileAttribute) GetEnableDescription() *bool {
	if o == nil {
		return nil
	}
	return o.EnableDescription
}

func (o *FileAttribute) GetDefaultAccessControl() *DefaultAccessControl {
	if o == nil {
		return nil
	}
	return o.DefaultAccessControl
}

// OrderedListAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type OrderedListAttributeConstraints struct {
}

// OrderedListAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type OrderedListAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *OrderedListAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *OrderedListAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *OrderedListAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *OrderedListAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type OrderedListAttributeType string

const (
	OrderedListAttributeTypeOrderedList OrderedListAttributeType = "ordered_list"
)

func (e OrderedListAttributeType) ToPointer() *OrderedListAttributeType {
	return &e
}
func (e *OrderedListAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ordered_list":
		*e = OrderedListAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderedListAttributeType: %v", v)
	}
}

// OrderedListAttribute - Type of attribute to render N number of ordered fields
type OrderedListAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *OrderedListAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *OrderedListAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *OrderedListAttributeType        `json:"type,omitempty"`
}

func (o OrderedListAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderedListAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderedListAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrderedListAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrderedListAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OrderedListAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *OrderedListAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *OrderedListAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *OrderedListAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *OrderedListAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *OrderedListAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *OrderedListAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *OrderedListAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *OrderedListAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *OrderedListAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *OrderedListAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *OrderedListAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *OrderedListAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *OrderedListAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *OrderedListAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *OrderedListAttribute) GetConstraints() *OrderedListAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *OrderedListAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *OrderedListAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *OrderedListAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *OrderedListAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *OrderedListAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *OrderedListAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *OrderedListAttribute) GetInfoHelpers() *OrderedListAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *OrderedListAttribute) GetType() *OrderedListAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// InternalAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type InternalAttributeConstraints struct {
}

// InternalAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InternalAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InternalAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InternalAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InternalAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InternalAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type InternalAttributeType string

const (
	InternalAttributeTypeInternal InternalAttributeType = "internal"
)

func (e InternalAttributeType) ToPointer() *InternalAttributeType {
	return &e
}
func (e *InternalAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = InternalAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InternalAttributeType: %v", v)
	}
}

// InternalAttribute - No UI representation
type InternalAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InternalAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InternalAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InternalAttributeType        `json:"type,omitempty"`
}

func (i InternalAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InternalAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InternalAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InternalAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InternalAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *InternalAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *InternalAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *InternalAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *InternalAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *InternalAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *InternalAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *InternalAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *InternalAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *InternalAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *InternalAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *InternalAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *InternalAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *InternalAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *InternalAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *InternalAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *InternalAttribute) GetConstraints() *InternalAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *InternalAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *InternalAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *InternalAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *InternalAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *InternalAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *InternalAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *InternalAttribute) GetInfoHelpers() *InternalAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *InternalAttribute) GetType() *InternalAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ConsentAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type ConsentAttributeConstraints struct {
}

// ConsentAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type ConsentAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *ConsentAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *ConsentAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *ConsentAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *ConsentAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type ConsentAttributeType string

const (
	ConsentAttributeTypeConsent ConsentAttributeType = "consent"
)

func (e ConsentAttributeType) ToPointer() *ConsentAttributeType {
	return &e
}
func (e *ConsentAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consent":
		*e = ConsentAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsentAttributeType: %v", v)
	}
}

// ConsentAttribute - Consent Management
type ConsentAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *ConsentAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *ConsentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        ConsentAttributeType         `json:"type"`
	Topic       string                       `json:"topic"`
	Identifiers []string                     `json:"identifiers,omitempty"`
}

func (c ConsentAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConsentAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConsentAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ConsentAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConsentAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *ConsentAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *ConsentAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *ConsentAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *ConsentAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *ConsentAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *ConsentAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *ConsentAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *ConsentAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *ConsentAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *ConsentAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ConsentAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *ConsentAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *ConsentAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *ConsentAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *ConsentAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *ConsentAttribute) GetConstraints() *ConsentAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *ConsentAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *ConsentAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *ConsentAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *ConsentAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *ConsentAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *ConsentAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *ConsentAttribute) GetInfoHelpers() *ConsentAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *ConsentAttribute) GetType() ConsentAttributeType {
	if o == nil {
		return ConsentAttributeType("")
	}
	return o.Type
}

func (o *ConsentAttribute) GetTopic() string {
	if o == nil {
		return ""
	}
	return o.Topic
}

func (o *ConsentAttribute) GetIdentifiers() []string {
	if o == nil {
		return nil
	}
	return o.Identifiers
}

// NumberAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type NumberAttributeConstraints struct {
}

// NumberAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type NumberAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *NumberAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *NumberAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *NumberAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *NumberAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type NumberAttributeType string

const (
	NumberAttributeTypeNumber NumberAttributeType = "number"
)

func (e NumberAttributeType) ToPointer() *NumberAttributeType {
	return &e
}
func (e *NumberAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = NumberAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NumberAttributeType: %v", v)
	}
}

// NumberAttribute - Numeric input
type NumberAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *NumberAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *NumberAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *NumberAttributeType        `json:"type,omitempty"`
	Format      *string                     `json:"format,omitempty"`
}

func (n NumberAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NumberAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NumberAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NumberAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *NumberAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *NumberAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *NumberAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *NumberAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *NumberAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *NumberAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *NumberAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *NumberAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *NumberAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *NumberAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *NumberAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *NumberAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *NumberAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *NumberAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *NumberAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *NumberAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *NumberAttribute) GetConstraints() *NumberAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *NumberAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *NumberAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *NumberAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *NumberAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *NumberAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *NumberAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *NumberAttribute) GetInfoHelpers() *NumberAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *NumberAttribute) GetType() *NumberAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *NumberAttribute) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

// TagsAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type TagsAttributeConstraints struct {
}

// TagsAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type TagsAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *TagsAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *TagsAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *TagsAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *TagsAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type TagsAttributeType string

const (
	TagsAttributeTypeTags TagsAttributeType = "tags"
)

func (e TagsAttributeType) ToPointer() *TagsAttributeType {
	return &e
}
func (e *TagsAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tags":
		*e = TagsAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagsAttributeType: %v", v)
	}
}

// TagsAttribute - Tags
type TagsAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *TagsAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *TagsAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *TagsAttributeType        `json:"type,omitempty"`
	Options     []string                  `json:"options,omitempty"`
	Suggestions []string                  `json:"suggestions,omitempty"`
}

func (t TagsAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TagsAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TagsAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TagsAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TagsAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *TagsAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TagsAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *TagsAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *TagsAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *TagsAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TagsAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *TagsAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *TagsAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *TagsAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *TagsAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *TagsAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *TagsAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *TagsAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *TagsAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *TagsAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *TagsAttribute) GetConstraints() *TagsAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *TagsAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *TagsAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *TagsAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *TagsAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *TagsAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *TagsAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *TagsAttribute) GetInfoHelpers() *TagsAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *TagsAttribute) GetType() *TagsAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TagsAttribute) GetOptions() []string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *TagsAttribute) GetSuggestions() []string {
	if o == nil {
		return nil
	}
	return o.Suggestions
}

// RepeatableAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type RepeatableAttributeConstraints struct {
}

// RepeatableAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type RepeatableAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *RepeatableAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *RepeatableAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *RepeatableAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *RepeatableAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

// RepeatableAttributeRelationAffinityMode - Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.
type RepeatableAttributeRelationAffinityMode string

const (
	RepeatableAttributeRelationAffinityModeWeak   RepeatableAttributeRelationAffinityMode = "weak"
	RepeatableAttributeRelationAffinityModeStrong RepeatableAttributeRelationAffinityMode = "strong"
)

func (e RepeatableAttributeRelationAffinityMode) ToPointer() *RepeatableAttributeRelationAffinityMode {
	return &e
}
func (e *RepeatableAttributeRelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RepeatableAttributeRelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepeatableAttributeRelationAffinityMode: %v", v)
	}
}

type RepeatableAttributeType string

const (
	RepeatableAttributeTypeString         RepeatableAttributeType = "string"
	RepeatableAttributeTypePhone          RepeatableAttributeType = "phone"
	RepeatableAttributeTypeEmail          RepeatableAttributeType = "email"
	RepeatableAttributeTypeAddress        RepeatableAttributeType = "address"
	RepeatableAttributeTypeRelation       RepeatableAttributeType = "relation"
	RepeatableAttributeTypePayment        RepeatableAttributeType = "payment"
	RepeatableAttributeTypePriceComponent RepeatableAttributeType = "price_component"
	RepeatableAttributeTypeDate           RepeatableAttributeType = "date"
)

func (e RepeatableAttributeType) ToPointer() *RepeatableAttributeType {
	return &e
}
func (e *RepeatableAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "phone":
		fallthrough
	case "email":
		fallthrough
	case "address":
		fallthrough
	case "relation":
		fallthrough
	case "payment":
		fallthrough
	case "price_component":
		fallthrough
	case "date":
		*e = RepeatableAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepeatableAttributeType: %v", v)
	}
}

// RepeatableAttribute - Repeatable (add N number of fields)
type RepeatableAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RepeatableAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *RepeatableAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Repeatable  *bool                           `json:"repeatable,omitempty"`
	HasPrimary  *bool                           `json:"has_primary,omitempty"`
	// Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.
	RelationAffinityMode *RepeatableAttributeRelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	Type                 *RepeatableAttributeType                 `json:"type,omitempty"`
	// when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool `default:"true" json:"enable_relation_picker"`
}

func (r RepeatableAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RepeatableAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RepeatableAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RepeatableAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RepeatableAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *RepeatableAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *RepeatableAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *RepeatableAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *RepeatableAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *RepeatableAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *RepeatableAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *RepeatableAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *RepeatableAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *RepeatableAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *RepeatableAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *RepeatableAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *RepeatableAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *RepeatableAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *RepeatableAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *RepeatableAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *RepeatableAttribute) GetConstraints() *RepeatableAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *RepeatableAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *RepeatableAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *RepeatableAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *RepeatableAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *RepeatableAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *RepeatableAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *RepeatableAttribute) GetInfoHelpers() *RepeatableAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *RepeatableAttribute) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *RepeatableAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *RepeatableAttribute) GetRelationAffinityMode() *RepeatableAttributeRelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *RepeatableAttribute) GetType() *RepeatableAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RepeatableAttribute) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

// CurrencyAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type CurrencyAttributeConstraints struct {
}

// CurrencyAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type CurrencyAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *CurrencyAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *CurrencyAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *CurrencyAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *CurrencyAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type CurrencyAttributeType string

const (
	CurrencyAttributeTypeCurrency CurrencyAttributeType = "currency"
)

func (e CurrencyAttributeType) ToPointer() *CurrencyAttributeType {
	return &e
}
func (e *CurrencyAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "currency":
		*e = CurrencyAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrencyAttributeType: %v", v)
	}
}

// Currency1 - A currency configuration
type Currency1 struct {
	Code        string  `json:"code"`
	Description string  `json:"description"`
	Symbol      string  `json:"symbol"`
	Flag        *string `json:"flag,omitempty"`
}

func (o *Currency1) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *Currency1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Currency1) GetSymbol() string {
	if o == nil {
		return ""
	}
	return o.Symbol
}

func (o *Currency1) GetFlag() *string {
	if o == nil {
		return nil
	}
	return o.Flag
}

type CurrencyType string

const (
	CurrencyTypeCurrency1 CurrencyType = "currency_1"
)

type Currency struct {
	Currency1 *Currency1

	Type CurrencyType
}

func CreateCurrencyCurrency1(currency1 Currency1) Currency {
	typ := CurrencyTypeCurrency1

	return Currency{
		Currency1: &currency1,
		Type:      typ,
	}
}

func (u *Currency) UnmarshalJSON(data []byte) error {

	var currency1 Currency1 = Currency1{}
	if err := utils.UnmarshalJSON(data, &currency1, "", true, false); err == nil {
		u.Currency1 = &currency1
		u.Type = CurrencyTypeCurrency1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Currency", string(data))
}

func (u Currency) MarshalJSON() ([]byte, error) {
	if u.Currency1 != nil {
		return utils.MarshalJSON(u.Currency1, "", true)
	}

	return nil, errors.New("could not marshal union type Currency: all fields are null")
}

// CurrencyAttribute - Currency input
type CurrencyAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CurrencyAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers          *CurrencyAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type                 CurrencyAttributeType         `json:"type"`
	CurrencySelectorOnly *bool                         `default:"false" json:"currency_selector_only"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency []Currency `json:"currency"`
}

func (c CurrencyAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CurrencyAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CurrencyAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CurrencyAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *CurrencyAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *CurrencyAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *CurrencyAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *CurrencyAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *CurrencyAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *CurrencyAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *CurrencyAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *CurrencyAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *CurrencyAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *CurrencyAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *CurrencyAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *CurrencyAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *CurrencyAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *CurrencyAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *CurrencyAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *CurrencyAttribute) GetConstraints() *CurrencyAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *CurrencyAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *CurrencyAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *CurrencyAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *CurrencyAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *CurrencyAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *CurrencyAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *CurrencyAttribute) GetInfoHelpers() *CurrencyAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *CurrencyAttribute) GetType() CurrencyAttributeType {
	if o == nil {
		return CurrencyAttributeType("")
	}
	return o.Type
}

func (o *CurrencyAttribute) GetCurrencySelectorOnly() *bool {
	if o == nil {
		return nil
	}
	return o.CurrencySelectorOnly
}

func (o *CurrencyAttribute) GetCurrency() []Currency {
	if o == nil {
		return []Currency{}
	}
	return o.Currency
}

// PaymentMethodRelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PaymentMethodRelationAttributeConstraints struct {
}

// PaymentMethodRelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PaymentMethodRelationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PaymentMethodRelationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PaymentMethodRelationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PaymentMethodRelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PaymentMethodRelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PaymentMethodRelationAttributeType string

const (
	PaymentMethodRelationAttributeTypeRelationPaymentMethod PaymentMethodRelationAttributeType = "relation_payment_method"
)

func (e PaymentMethodRelationAttributeType) ToPointer() *PaymentMethodRelationAttributeType {
	return &e
}
func (e *PaymentMethodRelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_payment_method":
		*e = PaymentMethodRelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentMethodRelationAttributeType: %v", v)
	}
}

// PaymentMethodRelationAttribute - Reference to a payment method attribute of another entity
type PaymentMethodRelationAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PaymentMethodRelationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PaymentMethodRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PaymentMethodRelationAttributeType        `json:"type,omitempty"`
	HasPrimary  *bool                                      `json:"has_primary,omitempty"`
}

func (p PaymentMethodRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentMethodRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentMethodRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentMethodRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PaymentMethodRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *PaymentMethodRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *PaymentMethodRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *PaymentMethodRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *PaymentMethodRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *PaymentMethodRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *PaymentMethodRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *PaymentMethodRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *PaymentMethodRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *PaymentMethodRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *PaymentMethodRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *PaymentMethodRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *PaymentMethodRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *PaymentMethodRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *PaymentMethodRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *PaymentMethodRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *PaymentMethodRelationAttribute) GetConstraints() *PaymentMethodRelationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *PaymentMethodRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *PaymentMethodRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *PaymentMethodRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *PaymentMethodRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *PaymentMethodRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *PaymentMethodRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *PaymentMethodRelationAttribute) GetInfoHelpers() *PaymentMethodRelationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *PaymentMethodRelationAttribute) GetType() *PaymentMethodRelationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PaymentMethodRelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

// AddressRelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type AddressRelationAttributeConstraints struct {
}

// AddressRelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type AddressRelationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *AddressRelationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *AddressRelationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *AddressRelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *AddressRelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type AddressRelationAttributeType string

const (
	AddressRelationAttributeTypeRelationAddress AddressRelationAttributeType = "relation_address"
)

func (e AddressRelationAttributeType) ToPointer() *AddressRelationAttributeType {
	return &e
}
func (e *AddressRelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_address":
		*e = AddressRelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressRelationAttributeType: %v", v)
	}
}

// AddressRelationAttribute - Reference to an address attribute of another entity
type AddressRelationAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *AddressRelationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *AddressRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *AddressRelationAttributeType        `json:"type,omitempty"`
	HasPrimary  *bool                                `json:"has_primary,omitempty"`
}

func (a AddressRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddressRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AddressRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AddressRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AddressRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AddressRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AddressRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AddressRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AddressRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AddressRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AddressRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AddressRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AddressRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AddressRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AddressRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AddressRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AddressRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AddressRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AddressRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AddressRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AddressRelationAttribute) GetConstraints() *AddressRelationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AddressRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AddressRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AddressRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AddressRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AddressRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AddressRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AddressRelationAttribute) GetInfoHelpers() *AddressRelationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AddressRelationAttribute) GetType() *AddressRelationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AddressRelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

// UserRelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type UserRelationAttributeConstraints struct {
}

// UserRelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type UserRelationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *UserRelationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *UserRelationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *UserRelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *UserRelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type UserRelationAttributeType string

const (
	UserRelationAttributeTypeRelationUser UserRelationAttributeType = "relation_user"
)

func (e UserRelationAttributeType) ToPointer() *UserRelationAttributeType {
	return &e
}
func (e *UserRelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_user":
		*e = UserRelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserRelationAttributeType: %v", v)
	}
}

// UserRelationAttribute - User Relationship
type UserRelationAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *UserRelationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *UserRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *UserRelationAttributeType        `json:"type,omitempty"`
	Multiple    *bool                             `default:"false" json:"multiple"`
}

func (u UserRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UserRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UserRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UserRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *UserRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *UserRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *UserRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *UserRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *UserRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *UserRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *UserRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *UserRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *UserRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *UserRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *UserRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *UserRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *UserRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *UserRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *UserRelationAttribute) GetConstraints() *UserRelationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *UserRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *UserRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *UserRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *UserRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *UserRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *UserRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *UserRelationAttribute) GetInfoHelpers() *UserRelationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *UserRelationAttribute) GetType() *UserRelationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UserRelationAttribute) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

// RelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type RelationAttributeConstraints struct {
}

// RelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type RelationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *RelationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *RelationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *RelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *RelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type RelationAttributeType string

const (
	RelationAttributeTypeRelation RelationAttributeType = "relation"
)

func (e RelationAttributeType) ToPointer() *RelationAttributeType {
	return &e
}
func (e *RelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation":
		*e = RelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeType: %v", v)
	}
}

type RelationType string

const (
	RelationTypeHasMany RelationType = "has_many"
	RelationTypeHasOne  RelationType = "has_one"
)

func (e RelationType) ToPointer() *RelationType {
	return &e
}
func (e *RelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "has_many":
		fallthrough
	case "has_one":
		*e = RelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationType: %v", v)
	}
}

// RelationAffinityMode - Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
type RelationAffinityMode string

const (
	RelationAffinityModeWeak   RelationAffinityMode = "weak"
	RelationAffinityModeStrong RelationAffinityMode = "strong"
)

func (e RelationAffinityMode) ToPointer() *RelationAffinityMode {
	return &e
}
func (e *RelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAffinityMode: %v", v)
	}
}

type EditMode string

const (
	EditModeListView EditMode = "list-view"
)

func (e EditMode) ToPointer() *EditMode {
	return &e
}
func (e *EditMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list-view":
		*e = EditMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditMode: %v", v)
	}
}

// ActionType - The action type. Currently supported actions:
//
// | action | description |
// |--------|-------------|
// | add_existing | Enables the user to pick an existing entity to link as relation |
// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
type ActionType string

const (
	ActionTypeAddExisting        ActionType = "add_existing"
	ActionTypeCreateNew          ActionType = "create_new"
	ActionTypeCreateFromExisting ActionType = "create_from_existing"
)

func (e ActionType) ToPointer() *ActionType {
	return &e
}
func (e *ActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_existing":
		fallthrough
	case "create_new":
		fallthrough
	case "create_from_existing":
		*e = ActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionType: %v", v)
	}
}

type NewEntityItem struct {
	ID string `json:"_id"`
	// Organization Id the entity belongs to
	Org    string        `json:"_org"`
	Owners []EntityOwner `json:"_owners,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema string `json:"_schema"`
	// Title of entity
	Title     *string    `json:"_title"`
	Tags      []string   `json:"_tags,omitempty"`
	CreatedAt *time.Time `json:"_created_at"`
	UpdatedAt *time.Time `json:"_updated_at"`
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL                  *EntityACL `json:"_acl,omitempty"`
	AdditionalProperties any        `additionalProperties:"true" json:"-"`
}

func (n NewEntityItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NewEntityItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NewEntityItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NewEntityItem) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *NewEntityItem) GetOwners() []EntityOwner {
	if o == nil {
		return nil
	}
	return o.Owners
}

func (o *NewEntityItem) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *NewEntityItem) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *NewEntityItem) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *NewEntityItem) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *NewEntityItem) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *NewEntityItem) GetACL() *EntityACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *NewEntityItem) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type Actions struct {
	// The action type. Currently supported actions:
	//
	// | action | description |
	// |--------|-------------|
	// | add_existing | Enables the user to pick an existing entity to link as relation |
	// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
	// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
	//
	ActionType *ActionType `json:"action_type,omitempty"`
	// The action label or action translation key (i18n)
	Label *string `json:"label,omitempty"`
	// Sets the action as the default action, visible as the main action button.
	Default *bool `json:"default,omitempty"`
	// Name of the feature flag that enables this action
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This action should only be active when all the settings have the correct value
	SettingsFlag  []SettingFlag  `json:"settings_flag,omitempty"`
	NewEntityItem *NewEntityItem `json:"new_entity_item,omitempty"`
}

func (o *Actions) GetActionType() *ActionType {
	if o == nil {
		return nil
	}
	return o.ActionType
}

func (o *Actions) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *Actions) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *Actions) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *Actions) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *Actions) GetNewEntityItem() *NewEntityItem {
	if o == nil {
		return nil
	}
	return o.NewEntityItem
}

type DrawerSize string

const (
	DrawerSizeSmall  DrawerSize = "small"
	DrawerSizeMedium DrawerSize = "medium"
	DrawerSizeLarge  DrawerSize = "large"
)

func (e DrawerSize) ToPointer() *DrawerSize {
	return &e
}
func (e *DrawerSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		*e = DrawerSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DrawerSize: %v", v)
	}
}

type SummaryFieldsType string

const (
	SummaryFieldsTypeStr          SummaryFieldsType = "str"
	SummaryFieldsTypeSummaryField SummaryFieldsType = "SummaryField"
)

type SummaryFields struct {
	Str          *string
	SummaryField *SummaryField

	Type SummaryFieldsType
}

func CreateSummaryFieldsStr(str string) SummaryFields {
	typ := SummaryFieldsTypeStr

	return SummaryFields{
		Str:  &str,
		Type: typ,
	}
}

func CreateSummaryFieldsSummaryField(summaryField SummaryField) SummaryFields {
	typ := SummaryFieldsTypeSummaryField

	return SummaryFields{
		SummaryField: &summaryField,
		Type:         typ,
	}
}

func (u *SummaryFields) UnmarshalJSON(data []byte) error {

	var summaryField SummaryField = SummaryField{}
	if err := utils.UnmarshalJSON(data, &summaryField, "", true, false); err == nil {
		u.SummaryField = &summaryField
		u.Type = SummaryFieldsTypeSummaryField
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = SummaryFieldsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SummaryFields", string(data))
}

func (u SummaryFields) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.SummaryField != nil {
		return utils.MarshalJSON(u.SummaryField, "", true)
	}

	return nil, errors.New("could not marshal union type SummaryFields: all fields are null")
}

// RelationAttribute - Entity Relationship
type RelationAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RelationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers  *RelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type         *RelationAttributeType        `json:"type,omitempty"`
	RelationType *RelationType                 `json:"relation_type,omitempty"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool     `default:"true" json:"enable_relation_picker"`
	EditMode             *EditMode `json:"edit_mode,omitempty"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool           `default:"false" json:"details_view_mode_enabled"`
	Actions                []Actions       `json:"actions,omitempty"`
	DrawerSize             *DrawerSize     `json:"drawer_size,omitempty"`
	SummaryFields          []SummaryFields `json:"summary_fields,omitempty"`
	HasPrimary             *bool           `json:"has_primary,omitempty"`
	AllowedSchemas         []string        `json:"allowedSchemas,omitempty"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string `json:"add_button_label,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
}

func (r RelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *RelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *RelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *RelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *RelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *RelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *RelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *RelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *RelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *RelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *RelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *RelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *RelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *RelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *RelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *RelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *RelationAttribute) GetConstraints() *RelationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *RelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *RelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *RelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *RelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *RelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *RelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *RelationAttribute) GetInfoHelpers() *RelationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *RelationAttribute) GetType() *RelationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RelationAttribute) GetRelationType() *RelationType {
	if o == nil {
		return nil
	}
	return o.RelationType
}

func (o *RelationAttribute) GetReverseAttributes() map[string]string {
	if o == nil {
		return nil
	}
	return o.ReverseAttributes
}

func (o *RelationAttribute) GetRelationAffinityMode() *RelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *RelationAttribute) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

func (o *RelationAttribute) GetEditMode() *EditMode {
	if o == nil {
		return nil
	}
	return o.EditMode
}

func (o *RelationAttribute) GetDetailsViewModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DetailsViewModeEnabled
}

func (o *RelationAttribute) GetActions() []Actions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *RelationAttribute) GetDrawerSize() *DrawerSize {
	if o == nil {
		return nil
	}
	return o.DrawerSize
}

func (o *RelationAttribute) GetSummaryFields() []SummaryFields {
	if o == nil {
		return nil
	}
	return o.SummaryFields
}

func (o *RelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *RelationAttribute) GetAllowedSchemas() []string {
	if o == nil {
		return nil
	}
	return o.AllowedSchemas
}

func (o *RelationAttribute) GetEnableRelationTags() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationTags
}

func (o *RelationAttribute) GetAddButtonLabel() *string {
	if o == nil {
		return nil
	}
	return o.AddButtonLabel
}

func (o *RelationAttribute) GetSearchPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.SearchPlaceholder
}

// SequenceAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SequenceAttributeConstraints struct {
}

// SequenceAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SequenceAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *SequenceAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *SequenceAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *SequenceAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *SequenceAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type SequenceAttributeType string

const (
	SequenceAttributeTypeSequence SequenceAttributeType = "sequence"
)

func (e SequenceAttributeType) ToPointer() *SequenceAttributeType {
	return &e
}
func (e *SequenceAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sequence":
		*e = SequenceAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SequenceAttributeType: %v", v)
	}
}

// SequenceAttribute - Sequence of unique identifiers
type SequenceAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SequenceAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SequenceAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SequenceAttributeType        `json:"type,omitempty"`
	// Prefix added before the sequence number
	Prefix      *string `json:"prefix,omitempty"`
	StartNumber *int64  `json:"start_number,omitempty"`
}

func (s SequenceAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SequenceAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SequenceAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SequenceAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SequenceAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *SequenceAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *SequenceAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *SequenceAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *SequenceAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *SequenceAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *SequenceAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *SequenceAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *SequenceAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *SequenceAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *SequenceAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *SequenceAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *SequenceAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *SequenceAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *SequenceAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *SequenceAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *SequenceAttribute) GetConstraints() *SequenceAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *SequenceAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *SequenceAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *SequenceAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *SequenceAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *SequenceAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *SequenceAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *SequenceAttribute) GetInfoHelpers() *SequenceAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *SequenceAttribute) GetType() *SequenceAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SequenceAttribute) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *SequenceAttribute) GetStartNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.StartNumber
}

// StatusAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type StatusAttributeConstraints struct {
}

// StatusAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type StatusAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *StatusAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *StatusAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *StatusAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *StatusAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type StatusAttributeType string

const (
	StatusAttributeTypeStatus StatusAttributeType = "status"
)

func (e StatusAttributeType) ToPointer() *StatusAttributeType {
	return &e
}
func (e *StatusAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "status":
		*e = StatusAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusAttributeType: %v", v)
	}
}

type Options2 struct {
	// The stored value of the option
	Value string `json:"value"`
	// The displayed title of the option
	Title *string `json:"title,omitempty"`
}

func (o *Options2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Options2) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type StatusAttributeOptionsType string

const (
	StatusAttributeOptionsTypeStr      StatusAttributeOptionsType = "str"
	StatusAttributeOptionsTypeOptions2 StatusAttributeOptionsType = "options_2"
)

type StatusAttributeOptions struct {
	Str      *string
	Options2 *Options2

	Type StatusAttributeOptionsType
}

func CreateStatusAttributeOptionsStr(str string) StatusAttributeOptions {
	typ := StatusAttributeOptionsTypeStr

	return StatusAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func CreateStatusAttributeOptionsOptions2(options2 Options2) StatusAttributeOptions {
	typ := StatusAttributeOptionsTypeOptions2

	return StatusAttributeOptions{
		Options2: &options2,
		Type:     typ,
	}
}

func (u *StatusAttributeOptions) UnmarshalJSON(data []byte) error {

	var options2 Options2 = Options2{}
	if err := utils.UnmarshalJSON(data, &options2, "", true, false); err == nil {
		u.Options2 = &options2
		u.Type = StatusAttributeOptionsTypeOptions2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = StatusAttributeOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatusAttributeOptions", string(data))
}

func (u StatusAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Options2 != nil {
		return utils.MarshalJSON(u.Options2, "", true)
	}

	return nil, errors.New("could not marshal union type StatusAttributeOptions: all fields are null")
}

// StatusAttribute - Status select
type StatusAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *StatusAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *StatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *StatusAttributeType        `json:"type,omitempty"`
	Options     []StatusAttributeOptions    `json:"options,omitempty"`
}

func (s StatusAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StatusAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *StatusAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *StatusAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *StatusAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *StatusAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *StatusAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *StatusAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *StatusAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *StatusAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *StatusAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *StatusAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *StatusAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *StatusAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *StatusAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *StatusAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *StatusAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *StatusAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *StatusAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *StatusAttribute) GetConstraints() *StatusAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *StatusAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *StatusAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *StatusAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *StatusAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *StatusAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *StatusAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *StatusAttribute) GetInfoHelpers() *StatusAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *StatusAttribute) GetType() *StatusAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *StatusAttribute) GetOptions() []StatusAttributeOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

// MultiSelectAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type MultiSelectAttributeConstraints struct {
}

// MultiSelectAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type MultiSelectAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *MultiSelectAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *MultiSelectAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *MultiSelectAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *MultiSelectAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type MultiSelectAttributeType string

const (
	MultiSelectAttributeTypeMultiselect MultiSelectAttributeType = "multiselect"
	MultiSelectAttributeTypeCheckbox    MultiSelectAttributeType = "checkbox"
)

func (e MultiSelectAttributeType) ToPointer() *MultiSelectAttributeType {
	return &e
}
func (e *MultiSelectAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "multiselect":
		fallthrough
	case "checkbox":
		*e = MultiSelectAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MultiSelectAttributeType: %v", v)
	}
}

type Two struct {
	Value string  `json:"value"`
	Title *string `json:"title,omitempty"`
}

func (o *Two) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Two) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type MultiSelectAttributeOptionsType string

const (
	MultiSelectAttributeOptionsTypeStr MultiSelectAttributeOptionsType = "str"
	MultiSelectAttributeOptionsTypeTwo MultiSelectAttributeOptionsType = "2"
)

type MultiSelectAttributeOptions struct {
	Str *string
	Two *Two

	Type MultiSelectAttributeOptionsType
}

func CreateMultiSelectAttributeOptionsStr(str string) MultiSelectAttributeOptions {
	typ := MultiSelectAttributeOptionsTypeStr

	return MultiSelectAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func CreateMultiSelectAttributeOptionsTwo(two Two) MultiSelectAttributeOptions {
	typ := MultiSelectAttributeOptionsTypeTwo

	return MultiSelectAttributeOptions{
		Two:  &two,
		Type: typ,
	}
}

func (u *MultiSelectAttributeOptions) UnmarshalJSON(data []byte) error {

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, false); err == nil {
		u.Two = &two
		u.Type = MultiSelectAttributeOptionsTypeTwo
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = MultiSelectAttributeOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MultiSelectAttributeOptions", string(data))
}

func (u MultiSelectAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type MultiSelectAttributeOptions: all fields are null")
}

// MultiSelectAttribute - Multi Choice Selection
type MultiSelectAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *MultiSelectAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *MultiSelectAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *MultiSelectAttributeType        `json:"type,omitempty"`
	// controls if the matching of values against the options is case sensitive or not
	DisableCaseSensitive *bool `json:"disable_case_sensitive,omitempty"`
	// controls if the 360 ui will allow the user to enter a value which is not defined by the options
	AllowExtraOptions *bool                         `json:"allow_extra_options,omitempty"`
	Options           []MultiSelectAttributeOptions `json:"options,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
}

func (m MultiSelectAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MultiSelectAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MultiSelectAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MultiSelectAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MultiSelectAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *MultiSelectAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *MultiSelectAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *MultiSelectAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *MultiSelectAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *MultiSelectAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *MultiSelectAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *MultiSelectAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *MultiSelectAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *MultiSelectAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *MultiSelectAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *MultiSelectAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *MultiSelectAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *MultiSelectAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *MultiSelectAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *MultiSelectAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *MultiSelectAttribute) GetConstraints() *MultiSelectAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *MultiSelectAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *MultiSelectAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *MultiSelectAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *MultiSelectAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *MultiSelectAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *MultiSelectAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *MultiSelectAttribute) GetInfoHelpers() *MultiSelectAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *MultiSelectAttribute) GetType() *MultiSelectAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *MultiSelectAttribute) GetDisableCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.DisableCaseSensitive
}

func (o *MultiSelectAttribute) GetAllowExtraOptions() *bool {
	if o == nil {
		return nil
	}
	return o.AllowExtraOptions
}

func (o *MultiSelectAttribute) GetOptions() []MultiSelectAttributeOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *MultiSelectAttribute) GetAllowAny() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAny
}

// SelectAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SelectAttributeConstraints struct {
}

// SelectAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SelectAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *SelectAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *SelectAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *SelectAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *SelectAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type SelectAttributeType string

const (
	SelectAttributeTypeSelect SelectAttributeType = "select"
	SelectAttributeTypeRadio  SelectAttributeType = "radio"
)

func (e SelectAttributeType) ToPointer() *SelectAttributeType {
	return &e
}
func (e *SelectAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "select":
		fallthrough
	case "radio":
		*e = SelectAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SelectAttributeType: %v", v)
	}
}

type One struct {
	Value string  `json:"value"`
	Title *string `json:"title,omitempty"`
}

func (o *One) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *One) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type SelectAttributeOptionsType string

const (
	SelectAttributeOptionsTypeOne SelectAttributeOptionsType = "1"
	SelectAttributeOptionsTypeStr SelectAttributeOptionsType = "str"
)

type SelectAttributeOptions struct {
	One *One
	Str *string

	Type SelectAttributeOptionsType
}

func CreateSelectAttributeOptionsOne(one One) SelectAttributeOptions {
	typ := SelectAttributeOptionsTypeOne

	return SelectAttributeOptions{
		One:  &one,
		Type: typ,
	}
}

func CreateSelectAttributeOptionsStr(str string) SelectAttributeOptions {
	typ := SelectAttributeOptionsTypeStr

	return SelectAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func (u *SelectAttributeOptions) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, false); err == nil {
		u.One = &one
		u.Type = SelectAttributeOptionsTypeOne
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = SelectAttributeOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SelectAttributeOptions", string(data))
}

func (u SelectAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type SelectAttributeOptions: all fields are null")
}

// SelectAttribute - Dropdown select
type SelectAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SelectAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SelectAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SelectAttributeType        `json:"type,omitempty"`
	Options     []SelectAttributeOptions    `json:"options,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
}

func (s SelectAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SelectAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SelectAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SelectAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SelectAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *SelectAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *SelectAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *SelectAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *SelectAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *SelectAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *SelectAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *SelectAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *SelectAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *SelectAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *SelectAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *SelectAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *SelectAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *SelectAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *SelectAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *SelectAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *SelectAttribute) GetConstraints() *SelectAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *SelectAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *SelectAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *SelectAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *SelectAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *SelectAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *SelectAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *SelectAttribute) GetInfoHelpers() *SelectAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *SelectAttribute) GetType() *SelectAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SelectAttribute) GetOptions() []SelectAttributeOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *SelectAttribute) GetAllowAny() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAny
}

// BooleanAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type BooleanAttributeConstraints struct {
}

// BooleanAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type BooleanAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *BooleanAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *BooleanAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *BooleanAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *BooleanAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type BooleanAttributeType string

const (
	BooleanAttributeTypeBoolean BooleanAttributeType = "boolean"
)

func (e BooleanAttributeType) ToPointer() *BooleanAttributeType {
	return &e
}
func (e *BooleanAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		*e = BooleanAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooleanAttributeType: %v", v)
	}
}

// BooleanAttribute - Yes / No Toggle
type BooleanAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *BooleanAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *BooleanAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *BooleanAttributeType        `json:"type,omitempty"`
}

func (b BooleanAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BooleanAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *BooleanAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *BooleanAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *BooleanAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *BooleanAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *BooleanAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *BooleanAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *BooleanAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *BooleanAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *BooleanAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *BooleanAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *BooleanAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *BooleanAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *BooleanAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *BooleanAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *BooleanAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *BooleanAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *BooleanAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *BooleanAttribute) GetConstraints() *BooleanAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *BooleanAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *BooleanAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *BooleanAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *BooleanAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *BooleanAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *BooleanAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *BooleanAttribute) GetInfoHelpers() *BooleanAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *BooleanAttribute) GetType() *BooleanAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// CountryAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type CountryAttributeConstraints struct {
}

// CountryAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type CountryAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *CountryAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *CountryAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *CountryAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *CountryAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type CountryAttributeType string

const (
	CountryAttributeTypeCountry CountryAttributeType = "country"
)

func (e CountryAttributeType) ToPointer() *CountryAttributeType {
	return &e
}
func (e *CountryAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "country":
		*e = CountryAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CountryAttributeType: %v", v)
	}
}

// CountryAttribute - Country picker
type CountryAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CountryAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *CountryAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *CountryAttributeType        `json:"type,omitempty"`
}

func (c CountryAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CountryAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CountryAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CountryAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CountryAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *CountryAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *CountryAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *CountryAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *CountryAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *CountryAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *CountryAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *CountryAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *CountryAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *CountryAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *CountryAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *CountryAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *CountryAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *CountryAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *CountryAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *CountryAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *CountryAttribute) GetConstraints() *CountryAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *CountryAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *CountryAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *CountryAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *CountryAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *CountryAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *CountryAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *CountryAttribute) GetInfoHelpers() *CountryAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *CountryAttribute) GetType() *CountryAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// DateAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type DateAttributeConstraints struct {
}

// DateAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type DateAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *DateAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *DateAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *DateAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *DateAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type DateAttributeType string

const (
	DateAttributeTypeDate     DateAttributeType = "date"
	DateAttributeTypeDatetime DateAttributeType = "datetime"
)

func (e DateAttributeType) ToPointer() *DateAttributeType {
	return &e
}
func (e *DateAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		fallthrough
	case "datetime":
		*e = DateAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateAttributeType: %v", v)
	}
}

// DateAttribute - Date or Datetime picker
type DateAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *DateAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *DateAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *DateAttributeType        `json:"type,omitempty"`
}

func (d DateAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DateAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DateAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DateAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *DateAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DateAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *DateAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *DateAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *DateAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DateAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *DateAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *DateAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *DateAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *DateAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *DateAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *DateAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *DateAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *DateAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *DateAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *DateAttribute) GetConstraints() *DateAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *DateAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *DateAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *DateAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *DateAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *DateAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *DateAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *DateAttribute) GetInfoHelpers() *DateAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *DateAttribute) GetType() *DateAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// LinkAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type LinkAttributeConstraints struct {
}

// LinkAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type LinkAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *LinkAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *LinkAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *LinkAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *LinkAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type LinkAttributeType string

const (
	LinkAttributeTypeLink LinkAttributeType = "link"
)

func (e LinkAttributeType) ToPointer() *LinkAttributeType {
	return &e
}
func (e *LinkAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = LinkAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkAttributeType: %v", v)
	}
}

// LinkAttribute - Link with title and href
type LinkAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *LinkAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *LinkAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *LinkAttributeType        `json:"type,omitempty"`
}

func (l LinkAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LinkAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *LinkAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LinkAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *LinkAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *LinkAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *LinkAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *LinkAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *LinkAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *LinkAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *LinkAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *LinkAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *LinkAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *LinkAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *LinkAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *LinkAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *LinkAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *LinkAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *LinkAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *LinkAttribute) GetConstraints() *LinkAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *LinkAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *LinkAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *LinkAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *LinkAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *LinkAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *LinkAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *LinkAttribute) GetInfoHelpers() *LinkAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *LinkAttribute) GetType() *LinkAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// Constraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type Constraints struct {
}

// InfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type TextAttributeType string

const (
	TextAttributeTypeString TextAttributeType = "string"
)

func (e TextAttributeType) ToPointer() *TextAttributeType {
	return &e
}
func (e *TextAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TextAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextAttributeType: %v", v)
	}
}

// TextAttribute - Textarea or text input
type TextAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *Constraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InfoHelpers       `json:"info_helpers,omitempty"`
	Type        *TextAttributeType `json:"type,omitempty"`
	Multiline   *bool              `json:"multiline,omitempty"`
}

func (t TextAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TextAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TextAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TextAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TextAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *TextAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TextAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *TextAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *TextAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *TextAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TextAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *TextAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *TextAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *TextAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *TextAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *TextAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *TextAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *TextAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *TextAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *TextAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *TextAttribute) GetConstraints() *Constraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *TextAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *TextAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *TextAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *TextAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *TextAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *TextAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *TextAttribute) GetInfoHelpers() *InfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *TextAttribute) GetType() *TextAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TextAttribute) GetMultiline() *bool {
	if o == nil {
		return nil
	}
	return o.Multiline
}

type AttributeType string

const (
	AttributeTypeTextAttribute                  AttributeType = "TextAttribute"
	AttributeTypeLinkAttribute                  AttributeType = "LinkAttribute"
	AttributeTypeDateAttribute                  AttributeType = "DateAttribute"
	AttributeTypeCountryAttribute               AttributeType = "CountryAttribute"
	AttributeTypeBooleanAttribute               AttributeType = "BooleanAttribute"
	AttributeTypeSelectAttribute                AttributeType = "SelectAttribute"
	AttributeTypeMultiSelectAttribute           AttributeType = "MultiSelectAttribute"
	AttributeTypeStatusAttribute                AttributeType = "StatusAttribute"
	AttributeTypeSequenceAttribute              AttributeType = "SequenceAttribute"
	AttributeTypeRelationAttribute              AttributeType = "RelationAttribute"
	AttributeTypeUserRelationAttribute          AttributeType = "UserRelationAttribute"
	AttributeTypeAddressRelationAttribute       AttributeType = "AddressRelationAttribute"
	AttributeTypePaymentMethodRelationAttribute AttributeType = "PaymentMethodRelationAttribute"
	AttributeTypeCurrencyAttribute              AttributeType = "CurrencyAttribute"
	AttributeTypeRepeatableAttribute            AttributeType = "RepeatableAttribute"
	AttributeTypeTagsAttribute                  AttributeType = "TagsAttribute"
	AttributeTypeNumberAttribute                AttributeType = "NumberAttribute"
	AttributeTypeConsentAttribute               AttributeType = "ConsentAttribute"
	AttributeTypeInternalAttribute              AttributeType = "InternalAttribute"
	AttributeTypeOrderedListAttribute           AttributeType = "OrderedListAttribute"
	AttributeTypeFileAttribute                  AttributeType = "FileAttribute"
	AttributeTypeComputedAttribute              AttributeType = "ComputedAttribute"
	AttributeTypePartnerStatusAttribute         AttributeType = "PartnerStatusAttribute"
	AttributeTypeInvitationEmailAttribute       AttributeType = "InvitationEmailAttribute"
	AttributeTypeAutomationAttribute            AttributeType = "AutomationAttribute"
	AttributeTypeInternalUserAttribute          AttributeType = "InternalUserAttribute"
	AttributeTypePurposeAttribute               AttributeType = "PurposeAttribute"
	AttributeTypePartnerOrganisationAttribute   AttributeType = "PartnerOrganisationAttribute"
)

type Attribute struct {
	TextAttribute                  *TextAttribute
	LinkAttribute                  *LinkAttribute
	DateAttribute                  *DateAttribute
	CountryAttribute               *CountryAttribute
	BooleanAttribute               *BooleanAttribute
	SelectAttribute                *SelectAttribute
	MultiSelectAttribute           *MultiSelectAttribute
	StatusAttribute                *StatusAttribute
	SequenceAttribute              *SequenceAttribute
	RelationAttribute              *RelationAttribute
	UserRelationAttribute          *UserRelationAttribute
	AddressRelationAttribute       *AddressRelationAttribute
	PaymentMethodRelationAttribute *PaymentMethodRelationAttribute
	CurrencyAttribute              *CurrencyAttribute
	RepeatableAttribute            *RepeatableAttribute
	TagsAttribute                  *TagsAttribute
	NumberAttribute                *NumberAttribute
	ConsentAttribute               *ConsentAttribute
	InternalAttribute              *InternalAttribute
	OrderedListAttribute           *OrderedListAttribute
	FileAttribute                  *FileAttribute
	ComputedAttribute              *ComputedAttribute
	PartnerStatusAttribute         *PartnerStatusAttribute
	InvitationEmailAttribute       *InvitationEmailAttribute
	AutomationAttribute            *AutomationAttribute
	InternalUserAttribute          *InternalUserAttribute
	PurposeAttribute               *PurposeAttribute
	PartnerOrganisationAttribute   *PartnerOrganisationAttribute

	Type AttributeType
}

func CreateAttributeTextAttribute(textAttribute TextAttribute) Attribute {
	typ := AttributeTypeTextAttribute

	return Attribute{
		TextAttribute: &textAttribute,
		Type:          typ,
	}
}

func CreateAttributeLinkAttribute(linkAttribute LinkAttribute) Attribute {
	typ := AttributeTypeLinkAttribute

	return Attribute{
		LinkAttribute: &linkAttribute,
		Type:          typ,
	}
}

func CreateAttributeDateAttribute(dateAttribute DateAttribute) Attribute {
	typ := AttributeTypeDateAttribute

	return Attribute{
		DateAttribute: &dateAttribute,
		Type:          typ,
	}
}

func CreateAttributeCountryAttribute(countryAttribute CountryAttribute) Attribute {
	typ := AttributeTypeCountryAttribute

	return Attribute{
		CountryAttribute: &countryAttribute,
		Type:             typ,
	}
}

func CreateAttributeBooleanAttribute(booleanAttribute BooleanAttribute) Attribute {
	typ := AttributeTypeBooleanAttribute

	return Attribute{
		BooleanAttribute: &booleanAttribute,
		Type:             typ,
	}
}

func CreateAttributeSelectAttribute(selectAttribute SelectAttribute) Attribute {
	typ := AttributeTypeSelectAttribute

	return Attribute{
		SelectAttribute: &selectAttribute,
		Type:            typ,
	}
}

func CreateAttributeMultiSelectAttribute(multiSelectAttribute MultiSelectAttribute) Attribute {
	typ := AttributeTypeMultiSelectAttribute

	return Attribute{
		MultiSelectAttribute: &multiSelectAttribute,
		Type:                 typ,
	}
}

func CreateAttributeStatusAttribute(statusAttribute StatusAttribute) Attribute {
	typ := AttributeTypeStatusAttribute

	return Attribute{
		StatusAttribute: &statusAttribute,
		Type:            typ,
	}
}

func CreateAttributeSequenceAttribute(sequenceAttribute SequenceAttribute) Attribute {
	typ := AttributeTypeSequenceAttribute

	return Attribute{
		SequenceAttribute: &sequenceAttribute,
		Type:              typ,
	}
}

func CreateAttributeRelationAttribute(relationAttribute RelationAttribute) Attribute {
	typ := AttributeTypeRelationAttribute

	return Attribute{
		RelationAttribute: &relationAttribute,
		Type:              typ,
	}
}

func CreateAttributeUserRelationAttribute(userRelationAttribute UserRelationAttribute) Attribute {
	typ := AttributeTypeUserRelationAttribute

	return Attribute{
		UserRelationAttribute: &userRelationAttribute,
		Type:                  typ,
	}
}

func CreateAttributeAddressRelationAttribute(addressRelationAttribute AddressRelationAttribute) Attribute {
	typ := AttributeTypeAddressRelationAttribute

	return Attribute{
		AddressRelationAttribute: &addressRelationAttribute,
		Type:                     typ,
	}
}

func CreateAttributePaymentMethodRelationAttribute(paymentMethodRelationAttribute PaymentMethodRelationAttribute) Attribute {
	typ := AttributeTypePaymentMethodRelationAttribute

	return Attribute{
		PaymentMethodRelationAttribute: &paymentMethodRelationAttribute,
		Type:                           typ,
	}
}

func CreateAttributeCurrencyAttribute(currencyAttribute CurrencyAttribute) Attribute {
	typ := AttributeTypeCurrencyAttribute

	return Attribute{
		CurrencyAttribute: &currencyAttribute,
		Type:              typ,
	}
}

func CreateAttributeRepeatableAttribute(repeatableAttribute RepeatableAttribute) Attribute {
	typ := AttributeTypeRepeatableAttribute

	return Attribute{
		RepeatableAttribute: &repeatableAttribute,
		Type:                typ,
	}
}

func CreateAttributeTagsAttribute(tagsAttribute TagsAttribute) Attribute {
	typ := AttributeTypeTagsAttribute

	return Attribute{
		TagsAttribute: &tagsAttribute,
		Type:          typ,
	}
}

func CreateAttributeNumberAttribute(numberAttribute NumberAttribute) Attribute {
	typ := AttributeTypeNumberAttribute

	return Attribute{
		NumberAttribute: &numberAttribute,
		Type:            typ,
	}
}

func CreateAttributeConsentAttribute(consentAttribute ConsentAttribute) Attribute {
	typ := AttributeTypeConsentAttribute

	return Attribute{
		ConsentAttribute: &consentAttribute,
		Type:             typ,
	}
}

func CreateAttributeInternalAttribute(internalAttribute InternalAttribute) Attribute {
	typ := AttributeTypeInternalAttribute

	return Attribute{
		InternalAttribute: &internalAttribute,
		Type:              typ,
	}
}

func CreateAttributeOrderedListAttribute(orderedListAttribute OrderedListAttribute) Attribute {
	typ := AttributeTypeOrderedListAttribute

	return Attribute{
		OrderedListAttribute: &orderedListAttribute,
		Type:                 typ,
	}
}

func CreateAttributeFileAttribute(fileAttribute FileAttribute) Attribute {
	typ := AttributeTypeFileAttribute

	return Attribute{
		FileAttribute: &fileAttribute,
		Type:          typ,
	}
}

func CreateAttributeComputedAttribute(computedAttribute ComputedAttribute) Attribute {
	typ := AttributeTypeComputedAttribute

	return Attribute{
		ComputedAttribute: &computedAttribute,
		Type:              typ,
	}
}

func CreateAttributePartnerStatusAttribute(partnerStatusAttribute PartnerStatusAttribute) Attribute {
	typ := AttributeTypePartnerStatusAttribute

	return Attribute{
		PartnerStatusAttribute: &partnerStatusAttribute,
		Type:                   typ,
	}
}

func CreateAttributeInvitationEmailAttribute(invitationEmailAttribute InvitationEmailAttribute) Attribute {
	typ := AttributeTypeInvitationEmailAttribute

	return Attribute{
		InvitationEmailAttribute: &invitationEmailAttribute,
		Type:                     typ,
	}
}

func CreateAttributeAutomationAttribute(automationAttribute AutomationAttribute) Attribute {
	typ := AttributeTypeAutomationAttribute

	return Attribute{
		AutomationAttribute: &automationAttribute,
		Type:                typ,
	}
}

func CreateAttributeInternalUserAttribute(internalUserAttribute InternalUserAttribute) Attribute {
	typ := AttributeTypeInternalUserAttribute

	return Attribute{
		InternalUserAttribute: &internalUserAttribute,
		Type:                  typ,
	}
}

func CreateAttributePurposeAttribute(purposeAttribute PurposeAttribute) Attribute {
	typ := AttributeTypePurposeAttribute

	return Attribute{
		PurposeAttribute: &purposeAttribute,
		Type:             typ,
	}
}

func CreateAttributePartnerOrganisationAttribute(partnerOrganisationAttribute PartnerOrganisationAttribute) Attribute {
	typ := AttributeTypePartnerOrganisationAttribute

	return Attribute{
		PartnerOrganisationAttribute: &partnerOrganisationAttribute,
		Type:                         typ,
	}
}

func (u *Attribute) UnmarshalJSON(data []byte) error {

	var internalAttribute InternalAttribute = InternalAttribute{}
	if err := utils.UnmarshalJSON(data, &internalAttribute, "", true, false); err == nil {
		u.InternalAttribute = &internalAttribute
		u.Type = AttributeTypeInternalAttribute
		return nil
	}

	var linkAttribute LinkAttribute = LinkAttribute{}
	if err := utils.UnmarshalJSON(data, &linkAttribute, "", true, false); err == nil {
		u.LinkAttribute = &linkAttribute
		u.Type = AttributeTypeLinkAttribute
		return nil
	}

	var dateAttribute DateAttribute = DateAttribute{}
	if err := utils.UnmarshalJSON(data, &dateAttribute, "", true, false); err == nil {
		u.DateAttribute = &dateAttribute
		u.Type = AttributeTypeDateAttribute
		return nil
	}

	var countryAttribute CountryAttribute = CountryAttribute{}
	if err := utils.UnmarshalJSON(data, &countryAttribute, "", true, false); err == nil {
		u.CountryAttribute = &countryAttribute
		u.Type = AttributeTypeCountryAttribute
		return nil
	}

	var booleanAttribute BooleanAttribute = BooleanAttribute{}
	if err := utils.UnmarshalJSON(data, &booleanAttribute, "", true, false); err == nil {
		u.BooleanAttribute = &booleanAttribute
		u.Type = AttributeTypeBooleanAttribute
		return nil
	}

	var partnerOrganisationAttribute PartnerOrganisationAttribute = PartnerOrganisationAttribute{}
	if err := utils.UnmarshalJSON(data, &partnerOrganisationAttribute, "", true, false); err == nil {
		u.PartnerOrganisationAttribute = &partnerOrganisationAttribute
		u.Type = AttributeTypePartnerOrganisationAttribute
		return nil
	}

	var internalUserAttribute InternalUserAttribute = InternalUserAttribute{}
	if err := utils.UnmarshalJSON(data, &internalUserAttribute, "", true, false); err == nil {
		u.InternalUserAttribute = &internalUserAttribute
		u.Type = AttributeTypeInternalUserAttribute
		return nil
	}

	var automationAttribute AutomationAttribute = AutomationAttribute{}
	if err := utils.UnmarshalJSON(data, &automationAttribute, "", true, false); err == nil {
		u.AutomationAttribute = &automationAttribute
		u.Type = AttributeTypeAutomationAttribute
		return nil
	}

	var invitationEmailAttribute InvitationEmailAttribute = InvitationEmailAttribute{}
	if err := utils.UnmarshalJSON(data, &invitationEmailAttribute, "", true, false); err == nil {
		u.InvitationEmailAttribute = &invitationEmailAttribute
		u.Type = AttributeTypeInvitationEmailAttribute
		return nil
	}

	var partnerStatusAttribute PartnerStatusAttribute = PartnerStatusAttribute{}
	if err := utils.UnmarshalJSON(data, &partnerStatusAttribute, "", true, false); err == nil {
		u.PartnerStatusAttribute = &partnerStatusAttribute
		u.Type = AttributeTypePartnerStatusAttribute
		return nil
	}

	var computedAttribute ComputedAttribute = ComputedAttribute{}
	if err := utils.UnmarshalJSON(data, &computedAttribute, "", true, false); err == nil {
		u.ComputedAttribute = &computedAttribute
		u.Type = AttributeTypeComputedAttribute
		return nil
	}

	var orderedListAttribute OrderedListAttribute = OrderedListAttribute{}
	if err := utils.UnmarshalJSON(data, &orderedListAttribute, "", true, false); err == nil {
		u.OrderedListAttribute = &orderedListAttribute
		u.Type = AttributeTypeOrderedListAttribute
		return nil
	}

	var statusAttribute StatusAttribute = StatusAttribute{}
	if err := utils.UnmarshalJSON(data, &statusAttribute, "", true, false); err == nil {
		u.StatusAttribute = &statusAttribute
		u.Type = AttributeTypeStatusAttribute
		return nil
	}

	var addressRelationAttribute AddressRelationAttribute = AddressRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &addressRelationAttribute, "", true, false); err == nil {
		u.AddressRelationAttribute = &addressRelationAttribute
		u.Type = AttributeTypeAddressRelationAttribute
		return nil
	}

	var textAttribute TextAttribute = TextAttribute{}
	if err := utils.UnmarshalJSON(data, &textAttribute, "", true, false); err == nil {
		u.TextAttribute = &textAttribute
		u.Type = AttributeTypeTextAttribute
		return nil
	}

	var userRelationAttribute UserRelationAttribute = UserRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &userRelationAttribute, "", true, false); err == nil {
		u.UserRelationAttribute = &userRelationAttribute
		u.Type = AttributeTypeUserRelationAttribute
		return nil
	}

	var numberAttribute NumberAttribute = NumberAttribute{}
	if err := utils.UnmarshalJSON(data, &numberAttribute, "", true, false); err == nil {
		u.NumberAttribute = &numberAttribute
		u.Type = AttributeTypeNumberAttribute
		return nil
	}

	var paymentMethodRelationAttribute PaymentMethodRelationAttribute = PaymentMethodRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &paymentMethodRelationAttribute, "", true, false); err == nil {
		u.PaymentMethodRelationAttribute = &paymentMethodRelationAttribute
		u.Type = AttributeTypePaymentMethodRelationAttribute
		return nil
	}

	var consentAttribute ConsentAttribute = ConsentAttribute{}
	if err := utils.UnmarshalJSON(data, &consentAttribute, "", true, false); err == nil {
		u.ConsentAttribute = &consentAttribute
		u.Type = AttributeTypeConsentAttribute
		return nil
	}

	var currencyAttribute CurrencyAttribute = CurrencyAttribute{}
	if err := utils.UnmarshalJSON(data, &currencyAttribute, "", true, false); err == nil {
		u.CurrencyAttribute = &currencyAttribute
		u.Type = AttributeTypeCurrencyAttribute
		return nil
	}

	var tagsAttribute TagsAttribute = TagsAttribute{}
	if err := utils.UnmarshalJSON(data, &tagsAttribute, "", true, false); err == nil {
		u.TagsAttribute = &tagsAttribute
		u.Type = AttributeTypeTagsAttribute
		return nil
	}

	var sequenceAttribute SequenceAttribute = SequenceAttribute{}
	if err := utils.UnmarshalJSON(data, &sequenceAttribute, "", true, false); err == nil {
		u.SequenceAttribute = &sequenceAttribute
		u.Type = AttributeTypeSequenceAttribute
		return nil
	}

	var selectAttribute SelectAttribute = SelectAttribute{}
	if err := utils.UnmarshalJSON(data, &selectAttribute, "", true, false); err == nil {
		u.SelectAttribute = &selectAttribute
		u.Type = AttributeTypeSelectAttribute
		return nil
	}

	var repeatableAttribute RepeatableAttribute = RepeatableAttribute{}
	if err := utils.UnmarshalJSON(data, &repeatableAttribute, "", true, false); err == nil {
		u.RepeatableAttribute = &repeatableAttribute
		u.Type = AttributeTypeRepeatableAttribute
		return nil
	}

	var multiSelectAttribute MultiSelectAttribute = MultiSelectAttribute{}
	if err := utils.UnmarshalJSON(data, &multiSelectAttribute, "", true, false); err == nil {
		u.MultiSelectAttribute = &multiSelectAttribute
		u.Type = AttributeTypeMultiSelectAttribute
		return nil
	}

	var purposeAttribute PurposeAttribute = PurposeAttribute{}
	if err := utils.UnmarshalJSON(data, &purposeAttribute, "", true, false); err == nil {
		u.PurposeAttribute = &purposeAttribute
		u.Type = AttributeTypePurposeAttribute
		return nil
	}

	var fileAttribute FileAttribute = FileAttribute{}
	if err := utils.UnmarshalJSON(data, &fileAttribute, "", true, false); err == nil {
		u.FileAttribute = &fileAttribute
		u.Type = AttributeTypeFileAttribute
		return nil
	}

	var relationAttribute RelationAttribute = RelationAttribute{}
	if err := utils.UnmarshalJSON(data, &relationAttribute, "", true, false); err == nil {
		u.RelationAttribute = &relationAttribute
		u.Type = AttributeTypeRelationAttribute
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Attribute", string(data))
}

func (u Attribute) MarshalJSON() ([]byte, error) {
	if u.TextAttribute != nil {
		return utils.MarshalJSON(u.TextAttribute, "", true)
	}

	if u.LinkAttribute != nil {
		return utils.MarshalJSON(u.LinkAttribute, "", true)
	}

	if u.DateAttribute != nil {
		return utils.MarshalJSON(u.DateAttribute, "", true)
	}

	if u.CountryAttribute != nil {
		return utils.MarshalJSON(u.CountryAttribute, "", true)
	}

	if u.BooleanAttribute != nil {
		return utils.MarshalJSON(u.BooleanAttribute, "", true)
	}

	if u.SelectAttribute != nil {
		return utils.MarshalJSON(u.SelectAttribute, "", true)
	}

	if u.MultiSelectAttribute != nil {
		return utils.MarshalJSON(u.MultiSelectAttribute, "", true)
	}

	if u.StatusAttribute != nil {
		return utils.MarshalJSON(u.StatusAttribute, "", true)
	}

	if u.SequenceAttribute != nil {
		return utils.MarshalJSON(u.SequenceAttribute, "", true)
	}

	if u.RelationAttribute != nil {
		return utils.MarshalJSON(u.RelationAttribute, "", true)
	}

	if u.UserRelationAttribute != nil {
		return utils.MarshalJSON(u.UserRelationAttribute, "", true)
	}

	if u.AddressRelationAttribute != nil {
		return utils.MarshalJSON(u.AddressRelationAttribute, "", true)
	}

	if u.PaymentMethodRelationAttribute != nil {
		return utils.MarshalJSON(u.PaymentMethodRelationAttribute, "", true)
	}

	if u.CurrencyAttribute != nil {
		return utils.MarshalJSON(u.CurrencyAttribute, "", true)
	}

	if u.RepeatableAttribute != nil {
		return utils.MarshalJSON(u.RepeatableAttribute, "", true)
	}

	if u.TagsAttribute != nil {
		return utils.MarshalJSON(u.TagsAttribute, "", true)
	}

	if u.NumberAttribute != nil {
		return utils.MarshalJSON(u.NumberAttribute, "", true)
	}

	if u.ConsentAttribute != nil {
		return utils.MarshalJSON(u.ConsentAttribute, "", true)
	}

	if u.InternalAttribute != nil {
		return utils.MarshalJSON(u.InternalAttribute, "", true)
	}

	if u.OrderedListAttribute != nil {
		return utils.MarshalJSON(u.OrderedListAttribute, "", true)
	}

	if u.FileAttribute != nil {
		return utils.MarshalJSON(u.FileAttribute, "", true)
	}

	if u.ComputedAttribute != nil {
		return utils.MarshalJSON(u.ComputedAttribute, "", true)
	}

	if u.PartnerStatusAttribute != nil {
		return utils.MarshalJSON(u.PartnerStatusAttribute, "", true)
	}

	if u.InvitationEmailAttribute != nil {
		return utils.MarshalJSON(u.InvitationEmailAttribute, "", true)
	}

	if u.AutomationAttribute != nil {
		return utils.MarshalJSON(u.AutomationAttribute, "", true)
	}

	if u.InternalUserAttribute != nil {
		return utils.MarshalJSON(u.InternalUserAttribute, "", true)
	}

	if u.PurposeAttribute != nil {
		return utils.MarshalJSON(u.PurposeAttribute, "", true)
	}

	if u.PartnerOrganisationAttribute != nil {
		return utils.MarshalJSON(u.PartnerOrganisationAttribute, "", true)
	}

	return nil, errors.New("could not marshal union type Attribute: all fields are null")
}
