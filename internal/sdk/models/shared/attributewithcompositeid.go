// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
	"time"
)

// PartnerOrganisationAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PartnerOrganisationAttributeAttributeWithCompositeIDConstraints struct {
}

// PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PartnerOrganisationAttributeAttributeWithCompositeIDType string

const (
	PartnerOrganisationAttributeAttributeWithCompositeIDTypePartnerOrganisation PartnerOrganisationAttributeAttributeWithCompositeIDType = "partner_organisation"
)

func (e PartnerOrganisationAttributeAttributeWithCompositeIDType) ToPointer() *PartnerOrganisationAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *PartnerOrganisationAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_organisation":
		*e = PartnerOrganisationAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerOrganisationAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDPartnerOrganisationAttribute - Shared Partner Organisations
type AttributeWithCompositeIDPartnerOrganisationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PartnerOrganisationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PartnerOrganisationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                                          `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDPartnerOrganisationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPartnerOrganisationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetConstraints() *PartnerOrganisationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetInfoHelpers() *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetType() *PartnerOrganisationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// PurposeAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PurposeAttributeAttributeWithCompositeIDConstraints struct {
}

// PurposeAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PurposeAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PurposeAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PurposeAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PurposeAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PurposeAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PurposeAttributeAttributeWithCompositeIDType string

const (
	PurposeAttributeAttributeWithCompositeIDTypePurpose PurposeAttributeAttributeWithCompositeIDType = "purpose"
)

func (e PurposeAttributeAttributeWithCompositeIDType) ToPointer() *PurposeAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *PurposeAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "purpose":
		*e = PurposeAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurposeAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDPurposeAttribute - Entity Taxonomy
type AttributeWithCompositeIDPurposeAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PurposeAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PurposeAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	// URL-friendly identifier for the classification
	Slug        *string                                       `json:"slug,omitempty"`
	Parents     []string                                      `json:"parents,omitempty"`
	CreatedAt   *time.Time                                    `json:"created_at,omitempty"`
	UpdatedAt   *time.Time                                    `json:"updated_at,omitempty"`
	Type        *PurposeAttributeAttributeWithCompositeIDType `json:"type,omitempty"`
	CompositeID *string                                       `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDPurposeAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPurposeAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetConstraints() *PurposeAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetInfoHelpers() *PurposeAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetParents() []string {
	if o == nil {
		return nil
	}
	return o.Parents
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetType() *PurposeAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDPurposeAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// InternalUserAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type InternalUserAttributeAttributeWithCompositeIDConstraints struct {
}

// InternalUserAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InternalUserAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InternalUserAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InternalUserAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InternalUserAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InternalUserAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type InternalUserAttributeAttributeWithCompositeIDType string

const (
	InternalUserAttributeAttributeWithCompositeIDTypeInternalUser InternalUserAttributeAttributeWithCompositeIDType = "internal_user"
)

func (e InternalUserAttributeAttributeWithCompositeIDType) ToPointer() *InternalUserAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *InternalUserAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_user":
		*e = InternalUserAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InternalUserAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDInternalUserAttribute - Epilot internal user info
type AttributeWithCompositeIDInternalUserAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InternalUserAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InternalUserAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InternalUserAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                                   `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDInternalUserAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDInternalUserAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetConstraints() *InternalUserAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetInfoHelpers() *InternalUserAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetType() *InternalUserAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDInternalUserAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// AutomationAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type AutomationAttributeAttributeWithCompositeIDConstraints struct {
}

// AutomationAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type AutomationAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *AutomationAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *AutomationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *AutomationAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *AutomationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type AutomationAttributeAttributeWithCompositeIDType string

const (
	AutomationAttributeAttributeWithCompositeIDTypeAutomation AutomationAttributeAttributeWithCompositeIDType = "automation"
)

func (e AutomationAttributeAttributeWithCompositeIDType) ToPointer() *AutomationAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *AutomationAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation":
		*e = AutomationAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutomationAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDAutomationAttribute - Automation entity
type AttributeWithCompositeIDAutomationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *AutomationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *AutomationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *AutomationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                                 `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDAutomationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDAutomationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetConstraints() *AutomationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetInfoHelpers() *AutomationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetType() *AutomationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDAutomationAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// InvitationEmailAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type InvitationEmailAttributeAttributeWithCompositeIDConstraints struct {
}

// InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type InvitationEmailAttributeAttributeWithCompositeIDType string

const (
	InvitationEmailAttributeAttributeWithCompositeIDTypeInvitationEmail InvitationEmailAttributeAttributeWithCompositeIDType = "invitation_email"
)

func (e InvitationEmailAttributeAttributeWithCompositeIDType) ToPointer() *InvitationEmailAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *InvitationEmailAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invitation_email":
		*e = InvitationEmailAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvitationEmailAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDInvitationEmailAttribute - Email address for send invitation
type AttributeWithCompositeIDInvitationEmailAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InvitationEmailAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InvitationEmailAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                                      `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDInvitationEmailAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDInvitationEmailAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetConstraints() *InvitationEmailAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetInfoHelpers() *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetType() *InvitationEmailAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDInvitationEmailAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// PartnerStatusAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PartnerStatusAttributeAttributeWithCompositeIDConstraints struct {
}

// PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PartnerStatusAttributeAttributeWithCompositeIDType string

const (
	PartnerStatusAttributeAttributeWithCompositeIDTypePartnerStatus PartnerStatusAttributeAttributeWithCompositeIDType = "partner_status"
)

func (e PartnerStatusAttributeAttributeWithCompositeIDType) ToPointer() *PartnerStatusAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *PartnerStatusAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_status":
		*e = PartnerStatusAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerStatusAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDPartnerStatusAttribute - Partner Status
type AttributeWithCompositeIDPartnerStatusAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PartnerStatusAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PartnerStatusAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                                    `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDPartnerStatusAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPartnerStatusAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetConstraints() *PartnerStatusAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetInfoHelpers() *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetType() *PartnerStatusAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDPartnerStatusAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// ComputedAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type ComputedAttributeAttributeWithCompositeIDConstraints struct {
}

// ComputedAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type ComputedAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *ComputedAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *ComputedAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *ComputedAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *ComputedAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type ComputedAttributeAttributeWithCompositeIDType string

const (
	ComputedAttributeAttributeWithCompositeIDTypeComputed ComputedAttributeAttributeWithCompositeIDType = "computed"
)

func (e ComputedAttributeAttributeWithCompositeIDType) ToPointer() *ComputedAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *ComputedAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "computed":
		*e = ComputedAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputedAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDComputedAttribute - An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)
type AttributeWithCompositeIDComputedAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *ComputedAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *ComputedAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *ComputedAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                               `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDComputedAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDComputedAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDComputedAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDComputedAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDComputedAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDComputedAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDComputedAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDComputedAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDComputedAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDComputedAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDComputedAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDComputedAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDComputedAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDComputedAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDComputedAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDComputedAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDComputedAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDComputedAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDComputedAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDComputedAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDComputedAttribute) GetConstraints() *ComputedAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDComputedAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDComputedAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDComputedAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDComputedAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDComputedAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDComputedAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDComputedAttribute) GetInfoHelpers() *ComputedAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDComputedAttribute) GetType() *ComputedAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDComputedAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// FileAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type FileAttributeAttributeWithCompositeIDConstraints struct {
}

// FileAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type FileAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *FileAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *FileAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *FileAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *FileAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type FileAttributeAttributeWithCompositeIDType string

const (
	FileAttributeAttributeWithCompositeIDTypeImage FileAttributeAttributeWithCompositeIDType = "image"
	FileAttributeAttributeWithCompositeIDTypeFile  FileAttributeAttributeWithCompositeIDType = "file"
)

func (e FileAttributeAttributeWithCompositeIDType) ToPointer() *FileAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *FileAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image":
		fallthrough
	case "file":
		*e = FileAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileAttributeAttributeWithCompositeIDType: %v", v)
	}
}

type FileAttributeDefaultAccessControl string

const (
	FileAttributeDefaultAccessControlPublicRead FileAttributeDefaultAccessControl = "public-read"
	FileAttributeDefaultAccessControlPrivate    FileAttributeDefaultAccessControl = "private"
)

func (e FileAttributeDefaultAccessControl) ToPointer() *FileAttributeDefaultAccessControl {
	return &e
}
func (e *FileAttributeDefaultAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public-read":
		fallthrough
	case "private":
		*e = FileAttributeDefaultAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileAttributeDefaultAccessControl: %v", v)
	}
}

// AttributeWithCompositeIDFileAttribute - File or Image Attachment
type AttributeWithCompositeIDFileAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *FileAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *FileAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        FileAttributeAttributeWithCompositeIDType         `json:"type"`
	Multiple    *bool                                             `json:"multiple,omitempty"`
	// List of file extensions (without the dot suffix)
	AllowedExtensions []string `json:"allowed_extensions,omitempty"`
	// Controls how the images are presented to the user during upload on the Entity Details view.
	DisplayImagesLandscaped *bool `json:"display_images_landscaped,omitempty"`
	// When set to true, an i18n description will be used alongside the attribute label.
	// This description should be set through the platform locales in the form: `file.{attribute_name}.description_text`.
	//
	EnableDescription    *bool                              `json:"enable_description,omitempty"`
	DefaultAccessControl *FileAttributeDefaultAccessControl `json:"default_access_control,omitempty"`
	CompositeID          *string                            `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDFileAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDFileAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDFileAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDFileAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDFileAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDFileAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDFileAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDFileAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDFileAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDFileAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDFileAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDFileAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDFileAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDFileAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDFileAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDFileAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDFileAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDFileAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDFileAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDFileAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDFileAttribute) GetConstraints() *FileAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDFileAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDFileAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDFileAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDFileAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDFileAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDFileAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDFileAttribute) GetInfoHelpers() *FileAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDFileAttribute) GetType() FileAttributeAttributeWithCompositeIDType {
	if o == nil {
		return FileAttributeAttributeWithCompositeIDType("")
	}
	return o.Type
}

func (o *AttributeWithCompositeIDFileAttribute) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

func (o *AttributeWithCompositeIDFileAttribute) GetAllowedExtensions() []string {
	if o == nil {
		return nil
	}
	return o.AllowedExtensions
}

func (o *AttributeWithCompositeIDFileAttribute) GetDisplayImagesLandscaped() *bool {
	if o == nil {
		return nil
	}
	return o.DisplayImagesLandscaped
}

func (o *AttributeWithCompositeIDFileAttribute) GetEnableDescription() *bool {
	if o == nil {
		return nil
	}
	return o.EnableDescription
}

func (o *AttributeWithCompositeIDFileAttribute) GetDefaultAccessControl() *FileAttributeDefaultAccessControl {
	if o == nil {
		return nil
	}
	return o.DefaultAccessControl
}

func (o *AttributeWithCompositeIDFileAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// OrderedListAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type OrderedListAttributeAttributeWithCompositeIDConstraints struct {
}

// OrderedListAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type OrderedListAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *OrderedListAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *OrderedListAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *OrderedListAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *OrderedListAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type OrderedListAttributeAttributeWithCompositeIDType string

const (
	OrderedListAttributeAttributeWithCompositeIDTypeOrderedList OrderedListAttributeAttributeWithCompositeIDType = "ordered_list"
)

func (e OrderedListAttributeAttributeWithCompositeIDType) ToPointer() *OrderedListAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *OrderedListAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ordered_list":
		*e = OrderedListAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderedListAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDOrderedListAttribute - Type of attribute to render N number of ordered fields
type AttributeWithCompositeIDOrderedListAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *OrderedListAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *OrderedListAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *OrderedListAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                                  `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDOrderedListAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDOrderedListAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetConstraints() *OrderedListAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetInfoHelpers() *OrderedListAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetType() *OrderedListAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDOrderedListAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// InternalAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type InternalAttributeAttributeWithCompositeIDConstraints struct {
}

// InternalAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InternalAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *InternalAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *InternalAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *InternalAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *InternalAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type InternalAttributeAttributeWithCompositeIDType string

const (
	InternalAttributeAttributeWithCompositeIDTypeInternal InternalAttributeAttributeWithCompositeIDType = "internal"
)

func (e InternalAttributeAttributeWithCompositeIDType) ToPointer() *InternalAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *InternalAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = InternalAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InternalAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDInternalAttribute - No UI representation
type AttributeWithCompositeIDInternalAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InternalAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InternalAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InternalAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                               `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDInternalAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDInternalAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDInternalAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDInternalAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDInternalAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDInternalAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDInternalAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDInternalAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDInternalAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDInternalAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDInternalAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDInternalAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDInternalAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDInternalAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDInternalAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDInternalAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDInternalAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDInternalAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDInternalAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDInternalAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDInternalAttribute) GetConstraints() *InternalAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDInternalAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDInternalAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDInternalAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDInternalAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDInternalAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDInternalAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDInternalAttribute) GetInfoHelpers() *InternalAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDInternalAttribute) GetType() *InternalAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDInternalAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// ConsentAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type ConsentAttributeAttributeWithCompositeIDConstraints struct {
}

// ConsentAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type ConsentAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *ConsentAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *ConsentAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *ConsentAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *ConsentAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type ConsentAttributeAttributeWithCompositeIDType string

const (
	ConsentAttributeAttributeWithCompositeIDTypeConsent ConsentAttributeAttributeWithCompositeIDType = "consent"
)

func (e ConsentAttributeAttributeWithCompositeIDType) ToPointer() *ConsentAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *ConsentAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consent":
		*e = ConsentAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsentAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDConsentAttribute - Consent Management
type AttributeWithCompositeIDConsentAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *ConsentAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *ConsentAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        ConsentAttributeAttributeWithCompositeIDType         `json:"type"`
	Topic       string                                               `json:"topic"`
	Identifiers []string                                             `json:"identifiers,omitempty"`
	CompositeID *string                                              `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDConsentAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDConsentAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDConsentAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDConsentAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDConsentAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDConsentAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDConsentAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDConsentAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDConsentAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDConsentAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDConsentAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDConsentAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDConsentAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDConsentAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDConsentAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDConsentAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDConsentAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDConsentAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDConsentAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDConsentAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDConsentAttribute) GetConstraints() *ConsentAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDConsentAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDConsentAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDConsentAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDConsentAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDConsentAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDConsentAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDConsentAttribute) GetInfoHelpers() *ConsentAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDConsentAttribute) GetType() ConsentAttributeAttributeWithCompositeIDType {
	if o == nil {
		return ConsentAttributeAttributeWithCompositeIDType("")
	}
	return o.Type
}

func (o *AttributeWithCompositeIDConsentAttribute) GetTopic() string {
	if o == nil {
		return ""
	}
	return o.Topic
}

func (o *AttributeWithCompositeIDConsentAttribute) GetIdentifiers() []string {
	if o == nil {
		return nil
	}
	return o.Identifiers
}

func (o *AttributeWithCompositeIDConsentAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// NumberAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type NumberAttributeAttributeWithCompositeIDConstraints struct {
}

// NumberAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type NumberAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *NumberAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *NumberAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *NumberAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *NumberAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type NumberAttributeAttributeWithCompositeIDType string

const (
	NumberAttributeAttributeWithCompositeIDTypeNumber NumberAttributeAttributeWithCompositeIDType = "number"
)

func (e NumberAttributeAttributeWithCompositeIDType) ToPointer() *NumberAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *NumberAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = NumberAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NumberAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDNumberAttribute - Numeric input
type AttributeWithCompositeIDNumberAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *NumberAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *NumberAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *NumberAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Format      *string                                             `json:"format,omitempty"`
	// Whether or not to show a thousands separator
	ShowSeparator *bool   `default:"true" json:"show_separator"`
	CompositeID   *string `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDNumberAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDNumberAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDNumberAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDNumberAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDNumberAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDNumberAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDNumberAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDNumberAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDNumberAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDNumberAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDNumberAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDNumberAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDNumberAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDNumberAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDNumberAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDNumberAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDNumberAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDNumberAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDNumberAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDNumberAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDNumberAttribute) GetConstraints() *NumberAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDNumberAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDNumberAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDNumberAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDNumberAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDNumberAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDNumberAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDNumberAttribute) GetInfoHelpers() *NumberAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDNumberAttribute) GetType() *NumberAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDNumberAttribute) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *AttributeWithCompositeIDNumberAttribute) GetShowSeparator() *bool {
	if o == nil {
		return nil
	}
	return o.ShowSeparator
}

func (o *AttributeWithCompositeIDNumberAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// TagsAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type TagsAttributeAttributeWithCompositeIDConstraints struct {
}

// TagsAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type TagsAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *TagsAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *TagsAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *TagsAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *TagsAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type TagsAttributeAttributeWithCompositeIDType string

const (
	TagsAttributeAttributeWithCompositeIDTypeTags TagsAttributeAttributeWithCompositeIDType = "tags"
)

func (e TagsAttributeAttributeWithCompositeIDType) ToPointer() *TagsAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *TagsAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tags":
		*e = TagsAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagsAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDTagsAttribute - Tags
type AttributeWithCompositeIDTagsAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *TagsAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *TagsAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *TagsAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Options     []string                                          `json:"options,omitempty"`
	Suggestions []string                                          `json:"suggestions,omitempty"`
	CompositeID *string                                           `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDTagsAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDTagsAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDTagsAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDTagsAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDTagsAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDTagsAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDTagsAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDTagsAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDTagsAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDTagsAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDTagsAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDTagsAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDTagsAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDTagsAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDTagsAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDTagsAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDTagsAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDTagsAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDTagsAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDTagsAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDTagsAttribute) GetConstraints() *TagsAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDTagsAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDTagsAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDTagsAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDTagsAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDTagsAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDTagsAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDTagsAttribute) GetInfoHelpers() *TagsAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDTagsAttribute) GetType() *TagsAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDTagsAttribute) GetOptions() []string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDTagsAttribute) GetSuggestions() []string {
	if o == nil {
		return nil
	}
	return o.Suggestions
}

func (o *AttributeWithCompositeIDTagsAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// RepeatableAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type RepeatableAttributeAttributeWithCompositeIDConstraints struct {
}

// RepeatableAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type RepeatableAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *RepeatableAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *RepeatableAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *RepeatableAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *RepeatableAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

// RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode - Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.
type RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode string

const (
	RepeatableAttributeAttributeWithCompositeIDRelationAffinityModeWeak   RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode = "weak"
	RepeatableAttributeAttributeWithCompositeIDRelationAffinityModeStrong RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode = "strong"
)

func (e RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode) ToPointer() *RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode {
	return &e
}
func (e *RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode: %v", v)
	}
}

type RepeatableAttributeAttributeWithCompositeIDType string

const (
	RepeatableAttributeAttributeWithCompositeIDTypeString         RepeatableAttributeAttributeWithCompositeIDType = "string"
	RepeatableAttributeAttributeWithCompositeIDTypePhone          RepeatableAttributeAttributeWithCompositeIDType = "phone"
	RepeatableAttributeAttributeWithCompositeIDTypeEmail          RepeatableAttributeAttributeWithCompositeIDType = "email"
	RepeatableAttributeAttributeWithCompositeIDTypeAddress        RepeatableAttributeAttributeWithCompositeIDType = "address"
	RepeatableAttributeAttributeWithCompositeIDTypeRelation       RepeatableAttributeAttributeWithCompositeIDType = "relation"
	RepeatableAttributeAttributeWithCompositeIDTypePayment        RepeatableAttributeAttributeWithCompositeIDType = "payment"
	RepeatableAttributeAttributeWithCompositeIDTypePriceComponent RepeatableAttributeAttributeWithCompositeIDType = "price_component"
	RepeatableAttributeAttributeWithCompositeIDTypeDate           RepeatableAttributeAttributeWithCompositeIDType = "date"
)

func (e RepeatableAttributeAttributeWithCompositeIDType) ToPointer() *RepeatableAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *RepeatableAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "phone":
		fallthrough
	case "email":
		fallthrough
	case "address":
		fallthrough
	case "relation":
		fallthrough
	case "payment":
		fallthrough
	case "price_component":
		fallthrough
	case "date":
		*e = RepeatableAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepeatableAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDRepeatableAttribute - Repeatable (add N number of fields)
type AttributeWithCompositeIDRepeatableAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RepeatableAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *RepeatableAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Repeatable  *bool                                                   `json:"repeatable,omitempty"`
	HasPrimary  *bool                                                   `json:"has_primary,omitempty"`
	// Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.
	RelationAffinityMode *RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	Type                 *RepeatableAttributeAttributeWithCompositeIDType                 `json:"type,omitempty"`
	// when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool   `default:"true" json:"enable_relation_picker"`
	CompositeID          *string `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDRepeatableAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDRepeatableAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetConstraints() *RepeatableAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetInfoHelpers() *RepeatableAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetRelationAffinityMode() *RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetType() *RepeatableAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

func (o *AttributeWithCompositeIDRepeatableAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// CurrencyAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type CurrencyAttributeAttributeWithCompositeIDConstraints struct {
}

// CurrencyAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type CurrencyAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *CurrencyAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *CurrencyAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *CurrencyAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *CurrencyAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type CurrencyAttributeAttributeWithCompositeIDType string

const (
	CurrencyAttributeAttributeWithCompositeIDTypeCurrency CurrencyAttributeAttributeWithCompositeIDType = "currency"
)

func (e CurrencyAttributeAttributeWithCompositeIDType) ToPointer() *CurrencyAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *CurrencyAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "currency":
		*e = CurrencyAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrencyAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// Currency1 - A currency configuration
type Currency1 struct {
	Code        string  `json:"code"`
	Description string  `json:"description"`
	Symbol      string  `json:"symbol"`
	Flag        *string `json:"flag,omitempty"`
}

func (o *Currency1) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *Currency1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Currency1) GetSymbol() string {
	if o == nil {
		return ""
	}
	return o.Symbol
}

func (o *Currency1) GetFlag() *string {
	if o == nil {
		return nil
	}
	return o.Flag
}

type CurrencyAttributeCurrencyType string

const (
	CurrencyAttributeCurrencyTypeCurrency1 CurrencyAttributeCurrencyType = "currency_1"
)

type CurrencyAttributeCurrency struct {
	Currency1 *Currency1

	Type CurrencyAttributeCurrencyType
}

func CreateCurrencyAttributeCurrencyCurrency1(currency1 Currency1) CurrencyAttributeCurrency {
	typ := CurrencyAttributeCurrencyTypeCurrency1

	return CurrencyAttributeCurrency{
		Currency1: &currency1,
		Type:      typ,
	}
}

func (u *CurrencyAttributeCurrency) UnmarshalJSON(data []byte) error {

	var currency1 Currency1 = Currency1{}
	if err := utils.UnmarshalJSON(data, &currency1, "", true, false); err == nil {
		u.Currency1 = &currency1
		u.Type = CurrencyAttributeCurrencyTypeCurrency1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CurrencyAttributeCurrency", string(data))
}

func (u CurrencyAttributeCurrency) MarshalJSON() ([]byte, error) {
	if u.Currency1 != nil {
		return utils.MarshalJSON(u.Currency1, "", true)
	}

	return nil, errors.New("could not marshal union type CurrencyAttributeCurrency: all fields are null")
}

// AttributeWithCompositeIDCurrencyAttribute - Currency input
type AttributeWithCompositeIDCurrencyAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CurrencyAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers          *CurrencyAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type                 CurrencyAttributeAttributeWithCompositeIDType         `json:"type"`
	CurrencySelectorOnly *bool                                                 `default:"false" json:"currency_selector_only"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency    []CurrencyAttributeCurrency `json:"currency"`
	CompositeID *string                     `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDCurrencyAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDCurrencyAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetConstraints() *CurrencyAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetInfoHelpers() *CurrencyAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetType() CurrencyAttributeAttributeWithCompositeIDType {
	if o == nil {
		return CurrencyAttributeAttributeWithCompositeIDType("")
	}
	return o.Type
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetCurrencySelectorOnly() *bool {
	if o == nil {
		return nil
	}
	return o.CurrencySelectorOnly
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetCurrency() []CurrencyAttributeCurrency {
	if o == nil {
		return []CurrencyAttributeCurrency{}
	}
	return o.Currency
}

func (o *AttributeWithCompositeIDCurrencyAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// PaymentMethodRelationAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PaymentMethodRelationAttributeAttributeWithCompositeIDConstraints struct {
}

// PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type PaymentMethodRelationAttributeAttributeWithCompositeIDType string

const (
	PaymentMethodRelationAttributeAttributeWithCompositeIDTypeRelationPaymentMethod PaymentMethodRelationAttributeAttributeWithCompositeIDType = "relation_payment_method"
)

func (e PaymentMethodRelationAttributeAttributeWithCompositeIDType) ToPointer() *PaymentMethodRelationAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *PaymentMethodRelationAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_payment_method":
		*e = PaymentMethodRelationAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentMethodRelationAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDPaymentMethodRelationAttribute - Reference to a payment method attribute of another entity
type AttributeWithCompositeIDPaymentMethodRelationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PaymentMethodRelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PaymentMethodRelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	HasPrimary  *bool                                                              `json:"has_primary,omitempty"`
	CompositeID *string                                                            `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDPaymentMethodRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPaymentMethodRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetConstraints() *PaymentMethodRelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetInfoHelpers() *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetType() *PaymentMethodRelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// AddressRelationAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type AddressRelationAttributeAttributeWithCompositeIDConstraints struct {
}

// AddressRelationAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type AddressRelationAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type AddressRelationAttributeAttributeWithCompositeIDType string

const (
	AddressRelationAttributeAttributeWithCompositeIDTypeRelationAddress AddressRelationAttributeAttributeWithCompositeIDType = "relation_address"
)

func (e AddressRelationAttributeAttributeWithCompositeIDType) ToPointer() *AddressRelationAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *AddressRelationAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_address":
		*e = AddressRelationAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressRelationAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDAddressRelationAttribute - Reference to an address attribute of another entity
type AttributeWithCompositeIDAddressRelationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *AddressRelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *AddressRelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	HasPrimary  *bool                                                        `json:"has_primary,omitempty"`
	CompositeID *string                                                      `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDAddressRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDAddressRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetConstraints() *AddressRelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetInfoHelpers() *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetType() *AddressRelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *AttributeWithCompositeIDAddressRelationAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// UserRelationAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type UserRelationAttributeAttributeWithCompositeIDConstraints struct {
}

// UserRelationAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type UserRelationAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *UserRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *UserRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *UserRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *UserRelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type UserRelationAttributeAttributeWithCompositeIDType string

const (
	UserRelationAttributeAttributeWithCompositeIDTypeRelationUser UserRelationAttributeAttributeWithCompositeIDType = "relation_user"
)

func (e UserRelationAttributeAttributeWithCompositeIDType) ToPointer() *UserRelationAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *UserRelationAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_user":
		*e = UserRelationAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserRelationAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDUserRelationAttribute - User Relationship
type AttributeWithCompositeIDUserRelationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *UserRelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *UserRelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *UserRelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Multiple    *bool                                                     `default:"false" json:"multiple"`
	CompositeID *string                                                   `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDUserRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDUserRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetConstraints() *UserRelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetInfoHelpers() *UserRelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetType() *UserRelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

func (o *AttributeWithCompositeIDUserRelationAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// RelationAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type RelationAttributeAttributeWithCompositeIDConstraints struct {
}

// RelationAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type RelationAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *RelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *RelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *RelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *RelationAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type RelationAttributeAttributeWithCompositeIDType string

const (
	RelationAttributeAttributeWithCompositeIDTypeRelation RelationAttributeAttributeWithCompositeIDType = "relation"
)

func (e RelationAttributeAttributeWithCompositeIDType) ToPointer() *RelationAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *RelationAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation":
		*e = RelationAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeAttributeWithCompositeIDType: %v", v)
	}
}

type RelationAttributeRelationType string

const (
	RelationAttributeRelationTypeHasMany RelationAttributeRelationType = "has_many"
	RelationAttributeRelationTypeHasOne  RelationAttributeRelationType = "has_one"
)

func (e RelationAttributeRelationType) ToPointer() *RelationAttributeRelationType {
	return &e
}
func (e *RelationAttributeRelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "has_many":
		fallthrough
	case "has_one":
		*e = RelationAttributeRelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeRelationType: %v", v)
	}
}

// RelationAttributeRelationAffinityMode - Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
type RelationAttributeRelationAffinityMode string

const (
	RelationAttributeRelationAffinityModeWeak   RelationAttributeRelationAffinityMode = "weak"
	RelationAttributeRelationAffinityModeStrong RelationAttributeRelationAffinityMode = "strong"
)

func (e RelationAttributeRelationAffinityMode) ToPointer() *RelationAttributeRelationAffinityMode {
	return &e
}
func (e *RelationAttributeRelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RelationAttributeRelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeRelationAffinityMode: %v", v)
	}
}

type RelationAttributeEditMode string

const (
	RelationAttributeEditModeListView RelationAttributeEditMode = "list-view"
)

func (e RelationAttributeEditMode) ToPointer() *RelationAttributeEditMode {
	return &e
}
func (e *RelationAttributeEditMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list-view":
		*e = RelationAttributeEditMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeEditMode: %v", v)
	}
}

// RelationAttributeActionType - The action type. Currently supported actions:
//
// | action | description |
// |--------|-------------|
// | add_existing | Enables the user to pick an existing entity to link as relation |
// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
type RelationAttributeActionType string

const (
	RelationAttributeActionTypeAddExisting        RelationAttributeActionType = "add_existing"
	RelationAttributeActionTypeCreateNew          RelationAttributeActionType = "create_new"
	RelationAttributeActionTypeCreateFromExisting RelationAttributeActionType = "create_from_existing"
)

func (e RelationAttributeActionType) ToPointer() *RelationAttributeActionType {
	return &e
}
func (e *RelationAttributeActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_existing":
		fallthrough
	case "create_new":
		fallthrough
	case "create_from_existing":
		*e = RelationAttributeActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeActionType: %v", v)
	}
}

type RelationAttributeAttributeWithCompositeIDNewEntityItem struct {
	ID string `json:"_id"`
	// Organization Id the entity belongs to
	Org    string        `json:"_org"`
	Owners []EntityOwner `json:"_owners,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema string `json:"_schema"`
	// Title of entity
	Title     *string    `json:"_title"`
	Tags      []string   `json:"_tags,omitempty"`
	CreatedAt *time.Time `json:"_created_at"`
	UpdatedAt *time.Time `json:"_updated_at"`
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL                  *EntityACL `json:"_acl,omitempty"`
	Purpose              []string   `json:"_purpose,omitempty"`
	AdditionalProperties any        `additionalProperties:"true" json:"-"`
}

func (r RelationAttributeAttributeWithCompositeIDNewEntityItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeAttributeWithCompositeIDNewEntityItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetOwners() []EntityOwner {
	if o == nil {
		return nil
	}
	return o.Owners
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetACL() *EntityACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *RelationAttributeAttributeWithCompositeIDNewEntityItem) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type RelationAttributeAttributeWithCompositeIDActions struct {
	// The action type. Currently supported actions:
	//
	// | action | description |
	// |--------|-------------|
	// | add_existing | Enables the user to pick an existing entity to link as relation |
	// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
	// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
	//
	ActionType *RelationAttributeActionType `json:"action_type,omitempty"`
	// The action label or action translation key (i18n)
	Label *string `json:"label,omitempty"`
	// Sets the action as the default action, visible as the main action button.
	Default *bool `json:"default,omitempty"`
	// Name of the feature flag that enables this action
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This action should only be active when all the settings have the correct value
	SettingsFlag  []SettingFlag                                           `json:"settings_flag,omitempty"`
	NewEntityItem *RelationAttributeAttributeWithCompositeIDNewEntityItem `json:"new_entity_item,omitempty"`
}

func (o *RelationAttributeAttributeWithCompositeIDActions) GetActionType() *RelationAttributeActionType {
	if o == nil {
		return nil
	}
	return o.ActionType
}

func (o *RelationAttributeAttributeWithCompositeIDActions) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *RelationAttributeAttributeWithCompositeIDActions) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *RelationAttributeAttributeWithCompositeIDActions) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *RelationAttributeAttributeWithCompositeIDActions) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *RelationAttributeAttributeWithCompositeIDActions) GetNewEntityItem() *RelationAttributeAttributeWithCompositeIDNewEntityItem {
	if o == nil {
		return nil
	}
	return o.NewEntityItem
}

type RelationAttributeDrawerSize string

const (
	RelationAttributeDrawerSizeSmall  RelationAttributeDrawerSize = "small"
	RelationAttributeDrawerSizeMedium RelationAttributeDrawerSize = "medium"
	RelationAttributeDrawerSizeLarge  RelationAttributeDrawerSize = "large"
)

func (e RelationAttributeDrawerSize) ToPointer() *RelationAttributeDrawerSize {
	return &e
}
func (e *RelationAttributeDrawerSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		*e = RelationAttributeDrawerSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeDrawerSize: %v", v)
	}
}

type RelationAttributeSummaryFieldsType string

const (
	RelationAttributeSummaryFieldsTypeStr          RelationAttributeSummaryFieldsType = "str"
	RelationAttributeSummaryFieldsTypeSummaryField RelationAttributeSummaryFieldsType = "SummaryField"
)

type RelationAttributeSummaryFields struct {
	Str          *string
	SummaryField *SummaryField

	Type RelationAttributeSummaryFieldsType
}

func CreateRelationAttributeSummaryFieldsStr(str string) RelationAttributeSummaryFields {
	typ := RelationAttributeSummaryFieldsTypeStr

	return RelationAttributeSummaryFields{
		Str:  &str,
		Type: typ,
	}
}

func CreateRelationAttributeSummaryFieldsSummaryField(summaryField SummaryField) RelationAttributeSummaryFields {
	typ := RelationAttributeSummaryFieldsTypeSummaryField

	return RelationAttributeSummaryFields{
		SummaryField: &summaryField,
		Type:         typ,
	}
}

func (u *RelationAttributeSummaryFields) UnmarshalJSON(data []byte) error {

	var summaryField SummaryField = SummaryField{}
	if err := utils.UnmarshalJSON(data, &summaryField, "", true, false); err == nil {
		u.SummaryField = &summaryField
		u.Type = RelationAttributeSummaryFieldsTypeSummaryField
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = RelationAttributeSummaryFieldsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RelationAttributeSummaryFields", string(data))
}

func (u RelationAttributeSummaryFields) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.SummaryField != nil {
		return utils.MarshalJSON(u.SummaryField, "", true)
	}

	return nil, errors.New("could not marshal union type RelationAttributeSummaryFields: all fields are null")
}

// AttributeWithCompositeIDRelationAttribute - Entity Relationship
type AttributeWithCompositeIDRelationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers  *RelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type         *RelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	RelationType *RelationAttributeRelationType                        `json:"relation_type,omitempty"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAttributeRelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool                      `default:"true" json:"enable_relation_picker"`
	EditMode             *RelationAttributeEditMode `json:"edit_mode,omitempty"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool                                              `default:"false" json:"details_view_mode_enabled"`
	Actions                []RelationAttributeAttributeWithCompositeIDActions `json:"actions,omitempty"`
	DrawerSize             *RelationAttributeDrawerSize                       `json:"drawer_size,omitempty"`
	SummaryFields          []RelationAttributeSummaryFields                   `json:"summary_fields,omitempty"`
	HasPrimary             *bool                                              `json:"has_primary,omitempty"`
	AllowedSchemas         []string                                           `json:"allowedSchemas,omitempty"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string `json:"add_button_label,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
	CompositeID       *string `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDRelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDRelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDRelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDRelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDRelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDRelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDRelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDRelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDRelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDRelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDRelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDRelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDRelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDRelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDRelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDRelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDRelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDRelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDRelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDRelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDRelationAttribute) GetConstraints() *RelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDRelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDRelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDRelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDRelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDRelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDRelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDRelationAttribute) GetInfoHelpers() *RelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDRelationAttribute) GetType() *RelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDRelationAttribute) GetRelationType() *RelationAttributeRelationType {
	if o == nil {
		return nil
	}
	return o.RelationType
}

func (o *AttributeWithCompositeIDRelationAttribute) GetReverseAttributes() map[string]string {
	if o == nil {
		return nil
	}
	return o.ReverseAttributes
}

func (o *AttributeWithCompositeIDRelationAttribute) GetRelationAffinityMode() *RelationAttributeRelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *AttributeWithCompositeIDRelationAttribute) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

func (o *AttributeWithCompositeIDRelationAttribute) GetEditMode() *RelationAttributeEditMode {
	if o == nil {
		return nil
	}
	return o.EditMode
}

func (o *AttributeWithCompositeIDRelationAttribute) GetDetailsViewModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DetailsViewModeEnabled
}

func (o *AttributeWithCompositeIDRelationAttribute) GetActions() []RelationAttributeAttributeWithCompositeIDActions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *AttributeWithCompositeIDRelationAttribute) GetDrawerSize() *RelationAttributeDrawerSize {
	if o == nil {
		return nil
	}
	return o.DrawerSize
}

func (o *AttributeWithCompositeIDRelationAttribute) GetSummaryFields() []RelationAttributeSummaryFields {
	if o == nil {
		return nil
	}
	return o.SummaryFields
}

func (o *AttributeWithCompositeIDRelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *AttributeWithCompositeIDRelationAttribute) GetAllowedSchemas() []string {
	if o == nil {
		return nil
	}
	return o.AllowedSchemas
}

func (o *AttributeWithCompositeIDRelationAttribute) GetEnableRelationTags() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationTags
}

func (o *AttributeWithCompositeIDRelationAttribute) GetAddButtonLabel() *string {
	if o == nil {
		return nil
	}
	return o.AddButtonLabel
}

func (o *AttributeWithCompositeIDRelationAttribute) GetSearchPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.SearchPlaceholder
}

func (o *AttributeWithCompositeIDRelationAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// SequenceAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SequenceAttributeAttributeWithCompositeIDConstraints struct {
}

// SequenceAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SequenceAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *SequenceAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *SequenceAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *SequenceAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *SequenceAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type SequenceAttributeAttributeWithCompositeIDType string

const (
	SequenceAttributeAttributeWithCompositeIDTypeSequence SequenceAttributeAttributeWithCompositeIDType = "sequence"
)

func (e SequenceAttributeAttributeWithCompositeIDType) ToPointer() *SequenceAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *SequenceAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sequence":
		*e = SequenceAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SequenceAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDSequenceAttribute - Sequence of unique identifiers
type AttributeWithCompositeIDSequenceAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SequenceAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SequenceAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SequenceAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	// Prefix added before the sequence number
	Prefix      *string `json:"prefix,omitempty"`
	StartNumber *int64  `json:"start_number,omitempty"`
	CompositeID *string `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDSequenceAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDSequenceAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetConstraints() *SequenceAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetInfoHelpers() *SequenceAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetType() *SequenceAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetStartNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.StartNumber
}

func (o *AttributeWithCompositeIDSequenceAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// StatusAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type StatusAttributeAttributeWithCompositeIDConstraints struct {
}

// StatusAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type StatusAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *StatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *StatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *StatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *StatusAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type StatusAttributeAttributeWithCompositeIDType string

const (
	StatusAttributeAttributeWithCompositeIDTypeStatus StatusAttributeAttributeWithCompositeIDType = "status"
)

func (e StatusAttributeAttributeWithCompositeIDType) ToPointer() *StatusAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *StatusAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "status":
		*e = StatusAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusAttributeAttributeWithCompositeIDType: %v", v)
	}
}

type StatusAttributeOptions2 struct {
	// The stored value of the option
	Value string `json:"value"`
	// The displayed title of the option
	Title *string `json:"title,omitempty"`
}

func (o *StatusAttributeOptions2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *StatusAttributeOptions2) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type StatusAttributeAttributeWithCompositeIDOptionsType string

const (
	StatusAttributeAttributeWithCompositeIDOptionsTypeStr                     StatusAttributeAttributeWithCompositeIDOptionsType = "str"
	StatusAttributeAttributeWithCompositeIDOptionsTypeStatusAttributeOptions2 StatusAttributeAttributeWithCompositeIDOptionsType = "StatusAttribute_options_2"
)

type StatusAttributeAttributeWithCompositeIDOptions struct {
	Str                     *string
	StatusAttributeOptions2 *StatusAttributeOptions2

	Type StatusAttributeAttributeWithCompositeIDOptionsType
}

func CreateStatusAttributeAttributeWithCompositeIDOptionsStr(str string) StatusAttributeAttributeWithCompositeIDOptions {
	typ := StatusAttributeAttributeWithCompositeIDOptionsTypeStr

	return StatusAttributeAttributeWithCompositeIDOptions{
		Str:  &str,
		Type: typ,
	}
}

func CreateStatusAttributeAttributeWithCompositeIDOptionsStatusAttributeOptions2(statusAttributeOptions2 StatusAttributeOptions2) StatusAttributeAttributeWithCompositeIDOptions {
	typ := StatusAttributeAttributeWithCompositeIDOptionsTypeStatusAttributeOptions2

	return StatusAttributeAttributeWithCompositeIDOptions{
		StatusAttributeOptions2: &statusAttributeOptions2,
		Type:                    typ,
	}
}

func (u *StatusAttributeAttributeWithCompositeIDOptions) UnmarshalJSON(data []byte) error {

	var statusAttributeOptions2 StatusAttributeOptions2 = StatusAttributeOptions2{}
	if err := utils.UnmarshalJSON(data, &statusAttributeOptions2, "", true, false); err == nil {
		u.StatusAttributeOptions2 = &statusAttributeOptions2
		u.Type = StatusAttributeAttributeWithCompositeIDOptionsTypeStatusAttributeOptions2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = StatusAttributeAttributeWithCompositeIDOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatusAttributeAttributeWithCompositeIDOptions", string(data))
}

func (u StatusAttributeAttributeWithCompositeIDOptions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.StatusAttributeOptions2 != nil {
		return utils.MarshalJSON(u.StatusAttributeOptions2, "", true)
	}

	return nil, errors.New("could not marshal union type StatusAttributeAttributeWithCompositeIDOptions: all fields are null")
}

// AttributeWithCompositeIDStatusAttribute - Status select
type AttributeWithCompositeIDStatusAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *StatusAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *StatusAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *StatusAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Options     []StatusAttributeAttributeWithCompositeIDOptions    `json:"options,omitempty"`
	CompositeID *string                                             `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDStatusAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDStatusAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDStatusAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDStatusAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDStatusAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDStatusAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDStatusAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDStatusAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDStatusAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDStatusAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDStatusAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDStatusAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDStatusAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDStatusAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDStatusAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDStatusAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDStatusAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDStatusAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDStatusAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDStatusAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDStatusAttribute) GetConstraints() *StatusAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDStatusAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDStatusAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDStatusAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDStatusAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDStatusAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDStatusAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDStatusAttribute) GetInfoHelpers() *StatusAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDStatusAttribute) GetType() *StatusAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDStatusAttribute) GetOptions() []StatusAttributeAttributeWithCompositeIDOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDStatusAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// MultiSelectAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type MultiSelectAttributeAttributeWithCompositeIDConstraints struct {
}

// MultiSelectAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type MultiSelectAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type MultiSelectAttributeAttributeWithCompositeIDType string

const (
	MultiSelectAttributeAttributeWithCompositeIDTypeMultiselect MultiSelectAttributeAttributeWithCompositeIDType = "multiselect"
	MultiSelectAttributeAttributeWithCompositeIDTypeCheckbox    MultiSelectAttributeAttributeWithCompositeIDType = "checkbox"
)

func (e MultiSelectAttributeAttributeWithCompositeIDType) ToPointer() *MultiSelectAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *MultiSelectAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "multiselect":
		fallthrough
	case "checkbox":
		*e = MultiSelectAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MultiSelectAttributeAttributeWithCompositeIDType: %v", v)
	}
}

type MultiSelectAttributeOptions2 struct {
	Value string  `json:"value"`
	Title *string `json:"title,omitempty"`
}

func (o *MultiSelectAttributeOptions2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *MultiSelectAttributeOptions2) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type MultiSelectAttributeOptionsType string

const (
	MultiSelectAttributeOptionsTypeStr                          MultiSelectAttributeOptionsType = "str"
	MultiSelectAttributeOptionsTypeMultiSelectAttributeOptions2 MultiSelectAttributeOptionsType = "MultiSelectAttribute_options_2"
)

type MultiSelectAttributeOptions struct {
	Str                          *string
	MultiSelectAttributeOptions2 *MultiSelectAttributeOptions2

	Type MultiSelectAttributeOptionsType
}

func CreateMultiSelectAttributeOptionsStr(str string) MultiSelectAttributeOptions {
	typ := MultiSelectAttributeOptionsTypeStr

	return MultiSelectAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func CreateMultiSelectAttributeOptionsMultiSelectAttributeOptions2(multiSelectAttributeOptions2 MultiSelectAttributeOptions2) MultiSelectAttributeOptions {
	typ := MultiSelectAttributeOptionsTypeMultiSelectAttributeOptions2

	return MultiSelectAttributeOptions{
		MultiSelectAttributeOptions2: &multiSelectAttributeOptions2,
		Type:                         typ,
	}
}

func (u *MultiSelectAttributeOptions) UnmarshalJSON(data []byte) error {

	var multiSelectAttributeOptions2 MultiSelectAttributeOptions2 = MultiSelectAttributeOptions2{}
	if err := utils.UnmarshalJSON(data, &multiSelectAttributeOptions2, "", true, false); err == nil {
		u.MultiSelectAttributeOptions2 = &multiSelectAttributeOptions2
		u.Type = MultiSelectAttributeOptionsTypeMultiSelectAttributeOptions2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = MultiSelectAttributeOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MultiSelectAttributeOptions", string(data))
}

func (u MultiSelectAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MultiSelectAttributeOptions2 != nil {
		return utils.MarshalJSON(u.MultiSelectAttributeOptions2, "", true)
	}

	return nil, errors.New("could not marshal union type MultiSelectAttributeOptions: all fields are null")
}

// AttributeWithCompositeIDMultiSelectAttribute - Multi Choice Selection
type AttributeWithCompositeIDMultiSelectAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *MultiSelectAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *MultiSelectAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	// controls if the matching of values against the options is case sensitive or not
	DisableCaseSensitive *bool `json:"disable_case_sensitive,omitempty"`
	// controls if the 360 ui will allow the user to enter a value which is not defined by the options
	AllowExtraOptions *bool                         `json:"allow_extra_options,omitempty"`
	Options           []MultiSelectAttributeOptions `json:"options,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny    *bool   `json:"allow_any,omitempty"`
	CompositeID *string `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDMultiSelectAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDMultiSelectAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetConstraints() *MultiSelectAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetInfoHelpers() *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetType() *MultiSelectAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetDisableCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.DisableCaseSensitive
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetAllowExtraOptions() *bool {
	if o == nil {
		return nil
	}
	return o.AllowExtraOptions
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetOptions() []MultiSelectAttributeOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetAllowAny() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAny
}

func (o *AttributeWithCompositeIDMultiSelectAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// SelectAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SelectAttributeAttributeWithCompositeIDConstraints struct {
}

// SelectAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SelectAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *SelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *SelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *SelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *SelectAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type SelectAttributeAttributeWithCompositeIDType string

const (
	SelectAttributeAttributeWithCompositeIDTypeSelect SelectAttributeAttributeWithCompositeIDType = "select"
	SelectAttributeAttributeWithCompositeIDTypeRadio  SelectAttributeAttributeWithCompositeIDType = "radio"
)

func (e SelectAttributeAttributeWithCompositeIDType) ToPointer() *SelectAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *SelectAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "select":
		fallthrough
	case "radio":
		*e = SelectAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SelectAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDSelectAttribute - Dropdown select
type AttributeWithCompositeIDSelectAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SelectAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SelectAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SelectAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Options     any                                                 `json:"options,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny    *bool   `json:"allow_any,omitempty"`
	CompositeID *string `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDSelectAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDSelectAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDSelectAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDSelectAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDSelectAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDSelectAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDSelectAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDSelectAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDSelectAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDSelectAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDSelectAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDSelectAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDSelectAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDSelectAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDSelectAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDSelectAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDSelectAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDSelectAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDSelectAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDSelectAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDSelectAttribute) GetConstraints() *SelectAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDSelectAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDSelectAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDSelectAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDSelectAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDSelectAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDSelectAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDSelectAttribute) GetInfoHelpers() *SelectAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDSelectAttribute) GetType() *SelectAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDSelectAttribute) GetOptions() any {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDSelectAttribute) GetAllowAny() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAny
}

func (o *AttributeWithCompositeIDSelectAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// BooleanAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type BooleanAttributeAttributeWithCompositeIDConstraints struct {
}

// BooleanAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type BooleanAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *BooleanAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *BooleanAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *BooleanAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *BooleanAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type BooleanAttributeAttributeWithCompositeIDType string

const (
	BooleanAttributeAttributeWithCompositeIDTypeBoolean BooleanAttributeAttributeWithCompositeIDType = "boolean"
)

func (e BooleanAttributeAttributeWithCompositeIDType) ToPointer() *BooleanAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *BooleanAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		*e = BooleanAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooleanAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDBooleanAttribute - Yes / No Toggle
type AttributeWithCompositeIDBooleanAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *BooleanAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *BooleanAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *BooleanAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                              `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDBooleanAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDBooleanAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetConstraints() *BooleanAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetInfoHelpers() *BooleanAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetType() *BooleanAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDBooleanAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// CountryAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type CountryAttributeAttributeWithCompositeIDConstraints struct {
}

// CountryAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type CountryAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *CountryAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *CountryAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *CountryAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *CountryAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type CountryAttributeAttributeWithCompositeIDType string

const (
	CountryAttributeAttributeWithCompositeIDTypeCountry CountryAttributeAttributeWithCompositeIDType = "country"
)

func (e CountryAttributeAttributeWithCompositeIDType) ToPointer() *CountryAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *CountryAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "country":
		*e = CountryAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CountryAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDCountryAttribute - Country picker
type AttributeWithCompositeIDCountryAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CountryAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *CountryAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *CountryAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                              `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDCountryAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDCountryAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDCountryAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDCountryAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDCountryAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDCountryAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDCountryAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDCountryAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDCountryAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDCountryAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDCountryAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDCountryAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDCountryAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDCountryAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDCountryAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDCountryAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDCountryAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDCountryAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDCountryAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDCountryAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDCountryAttribute) GetConstraints() *CountryAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDCountryAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDCountryAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDCountryAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDCountryAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDCountryAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDCountryAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDCountryAttribute) GetInfoHelpers() *CountryAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDCountryAttribute) GetType() *CountryAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDCountryAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// DateAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type DateAttributeAttributeWithCompositeIDConstraints struct {
}

// DateAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type DateAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *DateAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *DateAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *DateAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *DateAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type DateAttributeAttributeWithCompositeIDType string

const (
	DateAttributeAttributeWithCompositeIDTypeDate     DateAttributeAttributeWithCompositeIDType = "date"
	DateAttributeAttributeWithCompositeIDTypeDatetime DateAttributeAttributeWithCompositeIDType = "datetime"
)

func (e DateAttributeAttributeWithCompositeIDType) ToPointer() *DateAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *DateAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		fallthrough
	case "datetime":
		*e = DateAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDDateAttribute - Date or Datetime picker
type AttributeWithCompositeIDDateAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *DateAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *DateAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *DateAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                           `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDDateAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDDateAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDDateAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDDateAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDDateAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDDateAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDDateAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDDateAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDDateAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDDateAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDDateAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDDateAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDDateAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDDateAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDDateAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDDateAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDDateAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDDateAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDDateAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDDateAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDDateAttribute) GetConstraints() *DateAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDDateAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDDateAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDDateAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDDateAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDDateAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDDateAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDDateAttribute) GetInfoHelpers() *DateAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDDateAttribute) GetType() *DateAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDDateAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// LinkAttributeAttributeWithCompositeIDConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type LinkAttributeAttributeWithCompositeIDConstraints struct {
}

// LinkAttributeAttributeWithCompositeIDInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type LinkAttributeAttributeWithCompositeIDInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *LinkAttributeAttributeWithCompositeIDInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *LinkAttributeAttributeWithCompositeIDInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *LinkAttributeAttributeWithCompositeIDInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *LinkAttributeAttributeWithCompositeIDInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type LinkAttributeAttributeWithCompositeIDType string

const (
	LinkAttributeAttributeWithCompositeIDTypeLink LinkAttributeAttributeWithCompositeIDType = "link"
)

func (e LinkAttributeAttributeWithCompositeIDType) ToPointer() *LinkAttributeAttributeWithCompositeIDType {
	return &e
}
func (e *LinkAttributeAttributeWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = LinkAttributeAttributeWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkAttributeAttributeWithCompositeIDType: %v", v)
	}
}

// AttributeWithCompositeIDLinkAttribute - Link with title and href
type AttributeWithCompositeIDLinkAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *LinkAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *LinkAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *LinkAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	CompositeID *string                                           `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDLinkAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDLinkAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDLinkAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDLinkAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDLinkAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDLinkAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDLinkAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDLinkAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDLinkAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDLinkAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDLinkAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDLinkAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDLinkAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDLinkAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDLinkAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDLinkAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDLinkAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDLinkAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDLinkAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDLinkAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDLinkAttribute) GetConstraints() *LinkAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDLinkAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDLinkAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDLinkAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDLinkAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDLinkAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDLinkAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDLinkAttribute) GetInfoHelpers() *LinkAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDLinkAttribute) GetType() *LinkAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDLinkAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

// TextAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type TextAttributeConstraints struct {
}

// TextAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type TextAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *TextAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *TextAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *TextAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *TextAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type TextAttributeType string

const (
	TextAttributeTypeString TextAttributeType = "string"
)

func (e TextAttributeType) ToPointer() *TextAttributeType {
	return &e
}
func (e *TextAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TextAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextAttributeType: %v", v)
	}
}

// AttributeWithCompositeIDTextAttribute - Textarea or text input
type AttributeWithCompositeIDTextAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *TextAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *TextAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *TextAttributeType        `json:"type,omitempty"`
	Multiline   *bool                     `json:"multiline,omitempty"`
	CompositeID *string                   `json:"composite_id,omitempty"`
}

func (a AttributeWithCompositeIDTextAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDTextAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDTextAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDTextAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDTextAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDTextAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDTextAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDTextAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDTextAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDTextAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDTextAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDTextAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDTextAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDTextAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDTextAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDTextAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDTextAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDTextAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDTextAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDTextAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDTextAttribute) GetConstraints() *TextAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDTextAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDTextAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDTextAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDTextAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDTextAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDTextAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDTextAttribute) GetInfoHelpers() *TextAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDTextAttribute) GetType() *TextAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDTextAttribute) GetMultiline() *bool {
	if o == nil {
		return nil
	}
	return o.Multiline
}

func (o *AttributeWithCompositeIDTextAttribute) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

type AttributeWithCompositeIDType string

const (
	AttributeWithCompositeIDTypeAttributeWithCompositeIDTextAttribute                  AttributeWithCompositeIDType = "AttributeWithCompositeID_TextAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDLinkAttribute                  AttributeWithCompositeIDType = "AttributeWithCompositeID_LinkAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDDateAttribute                  AttributeWithCompositeIDType = "AttributeWithCompositeID_DateAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDCountryAttribute               AttributeWithCompositeIDType = "AttributeWithCompositeID_CountryAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDBooleanAttribute               AttributeWithCompositeIDType = "AttributeWithCompositeID_BooleanAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDSelectAttribute                AttributeWithCompositeIDType = "AttributeWithCompositeID_SelectAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDMultiSelectAttribute           AttributeWithCompositeIDType = "AttributeWithCompositeID_MultiSelectAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDStatusAttribute                AttributeWithCompositeIDType = "AttributeWithCompositeID_StatusAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDSequenceAttribute              AttributeWithCompositeIDType = "AttributeWithCompositeID_SequenceAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDRelationAttribute              AttributeWithCompositeIDType = "AttributeWithCompositeID_RelationAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDUserRelationAttribute          AttributeWithCompositeIDType = "AttributeWithCompositeID_UserRelationAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDAddressRelationAttribute       AttributeWithCompositeIDType = "AttributeWithCompositeID_AddressRelationAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDPaymentMethodRelationAttribute AttributeWithCompositeIDType = "AttributeWithCompositeID_PaymentMethodRelationAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDCurrencyAttribute              AttributeWithCompositeIDType = "AttributeWithCompositeID_CurrencyAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDRepeatableAttribute            AttributeWithCompositeIDType = "AttributeWithCompositeID_RepeatableAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDTagsAttribute                  AttributeWithCompositeIDType = "AttributeWithCompositeID_TagsAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDNumberAttribute                AttributeWithCompositeIDType = "AttributeWithCompositeID_NumberAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDConsentAttribute               AttributeWithCompositeIDType = "AttributeWithCompositeID_ConsentAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDInternalAttribute              AttributeWithCompositeIDType = "AttributeWithCompositeID_InternalAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDOrderedListAttribute           AttributeWithCompositeIDType = "AttributeWithCompositeID_OrderedListAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDFileAttribute                  AttributeWithCompositeIDType = "AttributeWithCompositeID_FileAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDComputedAttribute              AttributeWithCompositeIDType = "AttributeWithCompositeID_ComputedAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDPartnerStatusAttribute         AttributeWithCompositeIDType = "AttributeWithCompositeID_PartnerStatusAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDInvitationEmailAttribute       AttributeWithCompositeIDType = "AttributeWithCompositeID_InvitationEmailAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDAutomationAttribute            AttributeWithCompositeIDType = "AttributeWithCompositeID_AutomationAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDInternalUserAttribute          AttributeWithCompositeIDType = "AttributeWithCompositeID_InternalUserAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDPurposeAttribute               AttributeWithCompositeIDType = "AttributeWithCompositeID_PurposeAttribute"
	AttributeWithCompositeIDTypeAttributeWithCompositeIDPartnerOrganisationAttribute   AttributeWithCompositeIDType = "AttributeWithCompositeID_PartnerOrganisationAttribute"
)

// AttributeWithCompositeID - a readonly computed ID for the attribute including schema slug and the attribute ID
type AttributeWithCompositeID struct {
	AttributeWithCompositeIDTextAttribute                  *AttributeWithCompositeIDTextAttribute
	AttributeWithCompositeIDLinkAttribute                  *AttributeWithCompositeIDLinkAttribute
	AttributeWithCompositeIDDateAttribute                  *AttributeWithCompositeIDDateAttribute
	AttributeWithCompositeIDCountryAttribute               *AttributeWithCompositeIDCountryAttribute
	AttributeWithCompositeIDBooleanAttribute               *AttributeWithCompositeIDBooleanAttribute
	AttributeWithCompositeIDSelectAttribute                *AttributeWithCompositeIDSelectAttribute
	AttributeWithCompositeIDMultiSelectAttribute           *AttributeWithCompositeIDMultiSelectAttribute
	AttributeWithCompositeIDStatusAttribute                *AttributeWithCompositeIDStatusAttribute
	AttributeWithCompositeIDSequenceAttribute              *AttributeWithCompositeIDSequenceAttribute
	AttributeWithCompositeIDRelationAttribute              *AttributeWithCompositeIDRelationAttribute
	AttributeWithCompositeIDUserRelationAttribute          *AttributeWithCompositeIDUserRelationAttribute
	AttributeWithCompositeIDAddressRelationAttribute       *AttributeWithCompositeIDAddressRelationAttribute
	AttributeWithCompositeIDPaymentMethodRelationAttribute *AttributeWithCompositeIDPaymentMethodRelationAttribute
	AttributeWithCompositeIDCurrencyAttribute              *AttributeWithCompositeIDCurrencyAttribute
	AttributeWithCompositeIDRepeatableAttribute            *AttributeWithCompositeIDRepeatableAttribute
	AttributeWithCompositeIDTagsAttribute                  *AttributeWithCompositeIDTagsAttribute
	AttributeWithCompositeIDNumberAttribute                *AttributeWithCompositeIDNumberAttribute
	AttributeWithCompositeIDConsentAttribute               *AttributeWithCompositeIDConsentAttribute
	AttributeWithCompositeIDInternalAttribute              *AttributeWithCompositeIDInternalAttribute
	AttributeWithCompositeIDOrderedListAttribute           *AttributeWithCompositeIDOrderedListAttribute
	AttributeWithCompositeIDFileAttribute                  *AttributeWithCompositeIDFileAttribute
	AttributeWithCompositeIDComputedAttribute              *AttributeWithCompositeIDComputedAttribute
	AttributeWithCompositeIDPartnerStatusAttribute         *AttributeWithCompositeIDPartnerStatusAttribute
	AttributeWithCompositeIDInvitationEmailAttribute       *AttributeWithCompositeIDInvitationEmailAttribute
	AttributeWithCompositeIDAutomationAttribute            *AttributeWithCompositeIDAutomationAttribute
	AttributeWithCompositeIDInternalUserAttribute          *AttributeWithCompositeIDInternalUserAttribute
	AttributeWithCompositeIDPurposeAttribute               *AttributeWithCompositeIDPurposeAttribute
	AttributeWithCompositeIDPartnerOrganisationAttribute   *AttributeWithCompositeIDPartnerOrganisationAttribute

	Type AttributeWithCompositeIDType
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDTextAttribute(attributeWithCompositeIDTextAttribute AttributeWithCompositeIDTextAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDTextAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDTextAttribute: &attributeWithCompositeIDTextAttribute,
		Type:                                  typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDLinkAttribute(attributeWithCompositeIDLinkAttribute AttributeWithCompositeIDLinkAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDLinkAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDLinkAttribute: &attributeWithCompositeIDLinkAttribute,
		Type:                                  typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDDateAttribute(attributeWithCompositeIDDateAttribute AttributeWithCompositeIDDateAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDDateAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDDateAttribute: &attributeWithCompositeIDDateAttribute,
		Type:                                  typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDCountryAttribute(attributeWithCompositeIDCountryAttribute AttributeWithCompositeIDCountryAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDCountryAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDCountryAttribute: &attributeWithCompositeIDCountryAttribute,
		Type:                                     typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDBooleanAttribute(attributeWithCompositeIDBooleanAttribute AttributeWithCompositeIDBooleanAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDBooleanAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDBooleanAttribute: &attributeWithCompositeIDBooleanAttribute,
		Type:                                     typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDSelectAttribute(attributeWithCompositeIDSelectAttribute AttributeWithCompositeIDSelectAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDSelectAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDSelectAttribute: &attributeWithCompositeIDSelectAttribute,
		Type:                                    typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDMultiSelectAttribute(attributeWithCompositeIDMultiSelectAttribute AttributeWithCompositeIDMultiSelectAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDMultiSelectAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDMultiSelectAttribute: &attributeWithCompositeIDMultiSelectAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDStatusAttribute(attributeWithCompositeIDStatusAttribute AttributeWithCompositeIDStatusAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDStatusAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDStatusAttribute: &attributeWithCompositeIDStatusAttribute,
		Type:                                    typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDSequenceAttribute(attributeWithCompositeIDSequenceAttribute AttributeWithCompositeIDSequenceAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDSequenceAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDSequenceAttribute: &attributeWithCompositeIDSequenceAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDRelationAttribute(attributeWithCompositeIDRelationAttribute AttributeWithCompositeIDRelationAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDRelationAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDRelationAttribute: &attributeWithCompositeIDRelationAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDUserRelationAttribute(attributeWithCompositeIDUserRelationAttribute AttributeWithCompositeIDUserRelationAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDUserRelationAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDUserRelationAttribute: &attributeWithCompositeIDUserRelationAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDAddressRelationAttribute(attributeWithCompositeIDAddressRelationAttribute AttributeWithCompositeIDAddressRelationAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDAddressRelationAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDAddressRelationAttribute: &attributeWithCompositeIDAddressRelationAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDPaymentMethodRelationAttribute(attributeWithCompositeIDPaymentMethodRelationAttribute AttributeWithCompositeIDPaymentMethodRelationAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDPaymentMethodRelationAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDPaymentMethodRelationAttribute: &attributeWithCompositeIDPaymentMethodRelationAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDCurrencyAttribute(attributeWithCompositeIDCurrencyAttribute AttributeWithCompositeIDCurrencyAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDCurrencyAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDCurrencyAttribute: &attributeWithCompositeIDCurrencyAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDRepeatableAttribute(attributeWithCompositeIDRepeatableAttribute AttributeWithCompositeIDRepeatableAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDRepeatableAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDRepeatableAttribute: &attributeWithCompositeIDRepeatableAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDTagsAttribute(attributeWithCompositeIDTagsAttribute AttributeWithCompositeIDTagsAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDTagsAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDTagsAttribute: &attributeWithCompositeIDTagsAttribute,
		Type:                                  typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDNumberAttribute(attributeWithCompositeIDNumberAttribute AttributeWithCompositeIDNumberAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDNumberAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDNumberAttribute: &attributeWithCompositeIDNumberAttribute,
		Type:                                    typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDConsentAttribute(attributeWithCompositeIDConsentAttribute AttributeWithCompositeIDConsentAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDConsentAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDConsentAttribute: &attributeWithCompositeIDConsentAttribute,
		Type:                                     typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDInternalAttribute(attributeWithCompositeIDInternalAttribute AttributeWithCompositeIDInternalAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDInternalAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDInternalAttribute: &attributeWithCompositeIDInternalAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDOrderedListAttribute(attributeWithCompositeIDOrderedListAttribute AttributeWithCompositeIDOrderedListAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDOrderedListAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDOrderedListAttribute: &attributeWithCompositeIDOrderedListAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDFileAttribute(attributeWithCompositeIDFileAttribute AttributeWithCompositeIDFileAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDFileAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDFileAttribute: &attributeWithCompositeIDFileAttribute,
		Type:                                  typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDComputedAttribute(attributeWithCompositeIDComputedAttribute AttributeWithCompositeIDComputedAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDComputedAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDComputedAttribute: &attributeWithCompositeIDComputedAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDPartnerStatusAttribute(attributeWithCompositeIDPartnerStatusAttribute AttributeWithCompositeIDPartnerStatusAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDPartnerStatusAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDPartnerStatusAttribute: &attributeWithCompositeIDPartnerStatusAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDInvitationEmailAttribute(attributeWithCompositeIDInvitationEmailAttribute AttributeWithCompositeIDInvitationEmailAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDInvitationEmailAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDInvitationEmailAttribute: &attributeWithCompositeIDInvitationEmailAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDAutomationAttribute(attributeWithCompositeIDAutomationAttribute AttributeWithCompositeIDAutomationAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDAutomationAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDAutomationAttribute: &attributeWithCompositeIDAutomationAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDInternalUserAttribute(attributeWithCompositeIDInternalUserAttribute AttributeWithCompositeIDInternalUserAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDInternalUserAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDInternalUserAttribute: &attributeWithCompositeIDInternalUserAttribute,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDPurposeAttribute(attributeWithCompositeIDPurposeAttribute AttributeWithCompositeIDPurposeAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDPurposeAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDPurposeAttribute: &attributeWithCompositeIDPurposeAttribute,
		Type:                                     typ,
	}
}

func CreateAttributeWithCompositeIDAttributeWithCompositeIDPartnerOrganisationAttribute(attributeWithCompositeIDPartnerOrganisationAttribute AttributeWithCompositeIDPartnerOrganisationAttribute) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAttributeWithCompositeIDPartnerOrganisationAttribute

	return AttributeWithCompositeID{
		AttributeWithCompositeIDPartnerOrganisationAttribute: &attributeWithCompositeIDPartnerOrganisationAttribute,
		Type: typ,
	}
}

func (u *AttributeWithCompositeID) UnmarshalJSON(data []byte) error {

	var attributeWithCompositeIDInternalAttribute AttributeWithCompositeIDInternalAttribute = AttributeWithCompositeIDInternalAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDInternalAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDInternalAttribute = &attributeWithCompositeIDInternalAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDInternalAttribute
		return nil
	}

	var attributeWithCompositeIDLinkAttribute AttributeWithCompositeIDLinkAttribute = AttributeWithCompositeIDLinkAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDLinkAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDLinkAttribute = &attributeWithCompositeIDLinkAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDLinkAttribute
		return nil
	}

	var attributeWithCompositeIDDateAttribute AttributeWithCompositeIDDateAttribute = AttributeWithCompositeIDDateAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDDateAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDDateAttribute = &attributeWithCompositeIDDateAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDDateAttribute
		return nil
	}

	var attributeWithCompositeIDCountryAttribute AttributeWithCompositeIDCountryAttribute = AttributeWithCompositeIDCountryAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDCountryAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDCountryAttribute = &attributeWithCompositeIDCountryAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDCountryAttribute
		return nil
	}

	var attributeWithCompositeIDBooleanAttribute AttributeWithCompositeIDBooleanAttribute = AttributeWithCompositeIDBooleanAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDBooleanAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDBooleanAttribute = &attributeWithCompositeIDBooleanAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDBooleanAttribute
		return nil
	}

	var attributeWithCompositeIDPartnerOrganisationAttribute AttributeWithCompositeIDPartnerOrganisationAttribute = AttributeWithCompositeIDPartnerOrganisationAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPartnerOrganisationAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDPartnerOrganisationAttribute = &attributeWithCompositeIDPartnerOrganisationAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDPartnerOrganisationAttribute
		return nil
	}

	var attributeWithCompositeIDInternalUserAttribute AttributeWithCompositeIDInternalUserAttribute = AttributeWithCompositeIDInternalUserAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDInternalUserAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDInternalUserAttribute = &attributeWithCompositeIDInternalUserAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDInternalUserAttribute
		return nil
	}

	var attributeWithCompositeIDAutomationAttribute AttributeWithCompositeIDAutomationAttribute = AttributeWithCompositeIDAutomationAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDAutomationAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDAutomationAttribute = &attributeWithCompositeIDAutomationAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDAutomationAttribute
		return nil
	}

	var attributeWithCompositeIDInvitationEmailAttribute AttributeWithCompositeIDInvitationEmailAttribute = AttributeWithCompositeIDInvitationEmailAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDInvitationEmailAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDInvitationEmailAttribute = &attributeWithCompositeIDInvitationEmailAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDInvitationEmailAttribute
		return nil
	}

	var attributeWithCompositeIDPartnerStatusAttribute AttributeWithCompositeIDPartnerStatusAttribute = AttributeWithCompositeIDPartnerStatusAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPartnerStatusAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDPartnerStatusAttribute = &attributeWithCompositeIDPartnerStatusAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDPartnerStatusAttribute
		return nil
	}

	var attributeWithCompositeIDComputedAttribute AttributeWithCompositeIDComputedAttribute = AttributeWithCompositeIDComputedAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDComputedAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDComputedAttribute = &attributeWithCompositeIDComputedAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDComputedAttribute
		return nil
	}

	var attributeWithCompositeIDOrderedListAttribute AttributeWithCompositeIDOrderedListAttribute = AttributeWithCompositeIDOrderedListAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDOrderedListAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDOrderedListAttribute = &attributeWithCompositeIDOrderedListAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDOrderedListAttribute
		return nil
	}

	var attributeWithCompositeIDStatusAttribute AttributeWithCompositeIDStatusAttribute = AttributeWithCompositeIDStatusAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDStatusAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDStatusAttribute = &attributeWithCompositeIDStatusAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDStatusAttribute
		return nil
	}

	var attributeWithCompositeIDPaymentMethodRelationAttribute AttributeWithCompositeIDPaymentMethodRelationAttribute = AttributeWithCompositeIDPaymentMethodRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPaymentMethodRelationAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDPaymentMethodRelationAttribute = &attributeWithCompositeIDPaymentMethodRelationAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDPaymentMethodRelationAttribute
		return nil
	}

	var attributeWithCompositeIDTextAttribute AttributeWithCompositeIDTextAttribute = AttributeWithCompositeIDTextAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDTextAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDTextAttribute = &attributeWithCompositeIDTextAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDTextAttribute
		return nil
	}

	var attributeWithCompositeIDUserRelationAttribute AttributeWithCompositeIDUserRelationAttribute = AttributeWithCompositeIDUserRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDUserRelationAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDUserRelationAttribute = &attributeWithCompositeIDUserRelationAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDUserRelationAttribute
		return nil
	}

	var attributeWithCompositeIDAddressRelationAttribute AttributeWithCompositeIDAddressRelationAttribute = AttributeWithCompositeIDAddressRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDAddressRelationAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDAddressRelationAttribute = &attributeWithCompositeIDAddressRelationAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDAddressRelationAttribute
		return nil
	}

	var attributeWithCompositeIDNumberAttribute AttributeWithCompositeIDNumberAttribute = AttributeWithCompositeIDNumberAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDNumberAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDNumberAttribute = &attributeWithCompositeIDNumberAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDNumberAttribute
		return nil
	}

	var attributeWithCompositeIDConsentAttribute AttributeWithCompositeIDConsentAttribute = AttributeWithCompositeIDConsentAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDConsentAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDConsentAttribute = &attributeWithCompositeIDConsentAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDConsentAttribute
		return nil
	}

	var attributeWithCompositeIDCurrencyAttribute AttributeWithCompositeIDCurrencyAttribute = AttributeWithCompositeIDCurrencyAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDCurrencyAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDCurrencyAttribute = &attributeWithCompositeIDCurrencyAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDCurrencyAttribute
		return nil
	}

	var attributeWithCompositeIDTagsAttribute AttributeWithCompositeIDTagsAttribute = AttributeWithCompositeIDTagsAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDTagsAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDTagsAttribute = &attributeWithCompositeIDTagsAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDTagsAttribute
		return nil
	}

	var attributeWithCompositeIDSequenceAttribute AttributeWithCompositeIDSequenceAttribute = AttributeWithCompositeIDSequenceAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDSequenceAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDSequenceAttribute = &attributeWithCompositeIDSequenceAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDSequenceAttribute
		return nil
	}

	var attributeWithCompositeIDSelectAttribute AttributeWithCompositeIDSelectAttribute = AttributeWithCompositeIDSelectAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDSelectAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDSelectAttribute = &attributeWithCompositeIDSelectAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDSelectAttribute
		return nil
	}

	var attributeWithCompositeIDRepeatableAttribute AttributeWithCompositeIDRepeatableAttribute = AttributeWithCompositeIDRepeatableAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDRepeatableAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDRepeatableAttribute = &attributeWithCompositeIDRepeatableAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDRepeatableAttribute
		return nil
	}

	var attributeWithCompositeIDMultiSelectAttribute AttributeWithCompositeIDMultiSelectAttribute = AttributeWithCompositeIDMultiSelectAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDMultiSelectAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDMultiSelectAttribute = &attributeWithCompositeIDMultiSelectAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDMultiSelectAttribute
		return nil
	}

	var attributeWithCompositeIDPurposeAttribute AttributeWithCompositeIDPurposeAttribute = AttributeWithCompositeIDPurposeAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPurposeAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDPurposeAttribute = &attributeWithCompositeIDPurposeAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDPurposeAttribute
		return nil
	}

	var attributeWithCompositeIDFileAttribute AttributeWithCompositeIDFileAttribute = AttributeWithCompositeIDFileAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDFileAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDFileAttribute = &attributeWithCompositeIDFileAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDFileAttribute
		return nil
	}

	var attributeWithCompositeIDRelationAttribute AttributeWithCompositeIDRelationAttribute = AttributeWithCompositeIDRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDRelationAttribute, "", true, false); err == nil {
		u.AttributeWithCompositeIDRelationAttribute = &attributeWithCompositeIDRelationAttribute
		u.Type = AttributeWithCompositeIDTypeAttributeWithCompositeIDRelationAttribute
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AttributeWithCompositeID", string(data))
}

func (u AttributeWithCompositeID) MarshalJSON() ([]byte, error) {
	if u.AttributeWithCompositeIDTextAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDTextAttribute, "", true)
	}

	if u.AttributeWithCompositeIDLinkAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDLinkAttribute, "", true)
	}

	if u.AttributeWithCompositeIDDateAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDDateAttribute, "", true)
	}

	if u.AttributeWithCompositeIDCountryAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDCountryAttribute, "", true)
	}

	if u.AttributeWithCompositeIDBooleanAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDBooleanAttribute, "", true)
	}

	if u.AttributeWithCompositeIDSelectAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDSelectAttribute, "", true)
	}

	if u.AttributeWithCompositeIDMultiSelectAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDMultiSelectAttribute, "", true)
	}

	if u.AttributeWithCompositeIDStatusAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDStatusAttribute, "", true)
	}

	if u.AttributeWithCompositeIDSequenceAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDSequenceAttribute, "", true)
	}

	if u.AttributeWithCompositeIDRelationAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDRelationAttribute, "", true)
	}

	if u.AttributeWithCompositeIDUserRelationAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDUserRelationAttribute, "", true)
	}

	if u.AttributeWithCompositeIDAddressRelationAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDAddressRelationAttribute, "", true)
	}

	if u.AttributeWithCompositeIDPaymentMethodRelationAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPaymentMethodRelationAttribute, "", true)
	}

	if u.AttributeWithCompositeIDCurrencyAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDCurrencyAttribute, "", true)
	}

	if u.AttributeWithCompositeIDRepeatableAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDRepeatableAttribute, "", true)
	}

	if u.AttributeWithCompositeIDTagsAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDTagsAttribute, "", true)
	}

	if u.AttributeWithCompositeIDNumberAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDNumberAttribute, "", true)
	}

	if u.AttributeWithCompositeIDConsentAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDConsentAttribute, "", true)
	}

	if u.AttributeWithCompositeIDInternalAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDInternalAttribute, "", true)
	}

	if u.AttributeWithCompositeIDOrderedListAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDOrderedListAttribute, "", true)
	}

	if u.AttributeWithCompositeIDFileAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDFileAttribute, "", true)
	}

	if u.AttributeWithCompositeIDComputedAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDComputedAttribute, "", true)
	}

	if u.AttributeWithCompositeIDPartnerStatusAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPartnerStatusAttribute, "", true)
	}

	if u.AttributeWithCompositeIDInvitationEmailAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDInvitationEmailAttribute, "", true)
	}

	if u.AttributeWithCompositeIDAutomationAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDAutomationAttribute, "", true)
	}

	if u.AttributeWithCompositeIDInternalUserAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDInternalUserAttribute, "", true)
	}

	if u.AttributeWithCompositeIDPurposeAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPurposeAttribute, "", true)
	}

	if u.AttributeWithCompositeIDPartnerOrganisationAttribute != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPartnerOrganisationAttribute, "", true)
	}

	return nil, errors.New("could not marshal union type AttributeWithCompositeID: all fields are null")
}

// AttributeWithCompositeIDPartnerOrganisationAttributeInput - Shared Partner Organisations
type AttributeWithCompositeIDPartnerOrganisationAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PartnerOrganisationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PartnerOrganisationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDPartnerOrganisationAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPartnerOrganisationAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetConstraints() *PartnerOrganisationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetInfoHelpers() *PartnerOrganisationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPartnerOrganisationAttributeInput) GetType() *PartnerOrganisationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDPurposeAttributeInput - Entity Taxonomy
type AttributeWithCompositeIDPurposeAttributeInput struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PurposeAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PurposeAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	// URL-friendly identifier for the classification
	Slug      *string                                       `json:"slug,omitempty"`
	Parents   []string                                      `json:"parents,omitempty"`
	CreatedAt *time.Time                                    `json:"created_at,omitempty"`
	UpdatedAt *time.Time                                    `json:"updated_at,omitempty"`
	Type      *PurposeAttributeAttributeWithCompositeIDType `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDPurposeAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPurposeAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetConstraints() *PurposeAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetInfoHelpers() *PurposeAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetParents() []string {
	if o == nil {
		return nil
	}
	return o.Parents
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AttributeWithCompositeIDPurposeAttributeInput) GetType() *PurposeAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDInternalUserAttributeInput - Epilot internal user info
type AttributeWithCompositeIDInternalUserAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InternalUserAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InternalUserAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InternalUserAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDInternalUserAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDInternalUserAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetConstraints() *InternalUserAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetInfoHelpers() *InternalUserAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDInternalUserAttributeInput) GetType() *InternalUserAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDAutomationAttributeInput - Automation entity
type AttributeWithCompositeIDAutomationAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *AutomationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *AutomationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *AutomationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDAutomationAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDAutomationAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetConstraints() *AutomationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetInfoHelpers() *AutomationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDAutomationAttributeInput) GetType() *AutomationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDInvitationEmailAttributeInput - Email address for send invitation
type AttributeWithCompositeIDInvitationEmailAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InvitationEmailAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InvitationEmailAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDInvitationEmailAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDInvitationEmailAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetConstraints() *InvitationEmailAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetInfoHelpers() *InvitationEmailAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDInvitationEmailAttributeInput) GetType() *InvitationEmailAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDPartnerStatusAttributeInput - Partner Status
type AttributeWithCompositeIDPartnerStatusAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PartnerStatusAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PartnerStatusAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDPartnerStatusAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPartnerStatusAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetConstraints() *PartnerStatusAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetInfoHelpers() *PartnerStatusAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPartnerStatusAttributeInput) GetType() *PartnerStatusAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDComputedAttributeInput - An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)
type AttributeWithCompositeIDComputedAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *ComputedAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *ComputedAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *ComputedAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDComputedAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDComputedAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetConstraints() *ComputedAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetInfoHelpers() *ComputedAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDComputedAttributeInput) GetType() *ComputedAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDFileAttributeInput - File or Image Attachment
type AttributeWithCompositeIDFileAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *FileAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *FileAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        FileAttributeAttributeWithCompositeIDType         `json:"type"`
	Multiple    *bool                                             `json:"multiple,omitempty"`
	// List of file extensions (without the dot suffix)
	AllowedExtensions []string `json:"allowed_extensions,omitempty"`
	// Controls how the images are presented to the user during upload on the Entity Details view.
	DisplayImagesLandscaped *bool `json:"display_images_landscaped,omitempty"`
	// When set to true, an i18n description will be used alongside the attribute label.
	// This description should be set through the platform locales in the form: `file.{attribute_name}.description_text`.
	//
	EnableDescription    *bool                              `json:"enable_description,omitempty"`
	DefaultAccessControl *FileAttributeDefaultAccessControl `json:"default_access_control,omitempty"`
}

func (a AttributeWithCompositeIDFileAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDFileAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetConstraints() *FileAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetInfoHelpers() *FileAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetType() FileAttributeAttributeWithCompositeIDType {
	if o == nil {
		return FileAttributeAttributeWithCompositeIDType("")
	}
	return o.Type
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetAllowedExtensions() []string {
	if o == nil {
		return nil
	}
	return o.AllowedExtensions
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetDisplayImagesLandscaped() *bool {
	if o == nil {
		return nil
	}
	return o.DisplayImagesLandscaped
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetEnableDescription() *bool {
	if o == nil {
		return nil
	}
	return o.EnableDescription
}

func (o *AttributeWithCompositeIDFileAttributeInput) GetDefaultAccessControl() *FileAttributeDefaultAccessControl {
	if o == nil {
		return nil
	}
	return o.DefaultAccessControl
}

// AttributeWithCompositeIDOrderedListAttributeInput - Type of attribute to render N number of ordered fields
type AttributeWithCompositeIDOrderedListAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *OrderedListAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *OrderedListAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *OrderedListAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDOrderedListAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDOrderedListAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetConstraints() *OrderedListAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetInfoHelpers() *OrderedListAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDOrderedListAttributeInput) GetType() *OrderedListAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDInternalAttributeInput - No UI representation
type AttributeWithCompositeIDInternalAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *InternalAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InternalAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *InternalAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDInternalAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDInternalAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetConstraints() *InternalAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetInfoHelpers() *InternalAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDInternalAttributeInput) GetType() *InternalAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDConsentAttributeInput - Consent Management
type AttributeWithCompositeIDConsentAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *ConsentAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *ConsentAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        ConsentAttributeAttributeWithCompositeIDType         `json:"type"`
	Topic       string                                               `json:"topic"`
	Identifiers []string                                             `json:"identifiers,omitempty"`
}

func (a AttributeWithCompositeIDConsentAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDConsentAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetConstraints() *ConsentAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetInfoHelpers() *ConsentAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetType() ConsentAttributeAttributeWithCompositeIDType {
	if o == nil {
		return ConsentAttributeAttributeWithCompositeIDType("")
	}
	return o.Type
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetTopic() string {
	if o == nil {
		return ""
	}
	return o.Topic
}

func (o *AttributeWithCompositeIDConsentAttributeInput) GetIdentifiers() []string {
	if o == nil {
		return nil
	}
	return o.Identifiers
}

// AttributeWithCompositeIDNumberAttributeInput - Numeric input
type AttributeWithCompositeIDNumberAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *NumberAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *NumberAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *NumberAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Format      *string                                             `json:"format,omitempty"`
	// Whether or not to show a thousands separator
	ShowSeparator *bool `default:"true" json:"show_separator"`
}

func (a AttributeWithCompositeIDNumberAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDNumberAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetConstraints() *NumberAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetInfoHelpers() *NumberAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetType() *NumberAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *AttributeWithCompositeIDNumberAttributeInput) GetShowSeparator() *bool {
	if o == nil {
		return nil
	}
	return o.ShowSeparator
}

// AttributeWithCompositeIDTagsAttributeInput - Tags
type AttributeWithCompositeIDTagsAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *TagsAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *TagsAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *TagsAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Options     []string                                          `json:"options,omitempty"`
	Suggestions []string                                          `json:"suggestions,omitempty"`
}

func (a AttributeWithCompositeIDTagsAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDTagsAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetConstraints() *TagsAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetInfoHelpers() *TagsAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetType() *TagsAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetOptions() []string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDTagsAttributeInput) GetSuggestions() []string {
	if o == nil {
		return nil
	}
	return o.Suggestions
}

// AttributeWithCompositeIDRepeatableAttributeInput - Repeatable (add N number of fields)
type AttributeWithCompositeIDRepeatableAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RepeatableAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *RepeatableAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Repeatable  *bool                                                   `json:"repeatable,omitempty"`
	HasPrimary  *bool                                                   `json:"has_primary,omitempty"`
	// Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.
	RelationAffinityMode *RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	Type                 *RepeatableAttributeAttributeWithCompositeIDType                 `json:"type,omitempty"`
	// when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool `default:"true" json:"enable_relation_picker"`
}

func (a AttributeWithCompositeIDRepeatableAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDRepeatableAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetConstraints() *RepeatableAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetInfoHelpers() *RepeatableAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetRelationAffinityMode() *RepeatableAttributeAttributeWithCompositeIDRelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetType() *RepeatableAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDRepeatableAttributeInput) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

// AttributeWithCompositeIDCurrencyAttributeInput - Currency input
type AttributeWithCompositeIDCurrencyAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CurrencyAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers          *CurrencyAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type                 CurrencyAttributeAttributeWithCompositeIDType         `json:"type"`
	CurrencySelectorOnly *bool                                                 `default:"false" json:"currency_selector_only"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency []CurrencyAttributeCurrency `json:"currency"`
}

func (a AttributeWithCompositeIDCurrencyAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDCurrencyAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetConstraints() *CurrencyAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetInfoHelpers() *CurrencyAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetType() CurrencyAttributeAttributeWithCompositeIDType {
	if o == nil {
		return CurrencyAttributeAttributeWithCompositeIDType("")
	}
	return o.Type
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetCurrencySelectorOnly() *bool {
	if o == nil {
		return nil
	}
	return o.CurrencySelectorOnly
}

func (o *AttributeWithCompositeIDCurrencyAttributeInput) GetCurrency() []CurrencyAttributeCurrency {
	if o == nil {
		return []CurrencyAttributeCurrency{}
	}
	return o.Currency
}

// AttributeWithCompositeIDPaymentMethodRelationAttributeInput - Reference to a payment method attribute of another entity
type AttributeWithCompositeIDPaymentMethodRelationAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *PaymentMethodRelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *PaymentMethodRelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	HasPrimary  *bool                                                              `json:"has_primary,omitempty"`
}

func (a AttributeWithCompositeIDPaymentMethodRelationAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetConstraints() *PaymentMethodRelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetInfoHelpers() *PaymentMethodRelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetType() *PaymentMethodRelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDPaymentMethodRelationAttributeInput) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

// AttributeWithCompositeIDAddressRelationAttributeInput - Reference to an address attribute of another entity
type AttributeWithCompositeIDAddressRelationAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *AddressRelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *AddressRelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	HasPrimary  *bool                                                        `json:"has_primary,omitempty"`
}

func (a AttributeWithCompositeIDAddressRelationAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDAddressRelationAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetConstraints() *AddressRelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetInfoHelpers() *AddressRelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetType() *AddressRelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDAddressRelationAttributeInput) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

// AttributeWithCompositeIDUserRelationAttributeInput - User Relationship
type AttributeWithCompositeIDUserRelationAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *UserRelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *UserRelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *UserRelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Multiple    *bool                                                     `default:"false" json:"multiple"`
}

func (a AttributeWithCompositeIDUserRelationAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDUserRelationAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetConstraints() *UserRelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetInfoHelpers() *UserRelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetType() *UserRelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDUserRelationAttributeInput) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

type RelationAttributeNewEntityItemInput struct {
	ID string `json:"_id"`
	// URL-friendly identifier for the entity schema
	Schema string `json:"_schema"`
	// Title of entity
	Title *string  `json:"_title"`
	Tags  []string `json:"_tags,omitempty"`
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL                  *EntityACL `json:"_acl,omitempty"`
	Purpose              []string   `json:"_purpose,omitempty"`
	AdditionalProperties any        `additionalProperties:"true" json:"-"`
}

func (r RelationAttributeNewEntityItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeNewEntityItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RelationAttributeNewEntityItemInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RelationAttributeNewEntityItemInput) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *RelationAttributeNewEntityItemInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *RelationAttributeNewEntityItemInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *RelationAttributeNewEntityItemInput) GetACL() *EntityACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *RelationAttributeNewEntityItemInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *RelationAttributeNewEntityItemInput) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type RelationAttributeActionsInput struct {
	// The action type. Currently supported actions:
	//
	// | action | description |
	// |--------|-------------|
	// | add_existing | Enables the user to pick an existing entity to link as relation |
	// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
	// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
	//
	ActionType *RelationAttributeActionType `json:"action_type,omitempty"`
	// The action label or action translation key (i18n)
	Label *string `json:"label,omitempty"`
	// Sets the action as the default action, visible as the main action button.
	Default *bool `json:"default,omitempty"`
	// Name of the feature flag that enables this action
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This action should only be active when all the settings have the correct value
	SettingsFlag  []SettingFlag                        `json:"settings_flag,omitempty"`
	NewEntityItem *RelationAttributeNewEntityItemInput `json:"new_entity_item,omitempty"`
}

func (o *RelationAttributeActionsInput) GetActionType() *RelationAttributeActionType {
	if o == nil {
		return nil
	}
	return o.ActionType
}

func (o *RelationAttributeActionsInput) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *RelationAttributeActionsInput) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *RelationAttributeActionsInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *RelationAttributeActionsInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *RelationAttributeActionsInput) GetNewEntityItem() *RelationAttributeNewEntityItemInput {
	if o == nil {
		return nil
	}
	return o.NewEntityItem
}

// AttributeWithCompositeIDRelationAttributeInput - Entity Relationship
type AttributeWithCompositeIDRelationAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RelationAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers  *RelationAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type         *RelationAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	RelationType *RelationAttributeRelationType                        `json:"relation_type,omitempty"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAttributeRelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool                      `default:"true" json:"enable_relation_picker"`
	EditMode             *RelationAttributeEditMode `json:"edit_mode,omitempty"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool                            `default:"false" json:"details_view_mode_enabled"`
	Actions                []RelationAttributeActionsInput  `json:"actions,omitempty"`
	DrawerSize             *RelationAttributeDrawerSize     `json:"drawer_size,omitempty"`
	SummaryFields          []RelationAttributeSummaryFields `json:"summary_fields,omitempty"`
	HasPrimary             *bool                            `json:"has_primary,omitempty"`
	AllowedSchemas         []string                         `json:"allowedSchemas,omitempty"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string `json:"add_button_label,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
}

func (a AttributeWithCompositeIDRelationAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDRelationAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetConstraints() *RelationAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetInfoHelpers() *RelationAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetType() *RelationAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetRelationType() *RelationAttributeRelationType {
	if o == nil {
		return nil
	}
	return o.RelationType
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetReverseAttributes() map[string]string {
	if o == nil {
		return nil
	}
	return o.ReverseAttributes
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetRelationAffinityMode() *RelationAttributeRelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetEditMode() *RelationAttributeEditMode {
	if o == nil {
		return nil
	}
	return o.EditMode
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetDetailsViewModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DetailsViewModeEnabled
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetActions() []RelationAttributeActionsInput {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetDrawerSize() *RelationAttributeDrawerSize {
	if o == nil {
		return nil
	}
	return o.DrawerSize
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetSummaryFields() []RelationAttributeSummaryFields {
	if o == nil {
		return nil
	}
	return o.SummaryFields
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetAllowedSchemas() []string {
	if o == nil {
		return nil
	}
	return o.AllowedSchemas
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetEnableRelationTags() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationTags
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetAddButtonLabel() *string {
	if o == nil {
		return nil
	}
	return o.AddButtonLabel
}

func (o *AttributeWithCompositeIDRelationAttributeInput) GetSearchPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.SearchPlaceholder
}

// AttributeWithCompositeIDSequenceAttributeInput - Sequence of unique identifiers
type AttributeWithCompositeIDSequenceAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SequenceAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SequenceAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SequenceAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	// Prefix added before the sequence number
	Prefix      *string `json:"prefix,omitempty"`
	StartNumber *int64  `json:"start_number,omitempty"`
}

func (a AttributeWithCompositeIDSequenceAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDSequenceAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetConstraints() *SequenceAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetInfoHelpers() *SequenceAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetType() *SequenceAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *AttributeWithCompositeIDSequenceAttributeInput) GetStartNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.StartNumber
}

// AttributeWithCompositeIDStatusAttributeInput - Status select
type AttributeWithCompositeIDStatusAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *StatusAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *StatusAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *StatusAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Options     []StatusAttributeAttributeWithCompositeIDOptions    `json:"options,omitempty"`
}

func (a AttributeWithCompositeIDStatusAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDStatusAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetConstraints() *StatusAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetInfoHelpers() *StatusAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetType() *StatusAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDStatusAttributeInput) GetOptions() []StatusAttributeAttributeWithCompositeIDOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

// AttributeWithCompositeIDMultiSelectAttributeInput - Multi Choice Selection
type AttributeWithCompositeIDMultiSelectAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *MultiSelectAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *MultiSelectAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	// controls if the matching of values against the options is case sensitive or not
	DisableCaseSensitive *bool `json:"disable_case_sensitive,omitempty"`
	// controls if the 360 ui will allow the user to enter a value which is not defined by the options
	AllowExtraOptions *bool                         `json:"allow_extra_options,omitempty"`
	Options           []MultiSelectAttributeOptions `json:"options,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
}

func (a AttributeWithCompositeIDMultiSelectAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDMultiSelectAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetConstraints() *MultiSelectAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetInfoHelpers() *MultiSelectAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetType() *MultiSelectAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetDisableCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.DisableCaseSensitive
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetAllowExtraOptions() *bool {
	if o == nil {
		return nil
	}
	return o.AllowExtraOptions
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetOptions() []MultiSelectAttributeOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDMultiSelectAttributeInput) GetAllowAny() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAny
}

// AttributeWithCompositeIDSelectAttributeInput - Dropdown select
type AttributeWithCompositeIDSelectAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SelectAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SelectAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SelectAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
	Options     any                                                 `json:"options,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
}

func (a AttributeWithCompositeIDSelectAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDSelectAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetConstraints() *SelectAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetInfoHelpers() *SelectAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetType() *SelectAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetOptions() any {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AttributeWithCompositeIDSelectAttributeInput) GetAllowAny() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAny
}

// AttributeWithCompositeIDBooleanAttributeInput - Yes / No Toggle
type AttributeWithCompositeIDBooleanAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *BooleanAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *BooleanAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *BooleanAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDBooleanAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDBooleanAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetConstraints() *BooleanAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetInfoHelpers() *BooleanAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDBooleanAttributeInput) GetType() *BooleanAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDCountryAttributeInput - Country picker
type AttributeWithCompositeIDCountryAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CountryAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *CountryAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *CountryAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDCountryAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDCountryAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetConstraints() *CountryAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetInfoHelpers() *CountryAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDCountryAttributeInput) GetType() *CountryAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDDateAttributeInput - Date or Datetime picker
type AttributeWithCompositeIDDateAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *DateAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *DateAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *DateAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDDateAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDDateAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetConstraints() *DateAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetInfoHelpers() *DateAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDDateAttributeInput) GetType() *DateAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDLinkAttributeInput - Link with title and href
type AttributeWithCompositeIDLinkAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *LinkAttributeAttributeWithCompositeIDConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *LinkAttributeAttributeWithCompositeIDInfoHelpers `json:"info_helpers,omitempty"`
	Type        *LinkAttributeAttributeWithCompositeIDType        `json:"type,omitempty"`
}

func (a AttributeWithCompositeIDLinkAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDLinkAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetConstraints() *LinkAttributeAttributeWithCompositeIDConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetInfoHelpers() *LinkAttributeAttributeWithCompositeIDInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDLinkAttributeInput) GetType() *LinkAttributeAttributeWithCompositeIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AttributeWithCompositeIDTextAttributeInput - Textarea or text input
type AttributeWithCompositeIDTextAttributeInput struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *TextAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *TextAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *TextAttributeType        `json:"type,omitempty"`
	Multiline   *bool                     `json:"multiline,omitempty"`
}

func (a AttributeWithCompositeIDTextAttributeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AttributeWithCompositeIDTextAttributeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetConstraints() *TextAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetInfoHelpers() *TextAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetType() *TextAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AttributeWithCompositeIDTextAttributeInput) GetMultiline() *bool {
	if o == nil {
		return nil
	}
	return o.Multiline
}

type AttributeWithCompositeIDInputType string

const (
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDTextAttributeInput                  AttributeWithCompositeIDInputType = "AttributeWithCompositeID_TextAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDLinkAttributeInput                  AttributeWithCompositeIDInputType = "AttributeWithCompositeID_LinkAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDDateAttributeInput                  AttributeWithCompositeIDInputType = "AttributeWithCompositeID_DateAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDCountryAttributeInput               AttributeWithCompositeIDInputType = "AttributeWithCompositeID_CountryAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDBooleanAttributeInput               AttributeWithCompositeIDInputType = "AttributeWithCompositeID_BooleanAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDSelectAttributeInput                AttributeWithCompositeIDInputType = "AttributeWithCompositeID_SelectAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDMultiSelectAttributeInput           AttributeWithCompositeIDInputType = "AttributeWithCompositeID_MultiSelectAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDStatusAttributeInput                AttributeWithCompositeIDInputType = "AttributeWithCompositeID_StatusAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDSequenceAttributeInput              AttributeWithCompositeIDInputType = "AttributeWithCompositeID_SequenceAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDRelationAttributeInput              AttributeWithCompositeIDInputType = "AttributeWithCompositeID_RelationAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDUserRelationAttributeInput          AttributeWithCompositeIDInputType = "AttributeWithCompositeID_UserRelationAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDAddressRelationAttributeInput       AttributeWithCompositeIDInputType = "AttributeWithCompositeID_AddressRelationAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPaymentMethodRelationAttributeInput AttributeWithCompositeIDInputType = "AttributeWithCompositeID_PaymentMethodRelationAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDCurrencyAttributeInput              AttributeWithCompositeIDInputType = "AttributeWithCompositeID_CurrencyAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDRepeatableAttributeInput            AttributeWithCompositeIDInputType = "AttributeWithCompositeID_RepeatableAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDTagsAttributeInput                  AttributeWithCompositeIDInputType = "AttributeWithCompositeID_TagsAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDNumberAttributeInput                AttributeWithCompositeIDInputType = "AttributeWithCompositeID_NumberAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDConsentAttributeInput               AttributeWithCompositeIDInputType = "AttributeWithCompositeID_ConsentAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInternalAttributeInput              AttributeWithCompositeIDInputType = "AttributeWithCompositeID_InternalAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDOrderedListAttributeInput           AttributeWithCompositeIDInputType = "AttributeWithCompositeID_OrderedListAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDFileAttributeInput                  AttributeWithCompositeIDInputType = "AttributeWithCompositeID_FileAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDComputedAttributeInput              AttributeWithCompositeIDInputType = "AttributeWithCompositeID_ComputedAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPartnerStatusAttributeInput         AttributeWithCompositeIDInputType = "AttributeWithCompositeID_PartnerStatusAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInvitationEmailAttributeInput       AttributeWithCompositeIDInputType = "AttributeWithCompositeID_InvitationEmailAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDAutomationAttributeInput            AttributeWithCompositeIDInputType = "AttributeWithCompositeID_AutomationAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInternalUserAttributeInput          AttributeWithCompositeIDInputType = "AttributeWithCompositeID_InternalUserAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPurposeAttributeInput               AttributeWithCompositeIDInputType = "AttributeWithCompositeID_PurposeAttribute_input"
	AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPartnerOrganisationAttributeInput   AttributeWithCompositeIDInputType = "AttributeWithCompositeID_PartnerOrganisationAttribute_input"
)

// AttributeWithCompositeIDInput - a readonly computed ID for the attribute including schema slug and the attribute ID
type AttributeWithCompositeIDInput struct {
	AttributeWithCompositeIDTextAttributeInput                  *AttributeWithCompositeIDTextAttributeInput
	AttributeWithCompositeIDLinkAttributeInput                  *AttributeWithCompositeIDLinkAttributeInput
	AttributeWithCompositeIDDateAttributeInput                  *AttributeWithCompositeIDDateAttributeInput
	AttributeWithCompositeIDCountryAttributeInput               *AttributeWithCompositeIDCountryAttributeInput
	AttributeWithCompositeIDBooleanAttributeInput               *AttributeWithCompositeIDBooleanAttributeInput
	AttributeWithCompositeIDSelectAttributeInput                *AttributeWithCompositeIDSelectAttributeInput
	AttributeWithCompositeIDMultiSelectAttributeInput           *AttributeWithCompositeIDMultiSelectAttributeInput
	AttributeWithCompositeIDStatusAttributeInput                *AttributeWithCompositeIDStatusAttributeInput
	AttributeWithCompositeIDSequenceAttributeInput              *AttributeWithCompositeIDSequenceAttributeInput
	AttributeWithCompositeIDRelationAttributeInput              *AttributeWithCompositeIDRelationAttributeInput
	AttributeWithCompositeIDUserRelationAttributeInput          *AttributeWithCompositeIDUserRelationAttributeInput
	AttributeWithCompositeIDAddressRelationAttributeInput       *AttributeWithCompositeIDAddressRelationAttributeInput
	AttributeWithCompositeIDPaymentMethodRelationAttributeInput *AttributeWithCompositeIDPaymentMethodRelationAttributeInput
	AttributeWithCompositeIDCurrencyAttributeInput              *AttributeWithCompositeIDCurrencyAttributeInput
	AttributeWithCompositeIDRepeatableAttributeInput            *AttributeWithCompositeIDRepeatableAttributeInput
	AttributeWithCompositeIDTagsAttributeInput                  *AttributeWithCompositeIDTagsAttributeInput
	AttributeWithCompositeIDNumberAttributeInput                *AttributeWithCompositeIDNumberAttributeInput
	AttributeWithCompositeIDConsentAttributeInput               *AttributeWithCompositeIDConsentAttributeInput
	AttributeWithCompositeIDInternalAttributeInput              *AttributeWithCompositeIDInternalAttributeInput
	AttributeWithCompositeIDOrderedListAttributeInput           *AttributeWithCompositeIDOrderedListAttributeInput
	AttributeWithCompositeIDFileAttributeInput                  *AttributeWithCompositeIDFileAttributeInput
	AttributeWithCompositeIDComputedAttributeInput              *AttributeWithCompositeIDComputedAttributeInput
	AttributeWithCompositeIDPartnerStatusAttributeInput         *AttributeWithCompositeIDPartnerStatusAttributeInput
	AttributeWithCompositeIDInvitationEmailAttributeInput       *AttributeWithCompositeIDInvitationEmailAttributeInput
	AttributeWithCompositeIDAutomationAttributeInput            *AttributeWithCompositeIDAutomationAttributeInput
	AttributeWithCompositeIDInternalUserAttributeInput          *AttributeWithCompositeIDInternalUserAttributeInput
	AttributeWithCompositeIDPurposeAttributeInput               *AttributeWithCompositeIDPurposeAttributeInput
	AttributeWithCompositeIDPartnerOrganisationAttributeInput   *AttributeWithCompositeIDPartnerOrganisationAttributeInput

	Type AttributeWithCompositeIDInputType
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDTextAttributeInput(attributeWithCompositeIDTextAttributeInput AttributeWithCompositeIDTextAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDTextAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDTextAttributeInput: &attributeWithCompositeIDTextAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDLinkAttributeInput(attributeWithCompositeIDLinkAttributeInput AttributeWithCompositeIDLinkAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDLinkAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDLinkAttributeInput: &attributeWithCompositeIDLinkAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDDateAttributeInput(attributeWithCompositeIDDateAttributeInput AttributeWithCompositeIDDateAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDDateAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDDateAttributeInput: &attributeWithCompositeIDDateAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDCountryAttributeInput(attributeWithCompositeIDCountryAttributeInput AttributeWithCompositeIDCountryAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDCountryAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDCountryAttributeInput: &attributeWithCompositeIDCountryAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDBooleanAttributeInput(attributeWithCompositeIDBooleanAttributeInput AttributeWithCompositeIDBooleanAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDBooleanAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDBooleanAttributeInput: &attributeWithCompositeIDBooleanAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDSelectAttributeInput(attributeWithCompositeIDSelectAttributeInput AttributeWithCompositeIDSelectAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDSelectAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDSelectAttributeInput: &attributeWithCompositeIDSelectAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDMultiSelectAttributeInput(attributeWithCompositeIDMultiSelectAttributeInput AttributeWithCompositeIDMultiSelectAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDMultiSelectAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDMultiSelectAttributeInput: &attributeWithCompositeIDMultiSelectAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDStatusAttributeInput(attributeWithCompositeIDStatusAttributeInput AttributeWithCompositeIDStatusAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDStatusAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDStatusAttributeInput: &attributeWithCompositeIDStatusAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDSequenceAttributeInput(attributeWithCompositeIDSequenceAttributeInput AttributeWithCompositeIDSequenceAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDSequenceAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDSequenceAttributeInput: &attributeWithCompositeIDSequenceAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDRelationAttributeInput(attributeWithCompositeIDRelationAttributeInput AttributeWithCompositeIDRelationAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDRelationAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDRelationAttributeInput: &attributeWithCompositeIDRelationAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDUserRelationAttributeInput(attributeWithCompositeIDUserRelationAttributeInput AttributeWithCompositeIDUserRelationAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDUserRelationAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDUserRelationAttributeInput: &attributeWithCompositeIDUserRelationAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDAddressRelationAttributeInput(attributeWithCompositeIDAddressRelationAttributeInput AttributeWithCompositeIDAddressRelationAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDAddressRelationAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDAddressRelationAttributeInput: &attributeWithCompositeIDAddressRelationAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDPaymentMethodRelationAttributeInput(attributeWithCompositeIDPaymentMethodRelationAttributeInput AttributeWithCompositeIDPaymentMethodRelationAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPaymentMethodRelationAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDPaymentMethodRelationAttributeInput: &attributeWithCompositeIDPaymentMethodRelationAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDCurrencyAttributeInput(attributeWithCompositeIDCurrencyAttributeInput AttributeWithCompositeIDCurrencyAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDCurrencyAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDCurrencyAttributeInput: &attributeWithCompositeIDCurrencyAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDRepeatableAttributeInput(attributeWithCompositeIDRepeatableAttributeInput AttributeWithCompositeIDRepeatableAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDRepeatableAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDRepeatableAttributeInput: &attributeWithCompositeIDRepeatableAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDTagsAttributeInput(attributeWithCompositeIDTagsAttributeInput AttributeWithCompositeIDTagsAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDTagsAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDTagsAttributeInput: &attributeWithCompositeIDTagsAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDNumberAttributeInput(attributeWithCompositeIDNumberAttributeInput AttributeWithCompositeIDNumberAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDNumberAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDNumberAttributeInput: &attributeWithCompositeIDNumberAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDConsentAttributeInput(attributeWithCompositeIDConsentAttributeInput AttributeWithCompositeIDConsentAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDConsentAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDConsentAttributeInput: &attributeWithCompositeIDConsentAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDInternalAttributeInput(attributeWithCompositeIDInternalAttributeInput AttributeWithCompositeIDInternalAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInternalAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDInternalAttributeInput: &attributeWithCompositeIDInternalAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDOrderedListAttributeInput(attributeWithCompositeIDOrderedListAttributeInput AttributeWithCompositeIDOrderedListAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDOrderedListAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDOrderedListAttributeInput: &attributeWithCompositeIDOrderedListAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDFileAttributeInput(attributeWithCompositeIDFileAttributeInput AttributeWithCompositeIDFileAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDFileAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDFileAttributeInput: &attributeWithCompositeIDFileAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDComputedAttributeInput(attributeWithCompositeIDComputedAttributeInput AttributeWithCompositeIDComputedAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDComputedAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDComputedAttributeInput: &attributeWithCompositeIDComputedAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDPartnerStatusAttributeInput(attributeWithCompositeIDPartnerStatusAttributeInput AttributeWithCompositeIDPartnerStatusAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPartnerStatusAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDPartnerStatusAttributeInput: &attributeWithCompositeIDPartnerStatusAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDInvitationEmailAttributeInput(attributeWithCompositeIDInvitationEmailAttributeInput AttributeWithCompositeIDInvitationEmailAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInvitationEmailAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDInvitationEmailAttributeInput: &attributeWithCompositeIDInvitationEmailAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDAutomationAttributeInput(attributeWithCompositeIDAutomationAttributeInput AttributeWithCompositeIDAutomationAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDAutomationAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDAutomationAttributeInput: &attributeWithCompositeIDAutomationAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDInternalUserAttributeInput(attributeWithCompositeIDInternalUserAttributeInput AttributeWithCompositeIDInternalUserAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInternalUserAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDInternalUserAttributeInput: &attributeWithCompositeIDInternalUserAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDPurposeAttributeInput(attributeWithCompositeIDPurposeAttributeInput AttributeWithCompositeIDPurposeAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPurposeAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDPurposeAttributeInput: &attributeWithCompositeIDPurposeAttributeInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputAttributeWithCompositeIDPartnerOrganisationAttributeInput(attributeWithCompositeIDPartnerOrganisationAttributeInput AttributeWithCompositeIDPartnerOrganisationAttributeInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPartnerOrganisationAttributeInput

	return AttributeWithCompositeIDInput{
		AttributeWithCompositeIDPartnerOrganisationAttributeInput: &attributeWithCompositeIDPartnerOrganisationAttributeInput,
		Type: typ,
	}
}

func (u *AttributeWithCompositeIDInput) UnmarshalJSON(data []byte) error {

	var attributeWithCompositeIDInternalAttributeInput AttributeWithCompositeIDInternalAttributeInput = AttributeWithCompositeIDInternalAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDInternalAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDInternalAttributeInput = &attributeWithCompositeIDInternalAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInternalAttributeInput
		return nil
	}

	var attributeWithCompositeIDLinkAttributeInput AttributeWithCompositeIDLinkAttributeInput = AttributeWithCompositeIDLinkAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDLinkAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDLinkAttributeInput = &attributeWithCompositeIDLinkAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDLinkAttributeInput
		return nil
	}

	var attributeWithCompositeIDDateAttributeInput AttributeWithCompositeIDDateAttributeInput = AttributeWithCompositeIDDateAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDDateAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDDateAttributeInput = &attributeWithCompositeIDDateAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDDateAttributeInput
		return nil
	}

	var attributeWithCompositeIDCountryAttributeInput AttributeWithCompositeIDCountryAttributeInput = AttributeWithCompositeIDCountryAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDCountryAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDCountryAttributeInput = &attributeWithCompositeIDCountryAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDCountryAttributeInput
		return nil
	}

	var attributeWithCompositeIDBooleanAttributeInput AttributeWithCompositeIDBooleanAttributeInput = AttributeWithCompositeIDBooleanAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDBooleanAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDBooleanAttributeInput = &attributeWithCompositeIDBooleanAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDBooleanAttributeInput
		return nil
	}

	var attributeWithCompositeIDPartnerOrganisationAttributeInput AttributeWithCompositeIDPartnerOrganisationAttributeInput = AttributeWithCompositeIDPartnerOrganisationAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPartnerOrganisationAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDPartnerOrganisationAttributeInput = &attributeWithCompositeIDPartnerOrganisationAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPartnerOrganisationAttributeInput
		return nil
	}

	var attributeWithCompositeIDInternalUserAttributeInput AttributeWithCompositeIDInternalUserAttributeInput = AttributeWithCompositeIDInternalUserAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDInternalUserAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDInternalUserAttributeInput = &attributeWithCompositeIDInternalUserAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInternalUserAttributeInput
		return nil
	}

	var attributeWithCompositeIDAutomationAttributeInput AttributeWithCompositeIDAutomationAttributeInput = AttributeWithCompositeIDAutomationAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDAutomationAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDAutomationAttributeInput = &attributeWithCompositeIDAutomationAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDAutomationAttributeInput
		return nil
	}

	var attributeWithCompositeIDInvitationEmailAttributeInput AttributeWithCompositeIDInvitationEmailAttributeInput = AttributeWithCompositeIDInvitationEmailAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDInvitationEmailAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDInvitationEmailAttributeInput = &attributeWithCompositeIDInvitationEmailAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDInvitationEmailAttributeInput
		return nil
	}

	var attributeWithCompositeIDPartnerStatusAttributeInput AttributeWithCompositeIDPartnerStatusAttributeInput = AttributeWithCompositeIDPartnerStatusAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPartnerStatusAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDPartnerStatusAttributeInput = &attributeWithCompositeIDPartnerStatusAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPartnerStatusAttributeInput
		return nil
	}

	var attributeWithCompositeIDComputedAttributeInput AttributeWithCompositeIDComputedAttributeInput = AttributeWithCompositeIDComputedAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDComputedAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDComputedAttributeInput = &attributeWithCompositeIDComputedAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDComputedAttributeInput
		return nil
	}

	var attributeWithCompositeIDOrderedListAttributeInput AttributeWithCompositeIDOrderedListAttributeInput = AttributeWithCompositeIDOrderedListAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDOrderedListAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDOrderedListAttributeInput = &attributeWithCompositeIDOrderedListAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDOrderedListAttributeInput
		return nil
	}

	var attributeWithCompositeIDStatusAttributeInput AttributeWithCompositeIDStatusAttributeInput = AttributeWithCompositeIDStatusAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDStatusAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDStatusAttributeInput = &attributeWithCompositeIDStatusAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDStatusAttributeInput
		return nil
	}

	var attributeWithCompositeIDPaymentMethodRelationAttributeInput AttributeWithCompositeIDPaymentMethodRelationAttributeInput = AttributeWithCompositeIDPaymentMethodRelationAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPaymentMethodRelationAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDPaymentMethodRelationAttributeInput = &attributeWithCompositeIDPaymentMethodRelationAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPaymentMethodRelationAttributeInput
		return nil
	}

	var attributeWithCompositeIDTextAttributeInput AttributeWithCompositeIDTextAttributeInput = AttributeWithCompositeIDTextAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDTextAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDTextAttributeInput = &attributeWithCompositeIDTextAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDTextAttributeInput
		return nil
	}

	var attributeWithCompositeIDUserRelationAttributeInput AttributeWithCompositeIDUserRelationAttributeInput = AttributeWithCompositeIDUserRelationAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDUserRelationAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDUserRelationAttributeInput = &attributeWithCompositeIDUserRelationAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDUserRelationAttributeInput
		return nil
	}

	var attributeWithCompositeIDAddressRelationAttributeInput AttributeWithCompositeIDAddressRelationAttributeInput = AttributeWithCompositeIDAddressRelationAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDAddressRelationAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDAddressRelationAttributeInput = &attributeWithCompositeIDAddressRelationAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDAddressRelationAttributeInput
		return nil
	}

	var attributeWithCompositeIDNumberAttributeInput AttributeWithCompositeIDNumberAttributeInput = AttributeWithCompositeIDNumberAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDNumberAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDNumberAttributeInput = &attributeWithCompositeIDNumberAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDNumberAttributeInput
		return nil
	}

	var attributeWithCompositeIDConsentAttributeInput AttributeWithCompositeIDConsentAttributeInput = AttributeWithCompositeIDConsentAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDConsentAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDConsentAttributeInput = &attributeWithCompositeIDConsentAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDConsentAttributeInput
		return nil
	}

	var attributeWithCompositeIDCurrencyAttributeInput AttributeWithCompositeIDCurrencyAttributeInput = AttributeWithCompositeIDCurrencyAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDCurrencyAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDCurrencyAttributeInput = &attributeWithCompositeIDCurrencyAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDCurrencyAttributeInput
		return nil
	}

	var attributeWithCompositeIDTagsAttributeInput AttributeWithCompositeIDTagsAttributeInput = AttributeWithCompositeIDTagsAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDTagsAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDTagsAttributeInput = &attributeWithCompositeIDTagsAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDTagsAttributeInput
		return nil
	}

	var attributeWithCompositeIDSequenceAttributeInput AttributeWithCompositeIDSequenceAttributeInput = AttributeWithCompositeIDSequenceAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDSequenceAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDSequenceAttributeInput = &attributeWithCompositeIDSequenceAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDSequenceAttributeInput
		return nil
	}

	var attributeWithCompositeIDSelectAttributeInput AttributeWithCompositeIDSelectAttributeInput = AttributeWithCompositeIDSelectAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDSelectAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDSelectAttributeInput = &attributeWithCompositeIDSelectAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDSelectAttributeInput
		return nil
	}

	var attributeWithCompositeIDRepeatableAttributeInput AttributeWithCompositeIDRepeatableAttributeInput = AttributeWithCompositeIDRepeatableAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDRepeatableAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDRepeatableAttributeInput = &attributeWithCompositeIDRepeatableAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDRepeatableAttributeInput
		return nil
	}

	var attributeWithCompositeIDMultiSelectAttributeInput AttributeWithCompositeIDMultiSelectAttributeInput = AttributeWithCompositeIDMultiSelectAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDMultiSelectAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDMultiSelectAttributeInput = &attributeWithCompositeIDMultiSelectAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDMultiSelectAttributeInput
		return nil
	}

	var attributeWithCompositeIDPurposeAttributeInput AttributeWithCompositeIDPurposeAttributeInput = AttributeWithCompositeIDPurposeAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDPurposeAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDPurposeAttributeInput = &attributeWithCompositeIDPurposeAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDPurposeAttributeInput
		return nil
	}

	var attributeWithCompositeIDFileAttributeInput AttributeWithCompositeIDFileAttributeInput = AttributeWithCompositeIDFileAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDFileAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDFileAttributeInput = &attributeWithCompositeIDFileAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDFileAttributeInput
		return nil
	}

	var attributeWithCompositeIDRelationAttributeInput AttributeWithCompositeIDRelationAttributeInput = AttributeWithCompositeIDRelationAttributeInput{}
	if err := utils.UnmarshalJSON(data, &attributeWithCompositeIDRelationAttributeInput, "", true, false); err == nil {
		u.AttributeWithCompositeIDRelationAttributeInput = &attributeWithCompositeIDRelationAttributeInput
		u.Type = AttributeWithCompositeIDInputTypeAttributeWithCompositeIDRelationAttributeInput
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AttributeWithCompositeIDInput", string(data))
}

func (u AttributeWithCompositeIDInput) MarshalJSON() ([]byte, error) {
	if u.AttributeWithCompositeIDTextAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDTextAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDLinkAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDLinkAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDDateAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDDateAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDCountryAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDCountryAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDBooleanAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDBooleanAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDSelectAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDSelectAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDMultiSelectAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDMultiSelectAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDStatusAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDStatusAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDSequenceAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDSequenceAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDRelationAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDRelationAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDUserRelationAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDUserRelationAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDAddressRelationAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDAddressRelationAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDPaymentMethodRelationAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPaymentMethodRelationAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDCurrencyAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDCurrencyAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDRepeatableAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDRepeatableAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDTagsAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDTagsAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDNumberAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDNumberAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDConsentAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDConsentAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDInternalAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDInternalAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDOrderedListAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDOrderedListAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDFileAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDFileAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDComputedAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDComputedAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDPartnerStatusAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPartnerStatusAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDInvitationEmailAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDInvitationEmailAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDAutomationAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDAutomationAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDInternalUserAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDInternalUserAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDPurposeAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPurposeAttributeInput, "", true)
	}

	if u.AttributeWithCompositeIDPartnerOrganisationAttributeInput != nil {
		return utils.MarshalJSON(u.AttributeWithCompositeIDPartnerOrganisationAttributeInput, "", true)
	}

	return nil, errors.New("could not marshal union type AttributeWithCompositeIDInput: all fields are null")
}
