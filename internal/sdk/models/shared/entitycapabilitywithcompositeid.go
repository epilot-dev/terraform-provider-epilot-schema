// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

// RequiredPermission - Require a permission to display UI hook
type RequiredPermission struct {
	Action   string  `json:"action"`
	Resource *string `json:"resource,omitempty"`
}

func (o *RequiredPermission) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *RequiredPermission) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

type UIHooks struct {
	// name of the hook to use
	Hook            string  `json:"hook"`
	RenderCondition *string `json:"render_condition,omitempty"`
	// render order (ascending)
	Order *int64  `json:"order,omitempty"`
	Title *string `json:"title,omitempty"`
	// Sets the group expand/collapse default state
	GroupExpanded *bool `json:"group_expanded,omitempty"`
	// package to be imported
	Import *string `json:"import,omitempty"`
	// the component to be dynamically loaded
	Component *string `json:"component,omitempty"`
	// route for specified capability
	Route *string `json:"route,omitempty"`
	// Preview icon name(As in Base elements) for the capability
	Icon *string `json:"icon,omitempty"`
	// Whether capability should be disabled
	Disabled *bool `json:"disabled,omitempty"`
	// Specific to Activity pilot
	Header *bool `json:"header,omitempty"`
	// Require a permission to display UI hook
	RequiredPermission   *RequiredPermission `json:"requiredPermission,omitempty"`
	AdditionalProperties any                 `additionalProperties:"true" json:"-"`
}

func (u UIHooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UIHooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UIHooks) GetHook() string {
	if o == nil {
		return ""
	}
	return o.Hook
}

func (o *UIHooks) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *UIHooks) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *UIHooks) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UIHooks) GetGroupExpanded() *bool {
	if o == nil {
		return nil
	}
	return o.GroupExpanded
}

func (o *UIHooks) GetImport() *string {
	if o == nil {
		return nil
	}
	return o.Import
}

func (o *UIHooks) GetComponent() *string {
	if o == nil {
		return nil
	}
	return o.Component
}

func (o *UIHooks) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *UIHooks) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *UIHooks) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIHooks) GetHeader() *bool {
	if o == nil {
		return nil
	}
	return o.Header
}

func (o *UIHooks) GetRequiredPermission() *RequiredPermission {
	if o == nil {
		return nil
	}
	return o.RequiredPermission
}

func (o *UIHooks) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// EntityCapabilityWithCompositeID - a readonly computed ID for the entity capability including schema slug and the capability ID
type EntityCapabilityWithCompositeID struct {
	// ID for the entity capability
	ID *string `json:"id,omitempty"`
	// Unique name for the capability
	Name string `json:"name"`
	// Human readable title of the capability
	Title      *string     `json:"title,omitempty"`
	Attributes []Attribute `json:"attributes,omitempty"`
	Purpose    []string    `json:"_purpose,omitempty"`
	// Manifest ID used to create/update the schema capabilility
	Manifest []string  `json:"_manifest,omitempty"`
	UIHooks  []UIHooks `json:"ui_hooks,omitempty"`
	// This capability should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This capability should only be active when all the settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	CompositeID  *string       `json:"composite_id,omitempty"`
	// Schema slug the capability belongs to
	Schema *string `json:"schema,omitempty"`
}

func (o *EntityCapabilityWithCompositeID) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityCapabilityWithCompositeID) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EntityCapabilityWithCompositeID) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *EntityCapabilityWithCompositeID) GetAttributes() []Attribute {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *EntityCapabilityWithCompositeID) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *EntityCapabilityWithCompositeID) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *EntityCapabilityWithCompositeID) GetUIHooks() []UIHooks {
	if o == nil {
		return nil
	}
	return o.UIHooks
}

func (o *EntityCapabilityWithCompositeID) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntityCapabilityWithCompositeID) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *EntityCapabilityWithCompositeID) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

func (o *EntityCapabilityWithCompositeID) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

// EntityCapabilityWithCompositeIDInput - a readonly computed ID for the entity capability including schema slug and the capability ID
type EntityCapabilityWithCompositeIDInput struct {
	// ID for the entity capability
	ID *string `json:"id,omitempty"`
	// Unique name for the capability
	Name string `json:"name"`
	// Human readable title of the capability
	Title      *string          `json:"title,omitempty"`
	Attributes []AttributeInput `json:"attributes,omitempty"`
	Purpose    []string         `json:"_purpose,omitempty"`
	// Manifest ID used to create/update the schema capabilility
	Manifest []string  `json:"_manifest,omitempty"`
	UIHooks  []UIHooks `json:"ui_hooks,omitempty"`
	// This capability should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This capability should only be active when all the settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Schema slug the capability belongs to
	Schema *string `json:"schema,omitempty"`
}

func (o *EntityCapabilityWithCompositeIDInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityCapabilityWithCompositeIDInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EntityCapabilityWithCompositeIDInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *EntityCapabilityWithCompositeIDInput) GetAttributes() []AttributeInput {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *EntityCapabilityWithCompositeIDInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *EntityCapabilityWithCompositeIDInput) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *EntityCapabilityWithCompositeIDInput) GetUIHooks() []UIHooks {
	if o == nil {
		return nil
	}
	return o.UIHooks
}

func (o *EntityCapabilityWithCompositeIDInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntityCapabilityWithCompositeIDInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *EntityCapabilityWithCompositeIDInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}
