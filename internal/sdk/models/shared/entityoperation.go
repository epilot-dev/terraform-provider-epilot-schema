// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
	"time"
)

type Operation string

const (
	OperationCreateEntity         Operation = "createEntity"
	OperationUpdateEntity         Operation = "updateEntity"
	OperationDeleteEntity         Operation = "deleteEntity"
	OperationSoftDeleteEntity     Operation = "softDeleteEntity"
	OperationRestoreEntity        Operation = "restoreEntity"
	OperationRelationsAdded       Operation = "relationsAdded"
	OperationRelationsRemoved     Operation = "relationsRemoved"
	OperationRelationsSoftDeleted Operation = "relationsSoftDeleted"
	OperationRelationsRestored    Operation = "relationsRestored"
	OperationRelationsDeleted     Operation = "relationsDeleted"
)

func (e Operation) ToPointer() *Operation {
	return &e
}
func (e *Operation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createEntity":
		fallthrough
	case "updateEntity":
		fallthrough
	case "deleteEntity":
		fallthrough
	case "softDeleteEntity":
		fallthrough
	case "restoreEntity":
		fallthrough
	case "relationsAdded":
		fallthrough
	case "relationsRemoved":
		fallthrough
	case "relationsSoftDeleted":
		fallthrough
	case "relationsRestored":
		fallthrough
	case "relationsDeleted":
		*e = Operation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Operation: %v", v)
	}
}

type EntityOperationParams struct {
	ID *string `json:"id,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *string `json:"slug,omitempty"`
}

func (o *EntityOperationParams) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityOperationParams) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// EntityOperationACL - Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
type EntityOperationACL struct {
	View                 []string `json:"view,omitempty"`
	Edit                 []string `json:"edit,omitempty"`
	Delete               []string `json:"delete,omitempty"`
	AdditionalProperties any      `additionalProperties:"true" json:"-"`
}

func (e EntityOperationACL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityOperationACL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EntityOperationACL) GetView() []string {
	if o == nil {
		return nil
	}
	return o.View
}

func (o *EntityOperationACL) GetEdit() []string {
	if o == nil {
		return nil
	}
	return o.Edit
}

func (o *EntityOperationACL) GetDelete() []string {
	if o == nil {
		return nil
	}
	return o.Delete
}

func (o *EntityOperationACL) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type Payload struct {
	ID *string `json:"_id,omitempty"`
	// Organization Id the entity belongs to
	Org    *string       `json:"_org,omitempty"`
	Owners []EntityOwner `json:"_owners,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema *string `json:"_schema,omitempty"`
	// Title of entity
	Title     *string             `json:"_title,omitempty"`
	Tags      []string            `json:"_tags,omitempty"`
	CreatedAt *time.Time          `json:"_created_at,omitempty"`
	UpdatedAt *time.Time          `json:"_updated_at,omitempty"`
	DeletedAt *time.Time          `json:"_deleted_at,omitempty"`
	ACL       *EntityOperationACL `json:"_acl,omitempty"`
	Purpose   []string            `json:"_purpose,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest             []string `json:"_manifest,omitempty"`
	AdditionalProperties any      `additionalProperties:"true" json:"-"`
}

func (p Payload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Payload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Payload) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Payload) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *Payload) GetOwners() []EntityOwner {
	if o == nil {
		return nil
	}
	return o.Owners
}

func (o *Payload) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *Payload) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Payload) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Payload) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Payload) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Payload) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Payload) GetACL() *EntityOperationACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *Payload) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *Payload) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *Payload) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type Diff struct {
	Added   *Entity `json:"added,omitempty"`
	Updated *Entity `json:"updated,omitempty"`
	Deleted *Entity `json:"deleted,omitempty"`
}

func (o *Diff) GetAdded() *Entity {
	if o == nil {
		return nil
	}
	return o.Added
}

func (o *Diff) GetUpdated() *Entity {
	if o == nil {
		return nil
	}
	return o.Updated
}

func (o *Diff) GetDeleted() *Entity {
	if o == nil {
		return nil
	}
	return o.Deleted
}

type EntityOperation struct {
	Entity string `json:"entity"`
	Org    string `json:"org"`
	// See https://github.com/ulid/spec
	ActivityID *string                `json:"activity_id,omitempty"`
	Operation  Operation              `json:"operation"`
	Params     *EntityOperationParams `json:"params,omitempty"`
	Payload    *Payload               `json:"payload,omitempty"`
	Diff       *Diff                  `json:"diff,omitempty"`
}

func (o *EntityOperation) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *EntityOperation) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *EntityOperation) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *EntityOperation) GetOperation() Operation {
	if o == nil {
		return Operation("")
	}
	return o.Operation
}

func (o *EntityOperation) GetParams() *EntityOperationParams {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *EntityOperation) GetPayload() *Payload {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *EntityOperation) GetDiff() *Diff {
	if o == nil {
		return nil
	}
	return o.Diff
}
