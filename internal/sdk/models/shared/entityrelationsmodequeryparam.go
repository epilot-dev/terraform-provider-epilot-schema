// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityRelationsModeQueryParam string

const (
	EntityRelationsModeQueryParamDirect  EntityRelationsModeQueryParam = "direct"
	EntityRelationsModeQueryParamReverse EntityRelationsModeQueryParam = "reverse"
	EntityRelationsModeQueryParamBoth    EntityRelationsModeQueryParam = "both"
)

func (e EntityRelationsModeQueryParam) ToPointer() *EntityRelationsModeQueryParam {
	return &e
}
func (e *EntityRelationsModeQueryParam) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "direct":
		fallthrough
	case "reverse":
		fallthrough
	case "both":
		*e = EntityRelationsModeQueryParam(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityRelationsModeQueryParam: %v", v)
	}
}
