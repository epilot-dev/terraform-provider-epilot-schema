// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

// Aggs - Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics.
type Aggs struct {
}

type EntitySearchParams struct {
	// Lucene [queries supported with ElasticSearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax)
	Q string `json:"q"`
	// Adds a `_score` number field to results that can be used to rank by match score
	IncludeScores *bool   `default:"false" json:"include_scores"`
	Sort          *string `json:"sort,omitempty"`
	From          *int64  `default:"0" json:"from"`
	// Max search size is 1000 with higher values defaulting to 1000
	Size *int64 `default:"10" json:"size"`
	// When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place.
	Hydrate *bool `default:"false" json:"hydrate"`
	// List of entity fields to include or exclude in the response
	//
	// Use ! to exclude fields, e.g. `!_id` to exclude the `_id` field.
	//
	// Globbing and globstart (**) is supported for nested fields.
	//
	Fields []string `json:"fields,omitempty"`
	// Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics.
	Aggs *Aggs `json:"aggs,omitempty"`
}

func (e EntitySearchParams) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySearchParams) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EntitySearchParams) GetQ() string {
	if o == nil {
		return ""
	}
	return o.Q
}

func (o *EntitySearchParams) GetIncludeScores() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeScores
}

func (o *EntitySearchParams) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *EntitySearchParams) GetFrom() *int64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *EntitySearchParams) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *EntitySearchParams) GetHydrate() *bool {
	if o == nil {
		return nil
	}
	return o.Hydrate
}

func (o *EntitySearchParams) GetFields() []string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *EntitySearchParams) GetAggs() *Aggs {
	if o == nil {
		return nil
	}
	return o.Aggs
}
