// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityValidationResultErrorStatus string

const (
	EntityValidationResultErrorStatusError EntityValidationResultErrorStatus = "error"
)

func (e EntityValidationResultErrorStatus) ToPointer() *EntityValidationResultErrorStatus {
	return &e
}
func (e *EntityValidationResultErrorStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		*e = EntityValidationResultErrorStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityValidationResultErrorStatus: %v", v)
	}
}

// EntityValidationResultError - Validation result for a failed validation
type EntityValidationResultError struct {
	Status EntityValidationResultErrorStatus `json:"status"`
	Errors []EntityValidationError           `json:"errors"`
}

func (o *EntityValidationResultError) GetStatus() EntityValidationResultErrorStatus {
	if o == nil {
		return EntityValidationResultErrorStatus("")
	}
	return o.Status
}

func (o *EntityValidationResultError) GetErrors() []EntityValidationError {
	if o == nil {
		return []EntityValidationError{}
	}
	return o.Errors
}
