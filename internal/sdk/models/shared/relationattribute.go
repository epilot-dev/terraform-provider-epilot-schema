// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

// RelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type RelationAttributeConstraints struct {
}

// RelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type RelationAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *RelationAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *RelationAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *RelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *RelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type RelationAttributeType string

const (
	RelationAttributeTypeRelation RelationAttributeType = "relation"
)

func (e RelationAttributeType) ToPointer() *RelationAttributeType {
	return &e
}
func (e *RelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation":
		*e = RelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeType: %v", v)
	}
}

type RelationType string

const (
	RelationTypeHasMany RelationType = "has_many"
	RelationTypeHasOne  RelationType = "has_one"
)

func (e RelationType) ToPointer() *RelationType {
	return &e
}
func (e *RelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "has_many":
		fallthrough
	case "has_one":
		*e = RelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationType: %v", v)
	}
}

// RelationAffinityMode - Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
type RelationAffinityMode string

const (
	RelationAffinityModeWeak   RelationAffinityMode = "weak"
	RelationAffinityModeStrong RelationAffinityMode = "strong"
)

func (e RelationAffinityMode) ToPointer() *RelationAffinityMode {
	return &e
}
func (e *RelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAffinityMode: %v", v)
	}
}

type EditMode string

const (
	EditModeListView EditMode = "list-view"
)

func (e EditMode) ToPointer() *EditMode {
	return &e
}
func (e *EditMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list-view":
		*e = EditMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditMode: %v", v)
	}
}

// RelationPickerFilter - Additional entity search filter for relation picker
type RelationPickerFilter struct {
	Q string `json:"q"`
}

func (o *RelationPickerFilter) GetQ() string {
	if o == nil {
		return ""
	}
	return o.Q
}

// ActionType - The action type. Currently supported actions:
//
// | action | description |
// |--------|-------------|
// | add_existing | Enables the user to pick an existing entity to link as relation |
// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
type ActionType string

const (
	ActionTypeAddExisting        ActionType = "add_existing"
	ActionTypeCreateNew          ActionType = "create_new"
	ActionTypeCreateFromExisting ActionType = "create_from_existing"
)

func (e ActionType) ToPointer() *ActionType {
	return &e
}
func (e *ActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_existing":
		fallthrough
	case "create_new":
		fallthrough
	case "create_from_existing":
		*e = ActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionType: %v", v)
	}
}

type Actions struct {
	// The action type. Currently supported actions:
	//
	// | action | description |
	// |--------|-------------|
	// | add_existing | Enables the user to pick an existing entity to link as relation |
	// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
	// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
	//
	ActionType *ActionType `json:"action_type,omitempty"`
	// The action label or action translation key (i18n)
	Label *string `json:"label,omitempty"`
	// Sets the action as the default action, visible as the main action button.
	Default *bool `json:"default,omitempty"`
	// Name of the feature flag that enables this action
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This action should only be active when all the settings have the correct value
	SettingsFlag  []SettingFlag `json:"settings_flag,omitempty"`
	NewEntityItem any           `json:"new_entity_item,omitempty"`
}

func (o *Actions) GetActionType() *ActionType {
	if o == nil {
		return nil
	}
	return o.ActionType
}

func (o *Actions) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *Actions) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *Actions) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *Actions) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *Actions) GetNewEntityItem() any {
	if o == nil {
		return nil
	}
	return o.NewEntityItem
}

type DrawerSize string

const (
	DrawerSizeSmall  DrawerSize = "small"
	DrawerSizeMedium DrawerSize = "medium"
	DrawerSizeLarge  DrawerSize = "large"
)

func (e DrawerSize) ToPointer() *DrawerSize {
	return &e
}
func (e *DrawerSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		*e = DrawerSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DrawerSize: %v", v)
	}
}

type SummaryFieldsType string

const (
	SummaryFieldsTypeStr          SummaryFieldsType = "str"
	SummaryFieldsTypeSummaryField SummaryFieldsType = "SummaryField"
)

type SummaryFields struct {
	Str          *string
	SummaryField *SummaryField

	Type SummaryFieldsType
}

func CreateSummaryFieldsStr(str string) SummaryFields {
	typ := SummaryFieldsTypeStr

	return SummaryFields{
		Str:  &str,
		Type: typ,
	}
}

func CreateSummaryFieldsSummaryField(summaryField SummaryField) SummaryFields {
	typ := SummaryFieldsTypeSummaryField

	return SummaryFields{
		SummaryField: &summaryField,
		Type:         typ,
	}
}

func (u *SummaryFields) UnmarshalJSON(data []byte) error {

	var summaryField SummaryField = SummaryField{}
	if err := utils.UnmarshalJSON(data, &summaryField, "", true, false); err == nil {
		u.SummaryField = &summaryField
		u.Type = SummaryFieldsTypeSummaryField
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = SummaryFieldsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SummaryFields", string(data))
}

func (u SummaryFields) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.SummaryField != nil {
		return utils.MarshalJSON(u.SummaryField, "", true)
	}

	return nil, errors.New("could not marshal union type SummaryFields: all fields are null")
}

// RelationAttribute - Entity Relationship
type RelationAttribute struct {
	// ID for the entity attribute
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *RelationAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *RelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	// Relations are always repeatables
	Repeatable   *bool                  `default:"true" json:"repeatable"`
	HasPrimary   *bool                  `json:"has_primary,omitempty"`
	Type         *RelationAttributeType `json:"type,omitempty"`
	RelationType *RelationType          `json:"relation_type,omitempty"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool     `default:"true" json:"enable_relation_picker"`
	EditMode             *EditMode `json:"edit_mode,omitempty"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool `default:"false" json:"details_view_mode_enabled"`
	// Additional entity search filter for relation picker
	RelationPickerFilter *RelationPickerFilter `json:"relation_picker_filter,omitempty"`
	Actions              []Actions             `json:"actions,omitempty"`
	DrawerSize           *DrawerSize           `json:"drawer_size,omitempty"`
	SummaryFields        []SummaryFields       `json:"summary_fields,omitempty"`
	AllowedSchemas       []string              `json:"allowedSchemas,omitempty"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string `json:"add_button_label,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
}

func (r RelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RelationAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RelationAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RelationAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *RelationAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *RelationAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *RelationAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *RelationAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *RelationAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *RelationAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *RelationAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *RelationAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *RelationAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *RelationAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *RelationAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *RelationAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *RelationAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *RelationAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *RelationAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *RelationAttribute) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *RelationAttribute) GetConstraints() *RelationAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *RelationAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *RelationAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *RelationAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *RelationAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *RelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *RelationAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *RelationAttribute) GetInfoHelpers() *RelationAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *RelationAttribute) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *RelationAttribute) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *RelationAttribute) GetType() *RelationAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RelationAttribute) GetRelationType() *RelationType {
	if o == nil {
		return nil
	}
	return o.RelationType
}

func (o *RelationAttribute) GetReverseAttributes() map[string]string {
	if o == nil {
		return nil
	}
	return o.ReverseAttributes
}

func (o *RelationAttribute) GetRelationAffinityMode() *RelationAffinityMode {
	if o == nil {
		return nil
	}
	return o.RelationAffinityMode
}

func (o *RelationAttribute) GetEnableRelationPicker() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationPicker
}

func (o *RelationAttribute) GetEditMode() *EditMode {
	if o == nil {
		return nil
	}
	return o.EditMode
}

func (o *RelationAttribute) GetDetailsViewModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DetailsViewModeEnabled
}

func (o *RelationAttribute) GetRelationPickerFilter() *RelationPickerFilter {
	if o == nil {
		return nil
	}
	return o.RelationPickerFilter
}

func (o *RelationAttribute) GetActions() []Actions {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *RelationAttribute) GetDrawerSize() *DrawerSize {
	if o == nil {
		return nil
	}
	return o.DrawerSize
}

func (o *RelationAttribute) GetSummaryFields() []SummaryFields {
	if o == nil {
		return nil
	}
	return o.SummaryFields
}

func (o *RelationAttribute) GetAllowedSchemas() []string {
	if o == nil {
		return nil
	}
	return o.AllowedSchemas
}

func (o *RelationAttribute) GetEnableRelationTags() *bool {
	if o == nil {
		return nil
	}
	return o.EnableRelationTags
}

func (o *RelationAttribute) GetAddButtonLabel() *string {
	if o == nil {
		return nil
	}
	return o.AddButtonLabel
}

func (o *RelationAttribute) GetSearchPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.SearchPlaceholder
}
