// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

type SavedViewCreatedBySource string

const (
	SavedViewCreatedBySourceSystem    SavedViewCreatedBySource = "SYSTEM"
	SavedViewCreatedBySourceBlueprint SavedViewCreatedBySource = "BLUEPRINT"
)

func (e SavedViewCreatedBySource) ToPointer() *SavedViewCreatedBySource {
	return &e
}
func (e *SavedViewCreatedBySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM":
		fallthrough
	case "BLUEPRINT":
		*e = SavedViewCreatedBySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedViewCreatedBySource: %v", v)
	}
}

// SavedViewCreatedBy2 - A system-created view
type SavedViewCreatedBy2 struct {
	Source               *SavedViewCreatedBySource `json:"source,omitempty"`
	AdditionalProperties any                       `additionalProperties:"true" json:"-"`
}

func (s SavedViewCreatedBy2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedViewCreatedBy2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedViewCreatedBy2) GetSource() *SavedViewCreatedBySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *SavedViewCreatedBy2) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// SavedViewCreatedBy1 - A user that created the view
type SavedViewCreatedBy1 struct {
	UserID *string `json:"user_id,omitempty"`
}

func (o *SavedViewCreatedBy1) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type SavedViewCreatedByType string

const (
	SavedViewCreatedByTypeSavedViewCreatedBy1 SavedViewCreatedByType = "SavedView_created_by_1"
	SavedViewCreatedByTypeSavedViewCreatedBy2 SavedViewCreatedByType = "SavedView_created_by_2"
)

type SavedViewCreatedBy struct {
	SavedViewCreatedBy1 *SavedViewCreatedBy1
	SavedViewCreatedBy2 *SavedViewCreatedBy2

	Type SavedViewCreatedByType
}

func CreateSavedViewCreatedBySavedViewCreatedBy1(savedViewCreatedBy1 SavedViewCreatedBy1) SavedViewCreatedBy {
	typ := SavedViewCreatedByTypeSavedViewCreatedBy1

	return SavedViewCreatedBy{
		SavedViewCreatedBy1: &savedViewCreatedBy1,
		Type:                typ,
	}
}

func CreateSavedViewCreatedBySavedViewCreatedBy2(savedViewCreatedBy2 SavedViewCreatedBy2) SavedViewCreatedBy {
	typ := SavedViewCreatedByTypeSavedViewCreatedBy2

	return SavedViewCreatedBy{
		SavedViewCreatedBy2: &savedViewCreatedBy2,
		Type:                typ,
	}
}

func (u *SavedViewCreatedBy) UnmarshalJSON(data []byte) error {

	var savedViewCreatedBy1 SavedViewCreatedBy1 = SavedViewCreatedBy1{}
	if err := utils.UnmarshalJSON(data, &savedViewCreatedBy1, "", true, false); err == nil {
		u.SavedViewCreatedBy1 = &savedViewCreatedBy1
		u.Type = SavedViewCreatedByTypeSavedViewCreatedBy1
		return nil
	}

	var savedViewCreatedBy2 SavedViewCreatedBy2 = SavedViewCreatedBy2{}
	if err := utils.UnmarshalJSON(data, &savedViewCreatedBy2, "", true, false); err == nil {
		u.SavedViewCreatedBy2 = &savedViewCreatedBy2
		u.Type = SavedViewCreatedByTypeSavedViewCreatedBy2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SavedViewCreatedBy", string(data))
}

func (u SavedViewCreatedBy) MarshalJSON() ([]byte, error) {
	if u.SavedViewCreatedBy1 != nil {
		return utils.MarshalJSON(u.SavedViewCreatedBy1, "", true)
	}

	if u.SavedViewCreatedBy2 != nil {
		return utils.MarshalJSON(u.SavedViewCreatedBy2, "", true)
	}

	return nil, errors.New("could not marshal union type SavedViewCreatedBy: all fields are null")
}

// SavedView - A saved entity view
type SavedView struct {
	// list of schemas a view can belong to
	Slug []string `json:"slug"`
	// User-friendly identifier for the saved view
	Name string `json:"name"`
	// Organisation ID a view belongs to
	Org *string `json:"org,omitempty"`
	// boolean property for if a view is shared with organisation
	Shared *bool `json:"shared,omitempty"`
	// List of users (IDs) that have favorited the view
	IsFavoritedBy []string           `json:"isFavoritedBy,omitempty"`
	CreatedBy     SavedViewCreatedBy `json:"created_by"`
	UIConfig      map[string]any     `json:"ui_config"`
}

func (o *SavedView) GetSlug() []string {
	if o == nil {
		return []string{}
	}
	return o.Slug
}

func (o *SavedView) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SavedView) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *SavedView) GetShared() *bool {
	if o == nil {
		return nil
	}
	return o.Shared
}

func (o *SavedView) GetIsFavoritedBy() []string {
	if o == nil {
		return nil
	}
	return o.IsFavoritedBy
}

func (o *SavedView) GetCreatedBy() SavedViewCreatedBy {
	if o == nil {
		return SavedViewCreatedBy{}
	}
	return o.CreatedBy
}

func (o *SavedView) GetUIConfig() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.UIConfig
}
