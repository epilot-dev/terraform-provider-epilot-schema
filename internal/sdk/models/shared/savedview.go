// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

type CreatedBySource string

const (
	CreatedBySourceSystem    CreatedBySource = "SYSTEM"
	CreatedBySourceBlueprint CreatedBySource = "BLUEPRINT"
)

func (e CreatedBySource) ToPointer() *CreatedBySource {
	return &e
}
func (e *CreatedBySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM":
		fallthrough
	case "BLUEPRINT":
		*e = CreatedBySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedBySource: %v", v)
	}
}

// CreatedBy2 - A system-created view
type CreatedBy2 struct {
	Source               *CreatedBySource `json:"source,omitempty"`
	AdditionalProperties any              `additionalProperties:"true" json:"-"`
}

func (c CreatedBy2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatedBy2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatedBy2) GetSource() *CreatedBySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreatedBy2) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// CreatedBy1 - A user that created the view
type CreatedBy1 struct {
	UserID *string `json:"user_id,omitempty"`
}

func (o *CreatedBy1) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type SavedViewCreatedByType string

const (
	SavedViewCreatedByTypeCreatedBy1 SavedViewCreatedByType = "created_by_1"
	SavedViewCreatedByTypeCreatedBy2 SavedViewCreatedByType = "created_by_2"
)

type SavedViewCreatedBy struct {
	CreatedBy1 *CreatedBy1 `queryParam:"inline"`
	CreatedBy2 *CreatedBy2 `queryParam:"inline"`

	Type SavedViewCreatedByType
}

func CreateSavedViewCreatedByCreatedBy1(createdBy1 CreatedBy1) SavedViewCreatedBy {
	typ := SavedViewCreatedByTypeCreatedBy1

	return SavedViewCreatedBy{
		CreatedBy1: &createdBy1,
		Type:       typ,
	}
}

func CreateSavedViewCreatedByCreatedBy2(createdBy2 CreatedBy2) SavedViewCreatedBy {
	typ := SavedViewCreatedByTypeCreatedBy2

	return SavedViewCreatedBy{
		CreatedBy2: &createdBy2,
		Type:       typ,
	}
}

func (u *SavedViewCreatedBy) UnmarshalJSON(data []byte) error {

	var createdBy1 CreatedBy1 = CreatedBy1{}
	if err := utils.UnmarshalJSON(data, &createdBy1, "", true, false); err == nil {
		u.CreatedBy1 = &createdBy1
		u.Type = SavedViewCreatedByTypeCreatedBy1
		return nil
	}

	var createdBy2 CreatedBy2 = CreatedBy2{}
	if err := utils.UnmarshalJSON(data, &createdBy2, "", true, false); err == nil {
		u.CreatedBy2 = &createdBy2
		u.Type = SavedViewCreatedByTypeCreatedBy2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SavedViewCreatedBy", string(data))
}

func (u SavedViewCreatedBy) MarshalJSON() ([]byte, error) {
	if u.CreatedBy1 != nil {
		return utils.MarshalJSON(u.CreatedBy1, "", true)
	}

	if u.CreatedBy2 != nil {
		return utils.MarshalJSON(u.CreatedBy2, "", true)
	}

	return nil, errors.New("could not marshal union type SavedViewCreatedBy: all fields are null")
}

// SavedView - A saved entity view
type SavedView struct {
	// list of schemas a view can belong to
	Slug []string `json:"slug"`
	// User-friendly identifier for the saved view
	Name string `json:"name"`
	// Organisation ID a view belongs to
	Org *string `json:"org,omitempty"`
	// boolean property for if a view is shared with organisation
	Shared *bool `json:"shared,omitempty"`
	// List of users (IDs) that have favorited the view
	IsFavoritedBy []string           `json:"isFavoritedBy,omitempty"`
	CreatedBy     SavedViewCreatedBy `json:"created_by"`
	UIConfig      map[string]any     `json:"ui_config"`
}

func (o *SavedView) GetSlug() []string {
	if o == nil {
		return []string{}
	}
	return o.Slug
}

func (o *SavedView) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SavedView) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *SavedView) GetShared() *bool {
	if o == nil {
		return nil
	}
	return o.Shared
}

func (o *SavedView) GetIsFavoritedBy() []string {
	if o == nil {
		return nil
	}
	return o.IsFavoritedBy
}

func (o *SavedView) GetCreatedBy() SavedViewCreatedBy {
	if o == nil {
		return SavedViewCreatedBy{}
	}
	return o.CreatedBy
}

func (o *SavedView) GetUIConfig() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.UIConfig
}
