// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

type Source string

const (
	SourceSystem    Source = "SYSTEM"
	SourceBlueprint Source = "BLUEPRINT"
)

func (e Source) ToPointer() *Source {
	return &e
}
func (e *Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM":
		fallthrough
	case "BLUEPRINT":
		*e = Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Source: %v", v)
	}
}

// Two - A system-created view
type Two struct {
	Source               *Source `json:"source,omitempty"`
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
}

func (t Two) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Two) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Two) GetSource() *Source {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *Two) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// One - A user that created the view
type One struct {
	UserID *string `json:"user_id,omitempty"`
}

func (o *One) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type CreatedByType string

const (
	CreatedByTypeOne CreatedByType = "1"
	CreatedByTypeTwo CreatedByType = "2"
)

type CreatedBy struct {
	One *One
	Two *Two

	Type CreatedByType
}

func CreateCreatedByOne(one One) CreatedBy {
	typ := CreatedByTypeOne

	return CreatedBy{
		One:  &one,
		Type: typ,
	}
}

func CreateCreatedByTwo(two Two) CreatedBy {
	typ := CreatedByTypeTwo

	return CreatedBy{
		Two:  &two,
		Type: typ,
	}
}

func (u *CreatedBy) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, false); err == nil {
		u.One = &one
		u.Type = CreatedByTypeOne
		return nil
	}

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, false); err == nil {
		u.Two = &two
		u.Type = CreatedByTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatedBy", string(data))
}

func (u CreatedBy) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type CreatedBy: all fields are null")
}

// SavedViewItem - A saved entity view
type SavedViewItem struct {
	// Generated uuid for a saved view
	ID        *string `json:"id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	// list of schemas a view can belong to
	Slug []string `json:"slug"`
	// User-friendly identifier for the saved view
	Name string `json:"name"`
	// Organisation ID a view belongs to
	Org *string `json:"org,omitempty"`
	// boolean property for if a view is shared with organisation
	Shared *bool `json:"shared,omitempty"`
	// List of users (IDs) that have favorited the view
	IsFavoritedBy []string       `json:"isFavoritedBy,omitempty"`
	CreatedBy     CreatedBy      `json:"created_by"`
	UIConfig      map[string]any `json:"ui_config"`
}

func (o *SavedViewItem) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SavedViewItem) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SavedViewItem) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *SavedViewItem) GetSlug() []string {
	if o == nil {
		return []string{}
	}
	return o.Slug
}

func (o *SavedViewItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SavedViewItem) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *SavedViewItem) GetShared() *bool {
	if o == nil {
		return nil
	}
	return o.Shared
}

func (o *SavedViewItem) GetIsFavoritedBy() []string {
	if o == nil {
		return nil
	}
	return o.IsFavoritedBy
}

func (o *SavedViewItem) GetCreatedBy() CreatedBy {
	if o == nil {
		return CreatedBy{}
	}
	return o.CreatedBy
}

func (o *SavedViewItem) GetUIConfig() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.UIConfig
}
