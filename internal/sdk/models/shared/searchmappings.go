// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

type Type string

const (
	TypeKeyword   Type = "keyword"
	TypeText      Type = "text"
	TypeBoolean   Type = "boolean"
	TypeInteger   Type = "integer"
	TypeLong      Type = "long"
	TypeFloat     Type = "float"
	TypeDate      Type = "date"
	TypeFlattened Type = "flattened"
	TypeNested    Type = "nested"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "keyword":
		fallthrough
	case "text":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "long":
		fallthrough
	case "float":
		fallthrough
	case "date":
		fallthrough
	case "flattened":
		fallthrough
	case "nested":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type SearchMappings struct {
	Index  *bool          `default:"true" json:"index"`
	Type   *Type          `json:"type,omitempty"`
	Fields map[string]any `json:"fields,omitempty"`
}

func (s SearchMappings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchMappings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchMappings) GetIndex() *bool {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *SearchMappings) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SearchMappings) GetFields() map[string]any {
	if o == nil {
		return nil
	}
	return o.Fields
}
