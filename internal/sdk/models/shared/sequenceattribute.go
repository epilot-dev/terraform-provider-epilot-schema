// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
)

// SequenceAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SequenceAttributeConstraints struct {
}

// SequenceAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SequenceAttributeInfoHelpers struct {
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (o *SequenceAttributeInfoHelpers) GetHintText() *string {
	if o == nil {
		return nil
	}
	return o.HintText
}

func (o *SequenceAttributeInfoHelpers) GetHintTextKey() *string {
	if o == nil {
		return nil
	}
	return o.HintTextKey
}

func (o *SequenceAttributeInfoHelpers) GetHintCustomComponent() *string {
	if o == nil {
		return nil
	}
	return o.HintCustomComponent
}

func (o *SequenceAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if o == nil {
		return nil
	}
	return o.HintTooltipPlacement
}

type SequenceAttributeType string

const (
	SequenceAttributeTypeSequence SequenceAttributeType = "sequence"
)

func (e SequenceAttributeType) ToPointer() *SequenceAttributeType {
	return &e
}
func (e *SequenceAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sequence":
		*e = SequenceAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SequenceAttributeType: %v", v)
	}
}

// SequenceAttribute - Sequence of unique identifiers
type SequenceAttribute struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Label       string  `json:"label"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable     *bool `default:"true" json:"sortable"`
	Required     *bool `default:"false" json:"required"`
	Readonly     *bool `default:"false" json:"readonly"`
	Deprecated   *bool `default:"false" json:"deprecated"`
	DefaultValue any   `json:"default_value,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Attribute sort order (ascending) in group
	Order  *int64  `json:"order,omitempty"`
	Layout *string `json:"layout,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string  `json:"render_condition,omitempty"`
	Purpose         []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SequenceAttributeConstraints `json:"constraints,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This attribute should only be active when all the settings have the correct value
	SettingsFlag          []SettingFlag `json:"settings_flag,omitempty"`
	ValueFormatter        *string       `json:"value_formatter,omitempty"`
	PreviewValueFormatter *string       `json:"preview_value_formatter,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SequenceAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Type        *SequenceAttributeType        `json:"type,omitempty"`
	// Prefix added before the sequence number
	Prefix      *string `json:"prefix,omitempty"`
	StartNumber *int64  `json:"start_number,omitempty"`
}

func (s SequenceAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SequenceAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SequenceAttribute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SequenceAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SequenceAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *SequenceAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *SequenceAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *SequenceAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *SequenceAttribute) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *SequenceAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *SequenceAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *SequenceAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *SequenceAttribute) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *SequenceAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *SequenceAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *SequenceAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *SequenceAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *SequenceAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *SequenceAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *SequenceAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *SequenceAttribute) GetConstraints() *SequenceAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *SequenceAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *SequenceAttribute) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *SequenceAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

func (o *SequenceAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *SequenceAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *SequenceAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *SequenceAttribute) GetInfoHelpers() *SequenceAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *SequenceAttribute) GetType() *SequenceAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SequenceAttribute) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *SequenceAttribute) GetStartNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.StartNumber
}
