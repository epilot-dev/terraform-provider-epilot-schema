// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot/terraform-provider-epilot-schema/internal/sdk/internal/utils"
	"time"
)

// Kind of taxonomy e.g. system or user_defined. By default, it's empty, which means 'user_defined'
type Kind string

const (
	KindSystem      Kind = "system"
	KindUserDefined Kind = "user_defined"
)

func (e Kind) ToPointer() *Kind {
	return &e
}
func (e *Kind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "user_defined":
		*e = Kind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kind: %v", v)
	}
}

type EnabledLocations string

const (
	EnabledLocationsEmailTemplates EnabledLocations = "email-templates"
	EnabledLocationsEmails         EnabledLocations = "emails"
	EnabledLocationsContacts       EnabledLocations = "contacts"
	EnabledLocationsOrders         EnabledLocations = "orders"
	EnabledLocationsContracts      EnabledLocations = "contracts"
	EnabledLocationsMeters         EnabledLocations = "meters"
	EnabledLocationsAccounts       EnabledLocations = "accounts"
	EnabledLocationsProducts       EnabledLocations = "products"
	EnabledLocationsPrices         EnabledLocations = "prices"
	EnabledLocationsOpportunities  EnabledLocations = "opportunities"
	EnabledLocationsAllEntities    EnabledLocations = "all_entities"
	EnabledLocationsFiles          EnabledLocations = "files"
)

func (e EnabledLocations) ToPointer() *EnabledLocations {
	return &e
}
func (e *EnabledLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email-templates":
		fallthrough
	case "emails":
		fallthrough
	case "contacts":
		fallthrough
	case "orders":
		fallthrough
	case "contracts":
		fallthrough
	case "meters":
		fallthrough
	case "accounts":
		fallthrough
	case "products":
		fallthrough
	case "prices":
		fallthrough
	case "opportunities":
		fallthrough
	case "all_entities":
		fallthrough
	case "files":
		*e = EnabledLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnabledLocations: %v", v)
	}
}

type Taxonomy struct {
	// URL-friendly name for taxonomy
	Slug *string `json:"slug,omitempty"`
	// A human friendly name of a Taxonomy e.g. Purpose, Product Category, Folder, Tag
	Name *string `json:"name,omitempty"`
	// Plural name of a Taxonomy e.g. Purposes, Product Categories, Folders, Tags. Defaults to name is not provided.
	Plural *string `json:"plural,omitempty"`
	// Kind of taxonomy e.g. system or user_defined. By default, it's empty, which means 'user_defined'
	Kind *Kind `json:"kind,omitempty"`
	// Icon name for the taxonomy (from epilot360/icons icon set)
	Icon *string `json:"icon,omitempty"`
	// HEX Color code for the taxonomy
	Color     *string    `json:"color,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Date when the taxonomy was soft-deleted (enabled: false)
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Whether the taxonomy is enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	// Position of the taxonomy
	Order *float64 `json:"order,omitempty"`
	// List of locations where the taxonomy is enabled to be used. If empty, it's enabled for all locations.
	EnabledLocations []EnabledLocations `json:"enabled_locations,omitempty"`
}

func (t Taxonomy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Taxonomy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Taxonomy) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *Taxonomy) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Taxonomy) GetPlural() *string {
	if o == nil {
		return nil
	}
	return o.Plural
}

func (o *Taxonomy) GetKind() *Kind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *Taxonomy) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *Taxonomy) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *Taxonomy) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Taxonomy) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Taxonomy) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Taxonomy) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Taxonomy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Taxonomy) GetOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *Taxonomy) GetEnabledLocations() []EnabledLocations {
	if o == nil {
		return nil
	}
	return o.EnabledLocations
}
