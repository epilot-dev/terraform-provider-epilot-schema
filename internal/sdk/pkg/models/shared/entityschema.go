// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy/terraform-provider-epilot-schema/internal/sdk/pkg/utils"
)

type EntitySchemaTableViewType string

const (
	EntitySchemaTableViewTypeEntityDefaultTable EntitySchemaTableViewType = "EntityDefaultTable"
	EntitySchemaTableViewTypeRedirectEntityView EntitySchemaTableViewType = "RedirectEntityView"
	EntitySchemaTableViewTypeEntityViewDisabled EntitySchemaTableViewType = "EntityViewDisabled"
)

type EntitySchemaTableView struct {
	EntityDefaultTable *EntityDefaultTable
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EntitySchemaTableViewType
}

func CreateEntitySchemaTableViewEntityDefaultTable(entityDefaultTable EntityDefaultTable) EntitySchemaTableView {
	typ := EntitySchemaTableViewTypeEntityDefaultTable

	return EntitySchemaTableView{
		EntityDefaultTable: &entityDefaultTable,
		Type:               typ,
	}
}

func CreateEntitySchemaTableViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaTableView {
	typ := EntitySchemaTableViewTypeRedirectEntityView

	return EntitySchemaTableView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaTableViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaTableView {
	typ := EntitySchemaTableViewTypeEntityViewDisabled

	return EntitySchemaTableView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaTableView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaTableViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaTableViewTypeRedirectEntityView
		return nil
	}

	entityDefaultTable := new(EntityDefaultTable)
	if err := utils.UnmarshalJSON(data, &entityDefaultTable, "", true, true); err == nil {
		u.EntityDefaultTable = entityDefaultTable
		u.Type = EntitySchemaTableViewTypeEntityDefaultTable
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaTableView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultTable != nil {
		return utils.MarshalJSON(u.EntityDefaultTable, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaCreateViewType string

const (
	EntitySchemaCreateViewTypeEntityDefaultCreate EntitySchemaCreateViewType = "EntityDefaultCreate"
	EntitySchemaCreateViewTypeRedirectEntityView  EntitySchemaCreateViewType = "RedirectEntityView"
	EntitySchemaCreateViewTypeEntityViewDisabled  EntitySchemaCreateViewType = "EntityViewDisabled"
)

type EntitySchemaCreateView struct {
	EntityDefaultCreate *EntityDefaultCreate
	RedirectEntityView  *RedirectEntityView
	EntityViewDisabled  *EntityViewDisabled

	Type EntitySchemaCreateViewType
}

func CreateEntitySchemaCreateViewEntityDefaultCreate(entityDefaultCreate EntityDefaultCreate) EntitySchemaCreateView {
	typ := EntitySchemaCreateViewTypeEntityDefaultCreate

	return EntitySchemaCreateView{
		EntityDefaultCreate: &entityDefaultCreate,
		Type:                typ,
	}
}

func CreateEntitySchemaCreateViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaCreateView {
	typ := EntitySchemaCreateViewTypeRedirectEntityView

	return EntitySchemaCreateView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaCreateViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaCreateView {
	typ := EntitySchemaCreateViewTypeEntityViewDisabled

	return EntitySchemaCreateView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaCreateView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaCreateViewTypeEntityViewDisabled
		return nil
	}

	entityDefaultCreate := new(EntityDefaultCreate)
	if err := utils.UnmarshalJSON(data, &entityDefaultCreate, "", true, true); err == nil {
		u.EntityDefaultCreate = entityDefaultCreate
		u.Type = EntitySchemaCreateViewTypeEntityDefaultCreate
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaCreateViewTypeRedirectEntityView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaCreateView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultCreate != nil {
		return utils.MarshalJSON(u.EntityDefaultCreate, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaEditViewType string

const (
	EntitySchemaEditViewTypeEntityDefaultEdit  EntitySchemaEditViewType = "EntityDefaultEdit"
	EntitySchemaEditViewTypeRedirectEntityView EntitySchemaEditViewType = "RedirectEntityView"
	EntitySchemaEditViewTypeEntityViewDisabled EntitySchemaEditViewType = "EntityViewDisabled"
)

type EntitySchemaEditView struct {
	EntityDefaultEdit  *EntityDefaultEdit
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EntitySchemaEditViewType
}

func CreateEntitySchemaEditViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EntitySchemaEditView {
	typ := EntitySchemaEditViewTypeEntityDefaultEdit

	return EntitySchemaEditView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEntitySchemaEditViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaEditView {
	typ := EntitySchemaEditViewTypeRedirectEntityView

	return EntitySchemaEditView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaEditViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaEditView {
	typ := EntitySchemaEditViewTypeEntityViewDisabled

	return EntitySchemaEditView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaEditView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaEditViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaEditViewTypeRedirectEntityView
		return nil
	}

	entityDefaultEdit := new(EntityDefaultEdit)
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, true); err == nil {
		u.EntityDefaultEdit = entityDefaultEdit
		u.Type = EntitySchemaEditViewTypeEntityDefaultEdit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaEditView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaSingleViewType string

const (
	EntitySchemaSingleViewTypeEntityDefaultEdit  EntitySchemaSingleViewType = "EntityDefaultEdit"
	EntitySchemaSingleViewTypeRedirectEntityView EntitySchemaSingleViewType = "RedirectEntityView"
	EntitySchemaSingleViewTypeEntityViewDisabled EntitySchemaSingleViewType = "EntityViewDisabled"
)

type EntitySchemaSingleView struct {
	EntityDefaultEdit  *EntityDefaultEdit
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EntitySchemaSingleViewType
}

func CreateEntitySchemaSingleViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EntitySchemaSingleView {
	typ := EntitySchemaSingleViewTypeEntityDefaultEdit

	return EntitySchemaSingleView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEntitySchemaSingleViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaSingleView {
	typ := EntitySchemaSingleViewTypeRedirectEntityView

	return EntitySchemaSingleView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaSingleViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaSingleView {
	typ := EntitySchemaSingleViewTypeEntityViewDisabled

	return EntitySchemaSingleView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaSingleView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaSingleViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaSingleViewTypeRedirectEntityView
		return nil
	}

	entityDefaultEdit := new(EntityDefaultEdit)
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, true); err == nil {
		u.EntityDefaultEdit = entityDefaultEdit
		u.Type = EntitySchemaSingleViewTypeEntityDefaultEdit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaSingleView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaSummaryAttributesType string

const (
	EntitySchemaSummaryAttributesTypeSummaryAttribute EntitySchemaSummaryAttributesType = "SummaryAttribute"
	EntitySchemaSummaryAttributesTypeStr              EntitySchemaSummaryAttributesType = "str"
)

type EntitySchemaSummaryAttributes struct {
	SummaryAttribute *SummaryAttribute
	Str              *string

	Type EntitySchemaSummaryAttributesType
}

func CreateEntitySchemaSummaryAttributesSummaryAttribute(summaryAttribute SummaryAttribute) EntitySchemaSummaryAttributes {
	typ := EntitySchemaSummaryAttributesTypeSummaryAttribute

	return EntitySchemaSummaryAttributes{
		SummaryAttribute: &summaryAttribute,
		Type:             typ,
	}
}

func CreateEntitySchemaSummaryAttributesStr(str string) EntitySchemaSummaryAttributes {
	typ := EntitySchemaSummaryAttributesTypeStr

	return EntitySchemaSummaryAttributes{
		Str:  &str,
		Type: typ,
	}
}

func (u *EntitySchemaSummaryAttributes) UnmarshalJSON(data []byte) error {

	summaryAttribute := new(SummaryAttribute)
	if err := utils.UnmarshalJSON(data, &summaryAttribute, "", true, true); err == nil {
		u.SummaryAttribute = summaryAttribute
		u.Type = EntitySchemaSummaryAttributesTypeSummaryAttribute
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = EntitySchemaSummaryAttributesTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaSummaryAttributes) MarshalJSON() ([]byte, error) {
	if u.SummaryAttribute != nil {
		return utils.MarshalJSON(u.SummaryAttribute, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaListItem struct {
	SummaryAttributes []EntitySchemaSummaryAttributes `json:"summary_attributes,omitempty"`
	QuickActions      []EntityAction                  `json:"quick_actions,omitempty"`
}

func (o *EntitySchemaListItem) GetSummaryAttributes() []EntitySchemaSummaryAttributes {
	if o == nil {
		return nil
	}
	return o.SummaryAttributes
}

func (o *EntitySchemaListItem) GetQuickActions() []EntityAction {
	if o == nil {
		return nil
	}
	return o.QuickActions
}

type EntitySchemaSharing struct {
	// Show the sharing button in entity detail view
	ShowSharingButton *bool `json:"show_sharing_button,omitempty"`
}

func (o *EntitySchemaSharing) GetShowSharingButton() *bool {
	if o == nil {
		return nil
	}
	return o.ShowSharingButton
}

type EntitySchemaUIConfig struct {
	TableView  *EntitySchemaTableView  `json:"table_view,omitempty"`
	CreateView *EntitySchemaCreateView `json:"create_view,omitempty"`
	EditView   *EntitySchemaEditView   `json:"edit_view,omitempty"`
	SingleView *EntitySchemaSingleView `json:"single_view,omitempty"`
	ListItem   *EntitySchemaListItem   `json:"list_item,omitempty"`
	Sharing    *EntitySchemaSharing    `json:"sharing,omitempty"`
}

func (o *EntitySchemaUIConfig) GetTableView() *EntitySchemaTableView {
	if o == nil {
		return nil
	}
	return o.TableView
}

func (o *EntitySchemaUIConfig) GetCreateView() *EntitySchemaCreateView {
	if o == nil {
		return nil
	}
	return o.CreateView
}

func (o *EntitySchemaUIConfig) GetEditView() *EntitySchemaEditView {
	if o == nil {
		return nil
	}
	return o.EditView
}

func (o *EntitySchemaUIConfig) GetSingleView() *EntitySchemaSingleView {
	if o == nil {
		return nil
	}
	return o.SingleView
}

func (o *EntitySchemaUIConfig) GetListItem() *EntitySchemaListItem {
	if o == nil {
		return nil
	}
	return o.ListItem
}

func (o *EntitySchemaUIConfig) GetSharing() *EntitySchemaSharing {
	if o == nil {
		return nil
	}
	return o.Sharing
}

type EntitySchemaInfoTooltipTitle struct {
	Key     *string `json:"key,omitempty"`
	Default *string `json:"default,omitempty"`
}

func (o *EntitySchemaInfoTooltipTitle) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *EntitySchemaInfoTooltipTitle) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

type EntitySchemaGroupSettings struct {
	Label           string  `json:"label"`
	ID              string  `json:"id"`
	Expanded        *bool   `json:"expanded,omitempty"`
	RenderCondition *string `json:"render_condition,omitempty"`
	// Render order of the group
	Order *int64 `default:"0" json:"order"`
	// This group should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This group should only be active when all the settings have the correct value
	SettingsFlag     []SettingFlag                 `json:"settings_flag,omitempty"`
	InfoTooltipTitle *EntitySchemaInfoTooltipTitle `json:"info_tooltip_title,omitempty"`
	Purpose          []string                      `json:"_purpose,omitempty"`
}

func (e EntitySchemaGroupSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySchemaGroupSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EntitySchemaGroupSettings) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *EntitySchemaGroupSettings) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntitySchemaGroupSettings) GetExpanded() *bool {
	if o == nil {
		return nil
	}
	return o.Expanded
}

func (o *EntitySchemaGroupSettings) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *EntitySchemaGroupSettings) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *EntitySchemaGroupSettings) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntitySchemaGroupSettings) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *EntitySchemaGroupSettings) GetInfoTooltipTitle() *EntitySchemaInfoTooltipTitle {
	if o == nil {
		return nil
	}
	return o.InfoTooltipTitle
}

func (o *EntitySchemaGroupSettings) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

// EntitySchemaLayoutSettings - Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
// - Managed Properties: are interpreted and transformed into layout styles
// - Un-managed Properties: are appended as styles into the attribute mounting node
type EntitySchemaLayoutSettings struct {
	// Defines the grid gap for the mounting node of the attribute.
	GridGap *string `json:"grid_gap,omitempty"`
	// Defines the grid column template for the mounting node of the attribute.
	GridTemplateColumns  *string     `json:"grid_template_columns,omitempty"`
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
}

func (e EntitySchemaLayoutSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySchemaLayoutSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EntitySchemaLayoutSettings) GetGridGap() *string {
	if o == nil {
		return nil
	}
	return o.GridGap
}

func (o *EntitySchemaLayoutSettings) GetGridTemplateColumns() *string {
	if o == nil {
		return nil
	}
	return o.GridTemplateColumns
}

func (o *EntitySchemaLayoutSettings) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// EntitySchema - The "type" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities.
type EntitySchema struct {
	// URL-friendly identifier for the entity schema
	Slug    string `json:"slug"`
	Version *int64 `json:"version,omitempty"`
	// Reference to blueprint
	Blueprint *string `json:"blueprint,omitempty"`
	// This schema should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// This schema should only be active when one of the organization settings is enabled
	EnableSetting []string `json:"enable_setting,omitempty"`
	// User-friendly identifier for the entity schema
	Name      string  `json:"name"`
	Plural    string  `json:"plural"`
	Published *bool   `json:"published,omitempty"`
	Draft     *bool   `json:"draft,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// Template for rendering the title field. Uses handlebars
	TitleTemplate *string               `json:"title_template,omitempty"`
	UIConfig      *EntitySchemaUIConfig `json:"ui_config,omitempty"`
	Capabilities  []EntityCapability    `json:"capabilities"`
	// A dictionary of Group Titles and associated settings if present.
	GroupSettings []EntitySchemaGroupSettings `json:"group_settings,omitempty"`
	// Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
	// - Managed Properties: are interpreted and transformed into layout styles
	// - Un-managed Properties: are appended as styles into the attribute mounting node
	//
	LayoutSettings *EntitySchemaLayoutSettings `json:"layout_settings,omitempty"`
	DialogConfig   map[string]interface{}      `json:"dialog_config,omitempty"`
	// An ordered list of attributes the entity contains
	Attributes []Attribute `json:"attributes"`
	// Advanced: explicit Elasticsearch index mapping definitions for entity data
	//
	ExplicitSearchMappings map[string]SearchMappings `json:"explicit_search_mappings,omitempty"`
}

func (o *EntitySchema) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *EntitySchema) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *EntitySchema) GetBlueprint() *string {
	if o == nil {
		return nil
	}
	return o.Blueprint
}

func (o *EntitySchema) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntitySchema) GetEnableSetting() []string {
	if o == nil {
		return nil
	}
	return o.EnableSetting
}

func (o *EntitySchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EntitySchema) GetPlural() string {
	if o == nil {
		return ""
	}
	return o.Plural
}

func (o *EntitySchema) GetPublished() *bool {
	if o == nil {
		return nil
	}
	return o.Published
}

func (o *EntitySchema) GetDraft() *bool {
	if o == nil {
		return nil
	}
	return o.Draft
}

func (o *EntitySchema) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *EntitySchema) GetTitleTemplate() *string {
	if o == nil {
		return nil
	}
	return o.TitleTemplate
}

func (o *EntitySchema) GetUIConfig() *EntitySchemaUIConfig {
	if o == nil {
		return nil
	}
	return o.UIConfig
}

func (o *EntitySchema) GetCapabilities() []EntityCapability {
	if o == nil {
		return []EntityCapability{}
	}
	return o.Capabilities
}

func (o *EntitySchema) GetGroupSettings() []EntitySchemaGroupSettings {
	if o == nil {
		return nil
	}
	return o.GroupSettings
}

func (o *EntitySchema) GetLayoutSettings() *EntitySchemaLayoutSettings {
	if o == nil {
		return nil
	}
	return o.LayoutSettings
}

func (o *EntitySchema) GetDialogConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.DialogConfig
}

func (o *EntitySchema) GetAttributes() []Attribute {
	if o == nil {
		return []Attribute{}
	}
	return o.Attributes
}

func (o *EntitySchema) GetExplicitSearchMappings() map[string]SearchMappings {
	if o == nil {
		return nil
	}
	return o.ExplicitSearchMappings
}
